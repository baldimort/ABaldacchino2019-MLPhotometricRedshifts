(11:40 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:40 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:40 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:40 INFO) [40;37;1m - 21/02/19 11:40:44 - starting ANNZ[0m
(11:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:40 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data9a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data9b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:40 INFO) 
[11:40:44    INFO]  -----------------------------------------------------
[11:40:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:40:44    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:46    INFO]  - starting inputToSplitTree() ... 
[11:40:46    INFO]  - Found 13465 lines in file PAUS/ANNz_data9a.csv -> total so far = 13465 ... 
[11:40:47    INFO]  - Found 3366 lines in file PAUS/ANNz_data9b.csv -> total so far = 3366 ... 
[11:40:47    INFO]  - Now reading-in PAUS/ANNz_data9a.csv ... 
[11:40:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:40:48    INFO]  -- ANNZ_tree .......................................... 0  index
[11:40:48    INFO]  -- ANNZ_tree ...................................... 13465  nLine
[11:40:48    INFO]  -- ANNZ_tree ...................................... 13465  nLineFile
[11:40:48    INFO]  -- ANNZ_tree ...................................... 13465  nObj
[11:40:48    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:40:48    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[11:40:48    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:48    INFO]  - Now reading-in PAUS/ANNz_data9b.csv ... 
[11:40:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:40:49    INFO]  -- ANNZ_tree .......................................... 0  index
[11:40:49    INFO]  -- ANNZ_tree ...................................... 16831  nLine
[11:40:49    INFO]  -- ANNZ_tree ....................................... 3366  nLineFile
[11:40:49    INFO]  -- ANNZ_tree ....................................... 3366  nObj
[11:40:49    INFO]  -- ANNZ_tree ....................................... 3366  nTest
[11:40:49    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[11:40:49    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:49    INFO]  - Writing to plotting directory output/PAUS_advanced18/rootIn/plots/
[11:40:51    INFO]  - Writing to plotting directory output/PAUS_advanced18/rootIn/plots/

(11:40 INFO) [40;37;1m - 21/02/19 11:40:53 - finished running ANNZ ![0m
(11:41 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:41 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:41 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:41 INFO) [40;37;1m - 21/02/19 11:41:03 - starting ANNZ[0m
(11:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:41 INFO) 
[11:41:04    INFO]  -----------------------------------------------------
[11:41:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:41:04    INFO]  -----------------------------------------------------------------------------------------------------------
[11:41:05    INFO]  - starting ANNZ::Init()  ... 
[11:41:06    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_0/saveOpt.txt ...
[11:41:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:41:21    INFO] ----------------------------------------------------------------------------------------------------
[11:41:21    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N,P
[11:41:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:41:21    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:41:21    INFO]      cuts (train):        ,
[11:41:21    INFO]      cuts (valid):       
[11:41:21    INFO]    - weights:            1
[11:41:21    INFO] ----------------------------------------------------------------------------------------------------
[11:41:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:41:57    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[11:42:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:42:01    INFO]  - Will gen. input-parameter errors ...
[11:42:03    INFO]  - starting ANNZ::loadReaders() ... 
[11:42:13    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[11:45:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:45:33    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:45:33    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:45:33    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:46:42    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:46:42    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:46:42    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:42    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[11:47:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:47:49    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:47:49    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:47:49    INFO]  -----------------------------------------------------------------------------------------------------------
[11:47:49    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:47:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:47:51    INFO]  - will try to derive a bias correction ... 
[11:47:51    INFO]  - will validate that training produced an XML file for later ... 
[11:47:51    INFO]  - starting ANNZ::loadReaders() ... 
[11:47:55    INFO]  - will validate that the training was not a complete failure ... 
[11:47:55    INFO]  - training seems to have been successful! will move on ...
[11:47:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:47:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:48:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:48:00    INFO] ----------------------------------------------------------------------------------------------------
[11:48:00    INFO]  - will book (ANNZ_0_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[11:48:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:48:00    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[11:48:00    INFO]    - weights:            1
[11:48:00    INFO] ----------------------------------------------------------------------------------------------------
[11:48:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:06:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[13:06:11    INFO]  - Will gen. input-parameter errors ...
[13:06:13    INFO]  - starting ANNZ::loadReaders() ... 
[13:06:29    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[13:12:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:12:15    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:12:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:12:15    INFO]  -----------------------------------------------------------------------------------------------------------
[13:14:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:14:01    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:14:01    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[13:14:01    INFO]  -----------------------------------------------------------------------------------------------------------
[13:14:01    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[13:16:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:16:02    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:16:02    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[13:16:02    INFO]  -----------------------------------------------------------------------------------------------------------
[13:16:05    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:16:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:16:07    INFO]  - will validate that the bias-correction actually improved the result ...
[13:16:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:16:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[13:16:11    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_0/plots/
[13:16:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_0/plots output/PAUS_advanced18/regres/train/ANNZ_0/plots_biasCor_before
[13:16:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:16:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[13:16:22    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_0/plots/
[13:16:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_0/plots output/PAUS_advanced18/regres/train/ANNZ_0/plots_biasCor_after
[13:16:30    INFO]  - Got original [KS-test,N_poiss]: [0.102617 , 6.22285] , after the bias-correction: [0.0979975 , 6.01956] --> will KEEP the correction !

(13:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=39844:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:16 INFO) 
[13:16:34    INFO]  -----------------------------------------------------
[13:16:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:16:34    INFO]  -----------------------------------------------------------------------------------------------------------
[13:16:36    INFO]  - starting ANNZ::Init()  ... 
[13:16:37    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_1/saveOpt.txt ...
[13:16:52    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:16:52    INFO] ----------------------------------------------------------------------------------------------------
[13:16:52    INFO]  - will book (ANNZ_1) method(ANN) with options: :HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=39844:VarTransform=N
[13:16:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:16:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[13:16:52    INFO]      cuts (train):        ,
[13:16:52    INFO]      cuts (valid):       
[13:16:52    INFO]    - weights:            1
[13:16:52    INFO] ----------------------------------------------------------------------------------------------------
[13:16:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 36 diag elements < tolerance of 2.2204e-16
(16:39 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:39 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:39 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:39 INFO) [40;37;1m - 21/02/19 16:39:51 - starting ANNZ[0m
(16:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=84241:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:39 INFO) 
[16:39:52    INFO]  -----------------------------------------------------
[16:39:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:39:52    INFO]  -----------------------------------------------------------------------------------------------------------
[16:39:53    INFO]  - starting ANNZ::Init()  ... 
[16:39:54    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[16:39:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:39 INFO) 
[16:39:54    INFO]  -----------------------------------------------------
[16:39:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:39:54    INFO]  -----------------------------------------------------------------------------------------------------------
[16:39:55    INFO]  - starting ANNZ::Init()  ... 
[16:39:57    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_1/saveOpt.txt ...
[16:40:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:40:15    INFO] ----------------------------------------------------------------------------------------------------
[16:40:15    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=510:BoostType=AdaBoost:VarTransform=N,P
[16:40:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:40:15    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:40:15    INFO]      cuts (train):        ,
[16:40:15    INFO]      cuts (valid):       
[16:40:15    INFO]    - weights:            1
[16:40:15    INFO] ----------------------------------------------------------------------------------------------------
[16:40:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:40:41    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[16:40:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[16:40:43    INFO]  - Will gen. input-parameter errors ...
[16:40:45    INFO]  - starting ANNZ::loadReaders() ... 
[16:40:51    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[16:43:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:43:02    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:43:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:43:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:43:48    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:43:48    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:43:48    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:48    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[16:44:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:44:32    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:44:32    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:44:32    INFO]  -----------------------------------------------------------------------------------------------------------
[16:44:32    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:44:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:44:34    INFO]  - will try to derive a bias correction ... 
[16:44:34    INFO]  - will validate that training produced an XML file for later ... 
[16:44:34    INFO]  - starting ANNZ::loadReaders() ... 
[16:44:35    INFO]  - will validate that the training was not a complete failure ... 
[16:44:35    INFO]  - training seems to have been successful! will move on ...
[16:44:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:44:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:44:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:44:41    INFO] ----------------------------------------------------------------------------------------------------
[16:44:41    INFO]  - will book (ANNZ_1_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[16:44:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:44:41    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[16:44:41    INFO]    - weights:            1
[16:44:41    INFO] ----------------------------------------------------------------------------------------------------
[16:44:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:11:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[18:11:51    INFO]  - Will gen. input-parameter errors ...
[18:11:53    INFO]  - starting ANNZ::loadReaders() ... 
[18:12:01    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[18:14:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:14:54    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:14:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:14:54    INFO]  -----------------------------------------------------------------------------------------------------------
[18:15:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:15:53    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:15:53    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:15:53    INFO]  -----------------------------------------------------------------------------------------------------------
[18:15:53    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[18:16:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:16:59    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:16:59    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:16:59    INFO]  -----------------------------------------------------------------------------------------------------------
[18:16:59    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:17:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:17:00    INFO]  - will validate that the bias-correction actually improved the result ...
[18:17:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:17:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[18:17:03    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_1/plots/
[18:17:10        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_1/plots output/PAUS_advanced18/regres/train/ANNZ_1/plots_biasCor_before
[18:17:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:17:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[18:17:13    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_1/plots/
[18:17:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_1/plots output/PAUS_advanced18/regres/train/ANNZ_1/plots_biasCor_after
[18:17:19    INFO]  - Got original [KS-test,N_poiss]: [0.117404 , 6.78975] , after the bias-correction: [0.102967 , 6.36278] --> will KEEP the correction !

(18:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+9,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=33606:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:17 INFO) 
[18:17:22    INFO]  -----------------------------------------------------
[18:17:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:17:22    INFO]  -----------------------------------------------------------------------------------------------------------
[18:17:24    INFO]  - starting ANNZ::Init()  ... 
[18:17:26    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_2/saveOpt.txt ...
[18:17:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:17:43    INFO] ----------------------------------------------------------------------------------------------------
[18:17:43    INFO]  - will book (ANNZ_2) method(ANN) with options: :HiddenLayers=N+1,N+9,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=33606:VarTransform=N
[18:17:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:17:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:17:43    INFO]      cuts (train):        ,
[18:17:43    INFO]      cuts (valid):       
[18:17:43    INFO]    - weights:            1
[18:17:43    INFO] ----------------------------------------------------------------------------------------------------
[18:17:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 424 diag elements < tolerance of 2.2204e-16
(08:31 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:31 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:31 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:31 INFO) [40;37;1m - 22/02/19 08:31:50 - starting ANNZ[0m
(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=44163:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:50    INFO]  -----------------------------------------------------
[08:31:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:50    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:52    INFO]  - starting ANNZ::Init()  ... 
[08:31:53    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:31:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=35719:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:53    INFO]  -----------------------------------------------------
[08:31:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:53    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:55    INFO]  - starting ANNZ::Init()  ... 
[08:31:55    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced18/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:31:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=5678:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:56    INFO]  -----------------------------------------------------
[08:31:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:56    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:57    INFO]  - starting ANNZ::Init()  ... 
[08:31:59    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_2/saveOpt.txt ...
[08:32:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:32:21    INFO] ----------------------------------------------------------------------------------------------------
[08:32:21    INFO]  - will book (ANNZ_2) method(ANN) with options: :HiddenLayers=N+4,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=5678:VarTransform=N
[08:32:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:32:21    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[08:32:21    INFO]      cuts (train):        ,
[08:32:21    INFO]      cuts (valid):       
[08:32:21    INFO]    - weights:            1
[08:32:21    INFO] ----------------------------------------------------------------------------------------------------
[08:32:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 138 diag elements < tolerance of 2.2204e-16
(08:40 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:40 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:40 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:40 INFO) [40;37;1m - 22/02/19 08:40:10 - starting ANNZ[0m
(08:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:40 INFO) 
[08:40:10    INFO]  -----------------------------------------------------
[08:40:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:40:10    INFO]  -----------------------------------------------------------------------------------------------------------
[08:40:12    INFO]  - starting ANNZ::Init()  ... 
[08:40:13    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:40:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=17855[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:40 INFO) 
[08:40:13    INFO]  -----------------------------------------------------
[08:40:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:40:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:40:15    INFO]  - starting ANNZ::Init()  ... 
[08:40:15    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced18/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:40:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:40 INFO) 
[08:40:15    INFO]  -----------------------------------------------------
[08:40:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:40:15    INFO]  -----------------------------------------------------------------------------------------------------------
[08:40:17    INFO]  - starting ANNZ::Init()  ... 
[08:40:19    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_2/saveOpt.txt ...
[08:40:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:40:40    INFO] ----------------------------------------------------------------------------------------------------
[08:40:40    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=280:BoostType=AdaBoostR2:VarTransform=N
[08:40:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:40:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[08:40:40    INFO]      cuts (train):        ,
[08:40:40    INFO]      cuts (valid):       
[08:40:40    INFO]    - weights:            1
[08:40:40    INFO] ----------------------------------------------------------------------------------------------------
[08:40:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:40:44    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[08:40:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[08:40:46    INFO]  - Will gen. input-parameter errors ...
[08:40:48    INFO]  - starting ANNZ::loadReaders() ... 
[08:40:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[08:42:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:42:19    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:42:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[08:42:19    INFO]  -----------------------------------------------------------------------------------------------------------
[08:42:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:42:58    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:42:58    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[08:42:58    INFO]  -----------------------------------------------------------------------------------------------------------
[08:42:58    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[08:43:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:43:41    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:43:41    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[08:43:41    INFO]  -----------------------------------------------------------------------------------------------------------
[08:43:41    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:43:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:43:42    INFO]  - will try to derive a bias correction ... 
[08:43:42    INFO]  - will validate that training produced an XML file for later ... 
[08:43:42    INFO]  - starting ANNZ::loadReaders() ... 
[08:43:42    INFO]  - will validate that the training was not a complete failure ... 
[08:43:43    INFO]  - training seems to have been successful! will move on ...
[08:43:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:43:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:43:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:43:48    INFO] ----------------------------------------------------------------------------------------------------
[08:43:48    INFO]  - will book (ANNZ_2_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[08:43:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:43:48    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[08:43:48    INFO]    - weights:            1
[08:43:48    INFO] ----------------------------------------------------------------------------------------------------
[08:43:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 1 diag elements < tolerance of 2.2204e-16
(08:46 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:46 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:46 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:46 INFO) [40;37;1m - 22/02/19 08:46:16 - starting ANNZ[0m
(08:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:46 INFO) 
[08:46:16    INFO]  -----------------------------------------------------
[08:46:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:46:16    INFO]  -----------------------------------------------------------------------------------------------------------
[08:46:18    INFO]  - starting ANNZ::Init()  ... 
[08:46:18    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:46:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=32566:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:46 INFO) 
[08:46:19    INFO]  -----------------------------------------------------
[08:46:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:46:19    INFO]  -----------------------------------------------------------------------------------------------------------
[08:46:20    INFO]  - starting ANNZ::Init()  ... 
[08:46:21    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced18/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:46:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+5,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=89106:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:46 INFO) 
[08:46:21    INFO]  -----------------------------------------------------
[08:46:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:46:21    INFO]  -----------------------------------------------------------------------------------------------------------
[08:46:23    INFO]  - starting ANNZ::Init()  ... 
[08:46:23    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced18/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[08:46:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=77570:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:46 INFO) 
[08:46:23    INFO]  -----------------------------------------------------
[08:46:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:46:23    INFO]  -----------------------------------------------------------------------------------------------------------
[08:46:25    INFO]  - starting ANNZ::Init()  ... 
[08:46:27    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_3/saveOpt.txt ...
[08:46:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:46:49    INFO] ----------------------------------------------------------------------------------------------------
[08:46:49    INFO]  - will book (ANNZ_3) method(ANN) with options: :HiddenLayers=N+1,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=77570:VarTransform=N
[08:46:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:46:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[08:46:49    INFO]      cuts (train):        ,
[08:46:49    INFO]      cuts (valid):       
[08:46:49    INFO]    - weights:            1
[08:46:49    INFO] ----------------------------------------------------------------------------------------------------
[08:46:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 24 diag elements < tolerance of 2.2204e-16
(08:54 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:54 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:54 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:54 INFO) [40;37;1m - 22/02/19 08:54:16 - starting ANNZ[0m
(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:16    INFO]  -----------------------------------------------------
[08:54:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:16    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:17    INFO]  - starting ANNZ::Init()  ... 
[08:54:18    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:54:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=78404:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:18    INFO]  -----------------------------------------------------
[08:54:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:18    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:20    INFO]  - starting ANNZ::Init()  ... 
[08:54:20    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced18/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:54:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=81538:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:20    INFO]  -----------------------------------------------------
[08:54:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:20    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:22    INFO]  - starting ANNZ::Init()  ... 
[08:54:22    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced18/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[08:54:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=16323:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:22    INFO]  -----------------------------------------------------
[08:54:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:22    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:24    INFO]  - starting ANNZ::Init()  ... 
[08:54:26    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_3/saveOpt.txt ...
[08:54:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:54:49    INFO] ----------------------------------------------------------------------------------------------------
[08:54:49    INFO]  - will book (ANNZ_3) method(ANN) with options: :HiddenLayers=N+2,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=16323:VarTransform=N,P
[08:54:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:54:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[08:54:49    INFO]      cuts (train):        ,
[08:54:49    INFO]      cuts (valid):       
[08:54:49    INFO]    - weights:            1
[08:54:49    INFO] ----------------------------------------------------------------------------------------------------
[08:54:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:10:03    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[10:10:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[10:10:08    INFO]  - Will gen. input-parameter errors ...
[10:10:09    INFO]  - starting ANNZ::loadReaders() ... 
[10:10:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[10:10:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:10:47    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:10:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:10:47    INFO]  -----------------------------------------------------------------------------------------------------------
[10:11:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:11:01    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:11:01    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:11:01    INFO]  -----------------------------------------------------------------------------------------------------------
[10:11:01    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[10:11:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:11:14    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:11:14    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:11:14    INFO]  -----------------------------------------------------------------------------------------------------------
[10:11:14    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:11:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:11:15    INFO]  - will try to derive a bias correction ... 
[10:11:15    INFO]  - will validate that training produced an XML file for later ... 
[10:11:15    INFO]  - starting ANNZ::loadReaders() ... 
[10:11:15    INFO]  - will validate that the training was not a complete failure ... 
[10:11:15    INFO]  - training seems to have been successful! will move on ...
[10:11:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:11:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:11:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:11:20    INFO] ----------------------------------------------------------------------------------------------------
[10:11:20    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:11:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:11:20    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:11:20    INFO]    - weights:            1
[10:11:20    INFO] ----------------------------------------------------------------------------------------------------
[10:11:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:11:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[10:11:25    INFO]  - Will gen. input-parameter errors ...
[10:11:27    INFO]  - starting ANNZ::loadReaders() ... 
[10:11:29    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[10:12:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:12:45    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:12:45    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:12:45    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:13:12    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:13:12    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:13:12    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[10:13:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:13:36    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:13:36    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:13:36    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:37    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:13:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:13:37    INFO]  - will validate that the bias-correction actually improved the result ...
[10:13:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:13:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[10:13:41    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_3/plots/
[10:13:47        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_3/plots output/PAUS_advanced18/regres/train/ANNZ_3/plots_biasCor_before
[10:13:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:13:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[10:13:49    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_3/plots/
[10:13:56        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_3/plots output/PAUS_advanced18/regres/train/ANNZ_3/plots_biasCor_after
[10:13:56    INFO]  - Got original [KS-test,N_poiss]: [0.110365 , 7.97026] , after the bias-correction: [0.0885081 , 5.83604] --> will KEEP the correction !

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:59    INFO]  -----------------------------------------------------
[10:13:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:59    INFO]  -----------------------------------------------------------------------------------------------------------
[10:14:00    INFO]  - starting ANNZ::Init()  ... 
[10:14:01    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_4/saveOpt.txt ...
[10:14:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:14:19    INFO] ----------------------------------------------------------------------------------------------------
[10:14:19    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=380:BoostType=AdaBoostR2:VarTransform=N,P
[10:14:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:14:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:14:19    INFO]      cuts (train):        ,
[10:14:19    INFO]      cuts (valid):       
[10:14:19    INFO]    - weights:            1
[10:14:19    INFO] ----------------------------------------------------------------------------------------------------
[10:14:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:15:08    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[10:15:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[10:15:12    INFO]  - Will gen. input-parameter errors ...
[10:15:15    INFO]  - starting ANNZ::loadReaders() ... 
[10:15:33    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[10:24:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:24:30    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:24:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:24:30    INFO]  -----------------------------------------------------------------------------------------------------------
[10:27:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:27:28    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:27:28    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:27:28    INFO]  -----------------------------------------------------------------------------------------------------------
[10:27:28    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[10:30:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:30:24    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:30:24    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:30:24    INFO]  -----------------------------------------------------------------------------------------------------------
[10:30:25    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:30:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:30:26    INFO]  - will try to derive a bias correction ... 
[10:30:26    INFO]  - will validate that training produced an XML file for later ... 
[10:30:26    INFO]  - starting ANNZ::loadReaders() ... 
[10:30:30    INFO]  - will validate that the training was not a complete failure ... 
[10:30:30    INFO]  - training seems to have been successful! will move on ...
[10:30:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:30:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:30:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:30:37    INFO] ----------------------------------------------------------------------------------------------------
[10:30:37    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:30:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:30:37    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:30:37    INFO]    - weights:            1
[10:30:37    INFO] ----------------------------------------------------------------------------------------------------
[10:30:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:30:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[10:30:48    INFO]  - Will gen. input-parameter errors ...
[10:30:51    INFO]  - starting ANNZ::loadReaders() ... 
[10:31:08    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[10:39:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:39:51    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:39:51    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:39:51    INFO]  -----------------------------------------------------------------------------------------------------------
[10:42:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:42:46    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:42:46    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:42:46    INFO]  -----------------------------------------------------------------------------------------------------------
[10:42:46    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[10:45:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:45:19    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:45:19    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:45:19    INFO]  -----------------------------------------------------------------------------------------------------------
[10:45:19    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:45:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:45:21    INFO]  - will validate that the bias-correction actually improved the result ...
[10:45:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:45:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[10:45:25    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_4/plots/
[10:45:32        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_4/plots output/PAUS_advanced18/regres/train/ANNZ_4/plots_biasCor_before
[10:45:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:45:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[10:45:35    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_4/plots/
[10:45:43        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_4/plots output/PAUS_advanced18/regres/train/ANNZ_4/plots_biasCor_after
[10:45:43    INFO]  - Got original [KS-test,N_poiss]: [0.0883101 , 5.81488] , after the bias-correction: [0.0641063 , 4.87112] --> will KEEP the correction !

(10:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=71951:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:45 INFO) 
[10:45:47    INFO]  -----------------------------------------------------
[10:45:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:45:47    INFO]  -----------------------------------------------------------------------------------------------------------
[10:45:48    INFO]  - starting ANNZ::Init()  ... 
[10:45:50    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_5/saveOpt.txt ...
[10:46:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:46:10    INFO] ----------------------------------------------------------------------------------------------------
[10:46:10    INFO]  - will book (ANNZ_5) method(ANN) with options: :HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=71951:VarTransform=N
[10:46:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:46:10    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:46:10    INFO]      cuts (train):        ,
[10:46:10    INFO]      cuts (valid):       
[10:46:10    INFO]    - weights:            1
[10:46:10    INFO] ----------------------------------------------------------------------------------------------------
[10:46:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:00:18    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[14:00:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[14:00:22    INFO]  - Will gen. input-parameter errors ...
[14:00:24    INFO]  - starting ANNZ::loadReaders() ... 
[14:00:24    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[14:00:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:00:47    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:00:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:00:47    INFO]  -----------------------------------------------------------------------------------------------------------
[14:00:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:00:55    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:00:55    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[14:00:55    INFO]  -----------------------------------------------------------------------------------------------------------
[14:00:55    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[14:01:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:01:03    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:01:03    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[14:01:03    INFO]  -----------------------------------------------------------------------------------------------------------
[14:01:03    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:01:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:01:04    INFO]  - will try to derive a bias correction ... 
[14:01:04    INFO]  - will validate that training produced an XML file for later ... 
[14:01:04    INFO]  - starting ANNZ::loadReaders() ... 
[14:01:04    INFO]  - will validate that the training was not a complete failure ... 
[14:01:04    INFO]  - training seems to have been successful! will move on ...
[14:01:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:01:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:01:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:01:09    INFO] ----------------------------------------------------------------------------------------------------
[14:01:09    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:01:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:01:09    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[14:01:09    INFO]    - weights:            1
[14:01:09    INFO] ----------------------------------------------------------------------------------------------------
[14:01:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:01:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[14:01:15    INFO]  - Will gen. input-parameter errors ...
[14:01:17    INFO]  - starting ANNZ::loadReaders() ... 
[14:01:19    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[14:02:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:02:17    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:02:17    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:02:17    INFO]  -----------------------------------------------------------------------------------------------------------
[14:02:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:02:37    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:02:37    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[14:02:37    INFO]  -----------------------------------------------------------------------------------------------------------
[14:02:37    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[14:02:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:02:57    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:02:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[14:02:57    INFO]  -----------------------------------------------------------------------------------------------------------
[14:02:57    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:02:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:02:58    INFO]  - will validate that the bias-correction actually improved the result ...
[14:02:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:02:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
Warning in <Fit>: Fit data is empty 
[14:03:02    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_5/plots/
[14:03:09        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_5/plots output/PAUS_advanced18/regres/train/ANNZ_5/plots_biasCor_before
[14:03:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:03:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[14:03:12    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_5/plots/
[14:03:20        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_5/plots output/PAUS_advanced18/regres/train/ANNZ_5/plots_biasCor_after
[14:03:20    INFO]  - Got original [KS-test,N_poiss]: [0.0765784 , 5.82694] , after the bias-correction: [0.0643137 , 5.14217] --> will KEEP the correction !

(14:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=95211:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:03 INFO) 
[14:03:24    INFO]  -----------------------------------------------------
[14:03:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:03:24    INFO]  -----------------------------------------------------------------------------------------------------------
[14:03:25    INFO]  - starting ANNZ::Init()  ... 
[14:03:27    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_6/saveOpt.txt ...
[14:03:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:03:47    INFO] ----------------------------------------------------------------------------------------------------
[14:03:47    INFO]  - will book (ANNZ_6) method(ANN) with options: :HiddenLayers=N,N+7,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=95211:VarTransform=N
[14:03:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:03:47    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[14:03:47    INFO]      cuts (train):        ,
[14:03:47    INFO]      cuts (valid):       
[14:03:47    INFO]    - weights:            1
[14:03:47    INFO] ----------------------------------------------------------------------------------------------------
[14:03:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 426 diag elements < tolerance of 2.2204e-16
(16:24 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:24 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:24 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:24 INFO) [40;37;1m - 22/02/19 16:24:23 - starting ANNZ[0m
(16:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:24 INFO) 
[16:24:23    INFO]  -----------------------------------------------------
[16:24:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:24:23    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:24    INFO]  - starting ANNZ::Init()  ... 
[16:24:25    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[16:24:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=610:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:24 INFO) 
[16:24:25    INFO]  -----------------------------------------------------
[16:24:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:24:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:27    INFO]  - starting ANNZ::Init()  ... 
[16:24:27    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced18/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[16:24:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=95614:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:24 INFO) 
[16:24:27    INFO]  -----------------------------------------------------
[16:24:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:24:27    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:28    INFO]  - starting ANNZ::Init()  ... 
[16:24:28    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced18/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[16:24:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:24 INFO) 
[16:24:28    INFO]  -----------------------------------------------------
[16:24:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:24:28    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:30    INFO]  - starting ANNZ::Init()  ... 
[16:24:30    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced18/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[16:24:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:24 INFO) 
[16:24:31    INFO]  -----------------------------------------------------
[16:24:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:24:31    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:32    INFO]  - starting ANNZ::Init()  ... 
[16:24:33    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced18/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[16:24:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=13425:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:24 INFO) 
[16:24:33    INFO]  -----------------------------------------------------
[16:24:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:24:33    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:35    INFO]  - starting ANNZ::Init()  ... 
[16:24:35    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced18/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[16:24:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=64779[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:24 INFO) 
[16:24:35    INFO]  -----------------------------------------------------
[16:24:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:24:35    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:36    INFO]  - starting ANNZ::Init()  ... 
[16:24:38    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_6/saveOpt.txt ...
[16:24:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:24:59    INFO] ----------------------------------------------------------------------------------------------------
[16:24:59    INFO]  - will book (ANNZ_6) method(ANN) with options: :HiddenLayers=N+4,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=64779:VarTransform=N
[16:24:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:24:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:24:59    INFO]      cuts (train):        ,
[16:24:59    INFO]      cuts (valid):       
[16:24:59    INFO]    - weights:            1
[16:24:59    INFO] ----------------------------------------------------------------------------------------------------
[16:24:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:54:04    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[16:54:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[16:54:08    INFO]  - Will gen. input-parameter errors ...
[16:54:09    INFO]  - starting ANNZ::loadReaders() ... 
[16:54:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[16:54:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:35    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:54:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:54:35    INFO]  -----------------------------------------------------------------------------------------------------------
[16:54:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:44    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:54:44    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:54:44    INFO]  -----------------------------------------------------------------------------------------------------------
[16:54:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[16:54:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:53    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:54:53    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:54:53    INFO]  -----------------------------------------------------------------------------------------------------------
[16:54:53    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:54:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:54:54    INFO]  - will try to derive a bias correction ... 
[16:54:54    INFO]  - will validate that training produced an XML file for later ... 
[16:54:54    INFO]  - starting ANNZ::loadReaders() ... 
[16:54:54    INFO]  - will validate that the training was not a complete failure ... 
[16:54:54    INFO]  - training seems to have been successful! will move on ...
[16:54:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:54:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:54:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:54:59    INFO] ----------------------------------------------------------------------------------------------------
[16:54:59    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:54:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:54:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[16:54:59    INFO]    - weights:            1
[16:54:59    INFO] ----------------------------------------------------------------------------------------------------
[16:54:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:55:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[16:55:04    INFO]  - Will gen. input-parameter errors ...
[16:55:05    INFO]  - starting ANNZ::loadReaders() ... 
[16:55:07    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[16:56:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:56:06    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:56:06    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:56:06    INFO]  -----------------------------------------------------------------------------------------------------------
[16:56:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:56:26    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:56:26    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:56:26    INFO]  -----------------------------------------------------------------------------------------------------------
[16:56:26    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[16:56:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:56:47    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:56:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:56:47    INFO]  -----------------------------------------------------------------------------------------------------------
[16:56:47    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:56:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:56:48    INFO]  - will validate that the bias-correction actually improved the result ...
[16:56:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:56:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[16:56:52    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_6/plots/
[16:56:58        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_6/plots output/PAUS_advanced18/regres/train/ANNZ_6/plots_biasCor_before
[16:56:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:56:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[16:57:01    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_6/plots/
[16:57:07        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_6/plots output/PAUS_advanced18/regres/train/ANNZ_6/plots_biasCor_after
[16:57:07    INFO]  - Got original [KS-test,N_poiss]: [0.281952 , 18.2082] , after the bias-correction: [0.0852063 , 5.53694] --> will KEEP the correction !

(16:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=65358:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:57 INFO) 
[16:57:10    INFO]  -----------------------------------------------------
[16:57:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:57:10    INFO]  -----------------------------------------------------------------------------------------------------------
[16:57:12    INFO]  - starting ANNZ::Init()  ... 
[16:57:13    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_7/saveOpt.txt ...
[16:57:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:57:30    INFO] ----------------------------------------------------------------------------------------------------
[16:57:30    INFO]  - will book (ANNZ_7) method(ANN) with options: :HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=65358:VarTransform=N
[16:57:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:57:30    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:57:30    INFO]      cuts (train):        ,
[16:57:30    INFO]      cuts (valid):       
[16:57:30    INFO]    - weights:            1
[16:57:30    INFO] ----------------------------------------------------------------------------------------------------
[16:57:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:32:27    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[18:32:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[18:32:31    INFO]  - Will gen. input-parameter errors ...
[18:32:33    INFO]  - starting ANNZ::loadReaders() ... 
[18:32:34    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[18:32:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:32:58    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:32:58    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:32:58    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:33:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:33:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:33:06    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[18:33:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:33:14    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:33:14    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:33:14    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:14    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:33:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:33:15    INFO]  - will try to derive a bias correction ... 
[18:33:15    INFO]  - will validate that training produced an XML file for later ... 
[18:33:15    INFO]  - starting ANNZ::loadReaders() ... 
[18:33:15    INFO]  - will validate that the training was not a complete failure ... 
[18:33:16    INFO]  - training seems to have been successful! will move on ...
[18:33:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:33:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:33:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:33:22    INFO] ----------------------------------------------------------------------------------------------------
[18:33:22    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:33:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:33:22    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:33:22    INFO]    - weights:            1
[18:33:22    INFO] ----------------------------------------------------------------------------------------------------
[18:33:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:33:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[18:33:29    INFO]  - Will gen. input-parameter errors ...
[18:33:31    INFO]  - starting ANNZ::loadReaders() ... 
[18:33:34    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[18:34:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:34:40    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:34:40    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:34:40    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:35:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:35:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:35:02    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[18:35:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:35:26    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:35:26    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:35:26    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:27    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:35:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:35:28    INFO]  - will validate that the bias-correction actually improved the result ...
[18:35:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:35:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[18:35:32    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_7/plots/
[18:35:40        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_7/plots output/PAUS_advanced18/regres/train/ANNZ_7/plots_biasCor_before
[18:35:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:35:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[18:35:43    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_7/plots/
[18:35:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_7/plots output/PAUS_advanced18/regres/train/ANNZ_7/plots_biasCor_after
[18:35:51    INFO]  - Got original [KS-test,N_poiss]: [0.0872276 , 5.9125] , after the bias-correction: [0.0757898 , 5.24237] --> will KEEP the correction !

(18:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=69066:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:35 INFO) 
[18:35:55    INFO]  -----------------------------------------------------
[18:35:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:35:55    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:56    INFO]  - starting ANNZ::Init()  ... 
[18:35:58    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_8/saveOpt.txt ...
[18:36:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:36:19    INFO] ----------------------------------------------------------------------------------------------------
[18:36:19    INFO]  - will book (ANNZ_8) method(ANN) with options: :HiddenLayers=N+4,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=69066:VarTransform=N,P
[18:36:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:36:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:36:19    INFO]      cuts (train):        ,
[18:36:19    INFO]      cuts (valid):       
[18:36:19    INFO]    - weights:            1
[18:36:19    INFO] ----------------------------------------------------------------------------------------------------
[18:36:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:13:37    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[23:13:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[23:13:39    INFO]  - Will gen. input-parameter errors ...
[23:13:40    INFO]  - starting ANNZ::loadReaders() ... 
[23:13:41    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[23:14:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:14:19    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:14:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:14:19    INFO]  -----------------------------------------------------------------------------------------------------------
[23:14:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:14:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:14:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:14:32    INFO]  -----------------------------------------------------------------------------------------------------------
[23:14:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[23:14:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:14:45    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:14:45    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:14:45    INFO]  -----------------------------------------------------------------------------------------------------------
[23:14:45    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:14:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:14:46    INFO]  - will try to derive a bias correction ... 
[23:14:46    INFO]  - will validate that training produced an XML file for later ... 
[23:14:46    INFO]  - starting ANNZ::loadReaders() ... 
[23:14:46    INFO]  - will validate that the training was not a complete failure ... 
[23:14:46    INFO]  - training seems to have been successful! will move on ...
[23:14:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:14:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:14:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:14:50    INFO] ----------------------------------------------------------------------------------------------------
[23:14:50    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:14:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:14:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:14:50    INFO]    - weights:            1
[23:14:50    INFO] ----------------------------------------------------------------------------------------------------
[23:14:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:14:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[23:14:55    INFO]  - Will gen. input-parameter errors ...
[23:14:57    INFO]  - starting ANNZ::loadReaders() ... 
[23:14:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[23:16:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:16:09    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:16:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:16:09    INFO]  -----------------------------------------------------------------------------------------------------------
[23:16:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:16:36    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:16:36    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:16:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:16:36    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[23:17:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:17:01    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:17:01    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:17:01    INFO]  -----------------------------------------------------------------------------------------------------------
[23:17:02    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:17:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:17:02    INFO]  - will validate that the bias-correction actually improved the result ...
[23:17:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:17:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[23:17:06    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_8/plots/
[23:17:13        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_8/plots output/PAUS_advanced18/regres/train/ANNZ_8/plots_biasCor_before
[23:17:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:17:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[23:17:16    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_8/plots/
[23:17:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_8/plots output/PAUS_advanced18/regres/train/ANNZ_8/plots_biasCor_after
[23:17:23    INFO]  - Got original [KS-test,N_poiss]: [0.0831786 , 5.65894] , after the bias-correction: [0.0761421 , 5.07535] --> will KEEP the correction !

(23:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=93983:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:17 INFO) 
[23:17:26    INFO]  -----------------------------------------------------
[23:17:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:17:26    INFO]  -----------------------------------------------------------------------------------------------------------
[23:17:28    INFO]  - starting ANNZ::Init()  ... 
[23:17:29    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_9/saveOpt.txt ...
[23:17:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:17:45    INFO] ----------------------------------------------------------------------------------------------------
[23:17:45    INFO]  - will book (ANNZ_9) method(ANN) with options: :HiddenLayers=N,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=93983:VarTransform=N
[23:17:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:17:45    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:17:45    INFO]      cuts (train):        ,
[23:17:45    INFO]      cuts (valid):       
[23:17:45    INFO]    - weights:            1
[23:17:45    INFO] ----------------------------------------------------------------------------------------------------
[23:17:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:53:02    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[01:53:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[01:53:07    INFO]  - Will gen. input-parameter errors ...
[01:53:09    INFO]  - starting ANNZ::loadReaders() ... 
[01:53:09    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[01:53:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:53:30    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:53:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:53:30    INFO]  -----------------------------------------------------------------------------------------------------------
[01:53:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:53:37    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:53:37    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:53:37    INFO]  -----------------------------------------------------------------------------------------------------------
[01:53:37    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[01:53:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:53:44    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:53:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:53:44    INFO]  -----------------------------------------------------------------------------------------------------------
[01:53:44    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:53:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:53:45    INFO]  - will try to derive a bias correction ... 
[01:53:45    INFO]  - will validate that training produced an XML file for later ... 
[01:53:45    INFO]  - starting ANNZ::loadReaders() ... 
[01:53:45    INFO]  - will validate that the training was not a complete failure ... 
[01:53:45    INFO]  - training seems to have been successful! will move on ...
[01:53:45    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:53:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:53:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:53:49    INFO] ----------------------------------------------------------------------------------------------------
[01:53:49    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:53:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:53:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:53:49    INFO]    - weights:            1
[01:53:49    INFO] ----------------------------------------------------------------------------------------------------
[01:53:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:53:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[01:53:54    INFO]  - Will gen. input-parameter errors ...
[01:53:56    INFO]  - starting ANNZ::loadReaders() ... 
[01:53:58    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[01:54:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:54:52    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:54:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:54:52    INFO]  -----------------------------------------------------------------------------------------------------------
[01:55:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:55:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:55:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:55:11    INFO]  -----------------------------------------------------------------------------------------------------------
[01:55:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[01:55:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:55:28    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:55:28    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:55:28    INFO]  -----------------------------------------------------------------------------------------------------------
[01:55:28    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:55:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:55:29    INFO]  - will validate that the bias-correction actually improved the result ...
[01:55:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:55:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[01:55:33    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_9/plots/
[01:55:40        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_9/plots output/PAUS_advanced18/regres/train/ANNZ_9/plots_biasCor_before
[01:55:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:55:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[01:55:43    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_9/plots/
[01:55:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_9/plots output/PAUS_advanced18/regres/train/ANNZ_9/plots_biasCor_after
[01:55:50    INFO]  - Got original [KS-test,N_poiss]: [0.0793467 , 5.53849] , after the bias-correction: [0.0687244 , 4.64789] --> will KEEP the correction !

(01:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:55 INFO) 
[01:55:54    INFO]  -----------------------------------------------------
[01:55:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:55:54    INFO]  -----------------------------------------------------------------------------------------------------------
[01:55:55    INFO]  - starting ANNZ::Init()  ... 
[01:55:57    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_10/saveOpt.txt ...
[01:56:13    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:56:13    INFO] ----------------------------------------------------------------------------------------------------
[01:56:13    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=390:BoostType=AdaBoost:VarTransform=N
[01:56:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:56:13    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[01:56:13    INFO]      cuts (train):        ,
[01:56:13    INFO]      cuts (valid):       
[01:56:13    INFO]    - weights:            1
[01:56:13    INFO] ----------------------------------------------------------------------------------------------------
[01:56:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:56:40    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[01:56:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[01:56:43    INFO]  - Will gen. input-parameter errors ...
[01:56:45    INFO]  - starting ANNZ::loadReaders() ... 
[01:56:49    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[01:58:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:58:08    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:58:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:58:08    INFO]  -----------------------------------------------------------------------------------------------------------
[01:58:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:58:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:58:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:58:33    INFO]  -----------------------------------------------------------------------------------------------------------
[01:58:33    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[01:58:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:58:59    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:58:59    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:58:59    INFO]  -----------------------------------------------------------------------------------------------------------
[01:58:59    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:59:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:59:00    INFO]  - will try to derive a bias correction ... 
[01:59:00    INFO]  - will validate that training produced an XML file for later ... 
[01:59:00    INFO]  - starting ANNZ::loadReaders() ... 
[01:59:01    INFO]  - will validate that the training was not a complete failure ... 
[01:59:01    INFO]  - training seems to have been successful! will move on ...
[01:59:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:59:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:59:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:59:06    INFO] ----------------------------------------------------------------------------------------------------
[01:59:06    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:59:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:59:06    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:59:06    INFO]    - weights:            1
[01:59:06    INFO] ----------------------------------------------------------------------------------------------------
[01:59:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:59:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[01:59:12    INFO]  - Will gen. input-parameter errors ...
[01:59:14    INFO]  - starting ANNZ::loadReaders() ... 
[01:59:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[02:00:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:00:33    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:00:33    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:00:33    INFO]  -----------------------------------------------------------------------------------------------------------
[02:00:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:00:59    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:00:59    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:00:59    INFO]  -----------------------------------------------------------------------------------------------------------
[02:00:59    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[02:01:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:01:28    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:01:28    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:01:28    INFO]  -----------------------------------------------------------------------------------------------------------
[02:01:28    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:01:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:01:29    INFO]  - will validate that the bias-correction actually improved the result ...
[02:01:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:01:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
Warning in <Fit>: Fit data is empty 
[02:01:32    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_10/plots/
[02:01:38        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_10/plots output/PAUS_advanced18/regres/train/ANNZ_10/plots_biasCor_before
[02:01:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:01:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[02:01:41    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_10/plots/
[02:01:47        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_10/plots output/PAUS_advanced18/regres/train/ANNZ_10/plots_biasCor_after
[02:01:47    INFO]  - Got original [KS-test,N_poiss]: [0.0835339 , 5.62166] , after the bias-correction: [0.0665571 , 5.13472] --> will KEEP the correction !

(02:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:01 INFO) 
[02:01:50    INFO]  -----------------------------------------------------
[02:01:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:01:50    INFO]  -----------------------------------------------------------------------------------------------------------
[02:01:51    INFO]  - starting ANNZ::Init()  ... 
[02:01:53    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_11/saveOpt.txt ...
[02:02:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:02:10    INFO] ----------------------------------------------------------------------------------------------------
[02:02:10    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=400:BoostType=AdaBoost:VarTransform=N,P
[02:02:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:02:10    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:02:10    INFO]      cuts (train):        ,
[02:02:10    INFO]      cuts (valid):       
[02:02:10    INFO]    - weights:            1
[02:02:10    INFO] ----------------------------------------------------------------------------------------------------
[02:02:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:02:29    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[02:02:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[02:02:31    INFO]  - Will gen. input-parameter errors ...
[02:02:33    INFO]  - starting ANNZ::loadReaders() ... 
[02:02:36    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[02:04:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:04:09    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:04:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:04:09    INFO]  -----------------------------------------------------------------------------------------------------------
[02:04:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:04:43    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:04:43    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:04:43    INFO]  -----------------------------------------------------------------------------------------------------------
[02:04:43    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[02:05:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:05:15    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:05:15    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:05:15    INFO]  -----------------------------------------------------------------------------------------------------------
[02:05:15    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:05:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:05:16    INFO]  - will try to derive a bias correction ... 
[02:05:16    INFO]  - will validate that training produced an XML file for later ... 
[02:05:16    INFO]  - starting ANNZ::loadReaders() ... 
[02:05:17    INFO]  - will validate that the training was not a complete failure ... 
[02:05:17    INFO]  - training seems to have been successful! will move on ...
[02:05:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:05:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:05:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:05:22    INFO] ----------------------------------------------------------------------------------------------------
[02:05:22    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:05:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:05:22    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[02:05:22    INFO]    - weights:            1
[02:05:22    INFO] ----------------------------------------------------------------------------------------------------
[02:05:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:05:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[02:05:28    INFO]  - Will gen. input-parameter errors ...
[02:05:30    INFO]  - starting ANNZ::loadReaders() ... 
[02:05:33    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[02:07:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:07:10    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:07:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:07:10    INFO]  -----------------------------------------------------------------------------------------------------------
[02:07:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:07:44    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:07:44    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:07:44    INFO]  -----------------------------------------------------------------------------------------------------------
[02:07:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[02:08:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:08:17    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:08:17    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:08:17    INFO]  -----------------------------------------------------------------------------------------------------------
[02:08:17    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:08:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:08:18    INFO]  - will validate that the bias-correction actually improved the result ...
[02:08:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:08:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
Warning in <Fit>: Fit data is empty 
[02:08:21    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_11/plots/
[02:08:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_11/plots output/PAUS_advanced18/regres/train/ANNZ_11/plots_biasCor_before
[02:08:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:08:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[02:08:31    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_11/plots/
[02:08:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_11/plots output/PAUS_advanced18/regres/train/ANNZ_11/plots_biasCor_after
[02:08:37    INFO]  - Got original [KS-test,N_poiss]: [0.117329 , 6.79495] , after the bias-correction: [0.0673969 , 5.04207] --> will KEEP the correction !

(02:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=83274:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:08 INFO) 
[02:08:40    INFO]  -----------------------------------------------------
[02:08:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:08:40    INFO]  -----------------------------------------------------------------------------------------------------------
[02:08:41    INFO]  - starting ANNZ::Init()  ... 
[02:08:42    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_12/saveOpt.txt ...
[02:08:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:09:00    INFO] ----------------------------------------------------------------------------------------------------
[02:09:00    INFO]  - will book (ANNZ_12) method(ANN) with options: :HiddenLayers=N+3,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=83274:VarTransform=N
[02:09:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:09:00    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:09:00    INFO]      cuts (train):        ,
[02:09:00    INFO]      cuts (valid):       
[02:09:00    INFO]    - weights:            1
[02:09:00    INFO] ----------------------------------------------------------------------------------------------------
[02:09:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::DecomposeLUCrout>: matrix is singular
Error in <TDecompLU::InvertLU>: matrix is singular, 63 diag elements < tolerance of 2.2204e-16
(16:46 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:46 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:46 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:46 INFO) [40;37;1m - 24/02/19 16:46:13 - starting ANNZ[0m
(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=20866[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:14    INFO]  -----------------------------------------------------
[16:46:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:14    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:15    INFO]  - starting ANNZ::Init()  ... 
[16:46:16    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[16:46:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:16    INFO]  -----------------------------------------------------
[16:46:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:17    INFO]  - starting ANNZ::Init()  ... 
[16:46:18    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced18/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[16:46:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:18    INFO]  -----------------------------------------------------
[16:46:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:18    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:19    INFO]  - starting ANNZ::Init()  ... 
[16:46:19    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced18/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[16:46:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:20    INFO]  -----------------------------------------------------
[16:46:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:20    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:21    INFO]  - starting ANNZ::Init()  ... 
[16:46:21    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced18/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[16:46:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:21    INFO]  -----------------------------------------------------
[16:46:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:21    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:23    INFO]  - starting ANNZ::Init()  ... 
[16:46:24    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced18/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[16:46:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:24    INFO]  -----------------------------------------------------
[16:46:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:24    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:25    INFO]  - starting ANNZ::Init()  ... 
[16:46:25    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced18/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[16:46:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:25    INFO]  -----------------------------------------------------
[16:46:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:27    INFO]  - starting ANNZ::Init()  ... 
[16:46:27    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced18/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[16:46:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:27    INFO]  -----------------------------------------------------
[16:46:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:27    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:29    INFO]  - starting ANNZ::Init()  ... 
[16:46:29    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced18/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[16:46:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=9182:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:29    INFO]  -----------------------------------------------------
[16:46:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:29    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:31    INFO]  - starting ANNZ::Init()  ... 
[16:46:31    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced18/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[16:46:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=580:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:31    INFO]  -----------------------------------------------------
[16:46:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:31    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:32    INFO]  - starting ANNZ::Init()  ... 
[16:46:32    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced18/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[16:46:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=72226:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:33    INFO]  -----------------------------------------------------
[16:46:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:33    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:34    INFO]  - starting ANNZ::Init()  ... 
[16:46:34    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced18/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[16:46:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+7,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=78029:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:35    INFO]  -----------------------------------------------------
[16:46:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:35    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:36    INFO]  - starting ANNZ::Init()  ... 
[16:46:36    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced18/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[16:46:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=48723:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:37    INFO]  -----------------------------------------------------
[16:46:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:38    INFO]  - starting ANNZ::Init()  ... 
[16:46:40    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_12/saveOpt.txt ...
[16:46:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:46:59    INFO] ----------------------------------------------------------------------------------------------------
[16:46:59    INFO]  - will book (ANNZ_12) method(ANN) with options: :HiddenLayers=N+3,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=48723:VarTransform=N,P
[16:46:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:46:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:46:59    INFO]      cuts (train):        ,
[16:46:59    INFO]      cuts (valid):       
[16:46:59    INFO]    - weights:            1
[16:46:59    INFO] ----------------------------------------------------------------------------------------------------
[16:46:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 21 diag elements < tolerance of 2.2204e-16
[18:14:59    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[18:15:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[18:15:01    INFO]  - Will gen. input-parameter errors ...
[18:15:02    INFO]  - starting ANNZ::loadReaders() ... 
[18:15:06    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[18:15:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:15:42    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:15:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:15:42    INFO]  -----------------------------------------------------------------------------------------------------------
[18:15:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:15:55    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:15:55    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:15:55    INFO]  -----------------------------------------------------------------------------------------------------------
[18:15:55    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[18:16:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:16:07    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:16:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:16:07    INFO]  -----------------------------------------------------------------------------------------------------------
[18:16:08    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:16:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:16:08    INFO]  - will try to derive a bias correction ... 
[18:16:08    INFO]  - will validate that training produced an XML file for later ... 
[18:16:08    INFO]  - starting ANNZ::loadReaders() ... 
[18:16:11    INFO]  - will validate that the training was not a complete failure ... 
[18:16:11    INFO]  - training seems to have been successful! will move on ...
[18:16:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:16:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:16:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:16:16    INFO] ----------------------------------------------------------------------------------------------------
[18:16:16    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:16:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:16:16    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:16:16    INFO]    - weights:            1
[18:16:16    INFO] ----------------------------------------------------------------------------------------------------
[18:16:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:16:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[18:16:20    INFO]  - Will gen. input-parameter errors ...
[18:16:22    INFO]  - starting ANNZ::loadReaders() ... 
[18:16:26    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[18:17:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:17:35    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:17:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:17:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:18:00    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:18:00    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:18:00    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:00    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[18:18:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:18:24    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:18:24    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:18:24    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:24    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:18:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:18:25    INFO]  - will validate that the bias-correction actually improved the result ...
[18:18:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:18:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[18:18:28    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_12/plots/
[18:18:34        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_12/plots output/PAUS_advanced18/regres/train/ANNZ_12/plots_biasCor_before
[18:18:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:18:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[18:18:36    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_12/plots/
[18:18:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_12/plots output/PAUS_advanced18/regres/train/ANNZ_12/plots_biasCor_after
[18:18:42    INFO]  - Got original [KS-test,N_poiss]: [0.177944 , 11.3775] , after the bias-correction: [0.0849302 , 5.84486] --> will KEEP the correction !

(18:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:18 INFO) 
[18:18:45    INFO]  -----------------------------------------------------
[18:18:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:18:45    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:46    INFO]  - starting ANNZ::Init()  ... 
[18:18:48    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_13/saveOpt.txt ...
[18:19:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:19:06    INFO] ----------------------------------------------------------------------------------------------------
[18:19:06    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N
[18:19:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:19:06    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:19:06    INFO]      cuts (train):        ,
[18:19:06    INFO]      cuts (valid):       
[18:19:06    INFO]    - weights:            1
[18:19:06    INFO] ----------------------------------------------------------------------------------------------------
[18:19:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:19:33    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[18:19:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[18:19:36    INFO]  - Will gen. input-parameter errors ...
[18:19:38    INFO]  - starting ANNZ::loadReaders() ... 
[18:19:45    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[18:21:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:21:28    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:21:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:21:28    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:22:04    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:22:04    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:22:04    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:04    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[18:22:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:22:39    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:22:39    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:22:39    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:39    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:22:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:22:41    INFO]  - will try to derive a bias correction ... 
[18:22:41    INFO]  - will validate that training produced an XML file for later ... 
[18:22:41    INFO]  - starting ANNZ::loadReaders() ... 
[18:22:43    INFO]  - will validate that the training was not a complete failure ... 
[18:22:44    INFO]  - training seems to have been successful! will move on ...
[18:22:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:22:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:22:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:22:50    INFO] ----------------------------------------------------------------------------------------------------
[18:22:50    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:22:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:22:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:22:50    INFO]    - weights:            1
[18:22:50    INFO] ----------------------------------------------------------------------------------------------------
[18:22:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:22:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[18:22:56    INFO]  - Will gen. input-parameter errors ...
[18:22:58    INFO]  - starting ANNZ::loadReaders() ... 
[18:23:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[18:24:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:24:43    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:24:43    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:24:43    INFO]  -----------------------------------------------------------------------------------------------------------
[18:25:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:25:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:25:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:25:17    INFO]  -----------------------------------------------------------------------------------------------------------
[18:25:17    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[18:25:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:25:50    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:25:50    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:25:50    INFO]  -----------------------------------------------------------------------------------------------------------
[18:25:50    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:25:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:25:52    INFO]  - will validate that the bias-correction actually improved the result ...
[18:25:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:25:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[18:25:55    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_13/plots/
[18:26:01        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_13/plots output/PAUS_advanced18/regres/train/ANNZ_13/plots_biasCor_before
[18:26:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:26:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[18:26:04    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_13/plots/
[18:26:10        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_13/plots output/PAUS_advanced18/regres/train/ANNZ_13/plots_biasCor_after
[18:26:10    INFO]  - Got original [KS-test,N_poiss]: [0.0900253 , 6.0148] , after the bias-correction: [0.072647 , 5.21031] --> will KEEP the correction !

(18:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=38323:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:26 INFO) 
[18:26:13    INFO]  -----------------------------------------------------
[18:26:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:26:13    INFO]  -----------------------------------------------------------------------------------------------------------
[18:26:15    INFO]  - starting ANNZ::Init()  ... 
[18:26:16    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_14/saveOpt.txt ...
[18:26:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:26:34    INFO] ----------------------------------------------------------------------------------------------------
[18:26:34    INFO]  - will book (ANNZ_14) method(ANN) with options: :HiddenLayers=N+1,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=38323:VarTransform=N
[18:26:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:26:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:26:34    INFO]      cuts (train):        ,
[18:26:34    INFO]      cuts (valid):       
[18:26:34    INFO]    - weights:            1
[18:26:34    INFO] ----------------------------------------------------------------------------------------------------
[18:26:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:09:14    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[20:09:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[20:09:18    INFO]  - Will gen. input-parameter errors ...
[20:09:20    INFO]  - starting ANNZ::loadReaders() ... 
[20:09:20    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[20:09:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:09:42    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:09:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:09:42    INFO]  -----------------------------------------------------------------------------------------------------------
[20:09:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:09:50    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:09:50    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:09:50    INFO]  -----------------------------------------------------------------------------------------------------------
[20:09:50    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[20:09:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:09:57    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:09:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:09:57    INFO]  -----------------------------------------------------------------------------------------------------------
[20:09:57    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:09:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:09:58    INFO]  - will try to derive a bias correction ... 
[20:09:58    INFO]  - will validate that training produced an XML file for later ... 
[20:09:58    INFO]  - starting ANNZ::loadReaders() ... 
[20:09:58    INFO]  - will validate that the training was not a complete failure ... 
[20:09:58    INFO]  - training seems to have been successful! will move on ...
[20:09:58    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:10:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:10:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:10:03    INFO] ----------------------------------------------------------------------------------------------------
[20:10:03    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:10:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:10:03    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[20:10:03    INFO]    - weights:            1
[20:10:03    INFO] ----------------------------------------------------------------------------------------------------
[20:10:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:10:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[20:10:07    INFO]  - Will gen. input-parameter errors ...
[20:10:09    INFO]  - starting ANNZ::loadReaders() ... 
[20:10:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[20:11:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:11:05    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:11:05    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:11:05    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:11:24    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:11:24    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:11:24    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:24    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[20:11:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:11:43    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:11:43    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:11:43    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:44    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:11:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:11:44    INFO]  - will validate that the bias-correction actually improved the result ...
[20:11:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:11:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[20:11:47    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_14/plots/
[20:11:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_14/plots output/PAUS_advanced18/regres/train/ANNZ_14/plots_biasCor_before
[20:11:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:11:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[20:11:56    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_14/plots/
[20:12:02        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_14/plots output/PAUS_advanced18/regres/train/ANNZ_14/plots_biasCor_after
[20:12:02    INFO]  - Got original [KS-test,N_poiss]: [0.0778621 , 5.64929] , after the bias-correction: [0.0760116 , 5.35063] --> will KEEP the correction !

(20:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:12 INFO) 
[20:12:05    INFO]  -----------------------------------------------------
[20:12:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:12:05    INFO]  -----------------------------------------------------------------------------------------------------------
[20:12:06    INFO]  - starting ANNZ::Init()  ... 
[20:12:08    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_15/saveOpt.txt ...
[20:12:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:12:26    INFO] ----------------------------------------------------------------------------------------------------
[20:12:26    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=460:BoostType=Bagging:VarTransform=N,D
[20:12:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:12:26    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:12:26    INFO]      cuts (train):        ,
[20:12:26    INFO]      cuts (valid):       
[20:12:26    INFO]    - weights:            1
[20:12:26    INFO] ----------------------------------------------------------------------------------------------------
[20:12:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:13:05    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[20:13:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[20:13:09    INFO]  - Will gen. input-parameter errors ...
[20:13:11    INFO]  - starting ANNZ::loadReaders() ... 
[20:13:21    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[20:16:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:16:55    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:16:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:16:55    INFO]  -----------------------------------------------------------------------------------------------------------
[20:18:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:18:09    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:18:09    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:18:09    INFO]  -----------------------------------------------------------------------------------------------------------
[20:18:09    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[20:19:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:19:21    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:19:21    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:19:21    INFO]  -----------------------------------------------------------------------------------------------------------
[20:19:24    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:19:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:19:26    INFO]  - will try to derive a bias correction ... 
[20:19:26    INFO]  - will validate that training produced an XML file for later ... 
[20:19:26    INFO]  - starting ANNZ::loadReaders() ... 
[20:19:30    INFO]  - will validate that the training was not a complete failure ... 
[20:19:30    INFO]  - training seems to have been successful! will move on ...
[20:19:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:19:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:19:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:19:36    INFO] ----------------------------------------------------------------------------------------------------
[20:19:36    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:19:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:19:36    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[20:19:36    INFO]    - weights:            1
[20:19:36    INFO] ----------------------------------------------------------------------------------------------------
[20:19:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:19:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[20:19:44    INFO]  - Will gen. input-parameter errors ...
[20:19:46    INFO]  - starting ANNZ::loadReaders() ... 
[20:19:56    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[20:23:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:23:27    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:23:27    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:23:27    INFO]  -----------------------------------------------------------------------------------------------------------
[20:24:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:24:49    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:24:49    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:24:49    INFO]  -----------------------------------------------------------------------------------------------------------
[20:24:49    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[20:26:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:26:16    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:26:16    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:26:16    INFO]  -----------------------------------------------------------------------------------------------------------
[20:26:16    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:26:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:26:19    INFO]  - will validate that the bias-correction actually improved the result ...
[20:26:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:26:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[20:26:23    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_15/plots/
[20:26:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_15/plots output/PAUS_advanced18/regres/train/ANNZ_15/plots_biasCor_before
[20:26:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:26:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[20:26:33    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_15/plots/
[20:26:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_15/plots output/PAUS_advanced18/regres/train/ANNZ_15/plots_biasCor_after
[20:26:39    INFO]  - Got original [KS-test,N_poiss]: [0.115027 , 7.1565] , after the bias-correction: [0.0738447 , 5.29806] --> will KEEP the correction !

(20:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:26 INFO) 
[20:26:44    INFO]  -----------------------------------------------------
[20:26:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:26:44    INFO]  -----------------------------------------------------------------------------------------------------------
[20:26:45    INFO]  - starting ANNZ::Init()  ... 
[20:26:47    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_16/saveOpt.txt ...
[20:27:08    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:27:09    INFO] ----------------------------------------------------------------------------------------------------
[20:27:09    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=790:BoostType=AdaBoost:VarTransform=N
[20:27:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:27:09    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:27:09    INFO]      cuts (train):        ,
[20:27:09    INFO]      cuts (valid):       
[20:27:09    INFO]    - weights:            1
[20:27:09    INFO] ----------------------------------------------------------------------------------------------------
[20:27:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:27:58    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[20:28:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[20:28:02    INFO]  - Will gen. input-parameter errors ...
[20:28:05    INFO]  - starting ANNZ::loadReaders() ... 
[20:28:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[20:33:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:33:20    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:33:20    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:33:20    INFO]  -----------------------------------------------------------------------------------------------------------
[20:34:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:34:44    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:34:44    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:34:44    INFO]  -----------------------------------------------------------------------------------------------------------
[20:34:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[20:35:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:35:58    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:35:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:35:58    INFO]  -----------------------------------------------------------------------------------------------------------
[20:36:01    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:36:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:36:03    INFO]  - will try to derive a bias correction ... 
[20:36:03    INFO]  - will validate that training produced an XML file for later ... 
[20:36:03    INFO]  - starting ANNZ::loadReaders() ... 
[20:36:06    INFO]  - will validate that the training was not a complete failure ... 
[20:36:06    INFO]  - training seems to have been successful! will move on ...
[20:36:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:36:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:36:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:36:13    INFO] ----------------------------------------------------------------------------------------------------
[20:36:13    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:36:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:36:13    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[20:36:13    INFO]    - weights:            1
[20:36:13    INFO] ----------------------------------------------------------------------------------------------------
[20:36:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:36:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[20:36:21    INFO]  - Will gen. input-parameter errors ...
[20:36:24    INFO]  - starting ANNZ::loadReaders() ... 
[20:36:35    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[20:39:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:39:03    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:39:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:39:03    INFO]  -----------------------------------------------------------------------------------------------------------
[20:39:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:39:59    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:39:59    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:39:59    INFO]  -----------------------------------------------------------------------------------------------------------
[20:39:59    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[20:40:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:40:52    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:40:52    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:40:52    INFO]  -----------------------------------------------------------------------------------------------------------
[20:40:52    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:40:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:40:54    INFO]  - will validate that the bias-correction actually improved the result ...
[20:40:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:40:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[20:40:58    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_16/plots/
[20:41:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_16/plots output/PAUS_advanced18/regres/train/ANNZ_16/plots_biasCor_before
[20:41:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:41:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[20:41:09    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_16/plots/
[20:41:16        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_16/plots output/PAUS_advanced18/regres/train/ANNZ_16/plots_biasCor_after
[20:41:16    INFO]  - Got original [KS-test,N_poiss]: [0.0835339 , 5.61634] , after the bias-correction: [0.0667056 , 5.10367] --> will KEEP the correction !

(20:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:41 INFO) 
[20:41:21    INFO]  -----------------------------------------------------
[20:41:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:41:21    INFO]  -----------------------------------------------------------------------------------------------------------
[20:41:22    INFO]  - starting ANNZ::Init()  ... 
[20:41:24    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_17/saveOpt.txt ...
[20:41:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:41:44    INFO] ----------------------------------------------------------------------------------------------------
[20:41:44    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=440:BoostType=AdaBoost:VarTransform=N,P
[20:41:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:41:44    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:41:44    INFO]      cuts (train):        ,
[20:41:44    INFO]      cuts (valid):       
[20:41:44    INFO]    - weights:            1
[20:41:44    INFO] ----------------------------------------------------------------------------------------------------
[20:41:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:42:06    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[20:42:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[20:42:09    INFO]  - Will gen. input-parameter errors ...
[20:42:11    INFO]  - starting ANNZ::loadReaders() ... 
[20:42:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[20:44:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:44:04    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:44:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:44:04    INFO]  -----------------------------------------------------------------------------------------------------------
[20:44:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:44:39    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:44:39    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:44:39    INFO]  -----------------------------------------------------------------------------------------------------------
[20:44:39    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[20:45:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:45:16    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:45:16    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:45:16    INFO]  -----------------------------------------------------------------------------------------------------------
[20:45:16    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:45:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:45:17    INFO]  - will try to derive a bias correction ... 
[20:45:17    INFO]  - will validate that training produced an XML file for later ... 
[20:45:17    INFO]  - starting ANNZ::loadReaders() ... 
[20:45:18    INFO]  - will validate that the training was not a complete failure ... 
[20:45:18    INFO]  - training seems to have been successful! will move on ...
[20:45:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:45:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:45:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:45:25    INFO] ----------------------------------------------------------------------------------------------------
[20:45:25    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:45:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:45:25    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[20:45:25    INFO]    - weights:            1
[20:45:25    INFO] ----------------------------------------------------------------------------------------------------
[20:45:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:45:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[20:45:31    INFO]  - Will gen. input-parameter errors ...
[20:45:33    INFO]  - starting ANNZ::loadReaders() ... 
[20:45:37    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[20:47:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:47:22    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:47:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:47:22    INFO]  -----------------------------------------------------------------------------------------------------------
[20:48:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:48:00    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:48:00    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:48:00    INFO]  -----------------------------------------------------------------------------------------------------------
[20:48:00    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[20:48:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:48:38    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:48:38    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:48:38    INFO]  -----------------------------------------------------------------------------------------------------------
[20:48:38    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:48:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:48:39    INFO]  - will validate that the bias-correction actually improved the result ...
[20:48:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:48:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
Warning in <Fit>: Fit data is empty 
[20:48:43    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_17/plots/
[20:48:49        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_17/plots output/PAUS_advanced18/regres/train/ANNZ_17/plots_biasCor_before
[20:48:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:48:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[20:48:51    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_17/plots/
[20:48:57        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_17/plots output/PAUS_advanced18/regres/train/ANNZ_17/plots_biasCor_after
[20:48:57    INFO]  - Got original [KS-test,N_poiss]: [0.117404 , 6.79284] , after the bias-correction: [0.0673226 , 5.03602] --> will KEEP the correction !

(20:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=98863:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:49 INFO) 
[20:49:01    INFO]  -----------------------------------------------------
[20:49:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:49:01    INFO]  -----------------------------------------------------------------------------------------------------------
[20:49:03    INFO]  - starting ANNZ::Init()  ... 
[20:49:05    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_18/saveOpt.txt ...
[20:49:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:49:26    INFO] ----------------------------------------------------------------------------------------------------
[20:49:26    INFO]  - will book (ANNZ_18) method(ANN) with options: :HiddenLayers=N+4,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=98863:VarTransform=N,P
[20:49:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:49:26    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:49:26    INFO]      cuts (train):        ,
[20:49:26    INFO]      cuts (valid):       
[20:49:26    INFO]    - weights:            1
[20:49:26    INFO] ----------------------------------------------------------------------------------------------------
[20:49:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 1 diag elements < tolerance of 2.2204e-16
(23:27 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:27 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:27 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:27 INFO) [40;37;1m - 24/02/19 23:27:13 - starting ANNZ[0m
(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=94803:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:13    INFO]  -----------------------------------------------------
[23:27:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:13    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:15    INFO]  - starting ANNZ::Init()  ... 
[23:27:16    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced18/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[23:27:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=1108[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:16    INFO]  -----------------------------------------------------
[23:27:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:17    INFO]  - starting ANNZ::Init()  ... 
[23:27:18    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced18/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[23:27:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:18    INFO]  -----------------------------------------------------
[23:27:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:18    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:19    INFO]  - starting ANNZ::Init()  ... 
[23:27:19    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced18/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[23:27:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=53930:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:20    INFO]  -----------------------------------------------------
[23:27:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:21    INFO]  - starting ANNZ::Init()  ... 
[23:27:21    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced18/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[23:27:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=50613:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:21    INFO]  -----------------------------------------------------
[23:27:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:21    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:23    INFO]  - starting ANNZ::Init()  ... 
[23:27:24    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced18/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[23:27:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:24    INFO]  -----------------------------------------------------
[23:27:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:25    INFO]  - starting ANNZ::Init()  ... 
[23:27:25    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced18/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[23:27:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=93597:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:25    INFO]  -----------------------------------------------------
[23:27:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:25    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:27    INFO]  - starting ANNZ::Init()  ... 
[23:27:27    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced18/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[23:27:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:27    INFO]  -----------------------------------------------------
[23:27:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:29    INFO]  - starting ANNZ::Init()  ... 
[23:27:29    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced18/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[23:27:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=61077:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:29    INFO]  -----------------------------------------------------
[23:27:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:29    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:31    INFO]  - starting ANNZ::Init()  ... 
[23:27:31    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced18/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[23:27:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+7,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=99826:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:31    INFO]  -----------------------------------------------------
[23:27:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:32    INFO]  - starting ANNZ::Init()  ... 
[23:27:32    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced18/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[23:27:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:33    INFO]  -----------------------------------------------------
[23:27:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:34    INFO]  - starting ANNZ::Init()  ... 
[23:27:34    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced18/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[23:27:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:35    INFO]  -----------------------------------------------------
[23:27:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:36    INFO]  - starting ANNZ::Init()  ... 
[23:27:36    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced18/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[23:27:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+2,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=89969:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:36    INFO]  -----------------------------------------------------
[23:27:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:38    INFO]  - starting ANNZ::Init()  ... 
[23:27:39    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced18/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[23:27:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=97760:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:39    INFO]  -----------------------------------------------------
[23:27:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:39    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:40    INFO]  - starting ANNZ::Init()  ... 
[23:27:41    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced18/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[23:27:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=2586:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:41    INFO]  -----------------------------------------------------
[23:27:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:41    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:43    INFO]  - starting ANNZ::Init()  ... 
[23:27:43    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced18/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[23:27:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:43    INFO]  -----------------------------------------------------
[23:27:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:43    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:45    INFO]  - starting ANNZ::Init()  ... 
[23:27:45    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced18/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[23:27:45    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=6561[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:46    INFO]  -----------------------------------------------------
[23:27:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:47    INFO]  - starting ANNZ::Init()  ... 
[23:27:48    INFO]  - found trained "ANNZ_16" (./output/PAUS_advanced18/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[23:27:48    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:48    INFO]  -----------------------------------------------------
[23:27:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:48    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:49    INFO]  - starting ANNZ::Init()  ... 
[23:27:50    INFO]  - found trained "ANNZ_17" (./output/PAUS_advanced18/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[23:27:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:50    INFO]  -----------------------------------------------------
[23:27:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:50    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:51    INFO]  - starting ANNZ::Init()  ... 
[23:27:53    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_18/saveOpt.txt ...
[23:28:11    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:28:12    INFO] ----------------------------------------------------------------------------------------------------
[23:28:12    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=330:BoostType=Bagging:VarTransform=N,P
[23:28:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:28:12    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:28:12    INFO]      cuts (train):        ,
[23:28:12    INFO]      cuts (valid):       
[23:28:12    INFO]    - weights:            1
[23:28:12    INFO] ----------------------------------------------------------------------------------------------------
[23:28:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:28:45    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[23:28:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[23:28:50    INFO]  - Will gen. input-parameter errors ...
[23:28:52    INFO]  - starting ANNZ::loadReaders() ... 
[23:29:06    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[23:32:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:32:28    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:32:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:32:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:33:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:33:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:33:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:33:32    INFO]  -----------------------------------------------------------------------------------------------------------
[23:33:33    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[23:34:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:34:33    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:34:33    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:34:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:34:33    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:34:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:34:35    INFO]  - will try to derive a bias correction ... 
[23:34:35    INFO]  - will validate that training produced an XML file for later ... 
[23:34:35    INFO]  - starting ANNZ::loadReaders() ... 
[23:34:38    INFO]  - will validate that the training was not a complete failure ... 
[23:34:38    INFO]  - training seems to have been successful! will move on ...
[23:34:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:34:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:34:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:34:44    INFO] ----------------------------------------------------------------------------------------------------
[23:34:44    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:34:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:34:44    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:34:44    INFO]    - weights:            1
[23:34:44    INFO] ----------------------------------------------------------------------------------------------------
[23:34:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:34:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[23:34:51    INFO]  - Will gen. input-parameter errors ...
[23:34:53    INFO]  - starting ANNZ::loadReaders() ... 
[23:34:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[23:38:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:03    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:38:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:38:03    INFO]  -----------------------------------------------------------------------------------------------------------
[23:39:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:39:00    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:39:00    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:39:00    INFO]  -----------------------------------------------------------------------------------------------------------
[23:39:00    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[23:40:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:40:00    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:40:00    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:40:00    INFO]  -----------------------------------------------------------------------------------------------------------
[23:40:01    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:40:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:40:03    INFO]  - will validate that the bias-correction actually improved the result ...
[23:40:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:40:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[23:40:07    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_18/plots/
[23:40:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_18/plots output/PAUS_advanced18/regres/train/ANNZ_18/plots_biasCor_before
[23:40:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:40:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[23:40:17    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_18/plots/
[23:40:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_18/plots output/PAUS_advanced18/regres/train/ANNZ_18/plots_biasCor_after
[23:40:23    INFO]  - Got original [KS-test,N_poiss]: [0.102469 , 6.21069] , after the bias-correction: [0.0655324 , 4.97229] --> will KEEP the correction !

(23:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced18[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=83712:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:40 INFO) 
[23:40:28    INFO]  -----------------------------------------------------
[23:40:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:40:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:40:30    INFO]  - starting ANNZ::Init()  ... 
[23:40:32    INFO]  - Saving run information in ./output/PAUS_advanced18/regres/train/ANNZ_19/saveOpt.txt ...
[23:40:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:40:56    INFO] ----------------------------------------------------------------------------------------------------
[23:40:56    INFO]  - will book (ANNZ_19) method(ANN) with options: :HiddenLayers=N+4,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=83712:VarTransform=N,P
[23:40:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:40:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:40:56    INFO]      cuts (train):        ,
[23:40:56    INFO]      cuts (valid):       
[23:40:56    INFO]    - weights:            1
[23:40:56    INFO] ----------------------------------------------------------------------------------------------------
[23:40:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:12:42    INFO]  - Saving MLM information in ./output/PAUS_advanced18/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[01:12:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[01:12:48    INFO]  - Will gen. input-parameter errors ...
[01:12:50    INFO]  - starting ANNZ::loadReaders() ... 
[01:12:51    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[01:13:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:13:27    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:13:27    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:13:27    INFO]  -----------------------------------------------------------------------------------------------------------
[01:13:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:13:40    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:13:40    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:13:40    INFO]  -----------------------------------------------------------------------------------------------------------
[01:13:40    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[01:13:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:13:52    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:13:52    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:13:52    INFO]  -----------------------------------------------------------------------------------------------------------
[01:13:52    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:13:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:13:53    INFO]  - will try to derive a bias correction ... 
[01:13:53    INFO]  - will validate that training produced an XML file for later ... 
[01:13:53    INFO]  - starting ANNZ::loadReaders() ... 
[01:13:53    INFO]  - will validate that the training was not a complete failure ... 
[01:13:53    INFO]  - training seems to have been successful! will move on ...
[01:13:53    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:13:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:13:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:13:59    INFO] ----------------------------------------------------------------------------------------------------
[01:13:59    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:13:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:13:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:13:59    INFO]    - weights:            1
[01:13:59    INFO] ----------------------------------------------------------------------------------------------------
[01:14:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:14:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[01:14:04    INFO]  - Will gen. input-parameter errors ...
[01:14:06    INFO]  - starting ANNZ::loadReaders() ... 
[01:14:09    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_train*.root
[01:15:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:15:21    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:15:21    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:15:21    INFO]  -----------------------------------------------------------------------------------------------------------
[01:15:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:15:46    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:15:46    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:15:46    INFO]  -----------------------------------------------------------------------------------------------------------
[01:15:46    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced18/rootIn/ANNZ_tree_valid*.root
[01:16:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:16:11    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:16:11    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:16:11    INFO]  -----------------------------------------------------------------------------------------------------------
[01:16:11    INFO]  - Saving file ./output/PAUS_advanced18/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:16:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:16:12    INFO]  - will validate that the bias-correction actually improved the result ...
[01:16:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:16:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[01:16:16    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_19/plots/
[01:16:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_19/plots output/PAUS_advanced18/regres/train/ANNZ_19/plots_biasCor_before
[01:16:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:16:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[01:16:26    INFO]  - Writing to plotting directory output/PAUS_advanced18/regres/train/ANNZ_19/plots/
[01:16:32        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced18/regres/train/ANNZ_19/plots output/PAUS_advanced18/regres/train/ANNZ_19/plots_biasCor_after
[01:16:32    INFO]  - Got original [KS-test,N_poiss]: [0.0921665 , 6.12604] , after the bias-correction: [0.0805419 , 5.30394] --> will KEEP the correction !

(01:16 INFO) [40;37;1m - 25/02/19 01:16:36 - finished running ANNZ ![0m
