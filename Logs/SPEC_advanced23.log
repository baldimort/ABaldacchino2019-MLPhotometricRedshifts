(21:06 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:06 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:06 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:06 INFO) [40;37;1m - 31/03/19 21:06:48 - starting ANNZ[0m
(21:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:06 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:06 INFO) 
[21:06:49    INFO]  -----------------------------------------------------
[21:06:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:06:49    INFO]  -----------------------------------------------------------------------------------------------------------
[21:06:53    INFO]  - starting inputToSplitTree() ... 
[21:06:54    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[21:06:54    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[21:06:54    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[21:06:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:06:54    INFO]  -- ANNZ_tree .......................................... 0  index
[21:06:54    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[21:06:54    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[21:06:54    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[21:06:54    INFO]  -- ANNZ_tree .......................................... 0  nTest
[21:06:54    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[21:06:54    INFO]  -----------------------------------------------------------------------------------------------------------
[21:06:55    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[21:06:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:06:55    INFO]  -- ANNZ_tree .......................................... 0  index
[21:06:55    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[21:06:55    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[21:06:55    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[21:06:55    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[21:06:55    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[21:06:55    INFO]  -----------------------------------------------------------------------------------------------------------
[21:06:56    INFO]  - Writing to plotting directory output/SPEC_advanced23/rootIn/plots/
[21:06:57    INFO]  - Writing to plotting directory output/SPEC_advanced23/rootIn/plots/

(21:06 INFO) [40;37;1m - 31/03/19 21:06:58 - finished running ANNZ ![0m
(21:06 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:06 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:06 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:06 INFO) [40;37;1m - 31/03/19 21:06:59 - starting ANNZ[0m
(21:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=50232:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:06 INFO) 
[21:06:59    INFO]  -----------------------------------------------------
[21:06:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:06:59    INFO]  -----------------------------------------------------------------------------------------------------------
[21:06:59    INFO]  - starting ANNZ::Init()  ... 
[21:07:00    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_0/saveOpt.txt ...
[21:07:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:07:05    INFO] ----------------------------------------------------------------------------------------------------
[21:07:05    INFO]  - will book (ANNZ_0) method(ANN) with options: :HiddenLayers=N+1,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=50232:VarTransform=N,P
[21:07:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:07:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:07:05    INFO]      cuts (train):        ,
[21:07:05    INFO]      cuts (valid):       
[21:07:05    INFO]    - weights:            1
[21:07:05    INFO] ----------------------------------------------------------------------------------------------------
[21:07:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:18:40    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[22:18:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[22:18:40    INFO]  - Will gen. input-parameter errors ...
[22:18:44    INFO]  - starting ANNZ::loadReaders() ... 
[22:18:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[22:19:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:19:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:19:14    INFO]  -----------------------------------------------------------------------------------------------------------
[22:19:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[22:19:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:19:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:19:22    INFO]  -----------------------------------------------------------------------------------------------------------
[22:19:22    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:19:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:19:22    INFO]  - will try to derive a bias correction ... 
[22:19:22    INFO]  - will validate that training produced an XML file for later ... 
[22:19:22    INFO]  - starting ANNZ::loadReaders() ... 
[22:19:22    INFO]  - will validate that the training was not a complete failure ... 
[22:19:22    INFO]  - training seems to have been successful! will move on ...
[22:19:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:19:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:19:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:19:25    INFO] ----------------------------------------------------------------------------------------------------
[22:19:25    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:19:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:19:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[22:19:25    INFO]    - weights:            1
[22:19:25    INFO] ----------------------------------------------------------------------------------------------------
[22:19:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:19:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[22:19:29    INFO]  - Will gen. input-parameter errors ...
[22:19:30    INFO]  - starting ANNZ::loadReaders() ... 
[22:19:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[22:20:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:20:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:20:30    INFO]  -----------------------------------------------------------------------------------------------------------
[22:20:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[22:20:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:20:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:20:44    INFO]  -----------------------------------------------------------------------------------------------------------
[22:20:44    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:20:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:20:45    INFO]  - will validate that the bias-correction actually improved the result ...
[22:20:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:20:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[22:20:48    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_0/plots/
[22:20:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_0/plots output/SPEC_advanced23/regres/train/ANNZ_0/plots_biasCor_before
[22:20:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:20:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[22:20:57    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_0/plots/
[22:21:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_0/plots output/SPEC_advanced23/regres/train/ANNZ_0/plots_biasCor_after
[22:21:03    INFO]  - Got original [KS-test,N_poiss]: [0.0426359 , 5.85132] , after the bias-correction: [0.0354522 , 5.59488] --> will KEEP the correction !

(22:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=22189:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:21 INFO) 
[22:21:05    INFO]  -----------------------------------------------------
[22:21:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:21:05    INFO]  -----------------------------------------------------------------------------------------------------------
[22:21:05    INFO]  - starting ANNZ::Init()  ... 
[22:21:07    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_1/saveOpt.txt ...
[22:21:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:21:12    INFO] ----------------------------------------------------------------------------------------------------
[22:21:12    INFO]  - will book (ANNZ_1) method(ANN) with options: :HiddenLayers=N,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=22189:VarTransform=N
[22:21:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:21:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[22:21:12    INFO]      cuts (train):        ,
[22:21:12    INFO]      cuts (valid):       
[22:21:12    INFO]    - weights:            1
[22:21:12    INFO] ----------------------------------------------------------------------------------------------------
[22:21:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:52:51    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[22:52:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[22:52:51    INFO]  - Will gen. input-parameter errors ...
[22:52:55    INFO]  - starting ANNZ::loadReaders() ... 
[22:52:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[22:53:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:53:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:53:13    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[22:53:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:53:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:53:18    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:18    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:53:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:53:18    INFO]  - will try to derive a bias correction ... 
[22:53:18    INFO]  - will validate that training produced an XML file for later ... 
[22:53:18    INFO]  - starting ANNZ::loadReaders() ... 
[22:53:18    INFO]  - will validate that the training was not a complete failure ... 
[22:53:18    INFO]  - training seems to have been successful! will move on ...
[22:53:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:53:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:53:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:53:21    INFO] ----------------------------------------------------------------------------------------------------
[22:53:21    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:53:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:53:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[22:53:21    INFO]    - weights:            1
[22:53:21    INFO] ----------------------------------------------------------------------------------------------------
[22:53:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:53:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[22:53:25    INFO]  - Will gen. input-parameter errors ...
[22:53:26    INFO]  - starting ANNZ::loadReaders() ... 
[22:53:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[22:54:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:54:10    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:54:10    INFO]  -----------------------------------------------------------------------------------------------------------
[22:54:10    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[22:54:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:54:21    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:54:21    INFO]  -----------------------------------------------------------------------------------------------------------
[22:54:22    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:54:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:54:22    INFO]  - will validate that the bias-correction actually improved the result ...
[22:54:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:54:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[22:54:25    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_1/plots/
[22:54:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_1/plots output/SPEC_advanced23/regres/train/ANNZ_1/plots_biasCor_before
[22:54:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:54:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[22:54:34    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_1/plots/
[22:54:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_1/plots output/SPEC_advanced23/regres/train/ANNZ_1/plots_biasCor_after
[22:54:40    INFO]  - Got original [KS-test,N_poiss]: [0.098465 , 7.37868] , after the bias-correction: [0.0708779 , 6.30699] --> will KEEP the correction !

(22:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=81770:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:54 INFO) 
[22:54:42    INFO]  -----------------------------------------------------
[22:54:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:54:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:54:42    INFO]  - starting ANNZ::Init()  ... 
[22:54:43    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_2/saveOpt.txt ...
[22:54:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:54:49    INFO] ----------------------------------------------------------------------------------------------------
[22:54:49    INFO]  - will book (ANNZ_2) method(ANN) with options: :HiddenLayers=N+3,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=81770:VarTransform=N
[22:54:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:54:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[22:54:49    INFO]      cuts (train):        ,
[22:54:49    INFO]      cuts (valid):       
[22:54:49    INFO]    - weights:            1
[22:54:49    INFO] ----------------------------------------------------------------------------------------------------
[22:54:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:01:35    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[00:01:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[00:01:36    INFO]  - Will gen. input-parameter errors ...
[00:01:39    INFO]  - starting ANNZ::loadReaders() ... 
[00:01:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[00:02:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:02:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:02:01    INFO]  -----------------------------------------------------------------------------------------------------------
[00:02:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[00:02:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:02:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:02:06    INFO]  -----------------------------------------------------------------------------------------------------------
[00:02:06    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:02:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:02:06    INFO]  - will try to derive a bias correction ... 
[00:02:06    INFO]  - will validate that training produced an XML file for later ... 
[00:02:06    INFO]  - starting ANNZ::loadReaders() ... 
[00:02:06    INFO]  - will validate that the training was not a complete failure ... 
[00:02:06    INFO]  - training seems to have been successful! will move on ...
[00:02:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:02:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:02:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:02:09    INFO] ----------------------------------------------------------------------------------------------------
[00:02:09    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:02:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:02:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:02:09    INFO]    - weights:            1
[00:02:09    INFO] ----------------------------------------------------------------------------------------------------
[00:02:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:02:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[00:02:13    INFO]  - Will gen. input-parameter errors ...
[00:02:14    INFO]  - starting ANNZ::loadReaders() ... 
[00:02:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[00:03:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:03:06    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[00:03:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:03:18    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:18    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:03:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:03:19    INFO]  - will validate that the bias-correction actually improved the result ...
[00:03:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:03:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[00:03:22    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_2/plots/
[00:03:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_2/plots output/SPEC_advanced23/regres/train/ANNZ_2/plots_biasCor_before
[00:03:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:03:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[00:03:31    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_2/plots/
[00:03:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_2/plots output/SPEC_advanced23/regres/train/ANNZ_2/plots_biasCor_after
[00:03:37    INFO]  - Got original [KS-test,N_poiss]: [0.0478153 , 6.01969] , after the bias-correction: [0.0437729 , 5.80699] --> will KEEP the correction !

(00:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+5,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=79626:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:03 INFO) 
[00:03:39    INFO]  -----------------------------------------------------
[00:03:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:03:39    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:39    INFO]  - starting ANNZ::Init()  ... 
[00:03:41    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_3/saveOpt.txt ...
[00:03:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:03:46    INFO] ----------------------------------------------------------------------------------------------------
[00:03:46    INFO]  - will book (ANNZ_3) method(ANN) with options: :HiddenLayers=N+1,N+5,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=79626:VarTransform=N,P
[00:03:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:03:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:03:46    INFO]      cuts (train):        ,
[00:03:46    INFO]      cuts (valid):       
[00:03:46    INFO]    - weights:            1
[00:03:46    INFO] ----------------------------------------------------------------------------------------------------
[00:03:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:20:23    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[00:20:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[00:20:23    INFO]  - Will gen. input-parameter errors ...
[00:20:27    INFO]  - starting ANNZ::loadReaders() ... 
[00:20:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[00:21:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:21:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:21:01    INFO]  -----------------------------------------------------------------------------------------------------------
[00:21:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[00:21:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:21:09    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:21:09    INFO]  -----------------------------------------------------------------------------------------------------------
[00:21:09    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:21:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:21:10    INFO]  - will try to derive a bias correction ... 
[00:21:10    INFO]  - will validate that training produced an XML file for later ... 
[00:21:10    INFO]  - starting ANNZ::loadReaders() ... 
[00:21:10    INFO]  - will validate that the training was not a complete failure ... 
[00:21:10    INFO]  - training seems to have been successful! will move on ...
[00:21:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:21:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:21:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:21:13    INFO] ----------------------------------------------------------------------------------------------------
[00:21:13    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:21:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:21:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:21:13    INFO]    - weights:            1
[00:21:13    INFO] ----------------------------------------------------------------------------------------------------
[00:21:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:21:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[00:21:16    INFO]  - Will gen. input-parameter errors ...
[00:21:17    INFO]  - starting ANNZ::loadReaders() ... 
[00:21:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[00:22:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:22:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:22:24    INFO]  -----------------------------------------------------------------------------------------------------------
[00:22:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[00:22:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:22:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:22:40    INFO]  -----------------------------------------------------------------------------------------------------------
[00:22:40    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:22:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:22:41    INFO]  - will validate that the bias-correction actually improved the result ...
[00:22:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:22:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[00:22:44    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_3/plots/
[00:22:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_3/plots output/SPEC_advanced23/regres/train/ANNZ_3/plots_biasCor_before
[00:22:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:22:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[00:22:53    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_3/plots/
[00:22:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_3/plots output/SPEC_advanced23/regres/train/ANNZ_3/plots_biasCor_after
[00:22:59    INFO]  - Got original [KS-test,N_poiss]: [0.0589787 , 6.51388] , after the bias-correction: [0.0389194 , 5.83813] --> will KEEP the correction !

(00:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=34921:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:23 INFO) 
[00:23:01    INFO]  -----------------------------------------------------
[00:23:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:23:01    INFO]  -----------------------------------------------------------------------------------------------------------
[00:23:01    INFO]  - starting ANNZ::Init()  ... 
[00:23:02    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_4/saveOpt.txt ...
[00:23:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:23:08    INFO] ----------------------------------------------------------------------------------------------------
[00:23:08    INFO]  - will book (ANNZ_4) method(ANN) with options: :HiddenLayers=N+4,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=34921:VarTransform=N,P
[00:23:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:23:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:23:08    INFO]      cuts (train):        ,
[00:23:08    INFO]      cuts (valid):       
[00:23:08    INFO]    - weights:            1
[00:23:08    INFO] ----------------------------------------------------------------------------------------------------
[00:23:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 1 diag elements < tolerance of 2.2204e-16
(09:19 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:19 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:19 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:19 INFO) [40;37;1m - 01/04/19 09:19:25 - starting ANNZ[0m
(09:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:19 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:19 INFO) 
[09:19:25    INFO]  -----------------------------------------------------
[09:19:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:19:25    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:29    INFO]  - starting inputToSplitTree() ... 
[09:19:29    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[09:19:29    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[09:19:29    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[09:19:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:19:30    INFO]  -- ANNZ_tree .......................................... 0  index
[09:19:30    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[09:19:30    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[09:19:30    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[09:19:30    INFO]  -- ANNZ_tree .......................................... 0  nTest
[09:19:30    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[09:19:30    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:30    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[09:19:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:19:30    INFO]  -- ANNZ_tree .......................................... 0  index
[09:19:30    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[09:19:30    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[09:19:30    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[09:19:30    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[09:19:30    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[09:19:30    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:31    INFO]  - Writing to plotting directory output/SPEC_advanced23/rootIn/plots/
[09:19:32    INFO]  - Writing to plotting directory output/SPEC_advanced23/rootIn/plots/

(09:19 INFO) [40;37;1m - 01/04/19 09:19:33 - finished running ANNZ ![0m
(09:19 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:19 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:19 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:19 INFO) [40;37;1m - 01/04/19 09:19:34 - starting ANNZ[0m
(09:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=97333:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:19 INFO) 
[09:19:34    INFO]  -----------------------------------------------------
[09:19:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:19:34    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:34    INFO]  - starting ANNZ::Init()  ... 
[09:19:34    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced23/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[09:19:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=81152:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:19 INFO) 
[09:19:34    INFO]  -----------------------------------------------------
[09:19:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:19:34    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:35    INFO]  - starting ANNZ::Init()  ... 
[09:19:35    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced23/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[09:19:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=13287:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:19 INFO) 
[09:19:35    INFO]  -----------------------------------------------------
[09:19:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:19:35    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:35    INFO]  - starting ANNZ::Init()  ... 
[09:19:35    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced23/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[09:19:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=12041:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:19 INFO) 
[09:19:35    INFO]  -----------------------------------------------------
[09:19:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:19:35    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:36    INFO]  - starting ANNZ::Init()  ... 
[09:19:36    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced23/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[09:19:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=99105:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:19 INFO) 
[09:19:36    INFO]  -----------------------------------------------------
[09:19:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:19:36    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:36    INFO]  - starting ANNZ::Init()  ... 
[09:19:37    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_4/saveOpt.txt ...
[09:19:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:19:42    INFO] ----------------------------------------------------------------------------------------------------
[09:19:42    INFO]  - will book (ANNZ_4) method(ANN) with options: :HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=99105:VarTransform=N
[09:19:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:19:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:19:42    INFO]      cuts (train):        ,
[09:19:42    INFO]      cuts (valid):       
[09:19:42    INFO]    - weights:            1
[09:19:42    INFO] ----------------------------------------------------------------------------------------------------
[09:19:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:30:20    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[09:30:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[09:30:21    INFO]  - Will gen. input-parameter errors ...
[09:30:24    INFO]  - starting ANNZ::loadReaders() ... 
[09:30:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[09:30:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:30:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:30:43    INFO]  -----------------------------------------------------------------------------------------------------------
[09:30:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[09:30:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:30:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:30:48    INFO]  -----------------------------------------------------------------------------------------------------------
[09:30:48    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:30:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:30:48    INFO]  - will try to derive a bias correction ... 
[09:30:48    INFO]  - will validate that training produced an XML file for later ... 
[09:30:48    INFO]  - starting ANNZ::loadReaders() ... 
[09:30:48    INFO]  - will validate that the training was not a complete failure ... 
[09:30:48    INFO]  - training seems to have been successful! will move on ...
[09:30:48    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:30:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:30:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:30:51    INFO] ----------------------------------------------------------------------------------------------------
[09:30:51    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:30:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:30:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:30:51    INFO]    - weights:            1
[09:30:51    INFO] ----------------------------------------------------------------------------------------------------
[09:30:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:30:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[09:30:55    INFO]  - Will gen. input-parameter errors ...
[09:30:56    INFO]  - starting ANNZ::loadReaders() ... 
[09:30:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[09:31:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:31:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:31:44    INFO]  -----------------------------------------------------------------------------------------------------------
[09:31:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[09:31:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:31:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:31:56    INFO]  -----------------------------------------------------------------------------------------------------------
[09:31:56    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:31:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:31:57    INFO]  - will validate that the bias-correction actually improved the result ...
[09:31:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:31:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[09:32:00    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_4/plots/
[09:32:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_4/plots output/SPEC_advanced23/regres/train/ANNZ_4/plots_biasCor_before
[09:32:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:32:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[09:32:09    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_4/plots/
[09:32:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_4/plots output/SPEC_advanced23/regres/train/ANNZ_4/plots_biasCor_after
[09:32:16    INFO]  - Got original [KS-test,N_poiss]: [0.0846408 , 7.09248] , after the bias-correction: [0.0532789 , 5.91014] --> will KEEP the correction !

(09:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=88578:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:32 INFO) 
[09:32:18    INFO]  -----------------------------------------------------
[09:32:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:32:18    INFO]  -----------------------------------------------------------------------------------------------------------
[09:32:18    INFO]  - starting ANNZ::Init()  ... 
[09:32:20    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_5/saveOpt.txt ...
[09:32:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:32:25    INFO] ----------------------------------------------------------------------------------------------------
[09:32:25    INFO]  - will book (ANNZ_5) method(ANN) with options: :HiddenLayers=N,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=88578:VarTransform=N,P
[09:32:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:32:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:32:25    INFO]      cuts (train):        ,
[09:32:25    INFO]      cuts (valid):       
[09:32:25    INFO]    - weights:            1
[09:32:25    INFO] ----------------------------------------------------------------------------------------------------
[09:32:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:57:44    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[09:57:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[09:57:45    INFO]  - Will gen. input-parameter errors ...
[09:57:49    INFO]  - starting ANNZ::loadReaders() ... 
[09:57:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[09:58:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:58:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:58:21    INFO]  -----------------------------------------------------------------------------------------------------------
[09:58:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[09:58:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:58:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:58:29    INFO]  -----------------------------------------------------------------------------------------------------------
[09:58:29    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:58:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:58:29    INFO]  - will try to derive a bias correction ... 
[09:58:29    INFO]  - will validate that training produced an XML file for later ... 
[09:58:29    INFO]  - starting ANNZ::loadReaders() ... 
[09:58:29    INFO]  - will validate that the training was not a complete failure ... 
[09:58:29    INFO]  - training seems to have been successful! will move on ...
[09:58:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:58:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:58:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:58:32    INFO] ----------------------------------------------------------------------------------------------------
[09:58:32    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:58:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:58:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:58:32    INFO]    - weights:            1
[09:58:32    INFO] ----------------------------------------------------------------------------------------------------
[09:58:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:58:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[09:58:36    INFO]  - Will gen. input-parameter errors ...
[09:58:37    INFO]  - starting ANNZ::loadReaders() ... 
[09:58:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[09:59:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:59:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:59:38    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[09:59:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:59:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:59:53    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:53    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:59:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:59:54    INFO]  - will validate that the bias-correction actually improved the result ...
[09:59:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:59:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[09:59:57    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_5/plots/
[10:00:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_5/plots output/SPEC_advanced23/regres/train/ANNZ_5/plots_biasCor_before
[10:00:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:00:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[10:00:06    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_5/plots/
[10:00:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_5/plots output/SPEC_advanced23/regres/train/ANNZ_5/plots_biasCor_after
[10:00:12    INFO]  - Got original [KS-test,N_poiss]: [0.0947591 , 7.63083] , after the bias-correction: [0.0575293 , 6.21857] --> will KEEP the correction !

(10:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+7,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=83429:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:00 INFO) 
[10:00:14    INFO]  -----------------------------------------------------
[10:00:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:00:14    INFO]  -----------------------------------------------------------------------------------------------------------
[10:00:15    INFO]  - starting ANNZ::Init()  ... 
[10:00:16    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_6/saveOpt.txt ...
[10:00:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:00:21    INFO] ----------------------------------------------------------------------------------------------------
[10:00:21    INFO]  - will book (ANNZ_6) method(ANN) with options: :HiddenLayers=N+1,N+7,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=83429:VarTransform=N,P
[10:00:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:00:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[10:00:21    INFO]      cuts (train):        ,
[10:00:21    INFO]      cuts (valid):       
[10:00:21    INFO]    - weights:            1
[10:00:21    INFO] ----------------------------------------------------------------------------------------------------
[10:00:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:15:36    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[11:15:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[11:15:37    INFO]  - Will gen. input-parameter errors ...
[11:15:40    INFO]  - starting ANNZ::loadReaders() ... 
[11:15:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[11:16:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:16:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:16:23    INFO]  -----------------------------------------------------------------------------------------------------------
[11:16:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[11:16:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:16:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:16:32    INFO]  -----------------------------------------------------------------------------------------------------------
[11:16:32    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:16:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:16:32    INFO]  - will try to derive a bias correction ... 
[11:16:32    INFO]  - will validate that training produced an XML file for later ... 
[11:16:32    INFO]  - starting ANNZ::loadReaders() ... 
[11:16:39    INFO]  - will validate that the training was not a complete failure ... 
[11:16:39    INFO]  - training seems to have been successful! will move on ...
[11:16:39    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:16:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:16:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:16:42    INFO] ----------------------------------------------------------------------------------------------------
[11:16:42    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:16:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:16:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:16:42    INFO]    - weights:            1
[11:16:42    INFO] ----------------------------------------------------------------------------------------------------
[11:16:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:16:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[11:16:46    INFO]  - Will gen. input-parameter errors ...
[11:16:47    INFO]  - starting ANNZ::loadReaders() ... 
[11:16:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[11:18:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:18:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:18:03    INFO]  -----------------------------------------------------------------------------------------------------------
[11:18:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[11:18:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:18:21    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:18:21    INFO]  -----------------------------------------------------------------------------------------------------------
[11:18:21    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:18:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:18:21    INFO]  - will validate that the bias-correction actually improved the result ...
[11:18:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:18:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[11:18:24    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_6/plots/
[11:18:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_6/plots output/SPEC_advanced23/regres/train/ANNZ_6/plots_biasCor_before
[11:18:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:18:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[11:18:33    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_6/plots/
[11:18:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_6/plots output/SPEC_advanced23/regres/train/ANNZ_6/plots_biasCor_after
[11:18:39    INFO]  - Got original [KS-test,N_poiss]: [0.0896873 , 7.40401] , after the bias-correction: [0.0571837 , 6.32325] --> will KEEP the correction !

(11:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=17898:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:18 INFO) 
[11:18:41    INFO]  -----------------------------------------------------
[11:18:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:18:41    INFO]  -----------------------------------------------------------------------------------------------------------
[11:18:42    INFO]  - starting ANNZ::Init()  ... 
[11:18:43    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_7/saveOpt.txt ...
[11:18:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:18:48    INFO] ----------------------------------------------------------------------------------------------------
[11:18:48    INFO]  - will book (ANNZ_7) method(ANN) with options: :HiddenLayers=N+4,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=17898:VarTransform=N
[11:18:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:18:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:18:48    INFO]      cuts (train):        ,
[11:18:48    INFO]      cuts (valid):       
[11:18:48    INFO]    - weights:            1
[11:18:48    INFO] ----------------------------------------------------------------------------------------------------
[11:18:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:01:34    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[14:01:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[14:01:34    INFO]  - Will gen. input-parameter errors ...
[14:01:39    INFO]  - starting ANNZ::loadReaders() ... 
[14:01:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[14:02:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:02:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:02:01    INFO]  -----------------------------------------------------------------------------------------------------------
[14:02:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[14:02:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:02:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:02:07    INFO]  -----------------------------------------------------------------------------------------------------------
[14:02:07    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:02:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:02:07    INFO]  - will try to derive a bias correction ... 
[14:02:07    INFO]  - will validate that training produced an XML file for later ... 
[14:02:07    INFO]  - starting ANNZ::loadReaders() ... 
[14:02:07    INFO]  - will validate that the training was not a complete failure ... 
[14:02:07    INFO]  - training seems to have been successful! will move on ...
[14:02:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:02:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:02:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:02:10    INFO] ----------------------------------------------------------------------------------------------------
[14:02:10    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:02:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:02:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:02:10    INFO]    - weights:            1
[14:02:10    INFO] ----------------------------------------------------------------------------------------------------
[14:02:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:02:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[14:02:14    INFO]  - Will gen. input-parameter errors ...
[14:02:16    INFO]  - starting ANNZ::loadReaders() ... 
[14:02:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[14:03:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:03:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:03:09    INFO]  -----------------------------------------------------------------------------------------------------------
[14:03:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[14:03:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:03:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:03:22    INFO]  -----------------------------------------------------------------------------------------------------------
[14:03:22    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:03:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:03:23    INFO]  - will validate that the bias-correction actually improved the result ...
[14:03:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:03:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[14:03:26    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_7/plots/
[14:03:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_7/plots output/SPEC_advanced23/regres/train/ANNZ_7/plots_biasCor_before
[14:03:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:03:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[14:03:35    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_7/plots/
[14:03:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_7/plots output/SPEC_advanced23/regres/train/ANNZ_7/plots_biasCor_after
[14:03:41    INFO]  - Got original [KS-test,N_poiss]: [0.0434047 , 5.85707] , after the bias-correction: [0.0384538 , 5.62091] --> will KEEP the correction !

(14:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=87274:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:03 INFO) 
[14:03:43    INFO]  -----------------------------------------------------
[14:03:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:03:43    INFO]  -----------------------------------------------------------------------------------------------------------
[14:03:43    INFO]  - starting ANNZ::Init()  ... 
[14:03:45    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_8/saveOpt.txt ...
[14:03:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:03:50    INFO] ----------------------------------------------------------------------------------------------------
[14:03:50    INFO]  - will book (ANNZ_8) method(ANN) with options: :HiddenLayers=N+3,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=87274:VarTransform=N,P
[14:03:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:03:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:03:50    INFO]      cuts (train):        ,
[14:03:50    INFO]      cuts (valid):       
[14:03:50    INFO]    - weights:            1
[14:03:50    INFO] ----------------------------------------------------------------------------------------------------
[14:03:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:43:08    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[15:43:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[15:43:08    INFO]  - Will gen. input-parameter errors ...
[15:43:11    INFO]  - starting ANNZ::loadReaders() ... 
[15:43:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[15:43:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:43:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:43:42    INFO]  -----------------------------------------------------------------------------------------------------------
[15:43:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[15:43:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:43:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:43:49    INFO]  -----------------------------------------------------------------------------------------------------------
[15:43:49    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:43:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:43:50    INFO]  - will try to derive a bias correction ... 
[15:43:50    INFO]  - will validate that training produced an XML file for later ... 
[15:43:50    INFO]  - starting ANNZ::loadReaders() ... 
[15:43:50    INFO]  - will validate that the training was not a complete failure ... 
[15:43:50    INFO]  - training seems to have been successful! will move on ...
[15:43:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:43:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:43:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:43:53    INFO] ----------------------------------------------------------------------------------------------------
[15:43:53    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:43:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:43:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:43:53    INFO]    - weights:            1
[15:43:53    INFO] ----------------------------------------------------------------------------------------------------
[15:43:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:43:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[15:43:57    INFO]  - Will gen. input-parameter errors ...
[15:43:58    INFO]  - starting ANNZ::loadReaders() ... 
[15:43:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[15:44:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:44:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:44:57    INFO]  -----------------------------------------------------------------------------------------------------------
[15:44:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[15:45:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:45:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:45:12    INFO]  -----------------------------------------------------------------------------------------------------------
[15:45:12    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:45:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:45:12    INFO]  - will validate that the bias-correction actually improved the result ...
[15:45:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:45:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[15:45:15    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_8/plots/
[15:45:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_8/plots output/SPEC_advanced23/regres/train/ANNZ_8/plots_biasCor_before
[15:45:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:45:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[15:45:24    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_8/plots/
[15:45:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_8/plots output/SPEC_advanced23/regres/train/ANNZ_8/plots_biasCor_after
[15:45:31    INFO]  - Got original [KS-test,N_poiss]: [0.0409378 , 6.05968] , after the bias-correction: [0.0343399 , 5.39358] --> will KEEP the correction !

(15:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=33427:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:45 INFO) 
[15:45:32    INFO]  -----------------------------------------------------
[15:45:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:45:32    INFO]  -----------------------------------------------------------------------------------------------------------
[15:45:33    INFO]  - starting ANNZ::Init()  ... 
[15:45:34    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_9/saveOpt.txt ...
[15:45:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:45:39    INFO] ----------------------------------------------------------------------------------------------------
[15:45:39    INFO]  - will book (ANNZ_9) method(ANN) with options: :HiddenLayers=N,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=33427:VarTransform=N,P
[15:45:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:45:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:45:39    INFO]      cuts (train):        ,
[15:45:39    INFO]      cuts (valid):       
[15:45:39    INFO]    - weights:            1
[15:45:39    INFO] ----------------------------------------------------------------------------------------------------
[15:45:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:59:28    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[15:59:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[15:59:29    INFO]  - Will gen. input-parameter errors ...
[15:59:32    INFO]  - starting ANNZ::loadReaders() ... 
[15:59:32    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[16:00:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:00:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:00:04    INFO]  -----------------------------------------------------------------------------------------------------------
[16:00:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[16:00:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:00:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:00:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:00:12    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:00:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:00:12    INFO]  - will try to derive a bias correction ... 
[16:00:12    INFO]  - will validate that training produced an XML file for later ... 
[16:00:12    INFO]  - starting ANNZ::loadReaders() ... 
[16:00:12    INFO]  - will validate that the training was not a complete failure ... 
[16:00:12    INFO]  - training seems to have been successful! will move on ...
[16:00:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:00:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:00:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:00:15    INFO] ----------------------------------------------------------------------------------------------------
[16:00:15    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:00:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:00:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:00:15    INFO]    - weights:            1
[16:00:15    INFO] ----------------------------------------------------------------------------------------------------
[16:00:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:00:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[16:00:19    INFO]  - Will gen. input-parameter errors ...
[16:00:20    INFO]  - starting ANNZ::loadReaders() ... 
[16:00:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[16:01:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:01:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:01:21    INFO]  -----------------------------------------------------------------------------------------------------------
[16:01:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[16:01:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:01:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:01:36    INFO]  -----------------------------------------------------------------------------------------------------------
[16:01:36    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:01:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:01:37    INFO]  - will validate that the bias-correction actually improved the result ...
[16:01:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:01:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[16:01:40    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_9/plots/
[16:01:46        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_9/plots output/SPEC_advanced23/regres/train/ANNZ_9/plots_biasCor_before
[16:01:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:01:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[16:01:49    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_9/plots/
[16:01:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_9/plots output/SPEC_advanced23/regres/train/ANNZ_9/plots_biasCor_after
[16:01:55    INFO]  - Got original [KS-test,N_poiss]: [0.099206 , 7.73237] , after the bias-correction: [0.0650153 , 6.49862] --> will KEEP the correction !

(16:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=2895:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:01 INFO) 
[16:01:57    INFO]  -----------------------------------------------------
[16:01:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:01:57    INFO]  -----------------------------------------------------------------------------------------------------------
[16:01:57    INFO]  - starting ANNZ::Init()  ... 
[16:01:59    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_10/saveOpt.txt ...
[16:02:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:02:04    INFO] ----------------------------------------------------------------------------------------------------
[16:02:04    INFO]  - will book (ANNZ_10) method(ANN) with options: :HiddenLayers=N,N+3,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=2895:VarTransform=N
[16:02:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:02:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:02:04    INFO]      cuts (train):        ,
[16:02:04    INFO]      cuts (valid):       
[16:02:04    INFO]    - weights:            1
[16:02:04    INFO] ----------------------------------------------------------------------------------------------------
[16:02:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 255 diag elements < tolerance of 2.2204e-16
(18:42 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:42 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:42 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:42 INFO) [40;37;1m - 01/04/19 18:42:52 - starting ANNZ[0m
(18:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:42 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:42 INFO) 
[18:42:52    INFO]  -----------------------------------------------------
[18:42:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:42:52    INFO]  -----------------------------------------------------------------------------------------------------------
(18:43 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:43 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:43 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:43 INFO) [40;37;1m - 01/04/19 18:43:05 - starting ANNZ[0m
(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=93272:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:06    INFO]  -----------------------------------------------------
[18:43:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:06    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:06    INFO]  - starting ANNZ::Init()  ... 
[18:43:06   ERROR]  - ... ------------------------------------------------------------ 
[18:43:06   ERROR]  - MESSAGE - Trying to access file "./output/SPEC_advanced23/rootIn/userOpts.txt" which doesn't exist ... 
[18:43:06   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 354 , (Mar 20 2019 13:34:48) 
[18:43:06   ERROR]  - ..... ABORTING !!! 
[18:43:06   ERROR]  ------------------------------------------------------------ ... - 
(18:43 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(18:43 CRITICAL) [41;37;1mWill terminate !!!![0m
(18:43 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:43 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:43 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:43 INFO) [40;37;1m - 01/04/19 18:43:21 - starting ANNZ[0m
(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=3658:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:21    INFO]  -----------------------------------------------------
[18:43:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:21    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:22    INFO]  - starting ANNZ::Init()  ... 
[18:43:22   ERROR]  - ... ------------------------------------------------------------ 
[18:43:22   ERROR]  - MESSAGE - Trying to access file "./output/SPEC_advanced23/rootIn/userOpts.txt" which doesn't exist ... 
[18:43:22   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 354 , (Mar 20 2019 13:34:48) 
[18:43:22   ERROR]  - ..... ABORTING !!! 
[18:43:22   ERROR]  ------------------------------------------------------------ ... - 
(18:43 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(18:43 CRITICAL) [41;37;1mWill terminate !!!![0m
(18:43 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:43 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:43 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:43 INFO) [40;37;1m - 01/04/19 18:43:33 - starting ANNZ[0m
(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=96558:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:33    INFO]  -----------------------------------------------------
[18:43:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:33    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:34    INFO]  - starting ANNZ::Init()  ... 
[18:43:34   ERROR]  - ... ------------------------------------------------------------ 
[18:43:34   ERROR]  - MESSAGE - Trying to access file "./output/SPEC_advanced23/rootIn/userOpts.txt" which doesn't exist ... 
[18:43:34   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 354 , (Mar 20 2019 13:34:48) 
[18:43:34   ERROR]  - ..... ABORTING !!! 
[18:43:34   ERROR]  ------------------------------------------------------------ ... - 
(18:43 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(18:43 CRITICAL) [41;37;1mWill terminate !!!![0m
(18:43 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:43 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:43 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:43 INFO) [40;37;1m - 01/04/19 18:43:39 - starting ANNZ[0m
(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:39    INFO]  -----------------------------------------------------
[18:43:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:39    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:40    INFO]  - starting inputToSplitTree() ... 
[18:43:40    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[18:43:40    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[18:43:40    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[18:43:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:43:41    INFO]  -- ANNZ_tree .......................................... 0  index
[18:43:41    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[18:43:41    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[18:43:41    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[18:43:41    INFO]  -- ANNZ_tree .......................................... 0  nTest
[18:43:41    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[18:43:41    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:41    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[18:43:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:43:42    INFO]  -- ANNZ_tree .......................................... 0  index
[18:43:42    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[18:43:42    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[18:43:42    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[18:43:42    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[18:43:42    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[18:43:42    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:42    INFO]  - Writing to plotting directory output/SPEC_advanced23/rootIn/plots/
[18:43:43    INFO]  - Writing to plotting directory output/SPEC_advanced23/rootIn/plots/

(18:43 INFO) [40;37;1m - 01/04/19 18:43:45 - finished running ANNZ ![0m
(18:43 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:43 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:43 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:43 INFO) [40;37;1m - 01/04/19 18:43:45 - starting ANNZ[0m
(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=13835:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:45    INFO]  -----------------------------------------------------
[18:43:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:45    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:45    INFO]  - starting ANNZ::Init()  ... 
[18:43:45    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced23/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[18:43:45    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=65636:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:45    INFO]  -----------------------------------------------------
[18:43:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:45    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:46    INFO]  - starting ANNZ::Init()  ... 
[18:43:46    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced23/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[18:43:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=99167:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:46    INFO]  -----------------------------------------------------
[18:43:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:46    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:47    INFO]  - starting ANNZ::Init()  ... 
[18:43:47    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced23/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[18:43:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=10070:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:47    INFO]  -----------------------------------------------------
[18:43:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:47    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:47    INFO]  - starting ANNZ::Init()  ... 
[18:43:47    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced23/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[18:43:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=16471:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:47    INFO]  -----------------------------------------------------
[18:43:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:47    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:48    INFO]  - starting ANNZ::Init()  ... 
[18:43:48    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced23/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[18:43:48    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=24864:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:48    INFO]  -----------------------------------------------------
[18:43:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:48    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:48    INFO]  - starting ANNZ::Init()  ... 
[18:43:48    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced23/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[18:43:48    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=59420:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:48    INFO]  -----------------------------------------------------
[18:43:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:48    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:49    INFO]  - starting ANNZ::Init()  ... 
[18:43:50    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced23/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[18:43:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=17367:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:50    INFO]  -----------------------------------------------------
[18:43:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:50    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:51    INFO]  - starting ANNZ::Init()  ... 
[18:43:51    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced23/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[18:43:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=10252:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:51    INFO]  -----------------------------------------------------
[18:43:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:51    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:51    INFO]  - starting ANNZ::Init()  ... 
[18:43:51    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced23/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[18:43:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=23454:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:51    INFO]  -----------------------------------------------------
[18:43:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:51    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:52    INFO]  - starting ANNZ::Init()  ... 
[18:43:52    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced23/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[18:43:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=10448:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:43 INFO) 
[18:43:52    INFO]  -----------------------------------------------------
[18:43:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:43:52    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:52    INFO]  - starting ANNZ::Init()  ... 
[18:43:53    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_10/saveOpt.txt ...
[18:43:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:43:58    INFO] ----------------------------------------------------------------------------------------------------
[18:43:58    INFO]  - will book (ANNZ_10) method(ANN) with options: :HiddenLayers=N+3,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=10448:VarTransform=N,P
[18:43:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:43:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:43:58    INFO]      cuts (train):        ,
[18:43:58    INFO]      cuts (valid):       
[18:43:58    INFO]    - weights:            1
[18:43:58    INFO] ----------------------------------------------------------------------------------------------------
[18:43:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:28:23    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[19:28:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[19:28:24    INFO]  - Will gen. input-parameter errors ...
[19:28:28    INFO]  - starting ANNZ::loadReaders() ... 
[19:28:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[19:28:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:28:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:28:59    INFO]  -----------------------------------------------------------------------------------------------------------
[19:28:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[19:29:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:29:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:29:06    INFO]  -----------------------------------------------------------------------------------------------------------
[19:29:07    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:29:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:29:07    INFO]  - will try to derive a bias correction ... 
[19:29:07    INFO]  - will validate that training produced an XML file for later ... 
[19:29:07    INFO]  - starting ANNZ::loadReaders() ... 
[19:29:07    INFO]  - will validate that the training was not a complete failure ... 
[19:29:07    INFO]  - training seems to have been successful! will move on ...
[19:29:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:29:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:29:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:29:10    INFO] ----------------------------------------------------------------------------------------------------
[19:29:10    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:29:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:29:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:29:10    INFO]    - weights:            1
[19:29:10    INFO] ----------------------------------------------------------------------------------------------------
[19:29:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:29:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[19:29:14    INFO]  - Will gen. input-parameter errors ...
[19:29:15    INFO]  - starting ANNZ::loadReaders() ... 
[19:29:16    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[19:30:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:30:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:30:17    INFO]  -----------------------------------------------------------------------------------------------------------
[19:30:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[19:30:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:30:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:30:32    INFO]  -----------------------------------------------------------------------------------------------------------
[19:30:32    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:30:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:30:32    INFO]  - will validate that the bias-correction actually improved the result ...
[19:30:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:30:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[19:30:35    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_10/plots/
[19:30:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_10/plots output/SPEC_advanced23/regres/train/ANNZ_10/plots_biasCor_before
[19:30:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:30:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[19:30:44    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_10/plots/
[19:30:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_10/plots output/SPEC_advanced23/regres/train/ANNZ_10/plots_biasCor_after
[19:30:51    INFO]  - Got original [KS-test,N_poiss]: [0.0638783 , 6.60624] , after the bias-correction: [0.0542071 , 6.03029] --> will KEEP the correction !

(19:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=54819:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:30 INFO) 
[19:30:53    INFO]  -----------------------------------------------------
[19:30:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:30:53    INFO]  -----------------------------------------------------------------------------------------------------------
[19:30:53    INFO]  - starting ANNZ::Init()  ... 
[19:30:54    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_11/saveOpt.txt ...
[19:30:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:30:59    INFO] ----------------------------------------------------------------------------------------------------
[19:30:59    INFO]  - will book (ANNZ_11) method(ANN) with options: :HiddenLayers=N,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=54819:VarTransform=N,P
[19:30:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:30:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:30:59    INFO]      cuts (train):        ,
[19:30:59    INFO]      cuts (valid):       
[19:30:59    INFO]    - weights:            1
[19:30:59    INFO] ----------------------------------------------------------------------------------------------------
[19:30:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 4 diag elements < tolerance of 2.2204e-16
(21:42 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:42 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:42 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:42 INFO) [40;37;1m - 01/04/19 21:42:49 - starting ANNZ[0m
(21:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:42 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:42 INFO) 
[21:42:49    INFO]  -----------------------------------------------------
[21:42:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:42:49    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:53    INFO]  - starting inputToSplitTree() ... 
[21:42:53    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[21:42:53    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[21:42:53    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[21:42:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:42:54    INFO]  -- ANNZ_tree .......................................... 0  index
[21:42:54    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[21:42:54    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[21:42:54    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[21:42:54    INFO]  -- ANNZ_tree .......................................... 0  nTest
[21:42:54    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[21:42:54    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:54    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[21:42:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:42:54    INFO]  -- ANNZ_tree .......................................... 0  index
[21:42:54    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[21:42:54    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[21:42:54    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[21:42:54    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[21:42:54    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[21:42:54    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:55    INFO]  - Writing to plotting directory output/SPEC_advanced23/rootIn/plots/
[21:42:56    INFO]  - Writing to plotting directory output/SPEC_advanced23/rootIn/plots/

(21:42 INFO) [40;37;1m - 01/04/19 21:42:57 - finished running ANNZ ![0m
(21:42 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:42 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:42 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:42 INFO) [40;37;1m - 01/04/19 21:42:57 - starting ANNZ[0m
(21:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=75335:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:42 INFO) 
[21:42:57    INFO]  -----------------------------------------------------
[21:42:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:42:57    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:58    INFO]  - starting ANNZ::Init()  ... 
[21:42:58    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced23/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[21:42:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=42770:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:42 INFO) 
[21:42:58    INFO]  -----------------------------------------------------
[21:42:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:42:58    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:59    INFO]  - starting ANNZ::Init()  ... 
[21:42:59    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced23/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[21:42:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=5962:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:42 INFO) 
[21:42:59    INFO]  -----------------------------------------------------
[21:42:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:42:59    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:59    INFO]  - starting ANNZ::Init()  ... 
[21:42:59    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced23/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[21:42:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=82797:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:42 INFO) 
[21:42:59    INFO]  -----------------------------------------------------
[21:42:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:42:59    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:00    INFO]  - starting ANNZ::Init()  ... 
[21:43:00    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced23/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[21:43:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=27129:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:43 INFO) 
[21:43:00    INFO]  -----------------------------------------------------
[21:43:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:00    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:00    INFO]  - starting ANNZ::Init()  ... 
[21:43:00    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced23/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[21:43:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=58322:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:43 INFO) 
[21:43:00    INFO]  -----------------------------------------------------
[21:43:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:00    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:01    INFO]  - starting ANNZ::Init()  ... 
[21:43:01    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced23/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[21:43:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=42799:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:43 INFO) 
[21:43:01    INFO]  -----------------------------------------------------
[21:43:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:01    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:01    INFO]  - starting ANNZ::Init()  ... 
[21:43:03    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced23/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[21:43:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=87697:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:43 INFO) 
[21:43:03    INFO]  -----------------------------------------------------
[21:43:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:03    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:03    INFO]  - starting ANNZ::Init()  ... 
[21:43:03    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced23/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[21:43:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=51847:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:43 INFO) 
[21:43:03    INFO]  -----------------------------------------------------
[21:43:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:03    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:04    INFO]  - starting ANNZ::Init()  ... 
[21:43:04    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced23/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[21:43:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=77395:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:43 INFO) 
[21:43:04    INFO]  -----------------------------------------------------
[21:43:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:04    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:04    INFO]  - starting ANNZ::Init()  ... 
[21:43:04    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced23/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[21:43:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=32802:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:43 INFO) 
[21:43:04    INFO]  -----------------------------------------------------
[21:43:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:04    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:05    INFO]  - starting ANNZ::Init()  ... 
[21:43:05    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced23/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[21:43:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=89269:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:43 INFO) 
[21:43:05    INFO]  -----------------------------------------------------
[21:43:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:05    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:06    INFO]  - starting ANNZ::Init()  ... 
[21:43:07    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_11/saveOpt.txt ...
[21:43:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:43:12    INFO] ----------------------------------------------------------------------------------------------------
[21:43:12    INFO]  - will book (ANNZ_11) method(ANN) with options: :HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=89269:VarTransform=N,P
[21:43:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:43:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:43:12    INFO]      cuts (train):        ,
[21:43:12    INFO]      cuts (valid):       
[21:43:12    INFO]    - weights:            1
[21:43:12    INFO] ----------------------------------------------------------------------------------------------------
[21:43:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:19:42    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[22:19:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[22:19:42    INFO]  - Will gen. input-parameter errors ...
[22:19:45    INFO]  - starting ANNZ::loadReaders() ... 
[22:19:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[22:20:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:20:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:20:19    INFO]  -----------------------------------------------------------------------------------------------------------
[22:20:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[22:20:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:20:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:20:27    INFO]  -----------------------------------------------------------------------------------------------------------
[22:20:27    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:20:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:20:28    INFO]  - will try to derive a bias correction ... 
[22:20:28    INFO]  - will validate that training produced an XML file for later ... 
[22:20:28    INFO]  - starting ANNZ::loadReaders() ... 
[22:20:28    INFO]  - will validate that the training was not a complete failure ... 
[22:20:28    INFO]  - training seems to have been successful! will move on ...
[22:20:28    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:20:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:20:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:20:31    INFO] ----------------------------------------------------------------------------------------------------
[22:20:31    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:20:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:20:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[22:20:31    INFO]    - weights:            1
[22:20:31    INFO] ----------------------------------------------------------------------------------------------------
[22:20:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:20:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[22:20:35    INFO]  - Will gen. input-parameter errors ...
[22:20:36    INFO]  - starting ANNZ::loadReaders() ... 
[22:20:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[22:21:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:21:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:21:41    INFO]  -----------------------------------------------------------------------------------------------------------
[22:21:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[22:21:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:21:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:21:57    INFO]  -----------------------------------------------------------------------------------------------------------
[22:21:57    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:21:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:21:57    INFO]  - will validate that the bias-correction actually improved the result ...
[22:21:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:21:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[22:22:01    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_11/plots/
[22:22:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_11/plots output/SPEC_advanced23/regres/train/ANNZ_11/plots_biasCor_before
[22:22:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:22:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[22:22:10    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_11/plots/
[22:22:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_11/plots output/SPEC_advanced23/regres/train/ANNZ_11/plots_biasCor_after
[22:22:16    INFO]  - Got original [KS-test,N_poiss]: [0.0486823 , 6.05541] , after the bias-correction: [0.042836 , 5.93118] --> will KEEP the correction !

(22:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=6758:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:22 INFO) 
[22:22:18    INFO]  -----------------------------------------------------
[22:22:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:22:18    INFO]  -----------------------------------------------------------------------------------------------------------
[22:22:19    INFO]  - starting ANNZ::Init()  ... 
[22:22:21    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_12/saveOpt.txt ...
[22:22:26    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:22:26    INFO] ----------------------------------------------------------------------------------------------------
[22:22:26    INFO]  - will book (ANNZ_12) method(ANN) with options: :HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=6758:VarTransform=N
[22:22:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:22:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[22:22:26    INFO]      cuts (train):        ,
[22:22:26    INFO]      cuts (valid):       
[22:22:26    INFO]    - weights:            1
[22:22:26    INFO] ----------------------------------------------------------------------------------------------------
[22:22:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:27:51    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[23:27:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[23:27:52    INFO]  - Will gen. input-parameter errors ...
[23:27:55    INFO]  - starting ANNZ::loadReaders() ... 
[23:27:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[23:28:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:28:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:28:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:28:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[23:28:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:28:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:28:19    INFO]  -----------------------------------------------------------------------------------------------------------
[23:28:19    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:28:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:28:19    INFO]  - will try to derive a bias correction ... 
[23:28:19    INFO]  - will validate that training produced an XML file for later ... 
[23:28:19    INFO]  - starting ANNZ::loadReaders() ... 
[23:28:19    INFO]  - will validate that the training was not a complete failure ... 
[23:28:20    INFO]  - training seems to have been successful! will move on ...
[23:28:20    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:28:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:28:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:28:23    INFO] ----------------------------------------------------------------------------------------------------
[23:28:23    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:28:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:28:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:28:23    INFO]    - weights:            1
[23:28:23    INFO] ----------------------------------------------------------------------------------------------------
[23:28:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:28:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[23:28:26    INFO]  - Will gen. input-parameter errors ...
[23:28:28    INFO]  - starting ANNZ::loadReaders() ... 
[23:28:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[23:29:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:29:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:29:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:29:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[23:29:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:29:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:29:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:29:28    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:29:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:29:29    INFO]  - will validate that the bias-correction actually improved the result ...
[23:29:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:29:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[23:29:32    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_12/plots/
[23:29:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_12/plots output/SPEC_advanced23/regres/train/ANNZ_12/plots_biasCor_before
[23:29:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:29:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[23:29:41    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_12/plots/
[23:29:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_12/plots output/SPEC_advanced23/regres/train/ANNZ_12/plots_biasCor_after
[23:29:47    INFO]  - Got original [KS-test,N_poiss]: [0.0418232 , 6.17357] , after the bias-correction: [0.0341248 , 5.7084] --> will KEEP the correction !

(23:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=52726:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:29 INFO) 
[23:29:49    INFO]  -----------------------------------------------------
[23:29:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:29:49    INFO]  -----------------------------------------------------------------------------------------------------------
[23:29:50    INFO]  - starting ANNZ::Init()  ... 
[23:29:51    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_13/saveOpt.txt ...
[23:29:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:29:56    INFO] ----------------------------------------------------------------------------------------------------
[23:29:56    INFO]  - will book (ANNZ_13) method(ANN) with options: :HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=52726:VarTransform=N,P
[23:29:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:29:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:29:56    INFO]      cuts (train):        ,
[23:29:56    INFO]      cuts (valid):       
[23:29:56    INFO]    - weights:            1
[23:29:56    INFO] ----------------------------------------------------------------------------------------------------
[23:29:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:59:29    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[23:59:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[23:59:29    INFO]  - Will gen. input-parameter errors ...
[23:59:34    INFO]  - starting ANNZ::loadReaders() ... 
[23:59:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[00:00:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:00:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:00:04    INFO]  -----------------------------------------------------------------------------------------------------------
[00:00:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[00:00:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:00:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:00:12    INFO]  -----------------------------------------------------------------------------------------------------------
[00:00:12    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:00:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:00:12    INFO]  - will try to derive a bias correction ... 
[00:00:12    INFO]  - will validate that training produced an XML file for later ... 
[00:00:12    INFO]  - starting ANNZ::loadReaders() ... 
[00:00:12    INFO]  - will validate that the training was not a complete failure ... 
[00:00:12    INFO]  - training seems to have been successful! will move on ...
[00:00:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:00:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:00:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:00:15    INFO] ----------------------------------------------------------------------------------------------------
[00:00:15    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:00:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:00:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:00:15    INFO]    - weights:            1
[00:00:15    INFO] ----------------------------------------------------------------------------------------------------
[00:00:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:00:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[00:00:19    INFO]  - Will gen. input-parameter errors ...
[00:00:20    INFO]  - starting ANNZ::loadReaders() ... 
[00:00:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[00:01:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:01:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:01:20    INFO]  -----------------------------------------------------------------------------------------------------------
[00:01:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[00:01:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:01:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:01:35    INFO]  -----------------------------------------------------------------------------------------------------------
[00:01:35    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:01:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:01:35    INFO]  - will validate that the bias-correction actually improved the result ...
[00:01:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:01:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[00:01:38    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_13/plots/
[00:01:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_13/plots output/SPEC_advanced23/regres/train/ANNZ_13/plots_biasCor_before
[00:01:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:01:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[00:01:47    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_13/plots/
[00:01:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_13/plots output/SPEC_advanced23/regres/train/ANNZ_13/plots_biasCor_after
[00:01:54    INFO]  - Got original [KS-test,N_poiss]: [0.068604 , 7.36834] , after the bias-correction: [0.0485406 , 6.07697] --> will KEEP the correction !

(00:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=93027:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:01 INFO) 
[00:01:55    INFO]  -----------------------------------------------------
[00:01:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:01:55    INFO]  -----------------------------------------------------------------------------------------------------------
[00:01:56    INFO]  - starting ANNZ::Init()  ... 
[00:01:57    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_14/saveOpt.txt ...
[00:02:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:02:02    INFO] ----------------------------------------------------------------------------------------------------
[00:02:02    INFO]  - will book (ANNZ_14) method(ANN) with options: :HiddenLayers=N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=93027:VarTransform=N,P
[00:02:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:02:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:02:02    INFO]      cuts (train):        ,
[00:02:02    INFO]      cuts (valid):       
[00:02:02    INFO]    - weights:            1
[00:02:02    INFO] ----------------------------------------------------------------------------------------------------
[00:02:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:10:37    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[17:10:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[17:10:38    INFO]  - Will gen. input-parameter errors ...
[17:10:41    INFO]  - starting ANNZ::loadReaders() ... 
[17:10:44    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[17:11:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:11:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:11:15    INFO]  -----------------------------------------------------------------------------------------------------------
[17:11:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[17:11:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:11:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:11:23    INFO]  -----------------------------------------------------------------------------------------------------------
[17:11:23    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:11:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:11:24    INFO]  - will try to derive a bias correction ... 
[17:11:24    INFO]  - will validate that training produced an XML file for later ... 
[17:11:24    INFO]  - starting ANNZ::loadReaders() ... 
[17:11:26    INFO]  - will validate that the training was not a complete failure ... 
[17:11:26    INFO]  - training seems to have been successful! will move on ...
[17:11:26    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:11:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:11:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:11:29    INFO] ----------------------------------------------------------------------------------------------------
[17:11:29    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:11:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:11:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:11:29    INFO]    - weights:            1
[17:11:29    INFO] ----------------------------------------------------------------------------------------------------
[17:11:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:11:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[17:11:33    INFO]  - Will gen. input-parameter errors ...
[17:11:34    INFO]  - starting ANNZ::loadReaders() ... 
[17:11:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[17:12:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:12:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:12:38    INFO]  -----------------------------------------------------------------------------------------------------------
[17:12:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[17:12:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:12:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:12:54    INFO]  -----------------------------------------------------------------------------------------------------------
[17:12:54    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:12:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:12:54    INFO]  - will validate that the bias-correction actually improved the result ...
[17:12:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:12:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[17:12:57    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_14/plots/
[17:13:04        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_14/plots output/SPEC_advanced23/regres/train/ANNZ_14/plots_biasCor_before
[17:13:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:13:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[17:13:06    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_14/plots/
[17:13:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_14/plots output/SPEC_advanced23/regres/train/ANNZ_14/plots_biasCor_after
[17:13:13    INFO]  - Got original [KS-test,N_poiss]: [0.0461266 , 5.7428] , after the bias-correction: [0.0387292 , 5.5984] --> will KEEP the correction !

(17:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=95604:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:13 INFO) 
[17:13:15    INFO]  -----------------------------------------------------
[17:13:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:13:15    INFO]  -----------------------------------------------------------------------------------------------------------
[17:13:15    INFO]  - starting ANNZ::Init()  ... 
[17:13:16    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_15/saveOpt.txt ...
[17:13:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:13:21    INFO] ----------------------------------------------------------------------------------------------------
[17:13:21    INFO]  - will book (ANNZ_15) method(ANN) with options: :HiddenLayers=N+4,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=95604:VarTransform=N,P
[17:13:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:13:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:13:21    INFO]      cuts (train):        ,
[17:13:21    INFO]      cuts (valid):       
[17:13:21    INFO]    - weights:            1
[17:13:21    INFO] ----------------------------------------------------------------------------------------------------
[17:13:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:41:14    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[10:41:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[10:41:14    INFO]  - Will gen. input-parameter errors ...
[10:41:18    INFO]  - starting ANNZ::loadReaders() ... 
[10:41:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[10:41:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:41:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:41:53    INFO]  -----------------------------------------------------------------------------------------------------------
[10:41:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[10:42:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:42:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:42:01    INFO]  -----------------------------------------------------------------------------------------------------------
[10:42:01    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:42:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:42:01    INFO]  - will try to derive a bias correction ... 
[10:42:01    INFO]  - will validate that training produced an XML file for later ... 
[10:42:01    INFO]  - starting ANNZ::loadReaders() ... 
[10:42:03    INFO]  - will validate that the training was not a complete failure ... 
[10:42:04    INFO]  - training seems to have been successful! will move on ...
[10:42:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:42:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:42:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:42:07    INFO] ----------------------------------------------------------------------------------------------------
[10:42:07    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:42:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:42:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:42:07    INFO]    - weights:            1
[10:42:07    INFO] ----------------------------------------------------------------------------------------------------
[10:42:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:42:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[10:42:10    INFO]  - Will gen. input-parameter errors ...
[10:42:11    INFO]  - starting ANNZ::loadReaders() ... 
[10:42:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[10:43:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:43:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:43:16    INFO]  -----------------------------------------------------------------------------------------------------------
[10:43:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[10:43:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:43:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:43:31    INFO]  -----------------------------------------------------------------------------------------------------------
[10:43:31    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:43:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:43:32    INFO]  - will validate that the bias-correction actually improved the result ...
[10:43:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:43:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[10:43:35    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_15/plots/
[10:43:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_15/plots output/SPEC_advanced23/regres/train/ANNZ_15/plots_biasCor_before
[10:43:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:43:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[10:43:44    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_15/plots/
[10:43:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_15/plots output/SPEC_advanced23/regres/train/ANNZ_15/plots_biasCor_after
[10:43:50    INFO]  - Got original [KS-test,N_poiss]: [0.0463278 , 5.7441] , after the bias-correction: [0.0383587 , 5.44551] --> will KEEP the correction !

(10:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=68464:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:43 INFO) 
[10:43:52    INFO]  -----------------------------------------------------
[10:43:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:43:52    INFO]  -----------------------------------------------------------------------------------------------------------
[10:43:53    INFO]  - starting ANNZ::Init()  ... 
[10:43:54    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_16/saveOpt.txt ...
[10:43:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:43:59    INFO] ----------------------------------------------------------------------------------------------------
[10:43:59    INFO]  - will book (ANNZ_16) method(ANN) with options: :HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=68464:VarTransform=N,P
[10:43:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:43:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[10:43:59    INFO]      cuts (train):        ,
[10:43:59    INFO]      cuts (valid):       
[10:43:59    INFO]    - weights:            1
[10:43:59    INFO] ----------------------------------------------------------------------------------------------------
[10:43:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:55:36    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[12:55:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[12:55:37    INFO]  - Will gen. input-parameter errors ...
[12:55:38    INFO]  - starting ANNZ::loadReaders() ... 
[12:55:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[12:56:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:56:09    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[12:56:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:56:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:17    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:56:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:56:17    INFO]  - will try to derive a bias correction ... 
[12:56:17    INFO]  - will validate that training produced an XML file for later ... 
[12:56:17    INFO]  - starting ANNZ::loadReaders() ... 
[12:56:17    INFO]  - will validate that the training was not a complete failure ... 
[12:56:17    INFO]  - training seems to have been successful! will move on ...
[12:56:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:56:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:56:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:56:20    INFO] ----------------------------------------------------------------------------------------------------
[12:56:20    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:56:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:56:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:56:20    INFO]    - weights:            1
[12:56:20    INFO] ----------------------------------------------------------------------------------------------------
[12:56:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:56:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[12:56:24    INFO]  - Will gen. input-parameter errors ...
[12:56:25    INFO]  - starting ANNZ::loadReaders() ... 
[12:56:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[12:57:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:57:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:57:26    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[12:57:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:57:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:57:41    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:42    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:57:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:57:42    INFO]  - will validate that the bias-correction actually improved the result ...
[12:57:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:57:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[12:57:45    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_16/plots/
[12:57:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_16/plots output/SPEC_advanced23/regres/train/ANNZ_16/plots_biasCor_before
[12:57:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:57:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[12:57:55    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_16/plots/
[12:58:01        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_16/plots output/SPEC_advanced23/regres/train/ANNZ_16/plots_biasCor_after
[12:58:01    INFO]  - Got original [KS-test,N_poiss]: [0.0404221 , 6.14713] , after the bias-correction: [0.0328176 , 5.69662] --> will KEEP the correction !

(12:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=77862:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:58 INFO) 
[12:58:03    INFO]  -----------------------------------------------------
[12:58:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:58:03    INFO]  -----------------------------------------------------------------------------------------------------------
[12:58:04    INFO]  - starting ANNZ::Init()  ... 
[12:58:05    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_17/saveOpt.txt ...
[12:58:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:58:10    INFO] ----------------------------------------------------------------------------------------------------
[12:58:10    INFO]  - will book (ANNZ_17) method(ANN) with options: :HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=77862:VarTransform=N,P
[12:58:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:58:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:58:10    INFO]      cuts (train):        ,
[12:58:10    INFO]      cuts (valid):       
[12:58:10    INFO]    - weights:            1
[12:58:10    INFO] ----------------------------------------------------------------------------------------------------
[12:58:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:11:16    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[13:11:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[13:11:17    INFO]  - Will gen. input-parameter errors ...
[13:11:20    INFO]  - starting ANNZ::loadReaders() ... 
[13:11:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[13:11:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:11:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:11:54    INFO]  -----------------------------------------------------------------------------------------------------------
[13:11:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[13:12:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:12:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:12:02    INFO]  -----------------------------------------------------------------------------------------------------------
[13:12:02    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:12:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:12:02    INFO]  - will try to derive a bias correction ... 
[13:12:02    INFO]  - will validate that training produced an XML file for later ... 
[13:12:02    INFO]  - starting ANNZ::loadReaders() ... 
[13:12:02    INFO]  - will validate that the training was not a complete failure ... 
[13:12:02    INFO]  - training seems to have been successful! will move on ...
[13:12:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:12:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:12:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:12:05    INFO] ----------------------------------------------------------------------------------------------------
[13:12:05    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:12:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:12:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:12:05    INFO]    - weights:            1
[13:12:05    INFO] ----------------------------------------------------------------------------------------------------
[13:12:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:12:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[13:12:08    INFO]  - Will gen. input-parameter errors ...
[13:12:10    INFO]  - starting ANNZ::loadReaders() ... 
[13:12:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[13:13:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:13:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:13:11    INFO]  -----------------------------------------------------------------------------------------------------------
[13:13:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[13:13:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:13:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:13:26    INFO]  -----------------------------------------------------------------------------------------------------------
[13:13:26    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:13:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:13:27    INFO]  - will validate that the bias-correction actually improved the result ...
[13:13:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:13:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[13:13:30    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_17/plots/
[13:13:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_17/plots output/SPEC_advanced23/regres/train/ANNZ_17/plots_biasCor_before
[13:13:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:13:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[13:13:39    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_17/plots/
[13:13:46        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_17/plots output/SPEC_advanced23/regres/train/ANNZ_17/plots_biasCor_after
[13:13:46    INFO]  - Got original [KS-test,N_poiss]: [0.0669277 , 7.17729] , after the bias-correction: [0.0484284 , 5.80273] --> will KEEP the correction !

(13:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=70881:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:13 INFO) 
[13:13:47    INFO]  -----------------------------------------------------
[13:13:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:13:47    INFO]  -----------------------------------------------------------------------------------------------------------
[13:13:48    INFO]  - starting ANNZ::Init()  ... 
[13:13:49    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_18/saveOpt.txt ...
[13:13:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:13:55    INFO] ----------------------------------------------------------------------------------------------------
[13:13:55    INFO]  - will book (ANNZ_18) method(ANN) with options: :HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=70881:VarTransform=N
[13:13:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:13:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:13:55    INFO]      cuts (train):        ,
[13:13:55    INFO]      cuts (valid):       
[13:13:55    INFO]    - weights:            1
[13:13:55    INFO] ----------------------------------------------------------------------------------------------------
[13:13:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::DecomposeLUCrout>: matrix is singular
Error in <TDecompLU::InvertLU>: matrix is singular, 593 diag elements < tolerance of 2.2204e-16
[13:24:19    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[13:24:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[13:24:19    INFO]  - Will gen. input-parameter errors ...
[13:24:23    INFO]  - starting ANNZ::loadReaders() ... 
[13:24:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[13:24:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:24:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:24:45    INFO]  -----------------------------------------------------------------------------------------------------------
[13:24:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[13:24:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:24:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:24:50    INFO]  -----------------------------------------------------------------------------------------------------------
[13:24:50    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:24:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:24:50    INFO]  - will try to derive a bias correction ... 
[13:24:50    INFO]  - will validate that training produced an XML file for later ... 
[13:24:50    INFO]  - starting ANNZ::loadReaders() ... 
[13:24:52    INFO]  - will validate that the training was not a complete failure ... 
[13:24:52    INFO]  - training seems to have been successful! will move on ...
[13:24:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:24:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:24:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:24:55    INFO] ----------------------------------------------------------------------------------------------------
[13:24:55    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:24:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:24:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:24:55    INFO]    - weights:            1
[13:24:55    INFO] ----------------------------------------------------------------------------------------------------
[13:24:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:24:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[13:24:59    INFO]  - Will gen. input-parameter errors ...
[13:25:00    INFO]  - starting ANNZ::loadReaders() ... 
[13:25:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[13:25:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:25:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:25:51    INFO]  -----------------------------------------------------------------------------------------------------------
[13:25:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[13:26:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:26:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:26:03    INFO]  -----------------------------------------------------------------------------------------------------------
[13:26:03    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:26:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:26:03    INFO]  - will validate that the bias-correction actually improved the result ...
[13:26:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:26:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[13:26:06    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_18/plots/
[13:26:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_18/plots output/SPEC_advanced23/regres/train/ANNZ_18/plots_biasCor_before
[13:26:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:26:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[13:26:15    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_18/plots/
[13:26:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_18/plots output/SPEC_advanced23/regres/train/ANNZ_18/plots_biasCor_after
[13:26:22    INFO]  - Got original [KS-test,N_poiss]: [0.112385 , 7.77808] , after the bias-correction: [0.0699732 , 6.09547] --> will KEEP the correction !

(13:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=11967:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:26 INFO) 
[13:26:24    INFO]  -----------------------------------------------------
[13:26:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:26:24    INFO]  -----------------------------------------------------------------------------------------------------------
[13:26:25    INFO]  - starting ANNZ::Init()  ... 
[13:26:26    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_19/saveOpt.txt ...
[13:26:31    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:26:31    INFO] ----------------------------------------------------------------------------------------------------
[13:26:31    INFO]  - will book (ANNZ_19) method(ANN) with options: :HiddenLayers=N+4,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=11967:VarTransform=N
[13:26:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:26:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:26:31    INFO]      cuts (train):        ,
[13:26:31    INFO]      cuts (valid):       
[13:26:31    INFO]    - weights:            1
[13:26:31    INFO] ----------------------------------------------------------------------------------------------------
[13:26:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:56:33    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[13:56:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[13:56:33    INFO]  - Will gen. input-parameter errors ...
[13:56:37    INFO]  - starting ANNZ::loadReaders() ... 
[13:56:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[13:56:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:56:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:56:58    INFO]  -----------------------------------------------------------------------------------------------------------
[13:56:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[13:57:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:57:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:57:03    INFO]  -----------------------------------------------------------------------------------------------------------
[13:57:03    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:57:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:57:04    INFO]  - will try to derive a bias correction ... 
[13:57:04    INFO]  - will validate that training produced an XML file for later ... 
[13:57:04    INFO]  - starting ANNZ::loadReaders() ... 
[13:57:04    INFO]  - will validate that the training was not a complete failure ... 
[13:57:04    INFO]  - training seems to have been successful! will move on ...
[13:57:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:57:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:57:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:57:07    INFO] ----------------------------------------------------------------------------------------------------
[13:57:07    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:57:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:57:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:57:07    INFO]    - weights:            1
[13:57:07    INFO] ----------------------------------------------------------------------------------------------------
[13:57:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:57:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[13:57:11    INFO]  - Will gen. input-parameter errors ...
[13:57:12    INFO]  - starting ANNZ::loadReaders() ... 
[13:57:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[13:58:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:58:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:58:01    INFO]  -----------------------------------------------------------------------------------------------------------
[13:58:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[13:58:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:58:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:58:13    INFO]  -----------------------------------------------------------------------------------------------------------
[13:58:13    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:58:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:58:13    INFO]  - will validate that the bias-correction actually improved the result ...
[13:58:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:58:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[13:58:16    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_19/plots/
[13:58:23        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_19/plots output/SPEC_advanced23/regres/train/ANNZ_19/plots_biasCor_before
[13:58:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:58:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[13:58:25    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_19/plots/
[13:58:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_19/plots output/SPEC_advanced23/regres/train/ANNZ_19/plots_biasCor_after
[13:58:31    INFO]  - Got original [KS-test,N_poiss]: [0.0601125 , 7.01007] , after the bias-correction: [0.0472916 , 5.90389] --> will KEEP the correction !

(13:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=83573:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:58 INFO) 
[13:58:33    INFO]  -----------------------------------------------------
[13:58:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:58:33    INFO]  -----------------------------------------------------------------------------------------------------------
[13:58:34    INFO]  - starting ANNZ::Init()  ... 
[13:58:35    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_20/saveOpt.txt ...
[13:58:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:58:40    INFO] ----------------------------------------------------------------------------------------------------
[13:58:40    INFO]  - will book (ANNZ_20) method(ANN) with options: :HiddenLayers=N+2,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=83573:VarTransform=N,P
[13:58:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:58:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:58:40    INFO]      cuts (train):        ,
[13:58:40    INFO]      cuts (valid):       
[13:58:40    INFO]    - weights:            1
[13:58:40    INFO] ----------------------------------------------------------------------------------------------------
[13:58:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:10:51    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[14:10:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[14:10:52    INFO]  - Will gen. input-parameter errors ...
[14:10:56    INFO]  - starting ANNZ::loadReaders() ... 
[14:10:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[14:11:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:11:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:11:28    INFO]  -----------------------------------------------------------------------------------------------------------
[14:11:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[14:11:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:11:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:11:35    INFO]  -----------------------------------------------------------------------------------------------------------
[14:11:35    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:11:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:11:36    INFO]  - will try to derive a bias correction ... 
[14:11:36    INFO]  - will validate that training produced an XML file for later ... 
[14:11:36    INFO]  - starting ANNZ::loadReaders() ... 
[14:11:38    INFO]  - will validate that the training was not a complete failure ... 
[14:11:38    INFO]  - training seems to have been successful! will move on ...
[14:11:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:11:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:11:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:11:41    INFO] ----------------------------------------------------------------------------------------------------
[14:11:41    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:11:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:11:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:11:41    INFO]    - weights:            1
[14:11:41    INFO] ----------------------------------------------------------------------------------------------------
[14:11:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:11:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[14:11:45    INFO]  - Will gen. input-parameter errors ...
[14:11:46    INFO]  - starting ANNZ::loadReaders() ... 
[14:11:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[14:12:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:12:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:12:47    INFO]  -----------------------------------------------------------------------------------------------------------
[14:12:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[14:13:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:13:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:13:01    INFO]  -----------------------------------------------------------------------------------------------------------
[14:13:01    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:13:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:13:02    INFO]  - will validate that the bias-correction actually improved the result ...
[14:13:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:13:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[14:13:05    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_20/plots/
[14:13:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_20/plots output/SPEC_advanced23/regres/train/ANNZ_20/plots_biasCor_before
[14:13:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:13:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[14:13:14    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_20/plots/
[14:13:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_20/plots output/SPEC_advanced23/regres/train/ANNZ_20/plots_biasCor_after
[14:13:20    INFO]  - Got original [KS-test,N_poiss]: [0.0651978 , 6.70744] , after the bias-correction: [0.0487428 , 6.0889] --> will KEEP the correction !

(14:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=37824:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:13 INFO) 
[14:13:22    INFO]  -----------------------------------------------------
[14:13:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:13:22    INFO]  -----------------------------------------------------------------------------------------------------------
[14:13:22    INFO]  - starting ANNZ::Init()  ... 
[14:13:24    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_21/saveOpt.txt ...
[14:13:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:13:29    INFO] ----------------------------------------------------------------------------------------------------
[14:13:29    INFO]  - will book (ANNZ_21) method(ANN) with options: :HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=37824:VarTransform=N,P
[14:13:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:13:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:13:29    INFO]      cuts (train):        ,
[14:13:29    INFO]      cuts (valid):       
[14:13:29    INFO]    - weights:            1
[14:13:29    INFO] ----------------------------------------------------------------------------------------------------
[14:13:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:24:07    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[14:24:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[14:24:08    INFO]  - Will gen. input-parameter errors ...
[14:24:11    INFO]  - starting ANNZ::loadReaders() ... 
[14:24:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[14:24:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:24:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:24:42    INFO]  -----------------------------------------------------------------------------------------------------------
[14:24:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[14:24:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:24:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:24:49    INFO]  -----------------------------------------------------------------------------------------------------------
[14:24:49    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:24:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:24:50    INFO]  - will try to derive a bias correction ... 
[14:24:50    INFO]  - will validate that training produced an XML file for later ... 
[14:24:50    INFO]  - starting ANNZ::loadReaders() ... 
[14:24:50    INFO]  - will validate that the training was not a complete failure ... 
[14:24:50    INFO]  - training seems to have been successful! will move on ...
[14:24:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:24:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:24:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:24:53    INFO] ----------------------------------------------------------------------------------------------------
[14:24:53    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:24:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:24:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:24:53    INFO]    - weights:            1
[14:24:53    INFO] ----------------------------------------------------------------------------------------------------
[14:24:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:24:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[14:24:56    INFO]  - Will gen. input-parameter errors ...
[14:24:57    INFO]  - starting ANNZ::loadReaders() ... 
[14:24:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[14:25:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:25:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:25:59    INFO]  -----------------------------------------------------------------------------------------------------------
[14:25:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[14:26:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:26:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:26:14    INFO]  -----------------------------------------------------------------------------------------------------------
[14:26:14    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:26:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:26:14    INFO]  - will validate that the bias-correction actually improved the result ...
[14:26:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:26:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[14:26:17    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_21/plots/
[14:26:23        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_21/plots output/SPEC_advanced23/regres/train/ANNZ_21/plots_biasCor_before
[14:26:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:26:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[14:26:26    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_21/plots/
[14:26:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_21/plots output/SPEC_advanced23/regres/train/ANNZ_21/plots_biasCor_after
[14:26:32    INFO]  - Got original [KS-test,N_poiss]: [0.0581745 , 6.45283] , after the bias-correction: [0.0468808 , 5.93041] --> will KEEP the correction !

(14:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=1557:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:26 INFO) 
[14:26:34    INFO]  -----------------------------------------------------
[14:26:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:26:34    INFO]  -----------------------------------------------------------------------------------------------------------
[14:26:35    INFO]  - starting ANNZ::Init()  ... 
[14:26:36    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_22/saveOpt.txt ...
[14:26:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:26:41    INFO] ----------------------------------------------------------------------------------------------------
[14:26:41    INFO]  - will book (ANNZ_22) method(ANN) with options: :HiddenLayers=N+3,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=1557:VarTransform=N
[14:26:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:26:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:26:41    INFO]      cuts (train):        ,
[14:26:41    INFO]      cuts (valid):       
[14:26:41    INFO]    - weights:            1
[14:26:41    INFO] ----------------------------------------------------------------------------------------------------
[14:26:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:50:34    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[14:50:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[14:50:34    INFO]  - Will gen. input-parameter errors ...
[14:50:38    INFO]  - starting ANNZ::loadReaders() ... 
[14:50:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[14:50:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:50:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:50:58    INFO]  -----------------------------------------------------------------------------------------------------------
[14:50:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[14:51:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:51:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:51:02    INFO]  -----------------------------------------------------------------------------------------------------------
[14:51:03    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:51:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:51:03    INFO]  - will try to derive a bias correction ... 
[14:51:03    INFO]  - will validate that training produced an XML file for later ... 
[14:51:03    INFO]  - starting ANNZ::loadReaders() ... 
[14:51:03    INFO]  - will validate that the training was not a complete failure ... 
[14:51:03    INFO]  - training seems to have been successful! will move on ...
[14:51:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:51:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:51:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:51:06    INFO] ----------------------------------------------------------------------------------------------------
[14:51:06    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:51:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:51:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:51:06    INFO]    - weights:            1
[14:51:06    INFO] ----------------------------------------------------------------------------------------------------
[14:51:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:51:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[14:51:09    INFO]  - Will gen. input-parameter errors ...
[14:51:10    INFO]  - starting ANNZ::loadReaders() ... 
[14:51:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[14:52:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:52:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:52:00    INFO]  -----------------------------------------------------------------------------------------------------------
[14:52:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[14:52:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:52:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:52:12    INFO]  -----------------------------------------------------------------------------------------------------------
[14:52:12    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:52:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:52:13    INFO]  - will validate that the bias-correction actually improved the result ...
[14:52:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:52:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[14:52:16    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_22/plots/
[14:52:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_22/plots output/SPEC_advanced23/regres/train/ANNZ_22/plots_biasCor_before
[14:52:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:52:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[14:52:25    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_22/plots/
[14:52:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_22/plots output/SPEC_advanced23/regres/train/ANNZ_22/plots_biasCor_after
[14:52:32    INFO]  - Got original [KS-test,N_poiss]: [0.0831766 , 6.92411] , after the bias-correction: [0.0542944 , 5.91038] --> will KEEP the correction !

(14:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=657:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:52 INFO) 
[14:52:34    INFO]  -----------------------------------------------------
[14:52:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:52:34    INFO]  -----------------------------------------------------------------------------------------------------------
[14:52:34    INFO]  - starting ANNZ::Init()  ... 
[14:52:35    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_23/saveOpt.txt ...
[14:52:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:52:41    INFO] ----------------------------------------------------------------------------------------------------
[14:52:41    INFO]  - will book (ANNZ_23) method(ANN) with options: :HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=657:VarTransform=N
[14:52:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:52:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:52:41    INFO]      cuts (train):        ,
[14:52:41    INFO]      cuts (valid):       
[14:52:41    INFO]    - weights:            1
[14:52:41    INFO] ----------------------------------------------------------------------------------------------------
[14:52:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:11:30    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[15:11:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[15:11:30    INFO]  - Will gen. input-parameter errors ...
[15:11:31    INFO]  - starting ANNZ::loadReaders() ... 
[15:11:32    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[15:11:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:11:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:11:53    INFO]  -----------------------------------------------------------------------------------------------------------
[15:11:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[15:11:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:11:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:11:58    INFO]  -----------------------------------------------------------------------------------------------------------
[15:11:58    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:11:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:11:59    INFO]  - will try to derive a bias correction ... 
[15:11:59    INFO]  - will validate that training produced an XML file for later ... 
[15:11:59    INFO]  - starting ANNZ::loadReaders() ... 
[15:11:59    INFO]  - will validate that the training was not a complete failure ... 
[15:11:59    INFO]  - training seems to have been successful! will move on ...
[15:11:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:12:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:12:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:12:02    INFO] ----------------------------------------------------------------------------------------------------
[15:12:02    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:12:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:12:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:12:02    INFO]    - weights:            1
[15:12:02    INFO] ----------------------------------------------------------------------------------------------------
[15:12:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:12:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[15:12:05    INFO]  - Will gen. input-parameter errors ...
[15:12:06    INFO]  - starting ANNZ::loadReaders() ... 
[15:12:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[15:12:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:12:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:12:57    INFO]  -----------------------------------------------------------------------------------------------------------
[15:12:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[15:13:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:13:09    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:13:09    INFO]  -----------------------------------------------------------------------------------------------------------
[15:13:09    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:13:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:13:09    INFO]  - will validate that the bias-correction actually improved the result ...
[15:13:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:13:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[15:13:13    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_23/plots/
[15:13:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_23/plots output/SPEC_advanced23/regres/train/ANNZ_23/plots_biasCor_before
[15:13:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:13:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[15:13:22    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_23/plots/
[15:13:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_23/plots output/SPEC_advanced23/regres/train/ANNZ_23/plots_biasCor_after
[15:13:29    INFO]  - Got original [KS-test,N_poiss]: [0.131799 , 7.90829] , after the bias-correction: [0.0708314 , 6.40757] --> will KEEP the correction !

(15:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=7132:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:13 INFO) 
[15:13:30    INFO]  -----------------------------------------------------
[15:13:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:13:30    INFO]  -----------------------------------------------------------------------------------------------------------
[15:13:31    INFO]  - starting ANNZ::Init()  ... 
[15:13:32    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/train/ANNZ_24/saveOpt.txt ...
[15:13:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:13:37    INFO] ----------------------------------------------------------------------------------------------------
[15:13:37    INFO]  - will book (ANNZ_24) method(ANN) with options: :HiddenLayers=N+4,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=7132:VarTransform=N,P
[15:13:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:13:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:13:37    INFO]      cuts (train):        ,
[15:13:37    INFO]      cuts (valid):       
[15:13:37    INFO]    - weights:            1
[15:13:37    INFO] ----------------------------------------------------------------------------------------------------
[15:13:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:26:22    INFO]  - Saving MLM information in ./output/SPEC_advanced23/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[15:26:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[15:26:22    INFO]  - Will gen. input-parameter errors ...
[15:26:25    INFO]  - starting ANNZ::loadReaders() ... 
[15:26:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[15:26:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:26:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:26:59    INFO]  -----------------------------------------------------------------------------------------------------------
[15:26:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[15:27:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:27:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:27:07    INFO]  -----------------------------------------------------------------------------------------------------------
[15:27:07    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:27:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:27:08    INFO]  - will try to derive a bias correction ... 
[15:27:08    INFO]  - will validate that training produced an XML file for later ... 
[15:27:08    INFO]  - starting ANNZ::loadReaders() ... 
[15:27:08    INFO]  - will validate that the training was not a complete failure ... 
[15:27:08    INFO]  - training seems to have been successful! will move on ...
[15:27:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:27:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:27:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:27:11    INFO] ----------------------------------------------------------------------------------------------------
[15:27:11    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:27:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:27:11    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:27:11    INFO]    - weights:            1
[15:27:11    INFO] ----------------------------------------------------------------------------------------------------
[15:27:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:27:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[15:27:14    INFO]  - Will gen. input-parameter errors ...
[15:27:15    INFO]  - starting ANNZ::loadReaders() ... 
[15:27:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_train*.root
[15:28:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:28:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:28:21    INFO]  -----------------------------------------------------------------------------------------------------------
[15:28:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced23/rootIn/ANNZ_tree_valid*.root
[15:28:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:28:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:28:38    INFO]  -----------------------------------------------------------------------------------------------------------
[15:28:38    INFO]  - Saving file ./output/SPEC_advanced23/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:28:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:28:38    INFO]  - will validate that the bias-correction actually improved the result ...
[15:28:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:28:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[15:28:41    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_24/plots/
[15:28:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_24/plots output/SPEC_advanced23/regres/train/ANNZ_24/plots_biasCor_before
[15:28:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:28:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[15:28:50    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/train/ANNZ_24/plots/
[15:28:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced23/regres/train/ANNZ_24/plots output/SPEC_advanced23/regres/train/ANNZ_24/plots_biasCor_after
[15:28:57    INFO]  - Got original [KS-test,N_poiss]: [0.0692043 , 7.25322] , after the bias-correction: [0.0464629 , 6.28768] --> will KEEP the correction !

(15:28 INFO) [40;37;1m - 03/04/19 15:28:59 - finished running ANNZ ![0m
(16:21 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:21 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:21 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:21 INFO) [40;37;1m - 03/04/19 16:21:01 - starting ANNZ[0m
(16:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.02[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(16:21 INFO) 
[16:21:01    INFO]  -----------------------------------------------------
[16:21:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:21:01    INFO]  -----------------------------------------------------------------------------------------------------------
[16:21:01    INFO]  - starting ANNZ::Init()  ... 
[16:21:01    INFO]  - Will generate 1 PDFs ... 
[16:21:04    INFO] --------------------------------------------------------
[16:21:04    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[16:21:04    INFO]  - All REJECTED MLMs: 
[16:21:04    INFO] ----------------------------------------------------------------------------------------------------------------
[16:21:09    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/optim/saveOpt.txt ...
[16:21:24    INFO]  - starting ANNZ::Optim() ... 
[16:21:24    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[16:21:24    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[16:21:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:21:31    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced23/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[16:21:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:21:35    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced23/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[16:21:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:21:40    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/SPEC_advanced23/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[16:21:40    INFO]  - Saving file ./output/SPEC_advanced23/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[16:21:40    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[16:21:40    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced23/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[16:21:40    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[16:21:40    INFO]  - ending makeTreeRegClsAllMLM() ... 
[16:21:40    INFO]  - starting ANNZ::optimReg() ... 
[16:21:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:21:43    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced23/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[16:21:43    INFO]  - starting ANNZ::fillColosureV() ... 
[16:21:43    INFO]  ---------------------------------------------------------------------------------- 
[16:21:43    INFO]  - Got the following average properties: 
[16:21:43    INFO]  --------------------------------------- 
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_0 	 0.00551284 	 0.0534156 	 0.0762682
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_1 	 0.0105616 	 0.0743904 	 0.0797256
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_2 	 0.00543822 	 0.0584012 	 0.0719457
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_3 	 0.00592887 	 0.0585886 	 0.0767471
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_4 	 0.00834514 	 0.073301 	 0.0778639
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_5 	 0.0135033 	 0.0693289 	 0.081391
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_6 	 0.012483 	 0.0688557 	 0.077413
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_7 	 0.00425667 	 0.0537057 	 0.0736436
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_8 	 0.00398282 	 0.0483512 	 0.0730164
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_9 	 0.0149531 	 0.0682587 	 0.0806508
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_10 	 0.00690189 	 0.064605 	 0.0747795
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_11 	 0.00556786 	 0.0577017 	 0.0795224
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_12 	 0.00521193 	 0.0525261 	 0.0750507
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_13 	 0.00847844 	 0.0633118 	 0.0771799
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_14 	 0.00480134 	 0.0542476 	 0.0775968
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_15 	 0.0060175 	 0.0555627 	 0.0769516
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_16 	 0.00464374 	 0.0474992 	 0.0757384
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_17 	 0.00757026 	 0.0638806 	 0.074956
[16:21:43    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_18 	 0.0118722 	 0.0779121 	 0.0810034
[16:21:44    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_19 	 0.00561224 	 0.0607805 	 0.0752658
[16:21:44    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_20 	 0.00658163 	 0.0637113 	 0.0788773
[16:21:44    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_21 	 0.0063438 	 0.0620123 	 0.0718551
[16:21:44    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_22 	 0.00916379 	 0.0698191 	 0.0781995
[16:21:44    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_23 	 0.0156996 	 0.0728752 	 0.0817429
[16:21:44    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_24 	 0.00475498 	 0.0648035 	 0.0809717
[16:21:44    INFO]  ------------------------------------------------------------------------------------------------- 
[16:21:44    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[16:21:44    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[16:21:44    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[16:21:44    INFO]  - Found 2 "best" methods (min-threshold was 1) from the bottom 10% of the [sig68] dist.
[16:21:44    INFO]  - The "best" MLM is: ANNZ_16
[16:21:44    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[16:21:44    INFO]  - ANNZ_0 has sigma68 = 0.0534156 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_1 has sigma68 = 0.0743904 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_2 has sigma68 = 0.0584012 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_3 has sigma68 = 0.0585886 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_4 has sigma68 = 0.073301 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_5 has sigma68 = 0.0693289 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_6 has sigma68 = 0.0688557 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_7 has sigma68 = 0.0537057 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_8 has sigma68 = 0.0483512 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_9 has sigma68 = 0.0682587 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_10 has sigma68 = 0.064605 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_11 has sigma68 = 0.0577017 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_12 has sigma68 = 0.0525261 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_13 has sigma68 = 0.0633118 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_14 has sigma68 = 0.0542476 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_15 has sigma68 = 0.0555627 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_16 has sigma68 = 0.0474992 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_17 has sigma68 = 0.0638806 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_18 has sigma68 = 0.0779121 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_19 has sigma68 = 0.0607805 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_20 has sigma68 = 0.0637113 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_21 has sigma68 = 0.0620123 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_22 has sigma68 = 0.0698191 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_23 has sigma68 = 0.0728752 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44    INFO]  - ANNZ_24 has sigma68 = 0.0648035 which is above threshold (0.02) -> it will be rejected from the PDF ...
[16:21:44   ERROR]  - ... ------------------------------------------------------------ 
[16:21:44   ERROR]  - MESSAGE -  - found only 0 accepted MLMs, but requested minAcptMLMsForPDFs = 5 ... 
[16:21:44   ERROR]  - FROM    - FILE: ../src/ANNZ_loopReg.cpp , LINE: 916 , (Mar 20 2019 13:35:26) 
[16:21:44   ERROR]  - ..... ABORTING !!! 
[16:21:44   ERROR]  ------------------------------------------------------------ ... - 
(16:21 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(16:21 CRITICAL) [41;37;1mWill terminate !!!![0m
(16:23 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:23 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:23 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:23 INFO) [40;37;1m - 03/04/19 16:23:07 - starting ANNZ[0m
(16:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.055[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(16:23 INFO) 
[16:23:08    INFO]  -----------------------------------------------------
[16:23:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:23:08    INFO]  -----------------------------------------------------------------------------------------------------------
[16:23:08    INFO]  - starting ANNZ::Init()  ... 
[16:23:08    INFO]  - Will generate 1 PDFs ... 
[16:23:11    INFO] --------------------------------------------------------
[16:23:11    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[16:23:11    INFO]  - All REJECTED MLMs: 
[16:23:11    INFO] ----------------------------------------------------------------------------------------------------------------
[16:23:12    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/optim/saveOpt.txt ...
[16:23:28    INFO]  - starting ANNZ::Optim() ... 
[16:23:28    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[16:23:28    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced23/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[16:23:28    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[16:23:28    INFO]  - ending makeTreeRegClsAllMLM() ... 
[16:23:28    INFO]  - starting ANNZ::optimReg() ... 
[16:23:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:23:30    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced23/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[16:23:31    INFO]  - starting ANNZ::fillColosureV() ... 
[16:23:31    INFO]  ---------------------------------------------------------------------------------- 
[16:23:31    INFO]  - Got the following average properties: 
[16:23:31    INFO]  --------------------------------------- 
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_0 	 0.00551284 	 0.0534156 	 0.0762682
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_1 	 0.0105616 	 0.0743904 	 0.0797256
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_2 	 0.00543822 	 0.0584012 	 0.0719457
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_3 	 0.00592887 	 0.0585886 	 0.0767471
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_4 	 0.00834514 	 0.073301 	 0.0778639
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_5 	 0.0135033 	 0.0693289 	 0.081391
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_6 	 0.012483 	 0.0688557 	 0.077413
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_7 	 0.00425667 	 0.0537057 	 0.0736436
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_8 	 0.00398282 	 0.0483512 	 0.0730164
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_9 	 0.0149531 	 0.0682587 	 0.0806508
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_10 	 0.00690189 	 0.064605 	 0.0747795
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_11 	 0.00556786 	 0.0577017 	 0.0795224
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_12 	 0.00521193 	 0.0525261 	 0.0750507
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_13 	 0.00847844 	 0.0633118 	 0.0771799
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_14 	 0.00480134 	 0.0542476 	 0.0775968
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_15 	 0.0060175 	 0.0555627 	 0.0769516
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_16 	 0.00464374 	 0.0474992 	 0.0757384
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_17 	 0.00757026 	 0.0638806 	 0.074956
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_18 	 0.0118722 	 0.0779121 	 0.0810034
[16:23:31    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_19 	 0.00561224 	 0.0607805 	 0.0752658
[16:23:32    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_20 	 0.00658163 	 0.0637113 	 0.0788773
[16:23:32    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_21 	 0.0063438 	 0.0620123 	 0.0718551
[16:23:32    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_22 	 0.00916379 	 0.0698191 	 0.0781995
[16:23:32    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_23 	 0.0156996 	 0.0728752 	 0.0817429
[16:23:32    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_24 	 0.00475498 	 0.0648035 	 0.0809717
[16:23:32    INFO]  ------------------------------------------------------------------------------------------------- 
[16:23:32    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[16:23:32    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[16:23:32    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[16:23:32    INFO]  - Found 2 "best" methods (min-threshold was 1) from the bottom 10% of the [sig68] dist.
[16:23:32    INFO]  - The "best" MLM is: ANNZ_16
[16:23:32    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[16:23:32    INFO]  - ANNZ_1 has sigma68 = 0.0743904 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_2 has sigma68 = 0.0584012 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_3 has sigma68 = 0.0585886 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_4 has sigma68 = 0.073301 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_5 has sigma68 = 0.0693289 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_6 has sigma68 = 0.0688557 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_9 has sigma68 = 0.0682587 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_10 has sigma68 = 0.064605 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_11 has sigma68 = 0.0577017 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_13 has sigma68 = 0.0633118 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_15 has sigma68 = 0.0555627 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_17 has sigma68 = 0.0638806 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_18 has sigma68 = 0.0779121 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_19 has sigma68 = 0.0607805 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_20 has sigma68 = 0.0637113 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_21 has sigma68 = 0.0620123 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_22 has sigma68 = 0.0698191 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_23 has sigma68 = 0.0728752 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - ANNZ_24 has sigma68 = 0.0648035 which is above threshold (0.055) -> it will be rejected from the PDF ...
[16:23:32    INFO]  - initial PDF weights: ANNZ_8:0.333 ANNZ_16:0.267 ANNZ_7:0.200 ANNZ_12:0.133 ANNZ_0:0.067 
[16:23:32    INFO]  - will loop on the input trees ...
[16:23:32    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.03497e-01
[16:23:32    INFO]  - nTry: 1 - min-param best/prev/now: 2.03497e-01 / 2.03497e-01 / 2.03756e-01
[16:23:32    INFO]  - nTry: 2 - min-param best/prev/now: 2.03497e-01 / 2.03756e-01 / 2.03853e-01
[16:23:32    INFO]  - nTry: 3 - min-param best/prev/now: 2.03497e-01 / 2.03756e-01 / 2.04316e-01
[16:23:32    INFO]  - nTry: 4 - min-param best/prev/now: 2.03497e-01 / 2.03756e-01 / 2.04379e-01
[16:23:32    INFO]  - NEW:  5 - min-param best/prev/now: 2.03497e-01 / 2.03756e-01 / 2.02166e-01
[16:23:32    INFO]  - nTry: 6 - min-param best/prev/now: 2.02166e-01 / 2.02166e-01 / 2.02376e-01
[16:23:32    INFO]  - nTry: 7 - min-param best/prev/now: 2.02166e-01 / 2.02166e-01 / 2.02577e-01
[16:23:32    INFO]  - nTry: 8 - min-param best/prev/now: 2.02166e-01 / 2.02166e-01 / 2.02902e-01
[16:23:32    INFO]  - nTry: 9 - min-param best/prev/now: 2.02166e-01 / 2.02166e-01 / 2.03152e-01
[16:23:32    INFO]  - nTry: 10 - min-param best/prev/now: 2.02166e-01 / 2.02166e-01 / 2.03167e-01
[16:23:33    INFO]  - nTry: 20 - min-param best/prev/now: 2.02166e-01 / 2.02635e-01 / 2.02966e-01
[16:23:33    INFO]  - nTry: 30 - min-param best/prev/now: 2.02166e-01 / 2.03208e-01 / 2.02962e-01
[16:23:34    INFO]  - nTry: 40 - min-param best/prev/now: 2.02166e-01 / 2.02607e-01 / 2.02724e-01
[16:23:34    INFO]  - nTry: 50 - min-param best/prev/now: 2.02166e-01 / 2.02492e-01 / 2.03165e-01
[16:23:35    INFO]  - nTry: 60 - min-param best/prev/now: 2.02166e-01 / 2.03165e-01 / 2.03737e-01
[16:23:36    INFO]  - nTry: 70 - min-param best/prev/now: 2.02166e-01 / 2.04111e-01 / 2.04150e-01
[16:23:36    INFO]  - nTry: 80 - min-param best/prev/now: 2.02166e-01 / 2.04111e-01 / 2.04301e-01
[16:23:37    INFO]  - nTry: 90 - min-param best/prev/now: 2.02166e-01 / 2.04389e-01 / 2.04427e-01
[16:23:37    INFO]  - nTry: 100 - min-param best/prev/now: 2.02166e-01 / 2.04568e-01 / 2.04740e-01
[16:23:38    INFO]  - nTry: 120 - min-param best/prev/now: 2.02166e-01 / 2.05216e-01 / 2.05357e-01
[16:23:39    INFO]  - nTry: 140 - min-param best/prev/now: 2.02166e-01 / 2.05467e-01 / 2.05459e-01
[16:23:40    INFO]  - nTry: 150 - min-param best/prev/now: 2.02166e-01 / 2.05293e-01 / 2.05293e-01
[16:23:40    INFO]  - nTry: 160 - min-param best/prev/now: 2.02166e-01 / 2.05235e-01 / 2.05245e-01
[16:23:41    INFO]  - nTry: 180 - min-param best/prev/now: 2.02166e-01 / 2.05452e-01 / 2.05620e-01
[16:23:43    INFO]  - nTry: 200 - min-param best/prev/now: 2.02166e-01 / 2.05885e-01 / 2.05986e-01
[16:23:44    INFO]  - nTry: 220 - min-param best/prev/now: 2.02166e-01 / 2.06130e-01 / 2.06338e-01
[16:23:45    INFO]  - nTry: 240 - min-param best/prev/now: 2.02166e-01 / 2.06458e-01 / 2.06455e-01
[16:23:45    INFO]  - nTry: 250 - min-param best/prev/now: 2.02166e-01 / 2.06506e-01 / 2.06518e-01
[16:23:45    INFO]  - finished PDF optimization! - final minimization parameter: 2.02166e-01 , PDF weights: ANNZ_8:0.289 ANNZ_16:0.286 ANNZ_7:0.167 ANNZ_12:0.156 ANNZ_0:0.102 
[16:23:45    INFO]  - will derive the bias correction for the pdf ... 
[16:23:46    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.101541, ANNZ_1:0.000000, ANNZ_2:0.000000, ANNZ_3:0.000000, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.000000, ANNZ_7:0.167058, ANNZ_8:0.289096, ANNZ_9:0.000000, ANNZ_10:0.000000, ANNZ_11:0.000000, ANNZ_12:0.155918, ANNZ_13:0.000000, ANNZ_14:0.000000, ANNZ_15:0.000000, ANNZ_16:0.286388, ANNZ_17:0.000000, ANNZ_18:0.000000, ANNZ_19:0.000000, ANNZ_20:0.000000, ANNZ_21:0.000000, ANNZ_22:0.000000, ANNZ_23:0.000000, ANNZ_24:0.000000, 
[16:23:46    INFO]  - Saving optimization results in ./output/SPEC_advanced23/regres/optim/saveOptimOpt.txt ...
[16:23:47    INFO]  - Saving bias-correction results in ./output/SPEC_advanced23/regres/optim/saveOptimObj.root ...
[16:23:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:23:48    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced23/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[16:23:50    INFO]  - starting ANNZ::doEvalReg() ... 
[16:23:50    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[16:23:50    INFO]  - Reading bias-correction results from ./output/SPEC_advanced23/regres/optim/saveOptimObj.root ...
[16:23:50    INFO]  - Getting optimization results from ./output/SPEC_advanced23/regres/optim/saveOptimOpt.txt ...
[16:23:50    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[16:23:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:23:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:23:51    INFO]  -----------------------------------------------------------------------------------------------------------
[16:23:51    INFO]  - starting storeTreeToAscii() ... 
[16:23:51    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[16:23:51    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced23/regres/optim/eval/ANNZ_randomReg_0000.csv
[16:23:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:23:51    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[16:23:51    INFO]  -----------------------------------------------------------------------------------------------------------
[16:23:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:23:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[16:23:51    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[16:23:58    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/optim/eval/plots/

(16:24 INFO) [40;37;1m - 03/04/19 16:24:04 - finished running ANNZ ![0m
(16:24 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:24 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:24 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:24 INFO) [40;37;1m - 03/04/19 16:24:46 - starting ANNZ[0m
(16:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced23[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile1[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data10c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.055[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(16:24 INFO) 
[16:24:47    INFO]  -----------------------------------------------------
[16:24:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:24:47    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:47    INFO]  - starting ANNZ::Init()  ... 
[16:24:47    INFO]  - Will generate 1 PDFs ... 
[16:24:50    INFO] --------------------------------------------------------
[16:24:50    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[16:24:50    INFO]  - All REJECTED MLMs: 
[16:24:50    INFO] ----------------------------------------------------------------------------------------------------------------
[16:24:52    INFO]  - Saving run information in ./output/SPEC_advanced23/regres/eval_nFile1/saveOpt.txt ...
[16:25:07    INFO]  - starting inputToFullTree(ANNz_data10c.csv) ... 
[16:25:07    INFO]  - Found 2232 lines in file PAUS/ANNz_data10c.csv -> total so far = 2232 ... 
[16:25:07    INFO]  - Now reading-in PAUS/ANNz_data10c.csv ... 
[16:25:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:25:07    INFO]  -- ANNZ_tree_eval .................................. 2232  nLine
[16:25:07    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[16:25:07    INFO]  -----------------------------------------------------------------------------------------------------------
[16:25:07    INFO]  - starting ANNZ::Eval() ... 
[16:25:07    INFO]  - starting ANNZ::doEvalReg() ... 
[16:25:07    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[16:25:07    INFO]  - Reading bias-correction results from ./output/SPEC_advanced23/regres/optim/saveOptimObj.root ...
[16:25:07    INFO]  - Getting optimization results from ./output/SPEC_advanced23/regres/optim/saveOptimOpt.txt ...
[16:25:07    INFO]  - creating MLM trees from input ...
[16:25:07    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,ANNZ_7,ANNZ_8,ANNZ_12,ANNZ_16,
[16:25:07    INFO]  - starting ANNZ::loadReaders() ... 
[16:26:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:03    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[16:26:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:03    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[16:26:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:03    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 2232  nObj
[16:26:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:03    INFO]  - starting storeTreeToAscii() ... 
[16:26:03    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[16:26:03    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced23/regres/eval_nFile1/ANNZ_randomReg_0000.csv
[16:26:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:04    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[16:26:04    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:04    INFO]  - detected the target,zspec in the evaluated sample - Will create performance plots ...
[16:26:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:26:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[16:26:04    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[16:26:11    INFO]  - Writing to plotting directory output/SPEC_advanced23/regres/eval_nFile1/plots/

(16:26 INFO) [40;37;1m - 03/04/19 16:26:16 - finished running ANNZ ![0m
