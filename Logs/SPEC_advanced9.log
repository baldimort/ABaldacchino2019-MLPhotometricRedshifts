(11:20 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:20 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:20 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:20 INFO) [40;37;1m - 10/03/19 11:20:52 - starting ANNZ[0m
(11:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:20 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:20 INFO) 
[11:20:52    INFO]  -----------------------------------------------------
[11:20:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:20:52    INFO]  -----------------------------------------------------------------------------------------------------------
[11:20:54    INFO]  - starting inputToSplitTree() ... 
[11:20:54    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[11:20:54    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[11:20:54    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[11:20:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:20:55    INFO]  -- ANNZ_tree .......................................... 0  index
[11:20:55    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[11:20:55    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[11:20:55    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[11:20:55    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:20:55    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:20:55    INFO]  -----------------------------------------------------------------------------------------------------------
[11:20:55    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[11:20:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:20:55    INFO]  -- ANNZ_tree .......................................... 0  index
[11:20:55    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[11:20:55    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[11:20:55    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[11:20:55    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[11:20:55    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:20:55    INFO]  -----------------------------------------------------------------------------------------------------------
[11:20:56    INFO]  - Writing to plotting directory output/SPEC_advanced9/rootIn/plots/
[11:20:57    INFO]  - Writing to plotting directory output/SPEC_advanced9/rootIn/plots/

(11:20 INFO) [40;37;1m - 10/03/19 11:20:59 - finished running ANNZ ![0m
(11:21 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:21 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:21 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:21 INFO) [40;37;1m - 10/03/19 11:21:27 - starting ANNZ[0m
(11:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=610:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:21 INFO) 
[11:21:27    INFO]  -----------------------------------------------------
[11:21:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:21:27    INFO]  -----------------------------------------------------------------------------------------------------------
[11:21:28    INFO]  - starting ANNZ::Init()  ... 
[11:21:29    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_0/saveOpt.txt ...
[11:21:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:21:35    INFO] ----------------------------------------------------------------------------------------------------
[11:21:35    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=610:BoostType=AdaBoost:VarTransform=N
[11:21:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:21:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:21:35    INFO]      cuts (train):        ,
[11:21:35    INFO]      cuts (valid):       
[11:21:35    INFO]    - weights:            1
[11:21:35    INFO] ----------------------------------------------------------------------------------------------------
[11:21:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:22:20    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[11:22:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:22:22    INFO]  - Will gen. input-parameter errors ...
[11:22:24    INFO]  - starting ANNZ::loadReaders() ... 
[11:22:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[11:26:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:26:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:26:01    INFO]  -----------------------------------------------------------------------------------------------------------
[11:26:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[11:26:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:26:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:26:57    INFO]  -----------------------------------------------------------------------------------------------------------
[11:26:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:26:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:26:59    INFO]  - will try to derive a bias correction ... 
[11:26:59    INFO]  - will validate that training produced an XML file for later ... 
[11:26:59    INFO]  - starting ANNZ::loadReaders() ... 
[11:27:01    INFO]  - will validate that the training was not a complete failure ... 
[11:27:02    INFO]  - training seems to have been successful! will move on ...
[11:27:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:27:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:27:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:27:07    INFO] ----------------------------------------------------------------------------------------------------
[11:27:07    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:27:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:27:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:27:07    INFO]    - weights:            1
[11:27:07    INFO] ----------------------------------------------------------------------------------------------------
[11:27:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:27:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:27:18    INFO]  - Will gen. input-parameter errors ...
[11:27:21    INFO]  - starting ANNZ::loadReaders() ... 
[11:27:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[11:30:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:30:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:30:17    INFO]  -----------------------------------------------------------------------------------------------------------
[11:30:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[11:31:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:31:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:31:04    INFO]  -----------------------------------------------------------------------------------------------------------
[11:31:05    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:31:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:31:06    INFO]  - will validate that the bias-correction actually improved the result ...
[11:31:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:31:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
Warning in <Fit>: Fit data is empty 
[11:31:13    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_0/plots/
[11:31:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_0/plots output/SPEC_advanced9/regres/train/ANNZ_0/plots_biasCor_before
[11:31:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:31:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
Warning in <Fit>: Fit data is empty 
[11:31:34    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_0/plots/
[11:31:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_0/plots output/SPEC_advanced9/regres/train/ANNZ_0/plots_biasCor_after
[11:31:51    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.14673] , after the bias-correction: [0.0501904 , 6.19355] --> will KEEP the correction !

(11:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:31 INFO) 
[11:31:56    INFO]  -----------------------------------------------------
[11:31:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:31:56    INFO]  -----------------------------------------------------------------------------------------------------------
[11:31:57    INFO]  - starting ANNZ::Init()  ... 
[11:31:58    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_1/saveOpt.txt ...
[11:32:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:32:05    INFO] ----------------------------------------------------------------------------------------------------
[11:32:05    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=510:BoostType=AdaBoost:VarTransform=N
[11:32:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:32:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:32:05    INFO]      cuts (train):        ,
[11:32:05    INFO]      cuts (valid):       
[11:32:05    INFO]    - weights:            1
[11:32:05    INFO] ----------------------------------------------------------------------------------------------------
[11:32:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:32:46    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[11:32:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:32:49    INFO]  - Will gen. input-parameter errors ...
[11:32:52    INFO]  - starting ANNZ::loadReaders() ... 
[11:32:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[11:35:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:35:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:35:44    INFO]  -----------------------------------------------------------------------------------------------------------
[11:35:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[11:36:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:36:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:36:23    INFO]  -----------------------------------------------------------------------------------------------------------
[11:36:24    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:36:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:36:25    INFO]  - will try to derive a bias correction ... 
[11:36:25    INFO]  - will validate that training produced an XML file for later ... 
[11:36:25    INFO]  - starting ANNZ::loadReaders() ... 
[11:36:27    INFO]  - will validate that the training was not a complete failure ... 
[11:36:28    INFO]  - training seems to have been successful! will move on ...
[11:36:28    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:36:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:36:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:36:33    INFO] ----------------------------------------------------------------------------------------------------
[11:36:33    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:36:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:36:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:36:33    INFO]    - weights:            1
[11:36:33    INFO] ----------------------------------------------------------------------------------------------------
[11:36:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:36:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:36:44    INFO]  - Will gen. input-parameter errors ...
[11:36:46    INFO]  - starting ANNZ::loadReaders() ... 
[11:36:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[11:39:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:39:32    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:39:32    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:32    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[11:40:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:40:09    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:40:09    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:09    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:40:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:40:10    INFO]  - will validate that the bias-correction actually improved the result ...
[11:40:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:40:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[11:40:18    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_1/plots/
[11:40:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_1/plots output/SPEC_advanced9/regres/train/ANNZ_1/plots_biasCor_before
[11:40:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:40:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[11:40:41    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_1/plots/
[11:41:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_1/plots output/SPEC_advanced9/regres/train/ANNZ_1/plots_biasCor_after
[11:41:05    INFO]  - Got original [KS-test,N_poiss]: [0.0823438 , 6.12987] , after the bias-correction: [0.0497423 , 6.105] --> will KEEP the correction !

(11:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:41 INFO) 
[11:41:10    INFO]  -----------------------------------------------------
[11:41:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:41:10    INFO]  -----------------------------------------------------------------------------------------------------------
[11:41:11    INFO]  - starting ANNZ::Init()  ... 
[11:41:12    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_2/saveOpt.txt ...
[11:41:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:41:20    INFO] ----------------------------------------------------------------------------------------------------
[11:41:20    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=320:BoostType=AdaBoost:VarTransform=N,P
[11:41:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:41:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:41:20    INFO]      cuts (train):        ,
[11:41:20    INFO]      cuts (valid):       
[11:41:20    INFO]    - weights:            1
[11:41:20    INFO] ----------------------------------------------------------------------------------------------------
[11:41:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:41:45    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[11:41:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[11:41:47    INFO]  - Will gen. input-parameter errors ...
[11:41:48    INFO]  - starting ANNZ::loadReaders() ... 
[11:41:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[11:44:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:44:32    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:44:32    INFO]  -----------------------------------------------------------------------------------------------------------
[11:44:32    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[11:45:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:45:09    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:45:09    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:09    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:45:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:45:10    INFO]  - will try to derive a bias correction ... 
[11:45:10    INFO]  - will validate that training produced an XML file for later ... 
[11:45:10    INFO]  - starting ANNZ::loadReaders() ... 
[11:45:12    INFO]  - will validate that the training was not a complete failure ... 
[11:45:12    INFO]  - training seems to have been successful! will move on ...
[11:45:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:45:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:45:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:45:17    INFO] ----------------------------------------------------------------------------------------------------
[11:45:17    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:45:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:45:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:45:17    INFO]    - weights:            1
[11:45:17    INFO] ----------------------------------------------------------------------------------------------------
[11:45:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:45:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[11:45:25    INFO]  - Will gen. input-parameter errors ...
[11:45:27    INFO]  - starting ANNZ::loadReaders() ... 
[11:45:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[11:49:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:49:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:49:06    INFO]  -----------------------------------------------------------------------------------------------------------
[11:49:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[11:49:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:49:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:49:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:49:59    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:50:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:50:01    INFO]  - will validate that the bias-correction actually improved the result ...
[11:50:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:50:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[11:50:11    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_2/plots/
[11:50:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_2/plots output/SPEC_advanced9/regres/train/ANNZ_2/plots_biasCor_before
[11:50:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:50:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[11:50:42    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_2/plots/
[11:51:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_2/plots output/SPEC_advanced9/regres/train/ANNZ_2/plots_biasCor_after
[11:51:00    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40225] , after the bias-correction: [0.0434685 , 5.80056] --> will KEEP the correction !

(11:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:51 INFO) 
[11:51:05    INFO]  -----------------------------------------------------
[11:51:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:51:05    INFO]  -----------------------------------------------------------------------------------------------------------
[11:51:05    INFO]  - starting ANNZ::Init()  ... 
[11:51:07    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_3/saveOpt.txt ...
[11:51:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:51:14    INFO] ----------------------------------------------------------------------------------------------------
[11:51:14    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N,P
[11:51:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:51:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:51:14    INFO]      cuts (train):        ,
[11:51:14    INFO]      cuts (valid):       
[11:51:14    INFO]    - weights:            1
[11:51:14    INFO] ----------------------------------------------------------------------------------------------------
[11:51:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:52:14    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[11:52:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[11:52:20    INFO]  - Will gen. input-parameter errors ...
[11:52:22    INFO]  - starting ANNZ::loadReaders() ... 
[11:52:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[11:59:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:59:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:59:17    INFO]  -----------------------------------------------------------------------------------------------------------
[11:59:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[12:00:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:00:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:00:53    INFO]  -----------------------------------------------------------------------------------------------------------
[12:00:53    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:00:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:00:55    INFO]  - will try to derive a bias correction ... 
[12:00:55    INFO]  - will validate that training produced an XML file for later ... 
[12:00:55    INFO]  - starting ANNZ::loadReaders() ... 
[12:01:02    INFO]  - will validate that the training was not a complete failure ... 
[12:01:02    INFO]  - training seems to have been successful! will move on ...
[12:01:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:01:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:01:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:01:08    INFO] ----------------------------------------------------------------------------------------------------
[12:01:08    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:01:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:01:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:01:08    INFO]    - weights:            1
[12:01:08    INFO] ----------------------------------------------------------------------------------------------------
[12:01:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:01:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[12:01:18    INFO]  - Will gen. input-parameter errors ...
[12:01:21    INFO]  - starting ANNZ::loadReaders() ... 
[12:01:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[12:06:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:06:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:06:50    INFO]  -----------------------------------------------------------------------------------------------------------
[12:06:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[12:08:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:08:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:08:23    INFO]  -----------------------------------------------------------------------------------------------------------
[12:08:23    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:08:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:08:25    INFO]  - will validate that the bias-correction actually improved the result ...
[12:08:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:08:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[12:08:34    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_3/plots/
[12:08:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_3/plots output/SPEC_advanced9/regres/train/ANNZ_3/plots_biasCor_before
[12:08:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:08:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[12:08:56    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_3/plots/
[12:09:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_3/plots output/SPEC_advanced9/regres/train/ANNZ_3/plots_biasCor_after
[12:09:12    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.8969] , after the bias-correction: [0.0439166 , 5.81088] --> will KEEP the correction !

(12:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:09 INFO) 
[12:09:17    INFO]  -----------------------------------------------------
[12:09:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:09:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:09:18    INFO]  - starting ANNZ::Init()  ... 
[12:09:20    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_4/saveOpt.txt ...
[12:09:26    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:09:27    INFO] ----------------------------------------------------------------------------------------------------
[12:09:27    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=280:BoostType=AdaBoostR2:VarTransform=N
[12:09:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:09:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:09:27    INFO]      cuts (train):        ,
[12:09:27    INFO]      cuts (valid):       
[12:09:27    INFO]    - weights:            1
[12:09:27    INFO] ----------------------------------------------------------------------------------------------------
[12:09:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:09:58    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[12:10:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[12:10:01    INFO]  - Will gen. input-parameter errors ...
[12:10:03    INFO]  - starting ANNZ::loadReaders() ... 
[12:10:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[12:14:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:14:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:14:36    INFO]  -----------------------------------------------------------------------------------------------------------
[12:14:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[12:15:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:15:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:15:50    INFO]  -----------------------------------------------------------------------------------------------------------
[12:15:50    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:15:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:15:51    INFO]  - will try to derive a bias correction ... 
[12:15:51    INFO]  - will validate that training produced an XML file for later ... 
[12:15:51    INFO]  - starting ANNZ::loadReaders() ... 
[12:15:54    INFO]  - will validate that the training was not a complete failure ... 
[12:15:54    INFO]  - training seems to have been successful! will move on ...
[12:15:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:15:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:16:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:16:00    INFO] ----------------------------------------------------------------------------------------------------
[12:16:00    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:16:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:16:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:16:00    INFO]    - weights:            1
[12:16:00    INFO] ----------------------------------------------------------------------------------------------------
[12:16:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:16:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[12:16:09    INFO]  - Will gen. input-parameter errors ...
[12:16:11    INFO]  - starting ANNZ::loadReaders() ... 
[12:16:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[12:20:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:20:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:20:40    INFO]  -----------------------------------------------------------------------------------------------------------
[12:20:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[12:21:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:21:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:21:45    INFO]  -----------------------------------------------------------------------------------------------------------
[12:21:45    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:21:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:21:46    INFO]  - will validate that the bias-correction actually improved the result ...
[12:21:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:21:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[12:21:54    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_4/plots/
[12:22:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_4/plots output/SPEC_advanced9/regres/train/ANNZ_4/plots_biasCor_before
[12:22:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:22:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[12:22:15    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_4/plots/
[12:22:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_4/plots output/SPEC_advanced9/regres/train/ANNZ_4/plots_biasCor_after
[12:22:31    INFO]  - Got original [KS-test,N_poiss]: [0.062514 , 6.53765] , after the bias-correction: [0.0327134 , 5.54472] --> will KEEP the correction !

(12:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:22 INFO) 
[12:22:35    INFO]  -----------------------------------------------------
[12:22:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:22:35    INFO]  -----------------------------------------------------------------------------------------------------------
[12:22:36    INFO]  - starting ANNZ::Init()  ... 
[12:22:37    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_5/saveOpt.txt ...
[12:22:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:22:44    INFO] ----------------------------------------------------------------------------------------------------
[12:22:44    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=500:BoostType=AdaBoost:VarTransform=N,P
[12:22:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:22:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:22:44    INFO]      cuts (train):        ,
[12:22:44    INFO]      cuts (valid):       
[12:22:44    INFO]    - weights:            1
[12:22:44    INFO] ----------------------------------------------------------------------------------------------------
[12:22:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:23:23    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[12:23:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[12:23:25    INFO]  - Will gen. input-parameter errors ...
[12:23:27    INFO]  - starting ANNZ::loadReaders() ... 
[12:23:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[12:28:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:28:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:28:02    INFO]  -----------------------------------------------------------------------------------------------------------
[12:28:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[12:29:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:29:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:29:12    INFO]  -----------------------------------------------------------------------------------------------------------
[12:29:12    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:29:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:29:13    INFO]  - will try to derive a bias correction ... 
[12:29:13    INFO]  - will validate that training produced an XML file for later ... 
[12:29:13    INFO]  - starting ANNZ::loadReaders() ... 
[12:29:16    INFO]  - will validate that the training was not a complete failure ... 
[12:29:16    INFO]  - training seems to have been successful! will move on ...
[12:29:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:29:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:29:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:29:22    INFO] ----------------------------------------------------------------------------------------------------
[12:29:22    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:29:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:29:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:29:22    INFO]    - weights:            1
[12:29:22    INFO] ----------------------------------------------------------------------------------------------------
[12:29:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:29:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[12:29:33    INFO]  - Will gen. input-parameter errors ...
[12:29:35    INFO]  - starting ANNZ::loadReaders() ... 
[12:29:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[12:33:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:33:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:33:20    INFO]  -----------------------------------------------------------------------------------------------------------
[12:33:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[12:34:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:34:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:34:14    INFO]  -----------------------------------------------------------------------------------------------------------
[12:34:15    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:34:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:34:16    INFO]  - will validate that the bias-correction actually improved the result ...
[12:34:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:34:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[12:34:23    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_5/plots/
[12:34:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_5/plots output/SPEC_advanced9/regres/train/ANNZ_5/plots_biasCor_before
[12:34:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:34:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[12:34:47    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_5/plots/
[12:35:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_5/plots output/SPEC_advanced9/regres/train/ANNZ_5/plots_biasCor_after
[12:35:03    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43485] , after the bias-correction: [0.0445889 , 5.68114] --> will KEEP the correction !

(12:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:35 INFO) 
[12:35:07    INFO]  -----------------------------------------------------
[12:35:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:35:07    INFO]  -----------------------------------------------------------------------------------------------------------
[12:35:08    INFO]  - starting ANNZ::Init()  ... 
[12:35:10    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_6/saveOpt.txt ...
[12:35:16    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:35:16    INFO] ----------------------------------------------------------------------------------------------------
[12:35:16    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=790:BoostType=Bagging:VarTransform=N,P
[12:35:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:35:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:35:16    INFO]      cuts (train):        ,
[12:35:16    INFO]      cuts (valid):       
[12:35:16    INFO]    - weights:            1
[12:35:16    INFO] ----------------------------------------------------------------------------------------------------
[12:35:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:36:49    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[12:36:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[12:36:57    INFO]  - Will gen. input-parameter errors ...
[12:37:01    INFO]  - starting ANNZ::loadReaders() ... 
[12:37:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[12:52:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:52:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:52:31    INFO]  -----------------------------------------------------------------------------------------------------------
[12:52:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[12:56:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:56:06    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:07    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:56:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:56:11    INFO]  - will try to derive a bias correction ... 
[12:56:11    INFO]  - will validate that training produced an XML file for later ... 
[12:56:11    INFO]  - starting ANNZ::loadReaders() ... 
[12:56:22    INFO]  - will validate that the training was not a complete failure ... 
[12:56:22    INFO]  - training seems to have been successful! will move on ...
[12:56:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:56:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:56:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:56:32    INFO] ----------------------------------------------------------------------------------------------------
[12:56:32    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:56:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:56:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:56:32    INFO]    - weights:            1
[12:56:32    INFO] ----------------------------------------------------------------------------------------------------
[12:56:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:56:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[12:56:48    INFO]  - Will gen. input-parameter errors ...
[12:56:52    INFO]  - starting ANNZ::loadReaders() ... 
[12:57:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[13:13:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:13:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:13:44    INFO]  -----------------------------------------------------------------------------------------------------------
[13:13:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[13:17:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:17:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:17:47    INFO]  -----------------------------------------------------------------------------------------------------------
[13:17:47    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:17:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:17:51    INFO]  - will validate that the bias-correction actually improved the result ...
[13:17:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:17:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[13:18:02    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_6/plots/
[13:18:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_6/plots output/SPEC_advanced9/regres/train/ANNZ_6/plots_biasCor_before
[13:18:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:18:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[13:18:24    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_6/plots/
[13:18:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_6/plots output/SPEC_advanced9/regres/train/ANNZ_6/plots_biasCor_after
[13:18:40    INFO]  - Got original [KS-test,N_poiss]: [0.0933229 , 6.98119] , after the bias-correction: [0.0429084 , 5.60314] --> will KEEP the correction !

(13:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=880:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:18 INFO) 
[13:18:46    INFO]  -----------------------------------------------------
[13:18:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:18:46    INFO]  -----------------------------------------------------------------------------------------------------------
[13:18:47    INFO]  - starting ANNZ::Init()  ... 
[13:18:49    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_7/saveOpt.txt ...
[13:18:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:18:56    INFO] ----------------------------------------------------------------------------------------------------
[13:18:56    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=880:BoostType=Bagging:VarTransform=N
[13:18:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:18:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:18:56    INFO]      cuts (train):        ,
[13:18:56    INFO]      cuts (valid):       
[13:18:56    INFO]    - weights:            1
[13:18:56    INFO] ----------------------------------------------------------------------------------------------------
[13:18:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:20:36    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[13:20:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[13:20:46    INFO]  - Will gen. input-parameter errors ...
[13:20:50    INFO]  - starting ANNZ::loadReaders() ... 
[13:21:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[13:35:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:35:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:35:19    INFO]  -----------------------------------------------------------------------------------------------------------
[13:35:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[13:38:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:38:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:38:54    INFO]  -----------------------------------------------------------------------------------------------------------
[13:38:54    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:38:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:38:58    INFO]  - will try to derive a bias correction ... 
[13:38:58    INFO]  - will validate that training produced an XML file for later ... 
[13:38:58    INFO]  - starting ANNZ::loadReaders() ... 
[13:39:09    INFO]  - will validate that the training was not a complete failure ... 
[13:39:10    INFO]  - training seems to have been successful! will move on ...
[13:39:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:39:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:39:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:39:18    INFO] ----------------------------------------------------------------------------------------------------
[13:39:18    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:39:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:39:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:39:18    INFO]    - weights:            1
[13:39:18    INFO] ----------------------------------------------------------------------------------------------------
[13:39:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:39:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[13:39:31    INFO]  - Will gen. input-parameter errors ...
[13:39:34    INFO]  - starting ANNZ::loadReaders() ... 
[13:39:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[13:53:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:53:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:53:22    INFO]  -----------------------------------------------------------------------------------------------------------
[13:53:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[13:56:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:56:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:56:42    INFO]  -----------------------------------------------------------------------------------------------------------
[13:56:42    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:56:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:56:46    INFO]  - will validate that the bias-correction actually improved the result ...
[13:56:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:56:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[13:56:54    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_7/plots/
[13:57:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_7/plots output/SPEC_advanced9/regres/train/ANNZ_7/plots_biasCor_before
[13:57:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:57:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[13:57:13    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_7/plots/
[13:57:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_7/plots output/SPEC_advanced9/regres/train/ANNZ_7/plots_biasCor_after
[13:57:26    INFO]  - Got original [KS-test,N_poiss]: [0.0842483 , 6.71599] , after the bias-correction: [0.0471656 , 5.48008] --> will KEEP the correction !

(13:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:57 INFO) 
[13:57:32    INFO]  -----------------------------------------------------
[13:57:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:57:32    INFO]  -----------------------------------------------------------------------------------------------------------
[13:57:33    INFO]  - starting ANNZ::Init()  ... 
[13:57:35    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_8/saveOpt.txt ...
[13:57:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:57:41    INFO] ----------------------------------------------------------------------------------------------------
[13:57:41    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=370:BoostType=AdaBoost:VarTransform=N
[13:57:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:57:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:57:41    INFO]      cuts (train):        ,
[13:57:41    INFO]      cuts (valid):       
[13:57:41    INFO]    - weights:            1
[13:57:41    INFO] ----------------------------------------------------------------------------------------------------
[13:57:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:58:10    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[13:58:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[13:58:13    INFO]  - Will gen. input-parameter errors ...
[13:58:15    INFO]  - starting ANNZ::loadReaders() ... 
[13:58:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[13:59:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:59:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:59:53    INFO]  -----------------------------------------------------------------------------------------------------------
[13:59:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:00:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:00:16    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:00:16    INFO]  -----------------------------------------------------------------------------------------------------------
[14:00:16    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:00:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:00:17    INFO]  - will try to derive a bias correction ... 
[14:00:17    INFO]  - will validate that training produced an XML file for later ... 
[14:00:17    INFO]  - starting ANNZ::loadReaders() ... 
[14:00:19    INFO]  - will validate that the training was not a complete failure ... 
[14:00:19    INFO]  - training seems to have been successful! will move on ...
[14:00:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:00:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:00:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:00:24    INFO] ----------------------------------------------------------------------------------------------------
[14:00:24    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:00:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:00:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:00:24    INFO]    - weights:            1
[14:00:24    INFO] ----------------------------------------------------------------------------------------------------
[14:00:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:00:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[14:00:33    INFO]  - Will gen. input-parameter errors ...
[14:00:35    INFO]  - starting ANNZ::loadReaders() ... 
[14:00:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:02:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:02:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:02:31    INFO]  -----------------------------------------------------------------------------------------------------------
[14:02:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:03:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:03:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:03:03    INFO]  -----------------------------------------------------------------------------------------------------------
[14:03:03    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:03:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:03:04    INFO]  - will validate that the bias-correction actually improved the result ...
[14:03:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:03:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[14:03:11    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_8/plots/
[14:03:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_8/plots output/SPEC_advanced9/regres/train/ANNZ_8/plots_biasCor_before
[14:03:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:03:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[14:03:41    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_8/plots/
[14:03:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_8/plots output/SPEC_advanced9/regres/train/ANNZ_8/plots_biasCor_after
[14:03:55    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11284] , after the bias-correction: [0.0498544 , 6.0313] --> will KEEP the correction !

(14:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:03 INFO) 
[14:04:00    INFO]  -----------------------------------------------------
[14:04:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:04:00    INFO]  -----------------------------------------------------------------------------------------------------------
[14:04:00    INFO]  - starting ANNZ::Init()  ... 
[14:04:02    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_9/saveOpt.txt ...
[14:04:08    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:04:09    INFO] ----------------------------------------------------------------------------------------------------
[14:04:09    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[14:04:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:04:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:04:09    INFO]      cuts (train):        ,
[14:04:09    INFO]      cuts (valid):       
[14:04:09    INFO]    - weights:            1
[14:04:09    INFO] ----------------------------------------------------------------------------------------------------
[14:04:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:05:04    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[14:05:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[14:05:09    INFO]  - Will gen. input-parameter errors ...
[14:05:12    INFO]  - starting ANNZ::loadReaders() ... 
[14:05:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:08:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:08:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:08:09    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:09:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:09:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:09:04    INFO]  -----------------------------------------------------------------------------------------------------------
[14:09:04    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:09:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:09:06    INFO]  - will try to derive a bias correction ... 
[14:09:06    INFO]  - will validate that training produced an XML file for later ... 
[14:09:06    INFO]  - starting ANNZ::loadReaders() ... 
[14:09:12    INFO]  - will validate that the training was not a complete failure ... 
[14:09:13    INFO]  - training seems to have been successful! will move on ...
[14:09:13    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:09:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:09:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:09:20    INFO] ----------------------------------------------------------------------------------------------------
[14:09:20    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:09:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:09:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:09:20    INFO]    - weights:            1
[14:09:20    INFO] ----------------------------------------------------------------------------------------------------
[14:09:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:09:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[14:09:33    INFO]  - Will gen. input-parameter errors ...
[14:09:37    INFO]  - starting ANNZ::loadReaders() ... 
[14:09:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:13:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:13:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:13:46    INFO]  -----------------------------------------------------------------------------------------------------------
[14:13:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:14:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:14:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:14:36    INFO]  -----------------------------------------------------------------------------------------------------------
[14:14:36    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:14:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:14:39    INFO]  - will validate that the bias-correction actually improved the result ...
[14:14:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:14:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[14:14:48    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_9/plots/
[14:15:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_9/plots output/SPEC_advanced9/regres/train/ANNZ_9/plots_biasCor_before
[14:15:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:15:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[14:15:18    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_9/plots/
[14:15:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_9/plots output/SPEC_advanced9/regres/train/ANNZ_9/plots_biasCor_after
[14:15:33    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(14:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:15 INFO) 
[14:15:38    INFO]  -----------------------------------------------------
[14:15:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:15:38    INFO]  -----------------------------------------------------------------------------------------------------------
[14:15:39    INFO]  - starting ANNZ::Init()  ... 
[14:15:41    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_10/saveOpt.txt ...
[14:15:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:15:48    INFO] ----------------------------------------------------------------------------------------------------
[14:15:48    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=340:BoostType=AdaBoost:VarTransform=N,P
[14:15:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:15:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:15:48    INFO]      cuts (train):        ,
[14:15:48    INFO]      cuts (valid):       
[14:15:48    INFO]    - weights:            1
[14:15:48    INFO] ----------------------------------------------------------------------------------------------------
[14:15:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:16:15    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[14:16:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[14:16:17    INFO]  - Will gen. input-parameter errors ...
[14:16:19    INFO]  - starting ANNZ::loadReaders() ... 
[14:16:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:19:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:19:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:19:18    INFO]  -----------------------------------------------------------------------------------------------------------
[14:19:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:19:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:19:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:19:53    INFO]  -----------------------------------------------------------------------------------------------------------
[14:19:54    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:19:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:19:54    INFO]  - will try to derive a bias correction ... 
[14:19:54    INFO]  - will validate that training produced an XML file for later ... 
[14:19:54    INFO]  - starting ANNZ::loadReaders() ... 
[14:19:56    INFO]  - will validate that the training was not a complete failure ... 
[14:19:56    INFO]  - training seems to have been successful! will move on ...
[14:19:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:19:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:20:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:20:01    INFO] ----------------------------------------------------------------------------------------------------
[14:20:01    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:20:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:20:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:20:01    INFO]    - weights:            1
[14:20:01    INFO] ----------------------------------------------------------------------------------------------------
[14:20:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:20:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[14:20:09    INFO]  - Will gen. input-parameter errors ...
[14:20:11    INFO]  - starting ANNZ::loadReaders() ... 
[14:20:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:23:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:23:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:23:13    INFO]  -----------------------------------------------------------------------------------------------------------
[14:23:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:23:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:23:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:23:57    INFO]  -----------------------------------------------------------------------------------------------------------
[14:23:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:23:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:23:58    INFO]  - will validate that the bias-correction actually improved the result ...
[14:23:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:23:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[14:24:06    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_10/plots/
[14:24:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_10/plots output/SPEC_advanced9/regres/train/ANNZ_10/plots_biasCor_before
[14:24:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:24:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
Warning in <Fit>: Fit data is empty 
[14:24:33    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_10/plots/
[14:24:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_10/plots output/SPEC_advanced9/regres/train/ANNZ_10/plots_biasCor_after
[14:24:57    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.39997] , after the bias-correction: [0.0445889 , 5.73908] --> will KEEP the correction !

(14:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:25 INFO) 
[14:25:02    INFO]  -----------------------------------------------------
[14:25:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:25:02    INFO]  -----------------------------------------------------------------------------------------------------------
[14:25:03    INFO]  - starting ANNZ::Init()  ... 
[14:25:04    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_11/saveOpt.txt ...
[14:25:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:25:12    INFO] ----------------------------------------------------------------------------------------------------
[14:25:12    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N
[14:25:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:25:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:25:12    INFO]      cuts (train):        ,
[14:25:12    INFO]      cuts (valid):       
[14:25:12    INFO]    - weights:            1
[14:25:12    INFO] ----------------------------------------------------------------------------------------------------
[14:25:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:25:52    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[14:25:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[14:25:55    INFO]  - Will gen. input-parameter errors ...
[14:25:57    INFO]  - starting ANNZ::loadReaders() ... 
[14:26:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:28:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:28:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:28:26    INFO]  -----------------------------------------------------------------------------------------------------------
[14:28:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:29:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:29:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:29:13    INFO]  -----------------------------------------------------------------------------------------------------------
[14:29:13    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:29:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:29:15    INFO]  - will try to derive a bias correction ... 
[14:29:15    INFO]  - will validate that training produced an XML file for later ... 
[14:29:15    INFO]  - starting ANNZ::loadReaders() ... 
[14:29:18    INFO]  - will validate that the training was not a complete failure ... 
[14:29:18    INFO]  - training seems to have been successful! will move on ...
[14:29:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:29:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:29:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:29:24    INFO] ----------------------------------------------------------------------------------------------------
[14:29:24    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:29:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:29:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:29:24    INFO]    - weights:            1
[14:29:24    INFO] ----------------------------------------------------------------------------------------------------
[14:29:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:29:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[14:29:36    INFO]  - Will gen. input-parameter errors ...
[14:29:38    INFO]  - starting ANNZ::loadReaders() ... 
[14:29:44    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:31:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:31:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:31:46    INFO]  -----------------------------------------------------------------------------------------------------------
[14:31:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:32:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:32:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:32:15    INFO]  -----------------------------------------------------------------------------------------------------------
[14:32:15    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:32:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:32:16    INFO]  - will validate that the bias-correction actually improved the result ...
[14:32:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:32:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
Warning in <Fit>: Fit data is empty 
[14:32:22    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_11/plots/
[14:32:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_11/plots output/SPEC_advanced9/regres/train/ANNZ_11/plots_biasCor_before
[14:32:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:32:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
Warning in <Fit>: Fit data is empty 
[14:32:40    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_11/plots/
[14:32:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_11/plots output/SPEC_advanced9/regres/train/ANNZ_11/plots_biasCor_after
[14:32:52    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12424] , after the bias-correction: [0.0495183 , 5.94383] --> will KEEP the correction !

(14:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:32 INFO) 
[14:32:56    INFO]  -----------------------------------------------------
[14:32:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:32:56    INFO]  -----------------------------------------------------------------------------------------------------------
[14:32:57    INFO]  - starting ANNZ::Init()  ... 
[14:32:58    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_12/saveOpt.txt ...
[14:33:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:33:05    INFO] ----------------------------------------------------------------------------------------------------
[14:33:05    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N
[14:33:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:33:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:33:05    INFO]      cuts (train):        ,
[14:33:05    INFO]      cuts (valid):       
[14:33:05    INFO]    - weights:            1
[14:33:05    INFO] ----------------------------------------------------------------------------------------------------
[14:33:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:34:02    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[14:34:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[14:34:07    INFO]  - Will gen. input-parameter errors ...
[14:34:09    INFO]  - starting ANNZ::loadReaders() ... 
[14:34:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:37:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:37:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:37:12    INFO]  -----------------------------------------------------------------------------------------------------------
[14:37:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:37:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:37:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:37:49    INFO]  -----------------------------------------------------------------------------------------------------------
[14:37:49    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:37:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:37:52    INFO]  - will try to derive a bias correction ... 
[14:37:52    INFO]  - will validate that training produced an XML file for later ... 
[14:37:52    INFO]  - starting ANNZ::loadReaders() ... 
[14:37:57    INFO]  - will validate that the training was not a complete failure ... 
[14:37:57    INFO]  - training seems to have been successful! will move on ...
[14:37:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:38:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:38:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:38:03    INFO] ----------------------------------------------------------------------------------------------------
[14:38:03    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:38:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:38:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:38:03    INFO]    - weights:            1
[14:38:03    INFO] ----------------------------------------------------------------------------------------------------
[14:38:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:38:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[14:38:14    INFO]  - Will gen. input-parameter errors ...
[14:38:17    INFO]  - starting ANNZ::loadReaders() ... 
[14:38:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:41:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:41:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:41:41    INFO]  -----------------------------------------------------------------------------------------------------------
[14:41:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:42:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:42:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:42:27    INFO]  -----------------------------------------------------------------------------------------------------------
[14:42:27    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:42:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:42:29    INFO]  - will validate that the bias-correction actually improved the result ...
[14:42:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:42:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[14:42:39    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_12/plots/
[14:42:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_12/plots output/SPEC_advanced9/regres/train/ANNZ_12/plots_biasCor_before
[14:42:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:42:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[14:43:04    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_12/plots/
[14:43:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_12/plots output/SPEC_advanced9/regres/train/ANNZ_12/plots_biasCor_after
[14:43:26    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.69238] , after the bias-correction: [0.0466055 , 5.74079] --> will KEEP the correction !

(14:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:43 INFO) 
[14:43:31    INFO]  -----------------------------------------------------
[14:43:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:43:31    INFO]  -----------------------------------------------------------------------------------------------------------
[14:43:31    INFO]  - starting ANNZ::Init()  ... 
[14:43:33    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_13/saveOpt.txt ...
[14:43:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:43:39    INFO] ----------------------------------------------------------------------------------------------------
[14:43:39    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=430:BoostType=AdaBoost:VarTransform=N
[14:43:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:43:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:43:39    INFO]      cuts (train):        ,
[14:43:39    INFO]      cuts (valid):       
[14:43:39    INFO]    - weights:            1
[14:43:39    INFO] ----------------------------------------------------------------------------------------------------
[14:43:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:44:11    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[14:44:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[14:44:13    INFO]  - Will gen. input-parameter errors ...
[14:44:15    INFO]  - starting ANNZ::loadReaders() ... 
[14:44:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:46:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:46:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:46:08    INFO]  -----------------------------------------------------------------------------------------------------------
[14:46:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:46:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:46:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:46:42    INFO]  -----------------------------------------------------------------------------------------------------------
[14:46:42    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:46:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:46:43    INFO]  - will try to derive a bias correction ... 
[14:46:43    INFO]  - will validate that training produced an XML file for later ... 
[14:46:43    INFO]  - starting ANNZ::loadReaders() ... 
[14:46:45    INFO]  - will validate that the training was not a complete failure ... 
[14:46:45    INFO]  - training seems to have been successful! will move on ...
[14:46:45    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:46:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:46:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:46:49    INFO] ----------------------------------------------------------------------------------------------------
[14:46:49    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:46:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:46:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:46:49    INFO]    - weights:            1
[14:46:49    INFO] ----------------------------------------------------------------------------------------------------
[14:46:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:46:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[14:46:59    INFO]  - Will gen. input-parameter errors ...
[14:47:01    INFO]  - starting ANNZ::loadReaders() ... 
[14:47:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:48:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:48:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:48:55    INFO]  -----------------------------------------------------------------------------------------------------------
[14:48:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:49:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:49:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:49:23    INFO]  -----------------------------------------------------------------------------------------------------------
[14:49:23    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:49:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:49:24    INFO]  - will validate that the bias-correction actually improved the result ...
[14:49:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:49:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
Warning in <Fit>: Fit data is empty 
[14:49:30    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_13/plots/
[14:49:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_13/plots output/SPEC_advanced9/regres/train/ANNZ_13/plots_biasCor_before
[14:49:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:49:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
Warning in <Fit>: Fit data is empty 
[14:49:46    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_13/plots/
[14:49:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_13/plots output/SPEC_advanced9/regres/train/ANNZ_13/plots_biasCor_after
[14:49:58    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12573] , after the bias-correction: [0.0499664 , 6.04086] --> will KEEP the correction !

(14:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:50 INFO) 
[14:50:02    INFO]  -----------------------------------------------------
[14:50:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:50:02    INFO]  -----------------------------------------------------------------------------------------------------------
[14:50:03    INFO]  - starting ANNZ::Init()  ... 
[14:50:04    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_14/saveOpt.txt ...
[14:50:11    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:50:11    INFO] ----------------------------------------------------------------------------------------------------
[14:50:11    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[14:50:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:50:11    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:50:11    INFO]      cuts (train):        ,
[14:50:11    INFO]      cuts (valid):       
[14:50:11    INFO]    - weights:            1
[14:50:11    INFO] ----------------------------------------------------------------------------------------------------
[14:50:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:50:30    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[14:50:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[14:50:32    INFO]  - Will gen. input-parameter errors ...
[14:50:33    INFO]  - starting ANNZ::loadReaders() ... 
[14:50:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:52:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:52:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:52:16    INFO]  -----------------------------------------------------------------------------------------------------------
[14:52:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:52:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:52:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:52:41    INFO]  -----------------------------------------------------------------------------------------------------------
[14:52:41    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:52:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:52:42    INFO]  - will try to derive a bias correction ... 
[14:52:42    INFO]  - will validate that training produced an XML file for later ... 
[14:52:42    INFO]  - starting ANNZ::loadReaders() ... 
[14:52:43    INFO]  - will validate that the training was not a complete failure ... 
[14:52:43    INFO]  - training seems to have been successful! will move on ...
[14:52:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:52:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:52:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:52:47    INFO] ----------------------------------------------------------------------------------------------------
[14:52:47    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:52:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:52:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:52:47    INFO]    - weights:            1
[14:52:47    INFO] ----------------------------------------------------------------------------------------------------
[14:52:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:52:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[14:52:55    INFO]  - Will gen. input-parameter errors ...
[14:52:56    INFO]  - starting ANNZ::loadReaders() ... 
[14:53:01    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[14:55:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:55:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:55:24    INFO]  -----------------------------------------------------------------------------------------------------------
[14:55:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[14:55:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:55:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:55:57    INFO]  -----------------------------------------------------------------------------------------------------------
[14:55:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:55:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:55:58    INFO]  - will validate that the bias-correction actually improved the result ...
[14:55:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:55:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[14:56:03    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_14/plots/
[14:56:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_14/plots output/SPEC_advanced9/regres/train/ANNZ_14/plots_biasCor_before
[14:56:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:56:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[14:56:20    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_14/plots/
[14:56:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_14/plots output/SPEC_advanced9/regres/train/ANNZ_14/plots_biasCor_after
[14:56:32    INFO]  - Got original [KS-test,N_poiss]: [0.100941 , 6.44299] , after the bias-correction: [0.0448129 , 5.75736] --> will KEEP the correction !

(14:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:56 INFO) 
[14:56:36    INFO]  -----------------------------------------------------
[14:56:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:56:36    INFO]  -----------------------------------------------------------------------------------------------------------
[14:56:36    INFO]  - starting ANNZ::Init()  ... 
[14:56:38    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_15/saveOpt.txt ...
[14:56:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:56:44    INFO] ----------------------------------------------------------------------------------------------------
[14:56:44    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=440:BoostType=Bagging:VarTransform=N
[14:56:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:56:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:56:44    INFO]      cuts (train):        ,
[14:56:44    INFO]      cuts (valid):       
[14:56:44    INFO]    - weights:            1
[14:56:44    INFO] ----------------------------------------------------------------------------------------------------
[14:56:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:57:35    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[14:57:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[14:57:39    INFO]  - Will gen. input-parameter errors ...
[14:57:42    INFO]  - starting ANNZ::loadReaders() ... 
[14:57:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:00:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:00:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:00:16    INFO]  -----------------------------------------------------------------------------------------------------------
[15:00:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:00:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:00:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:00:52    INFO]  -----------------------------------------------------------------------------------------------------------
[15:00:52    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:00:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:00:54    INFO]  - will try to derive a bias correction ... 
[15:00:54    INFO]  - will validate that training produced an XML file for later ... 
[15:00:54    INFO]  - starting ANNZ::loadReaders() ... 
[15:01:01    INFO]  - will validate that the training was not a complete failure ... 
[15:01:01    INFO]  - training seems to have been successful! will move on ...
[15:01:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:01:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:01:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:01:07    INFO] ----------------------------------------------------------------------------------------------------
[15:01:07    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:01:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:01:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:01:07    INFO]    - weights:            1
[15:01:07    INFO] ----------------------------------------------------------------------------------------------------
[15:01:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:01:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[15:01:18    INFO]  - Will gen. input-parameter errors ...
[15:01:21    INFO]  - starting ANNZ::loadReaders() ... 
[15:01:32    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:04:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:04:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:04:20    INFO]  -----------------------------------------------------------------------------------------------------------
[15:04:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:05:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:05:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:05:04    INFO]  -----------------------------------------------------------------------------------------------------------
[15:05:05    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:05:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:05:07    INFO]  - will validate that the bias-correction actually improved the result ...
[15:05:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:05:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[15:05:12    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_15/plots/
[15:05:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_15/plots output/SPEC_advanced9/regres/train/ANNZ_15/plots_biasCor_before
[15:05:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:05:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[15:05:30    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_15/plots/
[15:05:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_15/plots output/SPEC_advanced9/regres/train/ANNZ_15/plots_biasCor_after
[15:05:42    INFO]  - Got original [KS-test,N_poiss]: [0.0850325 , 6.67145] , after the bias-correction: [0.0445889 , 5.66151] --> will KEEP the correction !

(15:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:05 INFO) 
[15:05:46    INFO]  -----------------------------------------------------
[15:05:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:05:46    INFO]  -----------------------------------------------------------------------------------------------------------
[15:05:46    INFO]  - starting ANNZ::Init()  ... 
[15:05:47    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_16/saveOpt.txt ...
[15:05:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:05:53    INFO] ----------------------------------------------------------------------------------------------------
[15:05:53    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=540:BoostType=AdaBoost:VarTransform=N,P
[15:05:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:05:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:05:53    INFO]      cuts (train):        ,
[15:05:53    INFO]      cuts (valid):       
[15:05:53    INFO]    - weights:            1
[15:05:53    INFO] ----------------------------------------------------------------------------------------------------
[15:05:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:06:26    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[15:06:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[15:06:29    INFO]  - Will gen. input-parameter errors ...
[15:06:30    INFO]  - starting ANNZ::loadReaders() ... 
[15:06:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:09:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:09:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:09:51    INFO]  -----------------------------------------------------------------------------------------------------------
[15:09:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:10:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:10:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:10:41    INFO]  -----------------------------------------------------------------------------------------------------------
[15:10:41    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:10:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:10:42    INFO]  - will try to derive a bias correction ... 
[15:10:42    INFO]  - will validate that training produced an XML file for later ... 
[15:10:42    INFO]  - starting ANNZ::loadReaders() ... 
[15:10:44    INFO]  - will validate that the training was not a complete failure ... 
[15:10:44    INFO]  - training seems to have been successful! will move on ...
[15:10:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:10:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:10:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:10:48    INFO] ----------------------------------------------------------------------------------------------------
[15:10:48    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:10:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:10:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:10:48    INFO]    - weights:            1
[15:10:48    INFO] ----------------------------------------------------------------------------------------------------
[15:10:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:10:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[15:10:56    INFO]  - Will gen. input-parameter errors ...
[15:10:57    INFO]  - starting ANNZ::loadReaders() ... 
[15:11:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:14:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:14:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:14:09    INFO]  -----------------------------------------------------------------------------------------------------------
[15:14:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:14:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:14:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:14:52    INFO]  -----------------------------------------------------------------------------------------------------------
[15:14:52    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:14:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:14:53    INFO]  - will validate that the bias-correction actually improved the result ...
[15:14:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:14:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[15:15:01    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_16/plots/
[15:15:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_16/plots output/SPEC_advanced9/regres/train/ANNZ_16/plots_biasCor_before
[15:15:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:15:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[15:15:17    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_16/plots/
[15:15:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_16/plots output/SPEC_advanced9/regres/train/ANNZ_16/plots_biasCor_after
[15:15:28    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43565] , after the bias-correction: [0.0444768 , 5.70774] --> will KEEP the correction !

(15:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:15 INFO) 
[15:15:32    INFO]  -----------------------------------------------------
[15:15:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:15:32    INFO]  -----------------------------------------------------------------------------------------------------------
[15:15:32    INFO]  - starting ANNZ::Init()  ... 
[15:15:34    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_17/saveOpt.txt ...
[15:15:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:15:39    INFO] ----------------------------------------------------------------------------------------------------
[15:15:39    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[15:15:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:15:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:15:39    INFO]      cuts (train):        ,
[15:15:39    INFO]      cuts (valid):       
[15:15:39    INFO]    - weights:            1
[15:15:39    INFO] ----------------------------------------------------------------------------------------------------
[15:15:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:16:16    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[15:16:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[15:16:20    INFO]  - Will gen. input-parameter errors ...
[15:16:22    INFO]  - starting ANNZ::loadReaders() ... 
[15:16:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:19:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:19:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:19:49    INFO]  -----------------------------------------------------------------------------------------------------------
[15:19:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:20:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:20:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:20:37    INFO]  -----------------------------------------------------------------------------------------------------------
[15:20:37    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:20:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:20:39    INFO]  - will try to derive a bias correction ... 
[15:20:39    INFO]  - will validate that training produced an XML file for later ... 
[15:20:39    INFO]  - starting ANNZ::loadReaders() ... 
[15:20:42    INFO]  - will validate that the training was not a complete failure ... 
[15:20:43    INFO]  - training seems to have been successful! will move on ...
[15:20:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:20:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:20:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:20:48    INFO] ----------------------------------------------------------------------------------------------------
[15:20:48    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:20:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:20:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:20:48    INFO]    - weights:            1
[15:20:48    INFO] ----------------------------------------------------------------------------------------------------
[15:20:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:20:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[15:20:57    INFO]  - Will gen. input-parameter errors ...
[15:20:59    INFO]  - starting ANNZ::loadReaders() ... 
[15:21:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:24:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:24:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:24:35    INFO]  -----------------------------------------------------------------------------------------------------------
[15:24:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:25:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:25:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:25:26    INFO]  -----------------------------------------------------------------------------------------------------------
[15:25:26    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:25:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:25:28    INFO]  - will validate that the bias-correction actually improved the result ...
[15:25:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:25:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[15:25:34    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_17/plots/
[15:25:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_17/plots output/SPEC_advanced9/regres/train/ANNZ_17/plots_biasCor_before
[15:25:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:25:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[15:25:50    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_17/plots/
[15:26:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_17/plots output/SPEC_advanced9/regres/train/ANNZ_17/plots_biasCor_after
[15:26:03    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.86915] , after the bias-correction: [0.0444768 , 5.62586] --> will KEEP the correction !

(15:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:26 INFO) 
[15:26:07    INFO]  -----------------------------------------------------
[15:26:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:26:07    INFO]  -----------------------------------------------------------------------------------------------------------
[15:26:08    INFO]  - starting ANNZ::Init()  ... 
[15:26:09    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_18/saveOpt.txt ...
[15:26:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:26:15    INFO] ----------------------------------------------------------------------------------------------------
[15:26:15    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N,P
[15:26:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:26:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:26:15    INFO]      cuts (train):        ,
[15:26:15    INFO]      cuts (valid):       
[15:26:15    INFO]    - weights:            1
[15:26:15    INFO] ----------------------------------------------------------------------------------------------------
[15:26:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:27:16    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[15:27:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[15:27:21    INFO]  - Will gen. input-parameter errors ...
[15:27:24    INFO]  - starting ANNZ::loadReaders() ... 
[15:27:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:34:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:34:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:34:11    INFO]  -----------------------------------------------------------------------------------------------------------
[15:34:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:35:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:35:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:35:41    INFO]  -----------------------------------------------------------------------------------------------------------
[15:35:42    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:35:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:35:44    INFO]  - will try to derive a bias correction ... 
[15:35:44    INFO]  - will validate that training produced an XML file for later ... 
[15:35:44    INFO]  - starting ANNZ::loadReaders() ... 
[15:35:50    INFO]  - will validate that the training was not a complete failure ... 
[15:35:51    INFO]  - training seems to have been successful! will move on ...
[15:35:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:35:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:35:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:35:57    INFO] ----------------------------------------------------------------------------------------------------
[15:35:57    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:35:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:35:57    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:35:57    INFO]    - weights:            1
[15:35:57    INFO] ----------------------------------------------------------------------------------------------------
[15:35:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:36:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[15:36:07    INFO]  - Will gen. input-parameter errors ...
[15:36:09    INFO]  - starting ANNZ::loadReaders() ... 
[15:36:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:43:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:43:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:43:01    INFO]  -----------------------------------------------------------------------------------------------------------
[15:43:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:44:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:44:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:44:59    INFO]  -----------------------------------------------------------------------------------------------------------
[15:44:59    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:45:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:45:02    INFO]  - will validate that the bias-correction actually improved the result ...
[15:45:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:45:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[15:45:11    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_18/plots/
[15:45:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_18/plots output/SPEC_advanced9/regres/train/ANNZ_18/plots_biasCor_before
[15:45:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:45:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[15:45:34    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_18/plots/
[15:45:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_18/plots output/SPEC_advanced9/regres/train/ANNZ_18/plots_biasCor_after
[15:45:47    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.90095] , after the bias-correction: [0.0432445 , 5.75087] --> will KEEP the correction !

(15:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:45 INFO) 
[15:45:51    INFO]  -----------------------------------------------------
[15:45:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:45:51    INFO]  -----------------------------------------------------------------------------------------------------------
[15:45:52    INFO]  - starting ANNZ::Init()  ... 
[15:45:53    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_19/saveOpt.txt ...
[15:45:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:45:59    INFO] ----------------------------------------------------------------------------------------------------
[15:45:59    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N
[15:45:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:45:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:45:59    INFO]      cuts (train):        ,
[15:45:59    INFO]      cuts (valid):       
[15:45:59    INFO]    - weights:            1
[15:45:59    INFO] ----------------------------------------------------------------------------------------------------
[15:45:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:46:36    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[15:46:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[15:46:39    INFO]  - Will gen. input-parameter errors ...
[15:46:41    INFO]  - starting ANNZ::loadReaders() ... 
[15:46:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:48:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:48:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:48:33    INFO]  -----------------------------------------------------------------------------------------------------------
[15:48:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:48:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:48:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:48:56    INFO]  -----------------------------------------------------------------------------------------------------------
[15:48:56    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:48:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:48:58    INFO]  - will try to derive a bias correction ... 
[15:48:58    INFO]  - will validate that training produced an XML file for later ... 
[15:48:58    INFO]  - starting ANNZ::loadReaders() ... 
[15:49:02    INFO]  - will validate that the training was not a complete failure ... 
[15:49:02    INFO]  - training seems to have been successful! will move on ...
[15:49:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:49:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:49:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:49:07    INFO] ----------------------------------------------------------------------------------------------------
[15:49:07    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:49:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:49:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:49:07    INFO]    - weights:            1
[15:49:07    INFO] ----------------------------------------------------------------------------------------------------
[15:49:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:49:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[15:49:17    INFO]  - Will gen. input-parameter errors ...
[15:49:19    INFO]  - starting ANNZ::loadReaders() ... 
[15:49:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:51:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:51:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:51:18    INFO]  -----------------------------------------------------------------------------------------------------------
[15:51:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:51:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:51:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:51:45    INFO]  -----------------------------------------------------------------------------------------------------------
[15:51:45    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:51:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:51:47    INFO]  - will validate that the bias-correction actually improved the result ...
[15:51:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:51:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[15:51:54    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_19/plots/
[15:52:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_19/plots output/SPEC_advanced9/regres/train/ANNZ_19/plots_biasCor_before
[15:52:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:52:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[15:52:14    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_19/plots/
[15:52:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_19/plots output/SPEC_advanced9/regres/train/ANNZ_19/plots_biasCor_after
[15:52:33    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.67735] , after the bias-correction: [0.0459332 , 5.6142] --> will KEEP the correction !

(15:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:52 INFO) 
[15:52:37    INFO]  -----------------------------------------------------
[15:52:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:52:37    INFO]  -----------------------------------------------------------------------------------------------------------
[15:52:38    INFO]  - starting ANNZ::Init()  ... 
[15:52:39    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_20/saveOpt.txt ...
[15:52:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:52:45    INFO] ----------------------------------------------------------------------------------------------------
[15:52:45    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N
[15:52:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:52:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:52:45    INFO]      cuts (train):        ,
[15:52:45    INFO]      cuts (valid):       
[15:52:45    INFO]    - weights:            1
[15:52:45    INFO] ----------------------------------------------------------------------------------------------------
[15:52:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:53:47    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[15:53:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[15:53:52    INFO]  - Will gen. input-parameter errors ...
[15:53:54    INFO]  - starting ANNZ::loadReaders() ... 
[15:54:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[15:57:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:57:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:57:33    INFO]  -----------------------------------------------------------------------------------------------------------
[15:57:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[15:58:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:58:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:58:19    INFO]  -----------------------------------------------------------------------------------------------------------
[15:58:19    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:58:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:58:22    INFO]  - will try to derive a bias correction ... 
[15:58:22    INFO]  - will validate that training produced an XML file for later ... 
[15:58:22    INFO]  - starting ANNZ::loadReaders() ... 
[15:58:27    INFO]  - will validate that the training was not a complete failure ... 
[15:58:27    INFO]  - training seems to have been successful! will move on ...
[15:58:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:58:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:58:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:58:34    INFO] ----------------------------------------------------------------------------------------------------
[15:58:34    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:58:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:58:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:58:34    INFO]    - weights:            1
[15:58:34    INFO] ----------------------------------------------------------------------------------------------------
[15:58:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:58:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[15:58:45    INFO]  - Will gen. input-parameter errors ...
[15:58:47    INFO]  - starting ANNZ::loadReaders() ... 
[15:59:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:03:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:03:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:03:24    INFO]  -----------------------------------------------------------------------------------------------------------
[16:03:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:04:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:04:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:04:15    INFO]  -----------------------------------------------------------------------------------------------------------
[16:04:15    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:04:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:04:18    INFO]  - will validate that the bias-correction actually improved the result ...
[16:04:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:04:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[16:04:23    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_20/plots/
[16:04:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_20/plots output/SPEC_advanced9/regres/train/ANNZ_20/plots_biasCor_before
[16:04:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:04:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[16:04:40    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_20/plots/
[16:04:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_20/plots output/SPEC_advanced9/regres/train/ANNZ_20/plots_biasCor_after
[16:04:52    INFO]  - Got original [KS-test,N_poiss]: [0.0845844 , 6.74033] , after the bias-correction: [0.0500785 , 5.6416] --> will KEEP the correction !

(16:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:04 INFO) 
[16:04:57    INFO]  -----------------------------------------------------
[16:04:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:04:57    INFO]  -----------------------------------------------------------------------------------------------------------
[16:04:58    INFO]  - starting ANNZ::Init()  ... 
[16:04:59    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_21/saveOpt.txt ...
[16:05:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:05:05    INFO] ----------------------------------------------------------------------------------------------------
[16:05:05    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=400:BoostType=AdaBoost:VarTransform=N
[16:05:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:05:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:05:05    INFO]      cuts (train):        ,
[16:05:05    INFO]      cuts (valid):       
[16:05:05    INFO]    - weights:            1
[16:05:05    INFO] ----------------------------------------------------------------------------------------------------
[16:05:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:05:34    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[16:05:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[16:05:37    INFO]  - Will gen. input-parameter errors ...
[16:05:38    INFO]  - starting ANNZ::loadReaders() ... 
[16:05:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:07:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:07:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:07:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:07:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:07:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:07:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:07:35    INFO]  -----------------------------------------------------------------------------------------------------------
[16:07:35    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:07:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:07:36    INFO]  - will try to derive a bias correction ... 
[16:07:36    INFO]  - will validate that training produced an XML file for later ... 
[16:07:36    INFO]  - starting ANNZ::loadReaders() ... 
[16:07:38    INFO]  - will validate that the training was not a complete failure ... 
[16:07:38    INFO]  - training seems to have been successful! will move on ...
[16:07:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:07:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:07:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:07:42    INFO] ----------------------------------------------------------------------------------------------------
[16:07:42    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:07:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:07:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:07:42    INFO]    - weights:            1
[16:07:42    INFO] ----------------------------------------------------------------------------------------------------
[16:07:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:07:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[16:07:51    INFO]  - Will gen. input-parameter errors ...
[16:07:53    INFO]  - starting ANNZ::loadReaders() ... 
[16:07:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:09:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:09:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:09:52    INFO]  -----------------------------------------------------------------------------------------------------------
[16:09:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:10:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:10:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:10:18    INFO]  -----------------------------------------------------------------------------------------------------------
[16:10:18    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:10:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:10:19    INFO]  - will validate that the bias-correction actually improved the result ...
[16:10:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:10:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
Warning in <Fit>: Fit data is empty 
[16:10:25    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_21/plots/
[16:10:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_21/plots output/SPEC_advanced9/regres/train/ANNZ_21/plots_biasCor_before
[16:10:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:10:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
Warning in <Fit>: Fit data is empty 
[16:10:41    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_21/plots/
[16:10:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_21/plots output/SPEC_advanced9/regres/train/ANNZ_21/plots_biasCor_after
[16:10:53    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11987] , after the bias-correction: [0.0497423 , 6.02496] --> will KEEP the correction !

(16:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:10 INFO) 
[16:10:57    INFO]  -----------------------------------------------------
[16:10:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:10:57    INFO]  -----------------------------------------------------------------------------------------------------------
[16:10:57    INFO]  - starting ANNZ::Init()  ... 
[16:11:08    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_22/saveOpt.txt ...
[16:11:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:11:14    INFO] ----------------------------------------------------------------------------------------------------
[16:11:14    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=280:BoostType=Bagging:VarTransform=N,P
[16:11:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:11:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:11:14    INFO]      cuts (train):        ,
[16:11:14    INFO]      cuts (valid):       
[16:11:14    INFO]    - weights:            1
[16:11:14    INFO] ----------------------------------------------------------------------------------------------------
[16:11:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:11:45    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[16:11:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[16:11:48    INFO]  - Will gen. input-parameter errors ...
[16:11:50    INFO]  - starting ANNZ::loadReaders() ... 
[16:11:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:14:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:14:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:14:23    INFO]  -----------------------------------------------------------------------------------------------------------
[16:14:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:15:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:15:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:15:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:15:03    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:15:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:15:04    INFO]  - will try to derive a bias correction ... 
[16:15:04    INFO]  - will validate that training produced an XML file for later ... 
[16:15:04    INFO]  - starting ANNZ::loadReaders() ... 
[16:15:07    INFO]  - will validate that the training was not a complete failure ... 
[16:15:07    INFO]  - training seems to have been successful! will move on ...
[16:15:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:15:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:15:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:15:12    INFO] ----------------------------------------------------------------------------------------------------
[16:15:12    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:15:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:15:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:15:12    INFO]    - weights:            1
[16:15:12    INFO] ----------------------------------------------------------------------------------------------------
[16:15:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:15:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[16:15:21    INFO]  - Will gen. input-parameter errors ...
[16:15:22    INFO]  - starting ANNZ::loadReaders() ... 
[16:15:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:18:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:18:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:18:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:18:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:18:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:18:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:18:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:18:37    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:18:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:18:38    INFO]  - will validate that the bias-correction actually improved the result ...
[16:18:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:18:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[16:18:44    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_22/plots/
[16:18:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_22/plots output/SPEC_advanced9/regres/train/ANNZ_22/plots_biasCor_before
[16:18:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:18:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[16:19:00    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_22/plots/
[16:19:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_22/plots output/SPEC_advanced9/regres/train/ANNZ_22/plots_biasCor_after
[16:19:12    INFO]  - Got original [KS-test,N_poiss]: [0.093883 , 6.85735] , after the bias-correction: [0.041564 , 5.42448] --> will KEEP the correction !

(16:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:19 INFO) 
[16:19:16    INFO]  -----------------------------------------------------
[16:19:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:19:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:19:16    INFO]  - starting ANNZ::Init()  ... 
[16:19:17    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_23/saveOpt.txt ...
[16:19:22    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:19:23    INFO] ----------------------------------------------------------------------------------------------------
[16:19:23    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[16:19:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:19:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:19:23    INFO]      cuts (train):        ,
[16:19:23    INFO]      cuts (valid):       
[16:19:23    INFO]    - weights:            1
[16:19:23    INFO] ----------------------------------------------------------------------------------------------------
[16:19:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:20:22    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[16:20:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[16:20:27    INFO]  - Will gen. input-parameter errors ...
[16:20:29    INFO]  - starting ANNZ::loadReaders() ... 
[16:20:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:23:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:23:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:23:40    INFO]  -----------------------------------------------------------------------------------------------------------
[16:23:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:24:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:24:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:24:28    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:28    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:24:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:24:30    INFO]  - will try to derive a bias correction ... 
[16:24:30    INFO]  - will validate that training produced an XML file for later ... 
[16:24:30    INFO]  - starting ANNZ::loadReaders() ... 
[16:24:35    INFO]  - will validate that the training was not a complete failure ... 
[16:24:36    INFO]  - training seems to have been successful! will move on ...
[16:24:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:24:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:24:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:24:41    INFO] ----------------------------------------------------------------------------------------------------
[16:24:41    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:24:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:24:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:24:41    INFO]    - weights:            1
[16:24:41    INFO] ----------------------------------------------------------------------------------------------------
[16:24:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:24:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[16:24:51    INFO]  - Will gen. input-parameter errors ...
[16:24:53    INFO]  - starting ANNZ::loadReaders() ... 
[16:25:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:29:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:29:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:29:07    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:29:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:29:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:29:54    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:54    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:29:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:29:56    INFO]  - will validate that the bias-correction actually improved the result ...
[16:29:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:29:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[16:30:03    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_23/plots/
[16:30:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_23/plots output/SPEC_advanced9/regres/train/ANNZ_23/plots_biasCor_before
[16:30:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:30:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[16:30:20    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_23/plots/
[16:30:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_23/plots output/SPEC_advanced9/regres/train/ANNZ_23/plots_biasCor_after
[16:30:32    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(16:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:30 INFO) 
[16:30:36    INFO]  -----------------------------------------------------
[16:30:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:30:36    INFO]  -----------------------------------------------------------------------------------------------------------
[16:30:37    INFO]  - starting ANNZ::Init()  ... 
[16:30:38    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_24/saveOpt.txt ...
[16:30:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:30:43    INFO] ----------------------------------------------------------------------------------------------------
[16:30:43    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=320:BoostType=AdaBoost:VarTransform=N,P
[16:30:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:30:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:30:43    INFO]      cuts (train):        ,
[16:30:43    INFO]      cuts (valid):       
[16:30:43    INFO]    - weights:            1
[16:30:43    INFO] ----------------------------------------------------------------------------------------------------
[16:30:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:31:03    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[16:31:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[16:31:05    INFO]  - Will gen. input-parameter errors ...
[16:31:06    INFO]  - starting ANNZ::loadReaders() ... 
[16:31:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:33:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:33:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:33:06    INFO]  -----------------------------------------------------------------------------------------------------------
[16:33:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:33:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:33:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:33:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:33:38    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:33:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:33:38    INFO]  - will try to derive a bias correction ... 
[16:33:38    INFO]  - will validate that training produced an XML file for later ... 
[16:33:38    INFO]  - starting ANNZ::loadReaders() ... 
[16:33:40    INFO]  - will validate that the training was not a complete failure ... 
[16:33:40    INFO]  - training seems to have been successful! will move on ...
[16:33:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:33:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:33:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:33:43    INFO] ----------------------------------------------------------------------------------------------------
[16:33:43    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:33:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:33:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:33:43    INFO]    - weights:            1
[16:33:43    INFO] ----------------------------------------------------------------------------------------------------
[16:33:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:33:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[16:33:49    INFO]  - Will gen. input-parameter errors ...
[16:33:50    INFO]  - starting ANNZ::loadReaders() ... 
[16:33:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:36:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:36:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:36:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:36:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:36:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:36:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:36:57    INFO]  -----------------------------------------------------------------------------------------------------------
[16:36:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:36:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:36:58    INFO]  - will validate that the bias-correction actually improved the result ...
[16:36:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:36:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
Warning in <Fit>: Fit data is empty 
[16:37:03    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_24/plots/
[16:37:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_24/plots output/SPEC_advanced9/regres/train/ANNZ_24/plots_biasCor_before
[16:37:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:37:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[16:37:19    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_24/plots/
[16:37:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_24/plots output/SPEC_advanced9/regres/train/ANNZ_24/plots_biasCor_after
[16:37:31    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40225] , after the bias-correction: [0.0434685 , 5.80056] --> will KEEP the correction !

(16:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:37 INFO) 
[16:37:34    INFO]  -----------------------------------------------------
[16:37:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:37:34    INFO]  -----------------------------------------------------------------------------------------------------------
[16:37:35    INFO]  - starting ANNZ::Init()  ... 
[16:37:35    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_25/saveOpt.txt ...
[16:37:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:37:41    INFO] ----------------------------------------------------------------------------------------------------
[16:37:41    INFO]  - will book (ANNZ_25) method(BDT) with options: :NTrees=500:BoostType=AdaBoost:VarTransform=N,P
[16:37:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:37:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:37:41    INFO]      cuts (train):        ,
[16:37:41    INFO]      cuts (valid):       
[16:37:41    INFO]    - weights:            1
[16:37:41    INFO] ----------------------------------------------------------------------------------------------------
[16:37:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:38:07    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_25/ANNZ_25_weights/saveTrainOpt_ANNZ_25.txt ...
[16:38:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[16:38:09    INFO]  - Will gen. input-parameter errors ...
[16:38:10    INFO]  - starting ANNZ::loadReaders() ... 
[16:38:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:41:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:41:10    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:41:10    INFO]  -----------------------------------------------------------------------------------------------------------
[16:41:10    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:41:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:41:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:41:50    INFO]  -----------------------------------------------------------------------------------------------------------
[16:41:50    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:41:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:41:51    INFO]  - will try to derive a bias correction ... 
[16:41:51    INFO]  - will validate that training produced an XML file for later ... 
[16:41:51    INFO]  - starting ANNZ::loadReaders() ... 
[16:41:52    INFO]  - will validate that the training was not a complete failure ... 
[16:41:53    INFO]  - training seems to have been successful! will move on ...
[16:41:53    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:41:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:41:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:41:56    INFO] ----------------------------------------------------------------------------------------------------
[16:41:56    INFO]  - will book (ANNZ_25_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:41:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:41:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:41:56    INFO]    - weights:            1
[16:41:56    INFO] ----------------------------------------------------------------------------------------------------
[16:41:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:42:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[16:42:03    INFO]  - Will gen. input-parameter errors ...
[16:42:04    INFO]  - starting ANNZ::loadReaders() ... 
[16:42:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:44:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:44:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:44:34    INFO]  -----------------------------------------------------------------------------------------------------------
[16:44:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:45:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:45:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:45:11    INFO]  -----------------------------------------------------------------------------------------------------------
[16:45:11    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:45:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:45:12    INFO]  - will validate that the bias-correction actually improved the result ...
[16:45:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:45:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
[16:45:17    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_25/plots/
[16:45:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_25/plots output/SPEC_advanced9/regres/train/ANNZ_25/plots_biasCor_before
[16:45:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:45:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
[16:45:33    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_25/plots/
[16:45:44        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_25/plots output/SPEC_advanced9/regres/train/ANNZ_25/plots_biasCor_after
[16:45:44    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43485] , after the bias-correction: [0.0445889 , 5.68114] --> will KEEP the correction !

(16:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:45 INFO) 
[16:45:47    INFO]  -----------------------------------------------------
[16:45:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:45:47    INFO]  -----------------------------------------------------------------------------------------------------------
[16:45:47    INFO]  - starting ANNZ::Init()  ... 
[16:45:48    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_26/saveOpt.txt ...
[16:45:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:45:53    INFO] ----------------------------------------------------------------------------------------------------
[16:45:53    INFO]  - will book (ANNZ_26) method(BDT) with options: :NTrees=310:BoostType=AdaBoost:VarTransform=N,P
[16:45:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:45:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:45:53    INFO]      cuts (train):        ,
[16:45:53    INFO]      cuts (valid):       
[16:45:53    INFO]    - weights:            1
[16:45:53    INFO] ----------------------------------------------------------------------------------------------------
[16:45:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:46:12    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_26/ANNZ_26_weights/saveTrainOpt_ANNZ_26.txt ...
[16:46:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[16:46:13    INFO]  - Will gen. input-parameter errors ...
[16:46:14    INFO]  - starting ANNZ::loadReaders() ... 
[16:46:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:48:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:48:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:48:04    INFO]  -----------------------------------------------------------------------------------------------------------
[16:48:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:48:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:48:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:48:29    INFO]  -----------------------------------------------------------------------------------------------------------
[16:48:30    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:48:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:48:30    INFO]  - will try to derive a bias correction ... 
[16:48:30    INFO]  - will validate that training produced an XML file for later ... 
[16:48:30    INFO]  - starting ANNZ::loadReaders() ... 
[16:48:31    INFO]  - will validate that the training was not a complete failure ... 
[16:48:31    INFO]  - training seems to have been successful! will move on ...
[16:48:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:48:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:48:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:48:35    INFO] ----------------------------------------------------------------------------------------------------
[16:48:35    INFO]  - will book (ANNZ_26_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:48:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:48:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:48:35    INFO]    - weights:            1
[16:48:35    INFO] ----------------------------------------------------------------------------------------------------
[16:48:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:48:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[16:48:41    INFO]  - Will gen. input-parameter errors ...
[16:48:42    INFO]  - starting ANNZ::loadReaders() ... 
[16:48:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:50:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:50:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:50:56    INFO]  -----------------------------------------------------------------------------------------------------------
[16:50:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:51:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:51:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:51:27    INFO]  -----------------------------------------------------------------------------------------------------------
[16:51:28    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:51:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:51:28    INFO]  - will validate that the bias-correction actually improved the result ...
[16:51:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:51:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
Warning in <Fit>: Fit data is empty 
[16:51:34    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_26/plots/
[16:51:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_26/plots output/SPEC_advanced9/regres/train/ANNZ_26/plots_biasCor_before
[16:51:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:51:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[16:51:49    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_26/plots/
[16:52:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_26/plots output/SPEC_advanced9/regres/train/ANNZ_26/plots_biasCor_after
[16:52:00    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40465] , after the bias-correction: [0.0435806 , 5.8127] --> will KEEP the correction !

(16:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:52 INFO) 
[16:52:04    INFO]  -----------------------------------------------------
[16:52:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:52:04    INFO]  -----------------------------------------------------------------------------------------------------------
[16:52:04    INFO]  - starting ANNZ::Init()  ... 
[16:52:05    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_27/saveOpt.txt ...
[16:52:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:52:10    INFO] ----------------------------------------------------------------------------------------------------
[16:52:10    INFO]  - will book (ANNZ_27) method(BDT) with options: :NTrees=460:BoostType=AdaBoost:VarTransform=N,D
[16:52:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:52:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:52:10    INFO]      cuts (train):        ,
[16:52:10    INFO]      cuts (valid):       
[16:52:10    INFO]    - weights:            1
[16:52:10    INFO] ----------------------------------------------------------------------------------------------------
[16:52:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:52:39    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_27/ANNZ_27_weights/saveTrainOpt_ANNZ_27.txt ...
[16:52:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[16:52:41    INFO]  - Will gen. input-parameter errors ...
[16:52:42    INFO]  - starting ANNZ::loadReaders() ... 
[16:52:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:55:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:55:05    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:55:05    INFO]  -----------------------------------------------------------------------------------------------------------
[16:55:05    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:55:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:55:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:55:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:55:37    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:55:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:55:38    INFO]  - will try to derive a bias correction ... 
[16:55:38    INFO]  - will validate that training produced an XML file for later ... 
[16:55:38    INFO]  - starting ANNZ::loadReaders() ... 
[16:55:40    INFO]  - will validate that the training was not a complete failure ... 
[16:55:40    INFO]  - training seems to have been successful! will move on ...
[16:55:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:55:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:55:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:55:43    INFO] ----------------------------------------------------------------------------------------------------
[16:55:43    INFO]  - will book (ANNZ_27_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:55:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:55:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:55:43    INFO]    - weights:            1
[16:55:43    INFO] ----------------------------------------------------------------------------------------------------
[16:55:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:55:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[16:55:51    INFO]  - Will gen. input-parameter errors ...
[16:55:52    INFO]  - starting ANNZ::loadReaders() ... 
[16:55:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[16:58:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:58:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:58:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:58:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[16:58:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:58:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:58:35    INFO]  -----------------------------------------------------------------------------------------------------------
[16:58:36    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:58:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:58:37    INFO]  - will validate that the bias-correction actually improved the result ...
[16:58:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:58:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
[16:58:42    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_27/plots/
[16:58:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_27/plots output/SPEC_advanced9/regres/train/ANNZ_27/plots_biasCor_before
[16:58:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:58:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
[16:58:58    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_27/plots/
[16:59:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_27/plots output/SPEC_advanced9/regres/train/ANNZ_27/plots_biasCor_after
[16:59:09    INFO]  - Got original [KS-test,N_poiss]: [0.0945553 , 7.3896] , after the bias-correction: [0.043932 , 6.08315] --> will KEEP the correction !

(16:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:59 INFO) 
[16:59:12    INFO]  -----------------------------------------------------
[16:59:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:59:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:59:13    INFO]  - starting ANNZ::Init()  ... 
[16:59:14    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_28/saveOpt.txt ...
[16:59:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:59:19    INFO] ----------------------------------------------------------------------------------------------------
[16:59:19    INFO]  - will book (ANNZ_28) method(BDT) with options: :NTrees=360:BoostType=AdaBoost:VarTransform=N,P
[16:59:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:59:19    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:59:19    INFO]      cuts (train):        ,
[16:59:19    INFO]      cuts (valid):       
[16:59:19    INFO]    - weights:            1
[16:59:19    INFO] ----------------------------------------------------------------------------------------------------
[16:59:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:59:40    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_28/ANNZ_28_weights/saveTrainOpt_ANNZ_28.txt ...
[16:59:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[16:59:41    INFO]  - Will gen. input-parameter errors ...
[16:59:42    INFO]  - starting ANNZ::loadReaders() ... 
[16:59:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:01:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:01:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:01:41    INFO]  -----------------------------------------------------------------------------------------------------------
[17:01:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:02:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:02:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:02:11    INFO]  -----------------------------------------------------------------------------------------------------------
[17:02:11    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:02:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:02:11    INFO]  - will try to derive a bias correction ... 
[17:02:11    INFO]  - will validate that training produced an XML file for later ... 
[17:02:11    INFO]  - starting ANNZ::loadReaders() ... 
[17:02:13    INFO]  - will validate that the training was not a complete failure ... 
[17:02:13    INFO]  - training seems to have been successful! will move on ...
[17:02:13    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:02:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:02:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:02:16    INFO] ----------------------------------------------------------------------------------------------------
[17:02:16    INFO]  - will book (ANNZ_28_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:02:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:02:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:02:16    INFO]    - weights:            1
[17:02:16    INFO] ----------------------------------------------------------------------------------------------------
[17:02:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:02:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[17:02:23    INFO]  - Will gen. input-parameter errors ...
[17:02:24    INFO]  - starting ANNZ::loadReaders() ... 
[17:02:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:04:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:04:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:04:50    INFO]  -----------------------------------------------------------------------------------------------------------
[17:04:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:05:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:05:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:05:24    INFO]  -----------------------------------------------------------------------------------------------------------
[17:05:24    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:05:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:05:25    INFO]  - will validate that the bias-correction actually improved the result ...
[17:05:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:05:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
Warning in <Fit>: Fit data is empty 
[17:05:30    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_28/plots/
[17:05:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_28/plots output/SPEC_advanced9/regres/train/ANNZ_28/plots_biasCor_before
[17:05:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:05:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
[17:05:45    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_28/plots/
[17:05:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_28/plots output/SPEC_advanced9/regres/train/ANNZ_28/plots_biasCor_after
[17:05:57    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.403] , after the bias-correction: [0.0448129 , 5.80462] --> will KEEP the correction !

(17:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:06 INFO) 
[17:06:00    INFO]  -----------------------------------------------------
[17:06:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:06:00    INFO]  -----------------------------------------------------------------------------------------------------------
[17:06:00    INFO]  - starting ANNZ::Init()  ... 
[17:06:01    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_29/saveOpt.txt ...
[17:06:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:06:06    INFO] ----------------------------------------------------------------------------------------------------
[17:06:06    INFO]  - will book (ANNZ_29) method(BDT) with options: :NTrees=260:BoostType=AdaBoost:VarTransform=N,P
[17:06:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:06:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:06:06    INFO]      cuts (train):        ,
[17:06:06    INFO]      cuts (valid):       
[17:06:06    INFO]    - weights:            1
[17:06:06    INFO] ----------------------------------------------------------------------------------------------------
[17:06:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:06:22    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_29/ANNZ_29_weights/saveTrainOpt_ANNZ_29.txt ...
[17:06:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[17:06:23    INFO]  - Will gen. input-parameter errors ...
[17:06:24    INFO]  - starting ANNZ::loadReaders() ... 
[17:06:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:08:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:08:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:08:02    INFO]  -----------------------------------------------------------------------------------------------------------
[17:08:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:08:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:08:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:08:26    INFO]  -----------------------------------------------------------------------------------------------------------
[17:08:26    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:08:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:08:27    INFO]  - will try to derive a bias correction ... 
[17:08:27    INFO]  - will validate that training produced an XML file for later ... 
[17:08:27    INFO]  - starting ANNZ::loadReaders() ... 
[17:08:28    INFO]  - will validate that the training was not a complete failure ... 
[17:08:28    INFO]  - training seems to have been successful! will move on ...
[17:08:28    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:08:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:08:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:08:31    INFO] ----------------------------------------------------------------------------------------------------
[17:08:31    INFO]  - will book (ANNZ_29_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:08:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:08:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:08:31    INFO]    - weights:            1
[17:08:31    INFO] ----------------------------------------------------------------------------------------------------
[17:08:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:08:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[17:08:37    INFO]  - Will gen. input-parameter errors ...
[17:08:38    INFO]  - starting ANNZ::loadReaders() ... 
[17:08:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:10:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:10:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:10:48    INFO]  -----------------------------------------------------------------------------------------------------------
[17:10:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:11:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:11:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:11:17    INFO]  -----------------------------------------------------------------------------------------------------------
[17:11:18    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:11:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:11:18    INFO]  - will validate that the bias-correction actually improved the result ...
[17:11:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:11:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
Warning in <Fit>: Fit data is empty 
[17:11:24    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_29/plots/
[17:11:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_29/plots output/SPEC_advanced9/regres/train/ANNZ_29/plots_biasCor_before
[17:11:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:11:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
[17:11:39    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_29/plots/
[17:11:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_29/plots output/SPEC_advanced9/regres/train/ANNZ_29/plots_biasCor_after
[17:11:51    INFO]  - Got original [KS-test,N_poiss]: [0.100941 , 6.43675] , after the bias-correction: [0.0442528 , 5.77078] --> will KEEP the correction !

(17:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:11 INFO) 
[17:11:54    INFO]  -----------------------------------------------------
[17:11:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:11:54    INFO]  -----------------------------------------------------------------------------------------------------------
[17:11:54    INFO]  - starting ANNZ::Init()  ... 
[17:11:55    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_30/saveOpt.txt ...
[17:12:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:12:00    INFO] ----------------------------------------------------------------------------------------------------
[17:12:00    INFO]  - will book (ANNZ_30) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N,P
[17:12:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:12:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:12:00    INFO]      cuts (train):        ,
[17:12:00    INFO]      cuts (valid):       
[17:12:00    INFO]    - weights:            1
[17:12:00    INFO] ----------------------------------------------------------------------------------------------------
[17:12:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:12:55    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_30/ANNZ_30_weights/saveTrainOpt_ANNZ_30.txt ...
[17:13:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[17:13:00    INFO]  - Will gen. input-parameter errors ...
[17:13:02    INFO]  - starting ANNZ::loadReaders() ... 
[17:13:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:17:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:17:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:17:40    INFO]  -----------------------------------------------------------------------------------------------------------
[17:17:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:18:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:18:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:18:44    INFO]  -----------------------------------------------------------------------------------------------------------
[17:18:44    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:18:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:18:46    INFO]  - will try to derive a bias correction ... 
[17:18:46    INFO]  - will validate that training produced an XML file for later ... 
[17:18:46    INFO]  - starting ANNZ::loadReaders() ... 
[17:18:52    INFO]  - will validate that the training was not a complete failure ... 
[17:18:52    INFO]  - training seems to have been successful! will move on ...
[17:18:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:18:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:18:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:18:57    INFO] ----------------------------------------------------------------------------------------------------
[17:18:57    INFO]  - will book (ANNZ_30_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:18:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:18:57    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:18:57    INFO]    - weights:            1
[17:18:57    INFO] ----------------------------------------------------------------------------------------------------
[17:18:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:19:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[17:19:06    INFO]  - Will gen. input-parameter errors ...
[17:19:08    INFO]  - starting ANNZ::loadReaders() ... 
[17:19:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:23:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:23:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:23:56    INFO]  -----------------------------------------------------------------------------------------------------------
[17:23:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:25:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:25:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:25:04    INFO]  -----------------------------------------------------------------------------------------------------------
[17:25:04    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:25:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:25:06    INFO]  - will validate that the bias-correction actually improved the result ...
[17:25:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:25:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
[17:25:12    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_30/plots/
[17:25:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_30/plots output/SPEC_advanced9/regres/train/ANNZ_30/plots_biasCor_before
[17:25:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:25:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
[17:25:28    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_30/plots/
[17:25:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_30/plots output/SPEC_advanced9/regres/train/ANNZ_30/plots_biasCor_after
[17:25:40    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.90095] , after the bias-correction: [0.0432445 , 5.75087] --> will KEEP the correction !

(17:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:25 INFO) 
[17:25:44    INFO]  -----------------------------------------------------
[17:25:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:25:44    INFO]  -----------------------------------------------------------------------------------------------------------
[17:25:45    INFO]  - starting ANNZ::Init()  ... 
[17:25:45    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_31/saveOpt.txt ...
[17:25:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:25:51    INFO] ----------------------------------------------------------------------------------------------------
[17:25:51    INFO]  - will book (ANNZ_31) method(BDT) with options: :NTrees=500:BoostType=AdaBoostR2:VarTransform=N
[17:25:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:25:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:25:51    INFO]      cuts (train):        ,
[17:25:51    INFO]      cuts (valid):       
[17:25:51    INFO]    - weights:            1
[17:25:51    INFO] ----------------------------------------------------------------------------------------------------
[17:25:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:26:36    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_31/ANNZ_31_weights/saveTrainOpt_ANNZ_31.txt ...
[17:26:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[17:26:40    INFO]  - Will gen. input-parameter errors ...
[17:26:41    INFO]  - starting ANNZ::loadReaders() ... 
[17:26:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:35:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:35:10    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:35:10    INFO]  -----------------------------------------------------------------------------------------------------------
[17:35:10    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:37:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:37:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:37:13    INFO]  -----------------------------------------------------------------------------------------------------------
[17:37:13    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:37:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:37:14    INFO]  - will try to derive a bias correction ... 
[17:37:14    INFO]  - will validate that training produced an XML file for later ... 
[17:37:14    INFO]  - starting ANNZ::loadReaders() ... 
[17:37:17    INFO]  - will validate that the training was not a complete failure ... 
[17:37:18    INFO]  - training seems to have been successful! will move on ...
[17:37:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:37:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:37:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:37:22    INFO] ----------------------------------------------------------------------------------------------------
[17:37:22    INFO]  - will book (ANNZ_31_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:37:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:37:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:37:22    INFO]    - weights:            1
[17:37:22    INFO] ----------------------------------------------------------------------------------------------------
[17:37:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:37:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[17:37:29    INFO]  - Will gen. input-parameter errors ...
[17:37:31    INFO]  - starting ANNZ::loadReaders() ... 
[17:37:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:46:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:46:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:46:21    INFO]  -----------------------------------------------------------------------------------------------------------
[17:46:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:48:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:48:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:48:31    INFO]  -----------------------------------------------------------------------------------------------------------
[17:48:31    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:48:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:48:33    INFO]  - will validate that the bias-correction actually improved the result ...
[17:48:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:48:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
Warning in <Fit>: Fit data is empty 
[17:48:39    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_31/plots/
[17:48:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_31/plots output/SPEC_advanced9/regres/train/ANNZ_31/plots_biasCor_before
[17:48:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:48:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
[17:48:56    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_31/plots/
[17:49:08        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_31/plots output/SPEC_advanced9/regres/train/ANNZ_31/plots_biasCor_after
[17:49:08    INFO]  - Got original [KS-test,N_poiss]: [0.0626261 , 6.54453] , after the bias-correction: [0.0339458 , 5.5579] --> will KEEP the correction !

(17:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:49 INFO) 
[17:49:12    INFO]  -----------------------------------------------------
[17:49:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:49:12    INFO]  -----------------------------------------------------------------------------------------------------------
[17:49:12    INFO]  - starting ANNZ::Init()  ... 
[17:49:13    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_32/saveOpt.txt ...
[17:49:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:49:18    INFO] ----------------------------------------------------------------------------------------------------
[17:49:18    INFO]  - will book (ANNZ_32) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N
[17:49:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:49:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:49:18    INFO]      cuts (train):        ,
[17:49:18    INFO]      cuts (valid):       
[17:49:18    INFO]    - weights:            1
[17:49:18    INFO] ----------------------------------------------------------------------------------------------------
[17:49:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:49:49    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_32/ANNZ_32_weights/saveTrainOpt_ANNZ_32.txt ...
[17:49:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[17:49:52    INFO]  - Will gen. input-parameter errors ...
[17:49:53    INFO]  - starting ANNZ::loadReaders() ... 
[17:49:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:52:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:52:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:52:01    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:52:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:52:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:52:30    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:30    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:52:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:52:32    INFO]  - will try to derive a bias correction ... 
[17:52:32    INFO]  - will validate that training produced an XML file for later ... 
[17:52:32    INFO]  - starting ANNZ::loadReaders() ... 
[17:52:34    INFO]  - will validate that the training was not a complete failure ... 
[17:52:34    INFO]  - training seems to have been successful! will move on ...
[17:52:34    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:52:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:52:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:52:39    INFO] ----------------------------------------------------------------------------------------------------
[17:52:39    INFO]  - will book (ANNZ_32_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:52:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:52:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:52:39    INFO]    - weights:            1
[17:52:39    INFO] ----------------------------------------------------------------------------------------------------
[17:52:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:52:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[17:52:48    INFO]  - Will gen. input-parameter errors ...
[17:52:50    INFO]  - starting ANNZ::loadReaders() ... 
[17:52:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:54:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:54:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:54:38    INFO]  -----------------------------------------------------------------------------------------------------------
[17:54:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[17:55:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:55:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:55:03    INFO]  -----------------------------------------------------------------------------------------------------------
[17:55:03    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:55:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:55:04    INFO]  - will validate that the bias-correction actually improved the result ...
[17:55:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:55:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
Warning in <Fit>: Fit data is empty 
[17:55:09    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_32/plots/
[17:55:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_32/plots output/SPEC_advanced9/regres/train/ANNZ_32/plots_biasCor_before
[17:55:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:55:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
Warning in <Fit>: Fit data is empty 
[17:55:25    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_32/plots/
[17:55:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_32/plots output/SPEC_advanced9/regres/train/ANNZ_32/plots_biasCor_after
[17:55:36    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12424] , after the bias-correction: [0.0495183 , 5.94383] --> will KEEP the correction !

(17:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=580:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:55 INFO) 
[17:55:40    INFO]  -----------------------------------------------------
[17:55:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:55:40    INFO]  -----------------------------------------------------------------------------------------------------------
[17:55:40    INFO]  - starting ANNZ::Init()  ... 
[17:55:41    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_33/saveOpt.txt ...
[17:55:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:55:46    INFO] ----------------------------------------------------------------------------------------------------
[17:55:46    INFO]  - will book (ANNZ_33) method(BDT) with options: :NTrees=580:BoostType=AdaBoost:VarTransform=N,P
[17:55:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:55:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:55:46    INFO]      cuts (train):        ,
[17:55:46    INFO]      cuts (valid):       
[17:55:46    INFO]    - weights:            1
[17:55:46    INFO] ----------------------------------------------------------------------------------------------------
[17:55:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:56:17    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_33/ANNZ_33_weights/saveTrainOpt_ANNZ_33.txt ...
[17:56:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[17:56:19    INFO]  - Will gen. input-parameter errors ...
[17:56:21    INFO]  - starting ANNZ::loadReaders() ... 
[17:56:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[17:59:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:59:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:59:31    INFO]  -----------------------------------------------------------------------------------------------------------
[17:59:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:00:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:00:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:00:19    INFO]  -----------------------------------------------------------------------------------------------------------
[18:00:19    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:00:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:00:20    INFO]  - will try to derive a bias correction ... 
[18:00:20    INFO]  - will validate that training produced an XML file for later ... 
[18:00:20    INFO]  - starting ANNZ::loadReaders() ... 
[18:00:22    INFO]  - will validate that the training was not a complete failure ... 
[18:00:22    INFO]  - training seems to have been successful! will move on ...
[18:00:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:00:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:00:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:00:25    INFO] ----------------------------------------------------------------------------------------------------
[18:00:25    INFO]  - will book (ANNZ_33_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:00:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:00:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:00:25    INFO]    - weights:            1
[18:00:25    INFO] ----------------------------------------------------------------------------------------------------
[18:00:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:00:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[18:00:32    INFO]  - Will gen. input-parameter errors ...
[18:00:33    INFO]  - starting ANNZ::loadReaders() ... 
[18:00:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:03:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:03:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:03:16    INFO]  -----------------------------------------------------------------------------------------------------------
[18:03:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:03:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:03:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:03:57    INFO]  -----------------------------------------------------------------------------------------------------------
[18:03:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:03:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:03:58    INFO]  - will validate that the bias-correction actually improved the result ...
[18:03:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:03:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
Warning in <Fit>: Fit data is empty 
[18:04:03    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_33/plots/
[18:04:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_33/plots output/SPEC_advanced9/regres/train/ANNZ_33/plots_biasCor_before
[18:04:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:04:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
Warning in <Fit>: Fit data is empty 
[18:04:19    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_33/plots/
[18:04:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_33/plots output/SPEC_advanced9/regres/train/ANNZ_33/plots_biasCor_after
[18:04:30    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.4249] , after the bias-correction: [0.0447009 , 5.74093] --> will KEEP the correction !

(18:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:04 INFO) 
[18:04:33    INFO]  -----------------------------------------------------
[18:04:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:04:33    INFO]  -----------------------------------------------------------------------------------------------------------
[18:04:34    INFO]  - starting ANNZ::Init()  ... 
[18:04:34    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_34/saveOpt.txt ...
[18:04:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:04:39    INFO] ----------------------------------------------------------------------------------------------------
[18:04:39    INFO]  - will book (ANNZ_34) method(BDT) with options: :NTrees=330:BoostType=Bagging:VarTransform=N
[18:04:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:04:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:04:39    INFO]      cuts (train):        ,
[18:04:39    INFO]      cuts (valid):       
[18:04:39    INFO]    - weights:            1
[18:04:39    INFO] ----------------------------------------------------------------------------------------------------
[18:04:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:05:11    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_34/ANNZ_34_weights/saveTrainOpt_ANNZ_34.txt ...
[18:05:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[18:05:14    INFO]  - Will gen. input-parameter errors ...
[18:05:16    INFO]  - starting ANNZ::loadReaders() ... 
[18:05:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:06:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:06:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:06:58    INFO]  -----------------------------------------------------------------------------------------------------------
[18:06:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:07:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:07:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:07:24    INFO]  -----------------------------------------------------------------------------------------------------------
[18:07:24    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:07:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:07:25    INFO]  - will try to derive a bias correction ... 
[18:07:25    INFO]  - will validate that training produced an XML file for later ... 
[18:07:25    INFO]  - starting ANNZ::loadReaders() ... 
[18:07:28    INFO]  - will validate that the training was not a complete failure ... 
[18:07:29    INFO]  - training seems to have been successful! will move on ...
[18:07:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:07:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:07:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:07:33    INFO] ----------------------------------------------------------------------------------------------------
[18:07:33    INFO]  - will book (ANNZ_34_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:07:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:07:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:07:33    INFO]    - weights:            1
[18:07:33    INFO] ----------------------------------------------------------------------------------------------------
[18:07:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:07:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[18:07:41    INFO]  - Will gen. input-parameter errors ...
[18:07:42    INFO]  - starting ANNZ::loadReaders() ... 
[18:07:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:09:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:09:28    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:09:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:09:53    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:54    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:09:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:09:55    INFO]  - will validate that the bias-correction actually improved the result ...
[18:09:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:09:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[18:10:01    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_34/plots/
[18:10:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_34/plots output/SPEC_advanced9/regres/train/ANNZ_34/plots_biasCor_before
[18:10:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:10:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[18:10:17    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_34/plots/
[18:10:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_34/plots output/SPEC_advanced9/regres/train/ANNZ_34/plots_biasCor_after
[18:10:33    INFO]  - Got original [KS-test,N_poiss]: [0.0842483 , 6.6831] , after the bias-correction: [0.0462694 , 5.48265] --> will KEEP the correction !

(18:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:10 INFO) 
[18:10:37    INFO]  -----------------------------------------------------
[18:10:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:10:37    INFO]  -----------------------------------------------------------------------------------------------------------
[18:10:38    INFO]  - starting ANNZ::Init()  ... 
[18:10:38    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_35/saveOpt.txt ...
[18:10:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:10:45    INFO] ----------------------------------------------------------------------------------------------------
[18:10:45    INFO]  - will book (ANNZ_35) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N,P
[18:10:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:10:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:10:45    INFO]      cuts (train):        ,
[18:10:45    INFO]      cuts (valid):       
[18:10:45    INFO]    - weights:            1
[18:10:45    INFO] ----------------------------------------------------------------------------------------------------
[18:10:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:11:24    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_35/ANNZ_35_weights/saveTrainOpt_ANNZ_35.txt ...
[18:11:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[18:11:28    INFO]  - Will gen. input-parameter errors ...
[18:11:30    INFO]  - starting ANNZ::loadReaders() ... 
[18:11:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:14:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:14:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:14:48    INFO]  -----------------------------------------------------------------------------------------------------------
[18:14:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:15:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:15:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:15:38    INFO]  -----------------------------------------------------------------------------------------------------------
[18:15:38    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:15:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:15:40    INFO]  - will try to derive a bias correction ... 
[18:15:40    INFO]  - will validate that training produced an XML file for later ... 
[18:15:40    INFO]  - starting ANNZ::loadReaders() ... 
[18:15:44    INFO]  - will validate that the training was not a complete failure ... 
[18:15:44    INFO]  - training seems to have been successful! will move on ...
[18:15:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:15:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:15:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:15:49    INFO] ----------------------------------------------------------------------------------------------------
[18:15:49    INFO]  - will book (ANNZ_35_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:15:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:15:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:15:49    INFO]    - weights:            1
[18:15:49    INFO] ----------------------------------------------------------------------------------------------------
[18:15:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:15:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[18:15:57    INFO]  - Will gen. input-parameter errors ...
[18:15:59    INFO]  - starting ANNZ::loadReaders() ... 
[18:16:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:19:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:19:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:19:20    INFO]  -----------------------------------------------------------------------------------------------------------
[18:19:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:20:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:20:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:20:03    INFO]  -----------------------------------------------------------------------------------------------------------
[18:20:03    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:20:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:20:05    INFO]  - will validate that the bias-correction actually improved the result ...
[18:20:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:20:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
[18:20:10    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_35/plots/
[18:20:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_35/plots output/SPEC_advanced9/regres/train/ANNZ_35/plots_biasCor_before
[18:20:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:20:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
[18:20:26    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_35/plots/
[18:20:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_35/plots output/SPEC_advanced9/regres/train/ANNZ_35/plots_biasCor_after
[18:20:36    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.92138] , after the bias-correction: [0.0429084 , 5.51043] --> will KEEP the correction !

(18:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:20 INFO) 
[18:20:40    INFO]  -----------------------------------------------------
[18:20:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:20:40    INFO]  -----------------------------------------------------------------------------------------------------------
[18:20:41    INFO]  - starting ANNZ::Init()  ... 
[18:20:42    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_36/saveOpt.txt ...
[18:20:47    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:20:47    INFO] ----------------------------------------------------------------------------------------------------
[18:20:47    INFO]  - will book (ANNZ_36) method(BDT) with options: :NTrees=460:BoostType=Bagging:VarTransform=N
[18:20:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:20:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:20:47    INFO]      cuts (train):        ,
[18:20:47    INFO]      cuts (valid):       
[18:20:47    INFO]    - weights:            1
[18:20:47    INFO] ----------------------------------------------------------------------------------------------------
[18:20:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:21:30    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_36/ANNZ_36_weights/saveTrainOpt_ANNZ_36.txt ...
[18:21:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[18:21:34    INFO]  - Will gen. input-parameter errors ...
[18:21:36    INFO]  - starting ANNZ::loadReaders() ... 
[18:21:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:23:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:23:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:23:55    INFO]  -----------------------------------------------------------------------------------------------------------
[18:23:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:24:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:24:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:24:28    INFO]  -----------------------------------------------------------------------------------------------------------
[18:24:28    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:24:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:24:30    INFO]  - will try to derive a bias correction ... 
[18:24:30    INFO]  - will validate that training produced an XML file for later ... 
[18:24:30    INFO]  - starting ANNZ::loadReaders() ... 
[18:24:35    INFO]  - will validate that the training was not a complete failure ... 
[18:24:35    INFO]  - training seems to have been successful! will move on ...
[18:24:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:24:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:24:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:24:40    INFO] ----------------------------------------------------------------------------------------------------
[18:24:40    INFO]  - will book (ANNZ_36_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:24:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:24:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:24:40    INFO]    - weights:            1
[18:24:40    INFO] ----------------------------------------------------------------------------------------------------
[18:24:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:24:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[18:24:48    INFO]  - Will gen. input-parameter errors ...
[18:24:50    INFO]  - starting ANNZ::loadReaders() ... 
[18:25:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:27:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:27:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:27:22    INFO]  -----------------------------------------------------------------------------------------------------------
[18:27:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:27:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:27:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:27:57    INFO]  -----------------------------------------------------------------------------------------------------------
[18:27:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:27:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:27:59    INFO]  - will validate that the bias-correction actually improved the result ...
[18:27:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:27:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
[18:28:04    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_36/plots/
[18:28:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_36/plots output/SPEC_advanced9/regres/train/ANNZ_36/plots_biasCor_before
[18:28:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:28:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
[18:28:20    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_36/plots/
[18:28:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_36/plots output/SPEC_advanced9/regres/train/ANNZ_36/plots_biasCor_after
[18:28:31    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.645] , after the bias-correction: [0.0455971 , 5.59973] --> will KEEP the correction !

(18:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:28 INFO) 
[18:28:35    INFO]  -----------------------------------------------------
[18:28:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:28:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:28:36    INFO]  - starting ANNZ::Init()  ... 
[18:28:37    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_37/saveOpt.txt ...
[18:28:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:28:42    INFO] ----------------------------------------------------------------------------------------------------
[18:28:42    INFO]  - will book (ANNZ_37) method(BDT) with options: :NTrees=320:BoostType=AdaBoost:VarTransform=N,P
[18:28:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:28:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:28:42    INFO]      cuts (train):        ,
[18:28:42    INFO]      cuts (valid):       
[18:28:42    INFO]    - weights:            1
[18:28:42    INFO] ----------------------------------------------------------------------------------------------------
[18:28:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:28:59    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_37/ANNZ_37_weights/saveTrainOpt_ANNZ_37.txt ...
[18:29:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[18:29:01    INFO]  - Will gen. input-parameter errors ...
[18:29:02    INFO]  - starting ANNZ::loadReaders() ... 
[18:29:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:30:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:30:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:30:47    INFO]  -----------------------------------------------------------------------------------------------------------
[18:30:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:31:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:31:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:31:12    INFO]  -----------------------------------------------------------------------------------------------------------
[18:31:12    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:31:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:31:13    INFO]  - will try to derive a bias correction ... 
[18:31:13    INFO]  - will validate that training produced an XML file for later ... 
[18:31:13    INFO]  - starting ANNZ::loadReaders() ... 
[18:31:14    INFO]  - will validate that the training was not a complete failure ... 
[18:31:14    INFO]  - training seems to have been successful! will move on ...
[18:31:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:31:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:31:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:31:18    INFO] ----------------------------------------------------------------------------------------------------
[18:31:18    INFO]  - will book (ANNZ_37_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:31:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:31:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:31:18    INFO]    - weights:            1
[18:31:18    INFO] ----------------------------------------------------------------------------------------------------
[18:31:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:31:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[18:31:24    INFO]  - Will gen. input-parameter errors ...
[18:31:25    INFO]  - starting ANNZ::loadReaders() ... 
[18:31:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:33:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:33:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:33:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:34:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:34:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:34:06    INFO]  -----------------------------------------------------------------------------------------------------------
[18:34:06    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:34:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:34:07    INFO]  - will validate that the bias-correction actually improved the result ...
[18:34:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:34:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
Warning in <Fit>: Fit data is empty 
[18:34:12    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_37/plots/
[18:34:23        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_37/plots output/SPEC_advanced9/regres/train/ANNZ_37/plots_biasCor_before
[18:34:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:34:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
[18:34:27    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_37/plots/
[18:34:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_37/plots output/SPEC_advanced9/regres/train/ANNZ_37/plots_biasCor_after
[18:34:38    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40225] , after the bias-correction: [0.0434685 , 5.80056] --> will KEEP the correction !

(18:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:34 INFO) 
[18:34:41    INFO]  -----------------------------------------------------
[18:34:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:34:41    INFO]  -----------------------------------------------------------------------------------------------------------
[18:34:41    INFO]  - starting ANNZ::Init()  ... 
[18:34:43    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_38/saveOpt.txt ...
[18:34:47    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:34:48    INFO] ----------------------------------------------------------------------------------------------------
[18:34:48    INFO]  - will book (ANNZ_38) method(BDT) with options: :NTrees=460:BoostType=AdaBoostR2:VarTransform=N,P
[18:34:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:34:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:34:48    INFO]      cuts (train):        ,
[18:34:48    INFO]      cuts (valid):       
[18:34:48    INFO]    - weights:            1
[18:34:48    INFO] ----------------------------------------------------------------------------------------------------
[18:34:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:35:30    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_38/ANNZ_38_weights/saveTrainOpt_ANNZ_38.txt ...
[18:35:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[18:35:33    INFO]  - Will gen. input-parameter errors ...
[18:35:35    INFO]  - starting ANNZ::loadReaders() ... 
[18:35:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:43:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:43:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:43:40    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:45:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:45:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:45:39    INFO]  -----------------------------------------------------------------------------------------------------------
[18:45:39    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:45:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:45:40    INFO]  - will try to derive a bias correction ... 
[18:45:40    INFO]  - will validate that training produced an XML file for later ... 
[18:45:40    INFO]  - starting ANNZ::loadReaders() ... 
[18:45:44    INFO]  - will validate that the training was not a complete failure ... 
[18:45:44    INFO]  - training seems to have been successful! will move on ...
[18:45:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:45:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:45:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:45:51    INFO] ----------------------------------------------------------------------------------------------------
[18:45:51    INFO]  - will book (ANNZ_38_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:45:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:45:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:45:51    INFO]    - weights:            1
[18:45:51    INFO] ----------------------------------------------------------------------------------------------------
[18:45:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:45:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[18:45:58    INFO]  - Will gen. input-parameter errors ...
[18:46:00    INFO]  - starting ANNZ::loadReaders() ... 
[18:46:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:54:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:54:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:54:02    INFO]  -----------------------------------------------------------------------------------------------------------
[18:54:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:56:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:56:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:56:00    INFO]  -----------------------------------------------------------------------------------------------------------
[18:56:00    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:56:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:56:01    INFO]  - will validate that the bias-correction actually improved the result ...
[18:56:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:56:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
[18:56:07    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_38/plots/
[18:56:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_38/plots output/SPEC_advanced9/regres/train/ANNZ_38/plots_biasCor_before
[18:56:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:56:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
[18:56:22    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_38/plots/
[18:56:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_38/plots output/SPEC_advanced9/regres/train/ANNZ_38/plots_biasCor_after
[18:56:33    INFO]  - Got original [KS-test,N_poiss]: [0.0691239 , 6.5438] , after the bias-correction: [0.031257 , 5.60294] --> will KEEP the correction !

(18:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:56 INFO) 
[18:56:37    INFO]  -----------------------------------------------------
[18:56:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:56:37    INFO]  -----------------------------------------------------------------------------------------------------------
[18:56:37    INFO]  - starting ANNZ::Init()  ... 
[18:56:41    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_39/saveOpt.txt ...
[18:56:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:56:46    INFO] ----------------------------------------------------------------------------------------------------
[18:56:46    INFO]  - will book (ANNZ_39) method(BDT) with options: :NTrees=310:BoostType=AdaBoost:VarTransform=N,P
[18:56:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:56:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:56:46    INFO]      cuts (train):        ,
[18:56:46    INFO]      cuts (valid):       
[18:56:46    INFO]    - weights:            1
[18:56:46    INFO] ----------------------------------------------------------------------------------------------------
[18:56:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:57:03    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_39/ANNZ_39_weights/saveTrainOpt_ANNZ_39.txt ...
[18:57:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[18:57:04    INFO]  - Will gen. input-parameter errors ...
[18:57:06    INFO]  - starting ANNZ::loadReaders() ... 
[18:57:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[18:58:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:58:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:58:49    INFO]  -----------------------------------------------------------------------------------------------------------
[18:58:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[18:59:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:59:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:59:14    INFO]  -----------------------------------------------------------------------------------------------------------
[18:59:14    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:59:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:59:15    INFO]  - will try to derive a bias correction ... 
[18:59:15    INFO]  - will validate that training produced an XML file for later ... 
[18:59:15    INFO]  - starting ANNZ::loadReaders() ... 
[18:59:16    INFO]  - will validate that the training was not a complete failure ... 
[18:59:16    INFO]  - training seems to have been successful! will move on ...
[18:59:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:59:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:59:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:59:20    INFO] ----------------------------------------------------------------------------------------------------
[18:59:20    INFO]  - will book (ANNZ_39_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:59:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:59:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:59:20    INFO]    - weights:            1
[18:59:20    INFO] ----------------------------------------------------------------------------------------------------
[18:59:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:59:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[18:59:26    INFO]  - Will gen. input-parameter errors ...
[18:59:27    INFO]  - starting ANNZ::loadReaders() ... 
[18:59:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:01:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:01:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:01:36    INFO]  -----------------------------------------------------------------------------------------------------------
[19:01:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:02:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:02:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:02:07    INFO]  -----------------------------------------------------------------------------------------------------------
[19:02:07    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:02:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:02:08    INFO]  - will validate that the bias-correction actually improved the result ...
[19:02:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:02:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
Warning in <Fit>: Fit data is empty 
[19:02:13    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_39/plots/
[19:02:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_39/plots output/SPEC_advanced9/regres/train/ANNZ_39/plots_biasCor_before
[19:02:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:02:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
[19:02:28    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_39/plots/
[19:02:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_39/plots output/SPEC_advanced9/regres/train/ANNZ_39/plots_biasCor_after
[19:02:39    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40465] , after the bias-correction: [0.0435806 , 5.8127] --> will KEEP the correction !

(19:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:02 INFO) 
[19:02:42    INFO]  -----------------------------------------------------
[19:02:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:02:42    INFO]  -----------------------------------------------------------------------------------------------------------
[19:02:43    INFO]  - starting ANNZ::Init()  ... 
[19:02:44    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_40/saveOpt.txt ...
[19:02:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:02:49    INFO] ----------------------------------------------------------------------------------------------------
[19:02:49    INFO]  - will book (ANNZ_40) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N,P
[19:02:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:02:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:02:49    INFO]      cuts (train):        ,
[19:02:49    INFO]      cuts (valid):       
[19:02:49    INFO]    - weights:            1
[19:02:49    INFO] ----------------------------------------------------------------------------------------------------
[19:02:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:03:09    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_40/ANNZ_40_weights/saveTrainOpt_ANNZ_40.txt ...
[19:03:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_40 ... 
[19:03:10    INFO]  - Will gen. input-parameter errors ...
[19:03:12    INFO]  - starting ANNZ::loadReaders() ... 
[19:03:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:05:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:05:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:05:12    INFO]  -----------------------------------------------------------------------------------------------------------
[19:05:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:05:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:05:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:05:41    INFO]  -----------------------------------------------------------------------------------------------------------
[19:05:41    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_40/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:05:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:05:42    INFO]  - will try to derive a bias correction ... 
[19:05:42    INFO]  - will validate that training produced an XML file for later ... 
[19:05:42    INFO]  - starting ANNZ::loadReaders() ... 
[19:05:43    INFO]  - will validate that the training was not a complete failure ... 
[19:05:43    INFO]  - training seems to have been successful! will move on ...
[19:05:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:05:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:05:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:05:47    INFO] ----------------------------------------------------------------------------------------------------
[19:05:47    INFO]  - will book (ANNZ_40_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:05:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:05:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:05:47    INFO]    - weights:            1
[19:05:47    INFO] ----------------------------------------------------------------------------------------------------
[19:05:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:05:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_40 ... 
[19:05:53    INFO]  - Will gen. input-parameter errors ...
[19:05:55    INFO]  - starting ANNZ::loadReaders() ... 
[19:05:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:08:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:08:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:08:11    INFO]  -----------------------------------------------------------------------------------------------------------
[19:08:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:08:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:08:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:08:44    INFO]  -----------------------------------------------------------------------------------------------------------
[19:08:44    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_40/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:08:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:08:45    INFO]  - will validate that the bias-correction actually improved the result ...
[19:08:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:08:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_40,
Warning in <Fit>: Fit data is empty 
[19:08:50    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_40/plots/
[19:09:01        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_40/plots output/SPEC_advanced9/regres/train/ANNZ_40/plots_biasCor_before
[19:09:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:09:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_40,
[19:09:05    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_40/plots/
[19:09:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_40/plots output/SPEC_advanced9/regres/train/ANNZ_40/plots_biasCor_after
[19:09:16    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.39991] , after the bias-correction: [0.0448129 , 5.80394] --> will KEEP the correction !

(19:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:09 INFO) 
[19:09:19    INFO]  -----------------------------------------------------
[19:09:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:09:19    INFO]  -----------------------------------------------------------------------------------------------------------
[19:09:20    INFO]  - starting ANNZ::Init()  ... 
[19:09:21    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_41/saveOpt.txt ...
[19:09:26    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:09:26    INFO] ----------------------------------------------------------------------------------------------------
[19:09:26    INFO]  - will book (ANNZ_41) method(BDT) with options: :NTrees=360:BoostType=AdaBoostR2:VarTransform=N,P
[19:09:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:09:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:09:26    INFO]      cuts (train):        ,
[19:09:26    INFO]      cuts (valid):       
[19:09:26    INFO]    - weights:            1
[19:09:26    INFO] ----------------------------------------------------------------------------------------------------
[19:09:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:09:59    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_41/ANNZ_41_weights/saveTrainOpt_ANNZ_41.txt ...
[19:10:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_41 ... 
[19:10:01    INFO]  - Will gen. input-parameter errors ...
[19:10:03    INFO]  - starting ANNZ::loadReaders() ... 
[19:10:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:15:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:15:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:15:35    INFO]  -----------------------------------------------------------------------------------------------------------
[19:15:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:16:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:16:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:16:56    INFO]  -----------------------------------------------------------------------------------------------------------
[19:16:56    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_41/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:16:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:16:57    INFO]  - will try to derive a bias correction ... 
[19:16:57    INFO]  - will validate that training produced an XML file for later ... 
[19:16:57    INFO]  - starting ANNZ::loadReaders() ... 
[19:16:59    INFO]  - will validate that the training was not a complete failure ... 
[19:17:00    INFO]  - training seems to have been successful! will move on ...
[19:17:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:17:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:17:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:17:07    INFO] ----------------------------------------------------------------------------------------------------
[19:17:07    INFO]  - will book (ANNZ_41_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:17:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:17:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:17:07    INFO]    - weights:            1
[19:17:07    INFO] ----------------------------------------------------------------------------------------------------
[19:17:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:17:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_41 ... 
[19:17:14    INFO]  - Will gen. input-parameter errors ...
[19:17:15    INFO]  - starting ANNZ::loadReaders() ... 
[19:17:23    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:22:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:22:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:22:18    INFO]  -----------------------------------------------------------------------------------------------------------
[19:22:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:23:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:23:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:23:32    INFO]  -----------------------------------------------------------------------------------------------------------
[19:23:32    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_41/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:23:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:23:33    INFO]  - will validate that the bias-correction actually improved the result ...
[19:23:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:23:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_41,
[19:23:38    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_41/plots/
[19:23:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_41/plots output/SPEC_advanced9/regres/train/ANNZ_41/plots_biasCor_before
[19:23:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:23:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_41,
[19:23:54    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_41/plots/
[19:24:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_41/plots output/SPEC_advanced9/regres/train/ANNZ_41/plots_biasCor_after
[19:24:05    INFO]  - Got original [KS-test,N_poiss]: [0.0700202 , 6.55754] , after the bias-correction: [0.0323774 , 5.45595] --> will KEEP the correction !

(19:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:24 INFO) 
[19:24:09    INFO]  -----------------------------------------------------
[19:24:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:24:09    INFO]  -----------------------------------------------------------------------------------------------------------
[19:24:09    INFO]  - starting ANNZ::Init()  ... 
[19:24:13    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_42/saveOpt.txt ...
[19:24:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:24:18    INFO] ----------------------------------------------------------------------------------------------------
[19:24:18    INFO]  - will book (ANNZ_42) method(BDT) with options: :NTrees=350:BoostType=Bagging:VarTransform=N,P
[19:24:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:24:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:24:18    INFO]      cuts (train):        ,
[19:24:18    INFO]      cuts (valid):       
[19:24:18    INFO]    - weights:            1
[19:24:18    INFO] ----------------------------------------------------------------------------------------------------
[19:24:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:24:52    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_42/ANNZ_42_weights/saveTrainOpt_ANNZ_42.txt ...
[19:24:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_42 ... 
[19:24:56    INFO]  - Will gen. input-parameter errors ...
[19:24:57    INFO]  - starting ANNZ::loadReaders() ... 
[19:25:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:27:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:27:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:27:34    INFO]  -----------------------------------------------------------------------------------------------------------
[19:27:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:28:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:28:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:28:12    INFO]  -----------------------------------------------------------------------------------------------------------
[19:28:12    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_42/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:28:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:28:14    INFO]  - will try to derive a bias correction ... 
[19:28:14    INFO]  - will validate that training produced an XML file for later ... 
[19:28:14    INFO]  - starting ANNZ::loadReaders() ... 
[19:28:17    INFO]  - will validate that the training was not a complete failure ... 
[19:28:17    INFO]  - training seems to have been successful! will move on ...
[19:28:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:28:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:28:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:28:22    INFO] ----------------------------------------------------------------------------------------------------
[19:28:22    INFO]  - will book (ANNZ_42_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:28:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:28:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:28:22    INFO]    - weights:            1
[19:28:22    INFO] ----------------------------------------------------------------------------------------------------
[19:28:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:28:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_42 ... 
[19:28:29    INFO]  - Will gen. input-parameter errors ...
[19:28:31    INFO]  - starting ANNZ::loadReaders() ... 
[19:28:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:31:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:31:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:31:18    INFO]  -----------------------------------------------------------------------------------------------------------
[19:31:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:31:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:31:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:31:57    INFO]  -----------------------------------------------------------------------------------------------------------
[19:31:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_42/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:31:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:31:59    INFO]  - will validate that the bias-correction actually improved the result ...
[19:31:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:31:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_42,
[19:32:04    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_42/plots/
[19:32:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_42/plots output/SPEC_advanced9/regres/train/ANNZ_42/plots_biasCor_before
[19:32:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:32:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_42,
[19:32:19    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_42/plots/
[19:32:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_42/plots output/SPEC_advanced9/regres/train/ANNZ_42/plots_biasCor_after
[19:32:30    INFO]  - Got original [KS-test,N_poiss]: [0.0930988 , 6.82866] , after the bias-correction: [0.0441408 , 5.57067] --> will KEEP the correction !

(19:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:32 INFO) 
[19:32:34    INFO]  -----------------------------------------------------
[19:32:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:32:34    INFO]  -----------------------------------------------------------------------------------------------------------
[19:32:35    INFO]  - starting ANNZ::Init()  ... 
[19:32:36    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_43/saveOpt.txt ...
[19:32:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:32:41    INFO] ----------------------------------------------------------------------------------------------------
[19:32:41    INFO]  - will book (ANNZ_43) method(BDT) with options: :NTrees=440:BoostType=Bagging:VarTransform=N
[19:32:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:32:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:32:41    INFO]      cuts (train):        ,
[19:32:41    INFO]      cuts (valid):       
[19:32:41    INFO]    - weights:            1
[19:32:41    INFO] ----------------------------------------------------------------------------------------------------
[19:32:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:33:22    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_43/ANNZ_43_weights/saveTrainOpt_ANNZ_43.txt ...
[19:33:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_43 ... 
[19:33:27    INFO]  - Will gen. input-parameter errors ...
[19:33:28    INFO]  - starting ANNZ::loadReaders() ... 
[19:33:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:35:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:35:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:35:41    INFO]  -----------------------------------------------------------------------------------------------------------
[19:35:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:36:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:36:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:36:12    INFO]  -----------------------------------------------------------------------------------------------------------
[19:36:12    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_43/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:36:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:36:14    INFO]  - will try to derive a bias correction ... 
[19:36:14    INFO]  - will validate that training produced an XML file for later ... 
[19:36:14    INFO]  - starting ANNZ::loadReaders() ... 
[19:36:19    INFO]  - will validate that the training was not a complete failure ... 
[19:36:19    INFO]  - training seems to have been successful! will move on ...
[19:36:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:36:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:36:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:36:24    INFO] ----------------------------------------------------------------------------------------------------
[19:36:24    INFO]  - will book (ANNZ_43_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:36:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:36:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:36:24    INFO]    - weights:            1
[19:36:24    INFO] ----------------------------------------------------------------------------------------------------
[19:36:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:36:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_43 ... 
[19:36:32    INFO]  - Will gen. input-parameter errors ...
[19:36:34    INFO]  - starting ANNZ::loadReaders() ... 
[19:36:44    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:38:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:38:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:38:59    INFO]  -----------------------------------------------------------------------------------------------------------
[19:38:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:39:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:39:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:39:33    INFO]  -----------------------------------------------------------------------------------------------------------
[19:39:33    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_43/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:39:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:39:35    INFO]  - will validate that the bias-correction actually improved the result ...
[19:39:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:39:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_43,
[19:39:40    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_43/plots/
[19:39:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_43/plots output/SPEC_advanced9/regres/train/ANNZ_43/plots_biasCor_before
[19:39:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:39:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_43,
[19:39:56    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_43/plots/
[19:40:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_43/plots output/SPEC_advanced9/regres/train/ANNZ_43/plots_biasCor_after
[19:40:07    INFO]  - Got original [KS-test,N_poiss]: [0.0850325 , 6.67145] , after the bias-correction: [0.0445889 , 5.66151] --> will KEEP the correction !

(19:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:40 INFO) 
[19:40:10    INFO]  -----------------------------------------------------
[19:40:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:40:10    INFO]  -----------------------------------------------------------------------------------------------------------
[19:40:11    INFO]  - starting ANNZ::Init()  ... 
[19:40:12    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_44/saveOpt.txt ...
[19:40:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:40:17    INFO] ----------------------------------------------------------------------------------------------------
[19:40:17    INFO]  - will book (ANNZ_44) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N,P
[19:40:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:40:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:40:17    INFO]      cuts (train):        ,
[19:40:17    INFO]      cuts (valid):       
[19:40:17    INFO]    - weights:            1
[19:40:17    INFO] ----------------------------------------------------------------------------------------------------
[19:40:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:40:59    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_44/ANNZ_44_weights/saveTrainOpt_ANNZ_44.txt ...
[19:41:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_44 ... 
[19:41:03    INFO]  - Will gen. input-parameter errors ...
[19:41:05    INFO]  - starting ANNZ::loadReaders() ... 
[19:41:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:44:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:44:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:44:19    INFO]  -----------------------------------------------------------------------------------------------------------
[19:44:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:45:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:45:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:45:06    INFO]  -----------------------------------------------------------------------------------------------------------
[19:45:06    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_44/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:45:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:45:08    INFO]  - will try to derive a bias correction ... 
[19:45:08    INFO]  - will validate that training produced an XML file for later ... 
[19:45:08    INFO]  - starting ANNZ::loadReaders() ... 
[19:45:12    INFO]  - will validate that the training was not a complete failure ... 
[19:45:13    INFO]  - training seems to have been successful! will move on ...
[19:45:13    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:45:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:45:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:45:18    INFO] ----------------------------------------------------------------------------------------------------
[19:45:18    INFO]  - will book (ANNZ_44_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:45:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:45:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:45:18    INFO]    - weights:            1
[19:45:18    INFO] ----------------------------------------------------------------------------------------------------
[19:45:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:45:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_44 ... 
[19:45:26    INFO]  - Will gen. input-parameter errors ...
[19:45:28    INFO]  - starting ANNZ::loadReaders() ... 
[19:45:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:48:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:48:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:48:51    INFO]  -----------------------------------------------------------------------------------------------------------
[19:48:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:49:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:49:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:49:39    INFO]  -----------------------------------------------------------------------------------------------------------
[19:49:40    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_44/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:49:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:49:41    INFO]  - will validate that the bias-correction actually improved the result ...
[19:49:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:49:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_44,
[19:49:47    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_44/plots/
[19:49:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_44/plots output/SPEC_advanced9/regres/train/ANNZ_44/plots_biasCor_before
[19:49:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:49:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_44,
[19:50:02    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_44/plots/
[19:50:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_44/plots output/SPEC_advanced9/regres/train/ANNZ_44/plots_biasCor_after
[19:50:14    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.92164] , after the bias-correction: [0.045261 , 5.66527] --> will KEEP the correction !

(19:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m45[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:50 INFO) 
[19:50:18    INFO]  -----------------------------------------------------
[19:50:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:50:18    INFO]  -----------------------------------------------------------------------------------------------------------
[19:50:18    INFO]  - starting ANNZ::Init()  ... 
[19:50:19    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_45/saveOpt.txt ...
[19:50:24    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:50:24    INFO] ----------------------------------------------------------------------------------------------------
[19:50:24    INFO]  - will book (ANNZ_45) method(BDT) with options: :NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P
[19:50:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:50:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:50:24    INFO]      cuts (train):        ,
[19:50:24    INFO]      cuts (valid):       
[19:50:24    INFO]    - weights:            1
[19:50:24    INFO] ----------------------------------------------------------------------------------------------------
[19:50:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:50:58    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_45/ANNZ_45_weights/saveTrainOpt_ANNZ_45.txt ...
[19:51:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_45 ... 
[19:51:01    INFO]  - Will gen. input-parameter errors ...
[19:51:03    INFO]  - starting ANNZ::loadReaders() ... 
[19:51:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[19:56:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:56:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:56:46    INFO]  -----------------------------------------------------------------------------------------------------------
[19:56:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[19:58:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:58:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:58:10    INFO]  -----------------------------------------------------------------------------------------------------------
[19:58:10    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_45/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:58:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:58:11    INFO]  - will try to derive a bias correction ... 
[19:58:11    INFO]  - will validate that training produced an XML file for later ... 
[19:58:11    INFO]  - starting ANNZ::loadReaders() ... 
[19:58:14    INFO]  - will validate that the training was not a complete failure ... 
[19:58:14    INFO]  - training seems to have been successful! will move on ...
[19:58:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:58:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:58:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:58:20    INFO] ----------------------------------------------------------------------------------------------------
[19:58:20    INFO]  - will book (ANNZ_45_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:58:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:58:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:58:20    INFO]    - weights:            1
[19:58:20    INFO] ----------------------------------------------------------------------------------------------------
[19:58:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:58:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_45 ... 
[19:58:27    INFO]  - Will gen. input-parameter errors ...
[19:58:29    INFO]  - starting ANNZ::loadReaders() ... 
[19:58:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[20:03:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:03:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:03:51    INFO]  -----------------------------------------------------------------------------------------------------------
[20:03:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[20:05:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:05:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:05:10    INFO]  -----------------------------------------------------------------------------------------------------------
[20:05:10    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_45/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:05:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:05:11    INFO]  - will validate that the bias-correction actually improved the result ...
[20:05:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:05:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_45,
[20:05:17    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_45/plots/
[20:05:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_45/plots output/SPEC_advanced9/regres/train/ANNZ_45/plots_biasCor_before
[20:05:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:05:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_45,
[20:05:32    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_45/plots/
[20:05:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_45/plots output/SPEC_advanced9/regres/train/ANNZ_45/plots_biasCor_after
[20:05:43    INFO]  - Got original [KS-test,N_poiss]: [0.0701322 , 6.63987] , after the bias-correction: [0.0337217 , 5.45539] --> will KEEP the correction !

(20:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m46[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:05 INFO) 
[20:05:46    INFO]  -----------------------------------------------------
[20:05:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:05:46    INFO]  -----------------------------------------------------------------------------------------------------------
[20:05:47    INFO]  - starting ANNZ::Init()  ... 
[20:05:50    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_46/saveOpt.txt ...
[20:05:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:05:55    INFO] ----------------------------------------------------------------------------------------------------
[20:05:55    INFO]  - will book (ANNZ_46) method(BDT) with options: :NTrees=410:BoostType=Bagging:VarTransform=N,P
[20:05:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:05:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:05:55    INFO]      cuts (train):        ,
[20:05:55    INFO]      cuts (valid):       
[20:05:55    INFO]    - weights:            1
[20:05:55    INFO] ----------------------------------------------------------------------------------------------------
[20:05:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:06:35    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_46/ANNZ_46_weights/saveTrainOpt_ANNZ_46.txt ...
[20:06:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_46 ... 
[20:06:39    INFO]  - Will gen. input-parameter errors ...
[20:06:41    INFO]  - starting ANNZ::loadReaders() ... 
[20:06:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[20:09:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:09:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:09:46    INFO]  -----------------------------------------------------------------------------------------------------------
[20:09:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[20:10:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:10:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:10:30    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:30    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_46/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:10:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:10:32    INFO]  - will try to derive a bias correction ... 
[20:10:32    INFO]  - will validate that training produced an XML file for later ... 
[20:10:32    INFO]  - starting ANNZ::loadReaders() ... 
[20:10:36    INFO]  - will validate that the training was not a complete failure ... 
[20:10:36    INFO]  - training seems to have been successful! will move on ...
[20:10:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:10:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:10:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:10:41    INFO] ----------------------------------------------------------------------------------------------------
[20:10:41    INFO]  - will book (ANNZ_46_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:10:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:10:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:10:41    INFO]    - weights:            1
[20:10:41    INFO] ----------------------------------------------------------------------------------------------------
[20:10:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:10:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_46 ... 
[20:10:49    INFO]  - Will gen. input-parameter errors ...
[20:10:51    INFO]  - starting ANNZ::loadReaders() ... 
[20:11:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[20:14:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:14:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:14:04    INFO]  -----------------------------------------------------------------------------------------------------------
[20:14:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[20:14:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:14:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:14:50    INFO]  -----------------------------------------------------------------------------------------------------------
[20:14:50    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_46/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:14:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:14:52    INFO]  - will validate that the bias-correction actually improved the result ...
[20:14:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:14:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_46,
[20:14:58    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_46/plots/
[20:15:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_46/plots output/SPEC_advanced9/regres/train/ANNZ_46/plots_biasCor_before
[20:15:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:15:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_46,
[20:15:13    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_46/plots/
[20:15:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_46/plots output/SPEC_advanced9/regres/train/ANNZ_46/plots_biasCor_after
[20:15:24    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.90556] , after the bias-correction: [0.0445889 , 5.68766] --> will KEEP the correction !

(20:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m47[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:15 INFO) 
[20:15:28    INFO]  -----------------------------------------------------
[20:15:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:15:28    INFO]  -----------------------------------------------------------------------------------------------------------
[20:15:28    INFO]  - starting ANNZ::Init()  ... 
[20:15:29    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_47/saveOpt.txt ...
[20:15:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:15:35    INFO] ----------------------------------------------------------------------------------------------------
[20:15:35    INFO]  - will book (ANNZ_47) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[20:15:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:15:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:15:35    INFO]      cuts (train):        ,
[20:15:35    INFO]      cuts (valid):       
[20:15:35    INFO]    - weights:            1
[20:15:35    INFO] ----------------------------------------------------------------------------------------------------
[20:15:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:15:48    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_47/ANNZ_47_weights/saveTrainOpt_ANNZ_47.txt ...
[20:15:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_47 ... 
[20:15:50    INFO]  - Will gen. input-parameter errors ...
[20:15:51    INFO]  - starting ANNZ::loadReaders() ... 
[20:15:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[20:17:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:17:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:17:22    INFO]  -----------------------------------------------------------------------------------------------------------
[20:17:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[20:17:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:17:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:17:45    INFO]  -----------------------------------------------------------------------------------------------------------
[20:17:45    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_47/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:17:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:17:45    INFO]  - will try to derive a bias correction ... 
[20:17:45    INFO]  - will validate that training produced an XML file for later ... 
[20:17:45    INFO]  - starting ANNZ::loadReaders() ... 
[20:17:46    INFO]  - will validate that the training was not a complete failure ... 
[20:17:46    INFO]  - training seems to have been successful! will move on ...
[20:17:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:17:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:17:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:17:50    INFO] ----------------------------------------------------------------------------------------------------
[20:17:50    INFO]  - will book (ANNZ_47_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:17:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:17:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:17:50    INFO]    - weights:            1
[20:17:50    INFO] ----------------------------------------------------------------------------------------------------
[20:17:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:17:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_47 ... 
[20:17:56    INFO]  - Will gen. input-parameter errors ...
[20:17:57    INFO]  - starting ANNZ::loadReaders() ... 
[20:18:01    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[20:19:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:19:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:19:55    INFO]  -----------------------------------------------------------------------------------------------------------
[20:19:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[20:20:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:20:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:20:24    INFO]  -----------------------------------------------------------------------------------------------------------
[20:20:24    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_47/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:20:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:20:25    INFO]  - will validate that the bias-correction actually improved the result ...
[20:20:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:20:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_47,
Warning in <Fit>: Fit data is empty 
[20:20:30    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_47/plots/
[20:20:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_47/plots output/SPEC_advanced9/regres/train/ANNZ_47/plots_biasCor_before
[20:20:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:20:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_47,
Warning in <Fit>: Fit data is empty 
[20:20:45    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_47/plots/
[20:20:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_47/plots output/SPEC_advanced9/regres/train/ANNZ_47/plots_biasCor_after
[20:20:56    INFO]  - Got original [KS-test,N_poiss]: [0.100941 , 6.44299] , after the bias-correction: [0.0448129 , 5.75736] --> will KEEP the correction !

(20:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m48[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:20 INFO) 
[20:20:59    INFO]  -----------------------------------------------------
[20:20:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:20:59    INFO]  -----------------------------------------------------------------------------------------------------------
[20:20:59    INFO]  - starting ANNZ::Init()  ... 
[20:21:00    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_48/saveOpt.txt ...
[20:21:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:21:05    INFO] ----------------------------------------------------------------------------------------------------
[20:21:05    INFO]  - will book (ANNZ_48) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N,P
[20:21:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:21:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:21:05    INFO]      cuts (train):        ,
[20:21:05    INFO]      cuts (valid):       
[20:21:05    INFO]    - weights:            1
[20:21:05    INFO] ----------------------------------------------------------------------------------------------------
[20:21:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:21:43    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_48/ANNZ_48_weights/saveTrainOpt_ANNZ_48.txt ...
[20:21:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_48 ... 
[20:21:47    INFO]  - Will gen. input-parameter errors ...
[20:21:49    INFO]  - starting ANNZ::loadReaders() ... 
[20:21:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[20:24:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:24:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:24:43    INFO]  -----------------------------------------------------------------------------------------------------------
[20:24:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[20:25:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:25:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:25:24    INFO]  -----------------------------------------------------------------------------------------------------------
[20:25:24    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_48/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:25:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:25:26    INFO]  - will try to derive a bias correction ... 
[20:25:26    INFO]  - will validate that training produced an XML file for later ... 
[20:25:26    INFO]  - starting ANNZ::loadReaders() ... 
[20:25:29    INFO]  - will validate that the training was not a complete failure ... 
[20:25:30    INFO]  - training seems to have been successful! will move on ...
[20:25:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:25:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:25:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:25:35    INFO] ----------------------------------------------------------------------------------------------------
[20:25:35    INFO]  - will book (ANNZ_48_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:25:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:25:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:25:35    INFO]    - weights:            1
[20:25:35    INFO] ----------------------------------------------------------------------------------------------------
[20:25:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:25:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_48 ... 
[20:25:42    INFO]  - Will gen. input-parameter errors ...
[20:25:44    INFO]  - starting ANNZ::loadReaders() ... 
[20:25:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[20:28:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:28:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:28:45    INFO]  -----------------------------------------------------------------------------------------------------------
[20:28:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[20:29:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:29:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:29:28    INFO]  -----------------------------------------------------------------------------------------------------------
[20:29:29    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_48/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:29:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:29:30    INFO]  - will validate that the bias-correction actually improved the result ...
[20:29:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:29:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_48,
[20:29:36    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_48/plots/
[20:29:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_48/plots output/SPEC_advanced9/regres/train/ANNZ_48/plots_biasCor_before
[20:29:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:29:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_48,
[20:29:51    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_48/plots/
[20:30:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_48/plots output/SPEC_advanced9/regres/train/ANNZ_48/plots_biasCor_after
[20:30:02    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.92138] , after the bias-correction: [0.0429084 , 5.51043] --> will KEEP the correction !

(20:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m49[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1000:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:30 INFO) 
[20:30:06    INFO]  -----------------------------------------------------
[20:30:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:30:06    INFO]  -----------------------------------------------------------------------------------------------------------
[20:30:06    INFO]  - starting ANNZ::Init()  ... 
[20:30:07    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_49/saveOpt.txt ...
[20:30:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:30:12    INFO] ----------------------------------------------------------------------------------------------------
[20:30:12    INFO]  - will book (ANNZ_49) method(BDT) with options: :NTrees=1000:BoostType=Bagging:VarTransform=N,P
[20:30:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:30:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:30:12    INFO]      cuts (train):        ,
[20:30:12    INFO]      cuts (valid):       
[20:30:12    INFO]    - weights:            1
[20:30:12    INFO] ----------------------------------------------------------------------------------------------------
[20:30:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:31:52    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_49/ANNZ_49_weights/saveTrainOpt_ANNZ_49.txt ...
[20:32:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_49 ... 
[20:32:00    INFO]  - Will gen. input-parameter errors ...
[20:32:03    INFO]  - starting ANNZ::loadReaders() ... 
[20:32:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[20:45:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:45:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:45:25    INFO]  -----------------------------------------------------------------------------------------------------------
[20:45:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[20:48:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:48:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:48:42    INFO]  -----------------------------------------------------------------------------------------------------------
[20:48:43    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_49/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:48:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:48:46    INFO]  - will try to derive a bias correction ... 
[20:48:46    INFO]  - will validate that training produced an XML file for later ... 
[20:48:46    INFO]  - starting ANNZ::loadReaders() ... 
[20:48:57    INFO]  - will validate that the training was not a complete failure ... 
[20:48:57    INFO]  - training seems to have been successful! will move on ...
[20:48:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:49:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:49:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:49:06    INFO] ----------------------------------------------------------------------------------------------------
[20:49:06    INFO]  - will book (ANNZ_49_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:49:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:49:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:49:06    INFO]    - weights:            1
[20:49:06    INFO] ----------------------------------------------------------------------------------------------------
[20:49:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:49:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_49 ... 
[20:49:16    INFO]  - Will gen. input-parameter errors ...
[20:49:19    INFO]  - starting ANNZ::loadReaders() ... 
[20:49:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[21:03:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:03:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:03:09    INFO]  -----------------------------------------------------------------------------------------------------------
[21:03:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[21:06:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:06:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:06:28    INFO]  -----------------------------------------------------------------------------------------------------------
[21:06:29    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_49/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:06:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:06:32    INFO]  - will validate that the bias-correction actually improved the result ...
[21:06:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:06:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_49,
[21:06:38    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_49/plots/
[21:06:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_49/plots output/SPEC_advanced9/regres/train/ANNZ_49/plots_biasCor_before
[21:06:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:06:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_49,
[21:06:54    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_49/plots/
[21:07:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_49/plots output/SPEC_advanced9/regres/train/ANNZ_49/plots_biasCor_after
[21:07:05    INFO]  - Got original [KS-test,N_poiss]: [0.093547 , 6.88301] , after the bias-correction: [0.0434685 , 5.60919] --> will KEEP the correction !

(21:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m50[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:07 INFO) 
[21:07:11    INFO]  -----------------------------------------------------
[21:07:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:07:11    INFO]  -----------------------------------------------------------------------------------------------------------
[21:07:11    INFO]  - starting ANNZ::Init()  ... 
[21:07:15    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_50/saveOpt.txt ...
[21:07:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:07:20    INFO] ----------------------------------------------------------------------------------------------------
[21:07:20    INFO]  - will book (ANNZ_50) method(BDT) with options: :NTrees=310:BoostType=AdaBoostR2:VarTransform=N,P
[21:07:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:07:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:07:20    INFO]      cuts (train):        ,
[21:07:20    INFO]      cuts (valid):       
[21:07:20    INFO]    - weights:            1
[21:07:20    INFO] ----------------------------------------------------------------------------------------------------
[21:07:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:07:48    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_50/ANNZ_50_weights/saveTrainOpt_ANNZ_50.txt ...
[21:07:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_50 ... 
[21:07:51    INFO]  - Will gen. input-parameter errors ...
[21:07:52    INFO]  - starting ANNZ::loadReaders() ... 
[21:07:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[21:12:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:12:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:12:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:12:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[21:13:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:13:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:13:31    INFO]  -----------------------------------------------------------------------------------------------------------
[21:13:31    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_50/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:13:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:13:32    INFO]  - will try to derive a bias correction ... 
[21:13:32    INFO]  - will validate that training produced an XML file for later ... 
[21:13:32    INFO]  - starting ANNZ::loadReaders() ... 
[21:13:34    INFO]  - will validate that the training was not a complete failure ... 
[21:13:34    INFO]  - training seems to have been successful! will move on ...
[21:13:34    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:13:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:13:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:13:38    INFO] ----------------------------------------------------------------------------------------------------
[21:13:38    INFO]  - will book (ANNZ_50_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:13:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:13:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:13:38    INFO]    - weights:            1
[21:13:38    INFO] ----------------------------------------------------------------------------------------------------
[21:13:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:13:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_50 ... 
[21:13:45    INFO]  - Will gen. input-parameter errors ...
[21:13:46    INFO]  - starting ANNZ::loadReaders() ... 
[21:13:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[21:17:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:17:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:17:54    INFO]  -----------------------------------------------------------------------------------------------------------
[21:17:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[21:18:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:18:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:18:54    INFO]  -----------------------------------------------------------------------------------------------------------
[21:18:54    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_50/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:18:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:18:55    INFO]  - will validate that the bias-correction actually improved the result ...
[21:18:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:18:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_50,
[21:19:01    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_50/plots/
[21:19:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_50/plots output/SPEC_advanced9/regres/train/ANNZ_50/plots_biasCor_before
[21:19:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:19:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_50,
[21:19:16    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_50/plots/
[21:19:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_50/plots output/SPEC_advanced9/regres/train/ANNZ_50/plots_biasCor_after
[21:19:27    INFO]  - Got original [KS-test,N_poiss]: [0.069348 , 6.64128] , after the bias-correction: [0.0339458 , 5.45762] --> will KEEP the correction !

(21:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m51[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:19 INFO) 
[21:19:30    INFO]  -----------------------------------------------------
[21:19:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:19:30    INFO]  -----------------------------------------------------------------------------------------------------------
[21:19:30    INFO]  - starting ANNZ::Init()  ... 
[21:19:32    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_51/saveOpt.txt ...
[21:19:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:19:37    INFO] ----------------------------------------------------------------------------------------------------
[21:19:37    INFO]  - will book (ANNZ_51) method(BDT) with options: :NTrees=490:BoostType=AdaBoostR2:VarTransform=N
[21:19:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:19:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:19:37    INFO]      cuts (train):        ,
[21:19:37    INFO]      cuts (valid):       
[21:19:37    INFO]    - weights:            1
[21:19:37    INFO] ----------------------------------------------------------------------------------------------------
[21:19:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:20:17    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_51/ANNZ_51_weights/saveTrainOpt_ANNZ_51.txt ...
[21:20:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_51 ... 
[21:20:20    INFO]  - Will gen. input-parameter errors ...
[21:20:22    INFO]  - starting ANNZ::loadReaders() ... 
[21:20:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[21:27:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:27:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:27:55    INFO]  -----------------------------------------------------------------------------------------------------------
[21:27:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[21:29:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:29:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:29:46    INFO]  -----------------------------------------------------------------------------------------------------------
[21:29:46    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_51/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:29:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:29:48    INFO]  - will try to derive a bias correction ... 
[21:29:48    INFO]  - will validate that training produced an XML file for later ... 
[21:29:48    INFO]  - starting ANNZ::loadReaders() ... 
[21:29:51    INFO]  - will validate that the training was not a complete failure ... 
[21:29:51    INFO]  - training seems to have been successful! will move on ...
[21:29:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:29:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:29:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:29:58    INFO] ----------------------------------------------------------------------------------------------------
[21:29:58    INFO]  - will book (ANNZ_51_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:29:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:29:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:29:58    INFO]    - weights:            1
[21:29:58    INFO] ----------------------------------------------------------------------------------------------------
[21:29:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:30:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_51 ... 
[21:30:05    INFO]  - Will gen. input-parameter errors ...
[21:30:07    INFO]  - starting ANNZ::loadReaders() ... 
[21:30:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[21:37:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:37:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:37:14    INFO]  -----------------------------------------------------------------------------------------------------------
[21:37:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[21:38:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:38:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:38:58    INFO]  -----------------------------------------------------------------------------------------------------------
[21:38:58    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_51/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:38:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:38:59    INFO]  - will validate that the bias-correction actually improved the result ...
[21:38:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:38:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_51,
Warning in <Fit>: Fit data is empty 
[21:39:04    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_51/plots/
[21:39:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_51/plots output/SPEC_advanced9/regres/train/ANNZ_51/plots_biasCor_before
[21:39:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:39:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_51,
[21:39:20    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_51/plots/
[21:39:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_51/plots output/SPEC_advanced9/regres/train/ANNZ_51/plots_biasCor_after
[21:39:30    INFO]  - Got original [KS-test,N_poiss]: [0.0628501 , 6.49305] , after the bias-correction: [0.034618 , 5.67832] --> will KEEP the correction !

(21:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m52[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:39 INFO) 
[21:39:34    INFO]  -----------------------------------------------------
[21:39:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:39:34    INFO]  -----------------------------------------------------------------------------------------------------------
[21:39:34    INFO]  - starting ANNZ::Init()  ... 
[21:39:38    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_52/saveOpt.txt ...
[21:39:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:39:43    INFO] ----------------------------------------------------------------------------------------------------
[21:39:43    INFO]  - will book (ANNZ_52) method(BDT) with options: :NTrees=520:BoostType=Bagging:VarTransform=P
[21:39:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:39:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:39:43    INFO]      cuts (train):        ,
[21:39:43    INFO]      cuts (valid):       
[21:39:43    INFO]    - weights:            1
[21:39:43    INFO] ----------------------------------------------------------------------------------------------------
[21:39:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.101365
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(21:39 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(21:39 CRITICAL) [41;37;1mWill terminate !!!![0m
(23:00 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:00 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:00 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:00 INFO) [40;37;1m - 10/03/19 23:00:50 - starting ANNZ[0m
(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:50    INFO]  -----------------------------------------------------
[23:00:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:50    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:51    INFO]  - starting ANNZ::Init()  ... 
[23:00:51    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced9/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[23:00:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:51    INFO]  -----------------------------------------------------
[23:00:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:51    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:52    INFO]  - starting ANNZ::Init()  ... 
[23:00:53    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced9/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[23:00:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:53    INFO]  -----------------------------------------------------
[23:00:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:53    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:54    INFO]  - starting ANNZ::Init()  ... 
[23:00:54    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced9/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[23:00:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:54    INFO]  -----------------------------------------------------
[23:00:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:54    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:55    INFO]  - starting ANNZ::Init()  ... 
[23:00:56    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced9/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[23:00:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:57    INFO]  -----------------------------------------------------
[23:00:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:57    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:57    INFO]  - starting ANNZ::Init()  ... 
[23:00:58    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced9/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[23:00:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:58    INFO]  -----------------------------------------------------
[23:00:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:58    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:59    INFO]  - starting ANNZ::Init()  ... 
[23:00:59    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced9/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[23:00:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:59    INFO]  -----------------------------------------------------
[23:00:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:59    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:00    INFO]  - starting ANNZ::Init()  ... 
[23:01:01    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced9/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[23:01:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:02    INFO]  -----------------------------------------------------
[23:01:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:02    INFO]  - starting ANNZ::Init()  ... 
[23:01:04    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced9/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[23:01:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:04    INFO]  -----------------------------------------------------
[23:01:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:04    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:05    INFO]  - starting ANNZ::Init()  ... 
[23:01:06    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced9/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[23:01:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:06    INFO]  -----------------------------------------------------
[23:01:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:06    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:07    INFO]  - starting ANNZ::Init()  ... 
[23:01:08    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced9/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[23:01:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:08    INFO]  -----------------------------------------------------
[23:01:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:09    INFO]  - starting ANNZ::Init()  ... 
[23:01:09    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced9/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[23:01:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:09    INFO]  -----------------------------------------------------
[23:01:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:09    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:10    INFO]  - starting ANNZ::Init()  ... 
[23:01:10    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced9/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[23:01:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:11    INFO]  -----------------------------------------------------
[23:01:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:11    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:11    INFO]  - starting ANNZ::Init()  ... 
[23:01:13    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced9/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[23:01:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:13    INFO]  -----------------------------------------------------
[23:01:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:13    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:13    INFO]  - starting ANNZ::Init()  ... 
[23:01:14    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced9/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[23:01:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=640:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:14    INFO]  -----------------------------------------------------
[23:01:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:15    INFO]  - starting ANNZ::Init()  ... 
[23:01:15    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced9/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[23:01:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:15    INFO]  -----------------------------------------------------
[23:01:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:16    INFO]  - starting ANNZ::Init()  ... 
[23:01:17    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced9/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[23:01:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:17    INFO]  -----------------------------------------------------
[23:01:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:17    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:18    INFO]  - starting ANNZ::Init()  ... 
[23:01:18    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced9/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[23:01:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:18    INFO]  -----------------------------------------------------
[23:01:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:18    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:19    INFO]  - starting ANNZ::Init()  ... 
[23:01:20    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced9/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[23:01:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=670:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:20    INFO]  -----------------------------------------------------
[23:01:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:21    INFO]  - starting ANNZ::Init()  ... 
[23:01:23    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced9/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[23:01:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:23    INFO]  -----------------------------------------------------
[23:01:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:23    INFO]  - starting ANNZ::Init()  ... 
[23:01:24    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced9/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[23:01:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:24    INFO]  -----------------------------------------------------
[23:01:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:25    INFO]  - starting ANNZ::Init()  ... 
[23:01:26    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced9/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[23:01:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:27    INFO]  -----------------------------------------------------
[23:01:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:27    INFO]  - starting ANNZ::Init()  ... 
[23:01:28    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced9/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[23:01:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:28    INFO]  -----------------------------------------------------
[23:01:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:28    INFO]  - starting ANNZ::Init()  ... 
[23:01:29    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced9/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[23:01:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:29    INFO]  -----------------------------------------------------
[23:01:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:29    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:30    INFO]  - starting ANNZ::Init()  ... 
[23:01:31    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced9/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[23:01:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:31    INFO]  -----------------------------------------------------
[23:01:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:31    INFO]  - starting ANNZ::Init()  ... 
[23:01:32    INFO]  - found trained "ANNZ_24" (./output/SPEC_advanced9/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[23:01:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:32    INFO]  -----------------------------------------------------
[23:01:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:32    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:32    INFO]  - starting ANNZ::Init()  ... 
[23:01:33    INFO]  - found trained "ANNZ_25" (./output/SPEC_advanced9/regres/train/ANNZ_25/ANNZ_25_weights/randomReg_ANNZ_25.weights.xml)
[23:01:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:33    INFO]  -----------------------------------------------------
[23:01:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:33    INFO]  - starting ANNZ::Init()  ... 
[23:01:34    INFO]  - found trained "ANNZ_26" (./output/SPEC_advanced9/regres/train/ANNZ_26/ANNZ_26_weights/randomReg_ANNZ_26.weights.xml)
[23:01:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:34    INFO]  -----------------------------------------------------
[23:01:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:35    INFO]  - starting ANNZ::Init()  ... 
[23:01:35    INFO]  - found trained "ANNZ_27" (./output/SPEC_advanced9/regres/train/ANNZ_27/ANNZ_27_weights/randomReg_ANNZ_27.weights.xml)
[23:01:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:35    INFO]  -----------------------------------------------------
[23:01:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:36    INFO]  - starting ANNZ::Init()  ... 
[23:01:36    INFO]  - found trained "ANNZ_28" (./output/SPEC_advanced9/regres/train/ANNZ_28/ANNZ_28_weights/randomReg_ANNZ_28.weights.xml)
[23:01:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:36    INFO]  -----------------------------------------------------
[23:01:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:37    INFO]  - starting ANNZ::Init()  ... 
[23:01:37    INFO]  - found trained "ANNZ_29" (./output/SPEC_advanced9/regres/train/ANNZ_29/ANNZ_29_weights/randomReg_ANNZ_29.weights.xml)
[23:01:37    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:37    INFO]  -----------------------------------------------------
[23:01:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:37    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:38    INFO]  - starting ANNZ::Init()  ... 
[23:01:39    INFO]  - found trained "ANNZ_30" (./output/SPEC_advanced9/regres/train/ANNZ_30/ANNZ_30_weights/randomReg_ANNZ_30.weights.xml)
[23:01:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:39    INFO]  -----------------------------------------------------
[23:01:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:39    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:40    INFO]  - starting ANNZ::Init()  ... 
[23:01:40    INFO]  - found trained "ANNZ_31" (./output/SPEC_advanced9/regres/train/ANNZ_31/ANNZ_31_weights/randomReg_ANNZ_31.weights.xml)
[23:01:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:40    INFO]  -----------------------------------------------------
[23:01:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:40    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:41    INFO]  - starting ANNZ::Init()  ... 
[23:01:41    INFO]  - found trained "ANNZ_32" (./output/SPEC_advanced9/regres/train/ANNZ_32/ANNZ_32_weights/randomReg_ANNZ_32.weights.xml)
[23:01:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:41    INFO]  -----------------------------------------------------
[23:01:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:41    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:42    INFO]  - starting ANNZ::Init()  ... 
[23:01:42    INFO]  - found trained "ANNZ_33" (./output/SPEC_advanced9/regres/train/ANNZ_33/ANNZ_33_weights/randomReg_ANNZ_33.weights.xml)
[23:01:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:42    INFO]  -----------------------------------------------------
[23:01:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:42    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:43    INFO]  - starting ANNZ::Init()  ... 
[23:01:44    INFO]  - found trained "ANNZ_34" (./output/SPEC_advanced9/regres/train/ANNZ_34/ANNZ_34_weights/randomReg_ANNZ_34.weights.xml)
[23:01:44    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:44    INFO]  -----------------------------------------------------
[23:01:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:44    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:45    INFO]  - starting ANNZ::Init()  ... 
[23:01:45    INFO]  - found trained "ANNZ_35" (./output/SPEC_advanced9/regres/train/ANNZ_35/ANNZ_35_weights/randomReg_ANNZ_35.weights.xml)
[23:01:45    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:46    INFO]  -----------------------------------------------------
[23:01:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:46    INFO]  - starting ANNZ::Init()  ... 
[23:01:47    INFO]  - found trained "ANNZ_36" (./output/SPEC_advanced9/regres/train/ANNZ_36/ANNZ_36_weights/randomReg_ANNZ_36.weights.xml)
[23:01:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:47    INFO]  -----------------------------------------------------
[23:01:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:47    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:48    INFO]  - starting ANNZ::Init()  ... 
[23:01:49    INFO]  - found trained "ANNZ_37" (./output/SPEC_advanced9/regres/train/ANNZ_37/ANNZ_37_weights/randomReg_ANNZ_37.weights.xml)
[23:01:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:49    INFO]  -----------------------------------------------------
[23:01:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:49    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:50    INFO]  - starting ANNZ::Init()  ... 
[23:01:50    INFO]  - found trained "ANNZ_38" (./output/SPEC_advanced9/regres/train/ANNZ_38/ANNZ_38_weights/randomReg_ANNZ_38.weights.xml)
[23:01:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:50    INFO]  -----------------------------------------------------
[23:01:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:50    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:51    INFO]  - starting ANNZ::Init()  ... 
[23:01:52    INFO]  - found trained "ANNZ_39" (./output/SPEC_advanced9/regres/train/ANNZ_39/ANNZ_39_weights/randomReg_ANNZ_39.weights.xml)
[23:01:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:52    INFO]  -----------------------------------------------------
[23:01:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:52    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:52    INFO]  - starting ANNZ::Init()  ... 
[23:01:53    INFO]  - found trained "ANNZ_40" (./output/SPEC_advanced9/regres/train/ANNZ_40/ANNZ_40_weights/randomReg_ANNZ_40.weights.xml)
[23:01:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:53    INFO]  -----------------------------------------------------
[23:01:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:53    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:54    INFO]  - starting ANNZ::Init()  ... 
[23:01:54    INFO]  - found trained "ANNZ_41" (./output/SPEC_advanced9/regres/train/ANNZ_41/ANNZ_41_weights/randomReg_ANNZ_41.weights.xml)
[23:01:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:54    INFO]  -----------------------------------------------------
[23:01:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:54    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:55    INFO]  - starting ANNZ::Init()  ... 
[23:01:55    INFO]  - found trained "ANNZ_42" (./output/SPEC_advanced9/regres/train/ANNZ_42/ANNZ_42_weights/randomReg_ANNZ_42.weights.xml)
[23:01:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:55    INFO]  -----------------------------------------------------
[23:01:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:56    INFO]  - starting ANNZ::Init()  ... 
[23:01:57    INFO]  - found trained "ANNZ_43" (./output/SPEC_advanced9/regres/train/ANNZ_43/ANNZ_43_weights/randomReg_ANNZ_43.weights.xml)
[23:01:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:57    INFO]  -----------------------------------------------------
[23:01:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:57    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:58    INFO]  - starting ANNZ::Init()  ... 
[23:01:58    INFO]  - found trained "ANNZ_44" (./output/SPEC_advanced9/regres/train/ANNZ_44/ANNZ_44_weights/randomReg_ANNZ_44.weights.xml)
[23:01:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m45[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:58    INFO]  -----------------------------------------------------
[23:01:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:58    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:59    INFO]  - starting ANNZ::Init()  ... 
[23:02:00    INFO]  - found trained "ANNZ_45" (./output/SPEC_advanced9/regres/train/ANNZ_45/ANNZ_45_weights/randomReg_ANNZ_45.weights.xml)
[23:02:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m46[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:02 INFO) 
[23:02:00    INFO]  -----------------------------------------------------
[23:02:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:02:00    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:00    INFO]  - starting ANNZ::Init()  ... 
[23:02:01    INFO]  - found trained "ANNZ_46" (./output/SPEC_advanced9/regres/train/ANNZ_46/ANNZ_46_weights/randomReg_ANNZ_46.weights.xml)
[23:02:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m47[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:02 INFO) 
[23:02:01    INFO]  -----------------------------------------------------
[23:02:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:02:01    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:02    INFO]  - starting ANNZ::Init()  ... 
[23:02:02    INFO]  - found trained "ANNZ_47" (./output/SPEC_advanced9/regres/train/ANNZ_47/ANNZ_47_weights/randomReg_ANNZ_47.weights.xml)
[23:02:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m48[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:02 INFO) 
[23:02:02    INFO]  -----------------------------------------------------
[23:02:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:02:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:03    INFO]  - starting ANNZ::Init()  ... 
[23:02:03    INFO]  - found trained "ANNZ_48" (./output/SPEC_advanced9/regres/train/ANNZ_48/ANNZ_48_weights/randomReg_ANNZ_48.weights.xml)
[23:02:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m49[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:02 INFO) 
[23:02:03    INFO]  -----------------------------------------------------
[23:02:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:02:03    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:04    INFO]  - starting ANNZ::Init()  ... 
[23:02:06    INFO]  - found trained "ANNZ_49" (./output/SPEC_advanced9/regres/train/ANNZ_49/ANNZ_49_weights/randomReg_ANNZ_49.weights.xml)
[23:02:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m50[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:02 INFO) 
[23:02:06    INFO]  -----------------------------------------------------
[23:02:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:02:06    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:06    INFO]  - starting ANNZ::Init()  ... 
[23:02:07    INFO]  - found trained "ANNZ_50" (./output/SPEC_advanced9/regres/train/ANNZ_50/ANNZ_50_weights/randomReg_ANNZ_50.weights.xml)
[23:02:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m51[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:02 INFO) 
[23:02:07    INFO]  -----------------------------------------------------
[23:02:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:02:07    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:07    INFO]  - starting ANNZ::Init()  ... 
[23:02:08    INFO]  - found trained "ANNZ_51" (./output/SPEC_advanced9/regres/train/ANNZ_51/ANNZ_51_weights/randomReg_ANNZ_51.weights.xml)
[23:02:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m52[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:02 INFO) 
[23:02:08    INFO]  -----------------------------------------------------
[23:02:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:02:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:09    INFO]  - starting ANNZ::Init()  ... 
[23:02:10    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_52/saveOpt.txt ...
[23:02:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:02:16    INFO] ----------------------------------------------------------------------------------------------------
[23:02:16    INFO]  - will book (ANNZ_52) method(BDT) with options: :NTrees=310:BoostType=AdaBoostR2:VarTransform=N,P
[23:02:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:02:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:02:16    INFO]      cuts (train):        ,
[23:02:16    INFO]      cuts (valid):       
[23:02:16    INFO]    - weights:            1
[23:02:16    INFO] ----------------------------------------------------------------------------------------------------
[23:02:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:02:52    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_52/ANNZ_52_weights/saveTrainOpt_ANNZ_52.txt ...
[23:02:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_52 ... 
[23:02:54    INFO]  - Will gen. input-parameter errors ...
[23:02:56    INFO]  - starting ANNZ::loadReaders() ... 
[23:03:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[23:09:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:09:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:09:48    INFO]  -----------------------------------------------------------------------------------------------------------
[23:09:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[23:11:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:11:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:11:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:11:14    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_52/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:11:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:11:15    INFO]  - will try to derive a bias correction ... 
[23:11:15    INFO]  - will validate that training produced an XML file for later ... 
[23:11:15    INFO]  - starting ANNZ::loadReaders() ... 
[23:11:18    INFO]  - will validate that the training was not a complete failure ... 
[23:11:18    INFO]  - training seems to have been successful! will move on ...
[23:11:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:11:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:11:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:11:24    INFO] ----------------------------------------------------------------------------------------------------
[23:11:24    INFO]  - will book (ANNZ_52_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:11:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:11:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:11:24    INFO]    - weights:            1
[23:11:24    INFO] ----------------------------------------------------------------------------------------------------
[23:11:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:11:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_52 ... 
[23:11:33    INFO]  - Will gen. input-parameter errors ...
[23:11:35    INFO]  - starting ANNZ::loadReaders() ... 
[23:11:44    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[23:17:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:17:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:17:06    INFO]  -----------------------------------------------------------------------------------------------------------
[23:17:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[23:18:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:18:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:18:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:18:33    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_52/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:18:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:18:34    INFO]  - will validate that the bias-correction actually improved the result ...
[23:18:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:18:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_52,
[23:18:41    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_52/plots/
[23:18:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_52/plots output/SPEC_advanced9/regres/train/ANNZ_52/plots_biasCor_before
[23:18:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:18:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_52,
[23:18:59    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_52/plots/
[23:19:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_52/plots output/SPEC_advanced9/regres/train/ANNZ_52/plots_biasCor_after
[23:19:12    INFO]  - Got original [KS-test,N_poiss]: [0.069348 , 6.64128] , after the bias-correction: [0.0339458 , 5.45762] --> will KEEP the correction !

(23:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m53[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:19 INFO) 
[23:19:16    INFO]  -----------------------------------------------------
[23:19:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:19:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:19:16    INFO]  - starting ANNZ::Init()  ... 
[23:19:18    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_53/saveOpt.txt ...
[23:19:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:19:24    INFO] ----------------------------------------------------------------------------------------------------
[23:19:24    INFO]  - will book (ANNZ_53) method(BDT) with options: :NTrees=850:BoostType=AdaBoost:VarTransform=N
[23:19:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:19:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:19:24    INFO]      cuts (train):        ,
[23:19:24    INFO]      cuts (valid):       
[23:19:24    INFO]    - weights:            1
[23:19:24    INFO] ----------------------------------------------------------------------------------------------------
[23:19:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:20:22    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_53/ANNZ_53_weights/saveTrainOpt_ANNZ_53.txt ...
[23:20:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_53 ... 
[23:20:26    INFO]  - Will gen. input-parameter errors ...
[23:20:28    INFO]  - starting ANNZ::loadReaders() ... 
[23:20:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[23:25:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:25:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:25:57    INFO]  -----------------------------------------------------------------------------------------------------------
[23:25:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[23:27:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:27:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:27:18    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:18    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_53/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:27:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:27:20    INFO]  - will try to derive a bias correction ... 
[23:27:20    INFO]  - will validate that training produced an XML file for later ... 
[23:27:20    INFO]  - starting ANNZ::loadReaders() ... 
[23:27:24    INFO]  - will validate that the training was not a complete failure ... 
[23:27:24    INFO]  - training seems to have been successful! will move on ...
[23:27:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:27:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:27:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:27:32    INFO] ----------------------------------------------------------------------------------------------------
[23:27:32    INFO]  - will book (ANNZ_53_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:27:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:27:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:27:32    INFO]    - weights:            1
[23:27:32    INFO] ----------------------------------------------------------------------------------------------------
[23:27:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:27:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_53 ... 
[23:27:43    INFO]  - Will gen. input-parameter errors ...
[23:27:45    INFO]  - starting ANNZ::loadReaders() ... 
[23:27:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[23:31:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:31:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:31:07    INFO]  -----------------------------------------------------------------------------------------------------------
[23:31:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[23:31:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:31:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:31:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:31:55    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_53/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:31:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:31:56    INFO]  - will validate that the bias-correction actually improved the result ...
[23:31:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:31:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_53,
Warning in <Fit>: Fit data is empty 
[23:32:03    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_53/plots/
[23:32:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_53/plots output/SPEC_advanced9/regres/train/ANNZ_53/plots_biasCor_before
[23:32:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:32:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_53,
Warning in <Fit>: Fit data is empty 
[23:32:20    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_53/plots/
[23:32:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_53/plots output/SPEC_advanced9/regres/train/ANNZ_53/plots_biasCor_after
[23:32:32    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.16219] , after the bias-correction: [0.0500785 , 6.1] --> will KEEP the correction !

(23:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m54[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:32 INFO) 
[23:32:36    INFO]  -----------------------------------------------------
[23:32:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:32:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:32:37    INFO]  - starting ANNZ::Init()  ... 
[23:32:38    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_54/saveOpt.txt ...
[23:32:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:32:44    INFO] ----------------------------------------------------------------------------------------------------
[23:32:44    INFO]  - will book (ANNZ_54) method(BDT) with options: :NTrees=530:BoostType=AdaBoostR2:VarTransform=N
[23:32:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:32:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:32:44    INFO]      cuts (train):        ,
[23:32:44    INFO]      cuts (valid):       
[23:32:44    INFO]    - weights:            1
[23:32:44    INFO] ----------------------------------------------------------------------------------------------------
[23:32:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:33:38    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_54/ANNZ_54_weights/saveTrainOpt_ANNZ_54.txt ...
[23:33:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_54 ... 
[23:33:41    INFO]  - Will gen. input-parameter errors ...
[23:33:43    INFO]  - starting ANNZ::loadReaders() ... 
[23:33:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[23:47:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:47:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:47:29    INFO]  -----------------------------------------------------------------------------------------------------------
[23:47:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[23:50:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:50:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:50:56    INFO]  -----------------------------------------------------------------------------------------------------------
[23:50:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_54/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:50:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:50:58    INFO]  - will try to derive a bias correction ... 
[23:50:58    INFO]  - will validate that training produced an XML file for later ... 
[23:50:58    INFO]  - starting ANNZ::loadReaders() ... 
[23:51:02    INFO]  - will validate that the training was not a complete failure ... 
[23:51:02    INFO]  - training seems to have been successful! will move on ...
[23:51:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:51:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:51:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:51:07    INFO] ----------------------------------------------------------------------------------------------------
[23:51:07    INFO]  - will book (ANNZ_54_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:51:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:51:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:51:07    INFO]    - weights:            1
[23:51:07    INFO] ----------------------------------------------------------------------------------------------------
[23:51:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:51:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_54 ... 
[23:51:16    INFO]  - Will gen. input-parameter errors ...
[23:51:18    INFO]  - starting ANNZ::loadReaders() ... 
[23:51:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:03:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:03:04    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:06:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:06:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:06:03    INFO]  -----------------------------------------------------------------------------------------------------------
[00:06:03    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_54/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:06:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:06:05    INFO]  - will validate that the bias-correction actually improved the result ...
[00:06:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:06:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_54,
[00:06:13    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_54/plots/
[00:06:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_54/plots output/SPEC_advanced9/regres/train/ANNZ_54/plots_biasCor_before
[00:06:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:06:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_54,
Warning in <Fit>: Fit data is empty 
[00:06:30    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_54/plots/
[00:06:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_54/plots output/SPEC_advanced9/regres/train/ANNZ_54/plots_biasCor_after
[00:06:42    INFO]  - Got original [KS-test,N_poiss]: [0.0621779 , 6.50969] , after the bias-correction: [0.0337217 , 5.62759] --> will KEEP the correction !

(00:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m55[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:06 INFO) 
[00:06:46    INFO]  -----------------------------------------------------
[00:06:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:06:46    INFO]  -----------------------------------------------------------------------------------------------------------
[00:06:47    INFO]  - starting ANNZ::Init()  ... 
[00:06:48    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_55/saveOpt.txt ...
[00:06:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:06:54    INFO] ----------------------------------------------------------------------------------------------------
[00:06:54    INFO]  - will book (ANNZ_55) method(BDT) with options: :NTrees=440:BoostType=AdaBoost:VarTransform=N
[00:06:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:06:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:06:54    INFO]      cuts (train):        ,
[00:06:54    INFO]      cuts (valid):       
[00:06:54    INFO]    - weights:            1
[00:06:54    INFO] ----------------------------------------------------------------------------------------------------
[00:06:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:07:26    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_55/ANNZ_55_weights/saveTrainOpt_ANNZ_55.txt ...
[00:07:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_55 ... 
[00:07:28    INFO]  - Will gen. input-parameter errors ...
[00:07:30    INFO]  - starting ANNZ::loadReaders() ... 
[00:07:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:09:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:09:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:09:15    INFO]  -----------------------------------------------------------------------------------------------------------
[00:09:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:09:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:09:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:09:39    INFO]  -----------------------------------------------------------------------------------------------------------
[00:09:39    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_55/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:09:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:09:41    INFO]  - will try to derive a bias correction ... 
[00:09:41    INFO]  - will validate that training produced an XML file for later ... 
[00:09:41    INFO]  - starting ANNZ::loadReaders() ... 
[00:09:42    INFO]  - will validate that the training was not a complete failure ... 
[00:09:43    INFO]  - training seems to have been successful! will move on ...
[00:09:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:09:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:09:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:09:49    INFO] ----------------------------------------------------------------------------------------------------
[00:09:49    INFO]  - will book (ANNZ_55_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:09:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:09:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:09:49    INFO]    - weights:            1
[00:09:49    INFO] ----------------------------------------------------------------------------------------------------
[00:09:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:09:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_55 ... 
[00:09:57    INFO]  - Will gen. input-parameter errors ...
[00:09:59    INFO]  - starting ANNZ::loadReaders() ... 
[00:10:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:12:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:12:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:12:00    INFO]  -----------------------------------------------------------------------------------------------------------
[00:12:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:12:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:12:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:12:38    INFO]  -----------------------------------------------------------------------------------------------------------
[00:12:38    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_55/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:12:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:12:39    INFO]  - will validate that the bias-correction actually improved the result ...
[00:12:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:12:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_55,
Warning in <Fit>: Fit data is empty 
[00:12:46    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_55/plots/
[00:12:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_55/plots output/SPEC_advanced9/regres/train/ANNZ_55/plots_biasCor_before
[00:12:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:12:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_55,
Warning in <Fit>: Fit data is empty 
[00:13:03    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_55/plots/
[00:13:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_55/plots output/SPEC_advanced9/regres/train/ANNZ_55/plots_biasCor_after
[00:13:15    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12573] , after the bias-correction: [0.0494062 , 6.01066] --> will KEEP the correction !

(00:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m56[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:13 INFO) 
[00:13:19    INFO]  -----------------------------------------------------
[00:13:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:13:19    INFO]  -----------------------------------------------------------------------------------------------------------
[00:13:20    INFO]  - starting ANNZ::Init()  ... 
[00:13:21    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_56/saveOpt.txt ...
[00:13:27    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:13:27    INFO] ----------------------------------------------------------------------------------------------------
[00:13:27    INFO]  - will book (ANNZ_56) method(BDT) with options: :NTrees=330:BoostType=AdaBoost:VarTransform=N
[00:13:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:13:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:13:27    INFO]      cuts (train):        ,
[00:13:27    INFO]      cuts (valid):       
[00:13:27    INFO]    - weights:            1
[00:13:27    INFO] ----------------------------------------------------------------------------------------------------
[00:13:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:13:51    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_56/ANNZ_56_weights/saveTrainOpt_ANNZ_56.txt ...
[00:13:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_56 ... 
[00:13:54    INFO]  - Will gen. input-parameter errors ...
[00:13:55    INFO]  - starting ANNZ::loadReaders() ... 
[00:13:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:15:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:15:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:15:09    INFO]  -----------------------------------------------------------------------------------------------------------
[00:15:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:15:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:15:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:15:27    INFO]  -----------------------------------------------------------------------------------------------------------
[00:15:28    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_56/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:15:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:15:28    INFO]  - will try to derive a bias correction ... 
[00:15:28    INFO]  - will validate that training produced an XML file for later ... 
[00:15:28    INFO]  - starting ANNZ::loadReaders() ... 
[00:15:30    INFO]  - will validate that the training was not a complete failure ... 
[00:15:30    INFO]  - training seems to have been successful! will move on ...
[00:15:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:15:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:15:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:15:34    INFO] ----------------------------------------------------------------------------------------------------
[00:15:34    INFO]  - will book (ANNZ_56_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:15:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:15:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:15:34    INFO]    - weights:            1
[00:15:34    INFO] ----------------------------------------------------------------------------------------------------
[00:15:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:15:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_56 ... 
[00:15:43    INFO]  - Will gen. input-parameter errors ...
[00:15:45    INFO]  - starting ANNZ::loadReaders() ... 
[00:15:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:17:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:17:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:17:28    INFO]  -----------------------------------------------------------------------------------------------------------
[00:17:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:17:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:17:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:17:51    INFO]  -----------------------------------------------------------------------------------------------------------
[00:17:51    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_56/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:17:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:17:52    INFO]  - will validate that the bias-correction actually improved the result ...
[00:17:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:17:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_56,
Warning in <Fit>: Fit data is empty 
[00:17:58    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_56/plots/
[00:18:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_56/plots output/SPEC_advanced9/regres/train/ANNZ_56/plots_biasCor_before
[00:18:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:18:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_56,
Warning in <Fit>: Fit data is empty 
[00:18:15    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_56/plots/
[00:18:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_56/plots output/SPEC_advanced9/regres/train/ANNZ_56/plots_biasCor_after
[00:18:27    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11135] , after the bias-correction: [0.0496303 , 6.0437] --> will KEEP the correction !

(00:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m57[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:18 INFO) 
[00:18:30    INFO]  -----------------------------------------------------
[00:18:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:18:30    INFO]  -----------------------------------------------------------------------------------------------------------
[00:18:31    INFO]  - starting ANNZ::Init()  ... 
[00:18:32    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_57/saveOpt.txt ...
[00:18:38    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:18:39    INFO] ----------------------------------------------------------------------------------------------------
[00:18:39    INFO]  - will book (ANNZ_57) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N,P
[00:18:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:18:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:18:39    INFO]      cuts (train):        ,
[00:18:39    INFO]      cuts (valid):       
[00:18:39    INFO]    - weights:            1
[00:18:39    INFO] ----------------------------------------------------------------------------------------------------
[00:18:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:19:14    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_57/ANNZ_57_weights/saveTrainOpt_ANNZ_57.txt ...
[00:19:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_57 ... 
[00:19:16    INFO]  - Will gen. input-parameter errors ...
[00:19:18    INFO]  - starting ANNZ::loadReaders() ... 
[00:19:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:22:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:22:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:22:42    INFO]  -----------------------------------------------------------------------------------------------------------
[00:22:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:23:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:23:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:23:32    INFO]  -----------------------------------------------------------------------------------------------------------
[00:23:32    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_57/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:23:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:23:33    INFO]  - will try to derive a bias correction ... 
[00:23:33    INFO]  - will validate that training produced an XML file for later ... 
[00:23:33    INFO]  - starting ANNZ::loadReaders() ... 
[00:23:35    INFO]  - will validate that the training was not a complete failure ... 
[00:23:35    INFO]  - training seems to have been successful! will move on ...
[00:23:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:23:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:23:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:23:39    INFO] ----------------------------------------------------------------------------------------------------
[00:23:39    INFO]  - will book (ANNZ_57_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:23:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:23:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:23:39    INFO]    - weights:            1
[00:23:39    INFO] ----------------------------------------------------------------------------------------------------
[00:23:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:23:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_57 ... 
[00:23:47    INFO]  - Will gen. input-parameter errors ...
[00:23:48    INFO]  - starting ANNZ::loadReaders() ... 
[00:23:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:26:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:26:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:26:56    INFO]  -----------------------------------------------------------------------------------------------------------
[00:26:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:27:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:27:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:27:42    INFO]  -----------------------------------------------------------------------------------------------------------
[00:27:42    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_57/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:27:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:27:43    INFO]  - will validate that the bias-correction actually improved the result ...
[00:27:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:27:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_57,
Warning in <Fit>: Fit data is empty 
[00:27:49    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_57/plots/
[00:28:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_57/plots output/SPEC_advanced9/regres/train/ANNZ_57/plots_biasCor_before
[00:28:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:28:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_57,
Warning in <Fit>: Fit data is empty 
[00:28:06    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_57/plots/
[00:28:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_57/plots output/SPEC_advanced9/regres/train/ANNZ_57/plots_biasCor_after
[00:28:18    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43565] , after the bias-correction: [0.0447009 , 5.69621] --> will KEEP the correction !

(00:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m58[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:28 INFO) 
[00:28:22    INFO]  -----------------------------------------------------
[00:28:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:28:22    INFO]  -----------------------------------------------------------------------------------------------------------
[00:28:22    INFO]  - starting ANNZ::Init()  ... 
[00:28:23    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_58/saveOpt.txt ...
[00:28:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:28:29    INFO] ----------------------------------------------------------------------------------------------------
[00:28:29    INFO]  - will book (ANNZ_58) method(BDT) with options: :NTrees=300:BoostType=Bagging:VarTransform=N,P
[00:28:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:28:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:28:29    INFO]      cuts (train):        ,
[00:28:29    INFO]      cuts (valid):       
[00:28:29    INFO]    - weights:            1
[00:28:29    INFO] ----------------------------------------------------------------------------------------------------
[00:28:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:29:02    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_58/ANNZ_58_weights/saveTrainOpt_ANNZ_58.txt ...
[00:29:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_58 ... 
[00:29:05    INFO]  - Will gen. input-parameter errors ...
[00:29:07    INFO]  - starting ANNZ::loadReaders() ... 
[00:29:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:32:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:32:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:32:03    INFO]  -----------------------------------------------------------------------------------------------------------
[00:32:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:32:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:32:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:32:41    INFO]  -----------------------------------------------------------------------------------------------------------
[00:32:41    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_58/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:32:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:32:43    INFO]  - will try to derive a bias correction ... 
[00:32:43    INFO]  - will validate that training produced an XML file for later ... 
[00:32:43    INFO]  - starting ANNZ::loadReaders() ... 
[00:32:46    INFO]  - will validate that the training was not a complete failure ... 
[00:32:46    INFO]  - training seems to have been successful! will move on ...
[00:32:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:32:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:32:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:32:51    INFO] ----------------------------------------------------------------------------------------------------
[00:32:51    INFO]  - will book (ANNZ_58_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:32:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:32:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:32:51    INFO]    - weights:            1
[00:32:51    INFO] ----------------------------------------------------------------------------------------------------
[00:32:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:33:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_58 ... 
[00:33:00    INFO]  - Will gen. input-parameter errors ...
[00:33:02    INFO]  - starting ANNZ::loadReaders() ... 
[00:33:10    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:36:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:36:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:36:02    INFO]  -----------------------------------------------------------------------------------------------------------
[00:36:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:36:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:36:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:36:40    INFO]  -----------------------------------------------------------------------------------------------------------
[00:36:40    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_58/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:36:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:36:42    INFO]  - will validate that the bias-correction actually improved the result ...
[00:36:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:36:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_58,
[00:36:49    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_58/plots/
[00:37:01        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_58/plots output/SPEC_advanced9/regres/train/ANNZ_58/plots_biasCor_before
[00:37:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:37:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_58,
[00:37:06    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_58/plots/
[00:37:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_58/plots output/SPEC_advanced9/regres/train/ANNZ_58/plots_biasCor_after
[00:37:19    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.80693] , after the bias-correction: [0.0421242 , 5.57578] --> will KEEP the correction !

(00:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m59[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:37 INFO) 
[00:37:23    INFO]  -----------------------------------------------------
[00:37:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:37:23    INFO]  -----------------------------------------------------------------------------------------------------------
[00:37:24    INFO]  - starting ANNZ::Init()  ... 
[00:37:25    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_59/saveOpt.txt ...
[00:37:31    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:37:32    INFO] ----------------------------------------------------------------------------------------------------
[00:37:32    INFO]  - will book (ANNZ_59) method(BDT) with options: :NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P,D
[00:37:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:37:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:37:32    INFO]      cuts (train):        ,
[00:37:32    INFO]      cuts (valid):       
[00:37:32    INFO]    - weights:            1
[00:37:32    INFO] ----------------------------------------------------------------------------------------------------
[00:37:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:38:21    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_59/ANNZ_59_weights/saveTrainOpt_ANNZ_59.txt ...
[00:38:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_59 ... 
[00:38:25    INFO]  - Will gen. input-parameter errors ...
[00:38:27    INFO]  - starting ANNZ::loadReaders() ... 
[00:38:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:47:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:47:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:47:31    INFO]  -----------------------------------------------------------------------------------------------------------
[00:47:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[00:49:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:49:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:49:51    INFO]  -----------------------------------------------------------------------------------------------------------
[00:49:51    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_59/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:49:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:49:53    INFO]  - will try to derive a bias correction ... 
[00:49:53    INFO]  - will validate that training produced an XML file for later ... 
[00:49:53    INFO]  - starting ANNZ::loadReaders() ... 
[00:49:56    INFO]  - will validate that the training was not a complete failure ... 
[00:49:56    INFO]  - training seems to have been successful! will move on ...
[00:49:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:50:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:50:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:50:01    INFO] ----------------------------------------------------------------------------------------------------
[00:50:01    INFO]  - will book (ANNZ_59_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:50:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:50:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:50:01    INFO]    - weights:            1
[00:50:01    INFO] ----------------------------------------------------------------------------------------------------
[00:50:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:50:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_59 ... 
[00:50:12    INFO]  - Will gen. input-parameter errors ...
[00:50:13    INFO]  - starting ANNZ::loadReaders() ... 
[00:50:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[00:58:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:58:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:58:52    INFO]  -----------------------------------------------------------------------------------------------------------
[00:58:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:01:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:01:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:01:08    INFO]  -----------------------------------------------------------------------------------------------------------
[01:01:08    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_59/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:01:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:01:09    INFO]  - will validate that the bias-correction actually improved the result ...
[01:01:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:01:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_59,
[01:01:16    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_59/plots/
[01:01:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_59/plots output/SPEC_advanced9/regres/train/ANNZ_59/plots_biasCor_before
[01:01:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:01:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_59,
[01:01:33    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_59/plots/
[01:01:46        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_59/plots output/SPEC_advanced9/regres/train/ANNZ_59/plots_biasCor_after
[01:01:46    INFO]  - Got original [KS-test,N_poiss]: [0.069572 , 6.56503] , after the bias-correction: [0.031369 , 5.59157] --> will KEEP the correction !

(01:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m60[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:01 INFO) 
[01:01:50    INFO]  -----------------------------------------------------
[01:01:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:01:50    INFO]  -----------------------------------------------------------------------------------------------------------
[01:01:51    INFO]  - starting ANNZ::Init()  ... 
[01:01:52    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_60/saveOpt.txt ...
[01:01:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:01:59    INFO] ----------------------------------------------------------------------------------------------------
[01:01:59    INFO]  - will book (ANNZ_60) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N,P
[01:01:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:01:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:01:59    INFO]      cuts (train):        ,
[01:01:59    INFO]      cuts (valid):       
[01:01:59    INFO]    - weights:            1
[01:01:59    INFO] ----------------------------------------------------------------------------------------------------
[01:01:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:02:56    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_60/ANNZ_60_weights/saveTrainOpt_ANNZ_60.txt ...
[01:03:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_60 ... 
[01:03:01    INFO]  - Will gen. input-parameter errors ...
[01:03:04    INFO]  - starting ANNZ::loadReaders() ... 
[01:03:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:08:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:08:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:08:15    INFO]  -----------------------------------------------------------------------------------------------------------
[01:08:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:09:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:09:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:09:22    INFO]  -----------------------------------------------------------------------------------------------------------
[01:09:22    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_60/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:09:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:09:24    INFO]  - will try to derive a bias correction ... 
[01:09:24    INFO]  - will validate that training produced an XML file for later ... 
[01:09:24    INFO]  - starting ANNZ::loadReaders() ... 
[01:09:30    INFO]  - will validate that the training was not a complete failure ... 
[01:09:30    INFO]  - training seems to have been successful! will move on ...
[01:09:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:09:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:09:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:09:36    INFO] ----------------------------------------------------------------------------------------------------
[01:09:36    INFO]  - will book (ANNZ_60_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:09:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:09:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:09:36    INFO]    - weights:            1
[01:09:36    INFO] ----------------------------------------------------------------------------------------------------
[01:09:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:09:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_60 ... 
[01:09:47    INFO]  - Will gen. input-parameter errors ...
[01:09:51    INFO]  - starting ANNZ::loadReaders() ... 
[01:10:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:15:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:15:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:15:58    INFO]  -----------------------------------------------------------------------------------------------------------
[01:15:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:17:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:17:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:17:18    INFO]  -----------------------------------------------------------------------------------------------------------
[01:17:18    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_60/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:17:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:17:21    INFO]  - will validate that the bias-correction actually improved the result ...
[01:17:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:17:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_60,
[01:17:27    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_60/plots/
[01:17:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_60/plots output/SPEC_advanced9/regres/train/ANNZ_60/plots_biasCor_before
[01:17:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:17:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_60,
[01:17:45    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_60/plots/
[01:17:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_60/plots output/SPEC_advanced9/regres/train/ANNZ_60/plots_biasCor_after
[01:17:59    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.85316] , after the bias-correction: [0.044925 , 5.72542] --> will KEEP the correction !

(01:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m61[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:18 INFO) 
[01:18:03    INFO]  -----------------------------------------------------
[01:18:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:18:03    INFO]  -----------------------------------------------------------------------------------------------------------
[01:18:04    INFO]  - starting ANNZ::Init()  ... 
[01:18:10    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_61/saveOpt.txt ...
[01:18:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:18:17    INFO] ----------------------------------------------------------------------------------------------------
[01:18:17    INFO]  - will book (ANNZ_61) method(BDT) with options: :NTrees=410:BoostType=Bagging:VarTransform=N
[01:18:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:18:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:18:17    INFO]      cuts (train):        ,
[01:18:17    INFO]      cuts (valid):       
[01:18:17    INFO]    - weights:            1
[01:18:17    INFO] ----------------------------------------------------------------------------------------------------
[01:18:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:19:06    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_61/ANNZ_61_weights/saveTrainOpt_ANNZ_61.txt ...
[01:19:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_61 ... 
[01:19:11    INFO]  - Will gen. input-parameter errors ...
[01:19:14    INFO]  - starting ANNZ::loadReaders() ... 
[01:19:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:21:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:21:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:21:59    INFO]  -----------------------------------------------------------------------------------------------------------
[01:21:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:22:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:22:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:22:31    INFO]  -----------------------------------------------------------------------------------------------------------
[01:22:31    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_61/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:22:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:22:33    INFO]  - will try to derive a bias correction ... 
[01:22:33    INFO]  - will validate that training produced an XML file for later ... 
[01:22:33    INFO]  - starting ANNZ::loadReaders() ... 
[01:22:38    INFO]  - will validate that the training was not a complete failure ... 
[01:22:38    INFO]  - training seems to have been successful! will move on ...
[01:22:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:22:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:22:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:22:46    INFO] ----------------------------------------------------------------------------------------------------
[01:22:46    INFO]  - will book (ANNZ_61_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:22:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:22:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:22:46    INFO]    - weights:            1
[01:22:46    INFO] ----------------------------------------------------------------------------------------------------
[01:22:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:22:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_61 ... 
[01:22:57    INFO]  - Will gen. input-parameter errors ...
[01:23:01    INFO]  - starting ANNZ::loadReaders() ... 
[01:23:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:25:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:25:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:25:39    INFO]  -----------------------------------------------------------------------------------------------------------
[01:25:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:26:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:26:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:26:27    INFO]  -----------------------------------------------------------------------------------------------------------
[01:26:27    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_61/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:26:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:26:29    INFO]  - will validate that the bias-correction actually improved the result ...
[01:26:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:26:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_61,
[01:26:40    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_61/plots/
[01:26:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_61/plots output/SPEC_advanced9/regres/train/ANNZ_61/plots_biasCor_before
[01:26:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:26:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_61,
[01:26:59    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_61/plots/
[01:27:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_61/plots output/SPEC_advanced9/regres/train/ANNZ_61/plots_biasCor_after
[01:27:12    INFO]  - Got original [KS-test,N_poiss]: [0.0842483 , 6.58723] , after the bias-correction: [0.0453731 , 5.67239] --> will KEEP the correction !

(01:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m62[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:27 INFO) 
[01:27:16    INFO]  -----------------------------------------------------
[01:27:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:27:16    INFO]  -----------------------------------------------------------------------------------------------------------
[01:27:17    INFO]  - starting ANNZ::Init()  ... 
[01:27:20    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_62/saveOpt.txt ...
[01:27:27    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:27:27    INFO] ----------------------------------------------------------------------------------------------------
[01:27:27    INFO]  - will book (ANNZ_62) method(BDT) with options: :NTrees=340:BoostType=AdaBoost:VarTransform=N,P
[01:27:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:27:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:27:27    INFO]      cuts (train):        ,
[01:27:27    INFO]      cuts (valid):       
[01:27:27    INFO]    - weights:            1
[01:27:27    INFO] ----------------------------------------------------------------------------------------------------
[01:27:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:27:59    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_62/ANNZ_62_weights/saveTrainOpt_ANNZ_62.txt ...
[01:28:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_62 ... 
[01:28:01    INFO]  - Will gen. input-parameter errors ...
[01:28:03    INFO]  - starting ANNZ::loadReaders() ... 
[01:28:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:30:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:30:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:30:21    INFO]  -----------------------------------------------------------------------------------------------------------
[01:30:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:30:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:30:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:30:53    INFO]  -----------------------------------------------------------------------------------------------------------
[01:30:53    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_62/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:30:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:30:54    INFO]  - will try to derive a bias correction ... 
[01:30:54    INFO]  - will validate that training produced an XML file for later ... 
[01:30:54    INFO]  - starting ANNZ::loadReaders() ... 
[01:30:55    INFO]  - will validate that the training was not a complete failure ... 
[01:30:56    INFO]  - training seems to have been successful! will move on ...
[01:30:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:31:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:31:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:31:05    INFO] ----------------------------------------------------------------------------------------------------
[01:31:05    INFO]  - will book (ANNZ_62_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:31:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:31:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:31:05    INFO]    - weights:            1
[01:31:05    INFO] ----------------------------------------------------------------------------------------------------
[01:31:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:31:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_62 ... 
[01:31:15    INFO]  - Will gen. input-parameter errors ...
[01:31:20    INFO]  - starting ANNZ::loadReaders() ... 
[01:31:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:34:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:34:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:34:01    INFO]  -----------------------------------------------------------------------------------------------------------
[01:34:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:34:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:34:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:34:39    INFO]  -----------------------------------------------------------------------------------------------------------
[01:34:40    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_62/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:34:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:34:41    INFO]  - will validate that the bias-correction actually improved the result ...
[01:34:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:34:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_62,
[01:34:47    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_62/plots/
[01:35:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_62/plots output/SPEC_advanced9/regres/train/ANNZ_62/plots_biasCor_before
[01:35:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:35:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_62,
Warning in <Fit>: Fit data is empty 
[01:35:04    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_62/plots/
[01:35:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_62/plots output/SPEC_advanced9/regres/train/ANNZ_62/plots_biasCor_after
[01:35:16    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.39997] , after the bias-correction: [0.0445889 , 5.73908] --> will KEEP the correction !

(01:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m63[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:35 INFO) 
[01:35:20    INFO]  -----------------------------------------------------
[01:35:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:35:20    INFO]  -----------------------------------------------------------------------------------------------------------
[01:35:21    INFO]  - starting ANNZ::Init()  ... 
[01:35:22    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_63/saveOpt.txt ...
[01:35:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:35:30    INFO] ----------------------------------------------------------------------------------------------------
[01:35:30    INFO]  - will book (ANNZ_63) method(BDT) with options: :NTrees=430:BoostType=AdaBoostR2:VarTransform=N
[01:35:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:35:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:35:30    INFO]      cuts (train):        ,
[01:35:30    INFO]      cuts (valid):       
[01:35:30    INFO]    - weights:            1
[01:35:30    INFO] ----------------------------------------------------------------------------------------------------
[01:35:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:36:17    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_63/ANNZ_63_weights/saveTrainOpt_ANNZ_63.txt ...
[01:36:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_63 ... 
[01:36:24    INFO]  - Will gen. input-parameter errors ...
[01:36:28    INFO]  - starting ANNZ::loadReaders() ... 
[01:36:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:45:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:45:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:45:01    INFO]  -----------------------------------------------------------------------------------------------------------
[01:45:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:47:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:47:16    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:47:16    INFO]  -----------------------------------------------------------------------------------------------------------
[01:47:16    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_63/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:47:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:47:18    INFO]  - will try to derive a bias correction ... 
[01:47:18    INFO]  - will validate that training produced an XML file for later ... 
[01:47:18    INFO]  - starting ANNZ::loadReaders() ... 
[01:47:21    INFO]  - will validate that the training was not a complete failure ... 
[01:47:21    INFO]  - training seems to have been successful! will move on ...
[01:47:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:47:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:47:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:47:27    INFO] ----------------------------------------------------------------------------------------------------
[01:47:27    INFO]  - will book (ANNZ_63_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:47:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:47:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:47:27    INFO]    - weights:            1
[01:47:27    INFO] ----------------------------------------------------------------------------------------------------
[01:47:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:47:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_63 ... 
[01:47:37    INFO]  - Will gen. input-parameter errors ...
[01:47:44    INFO]  - starting ANNZ::loadReaders() ... 
[01:47:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:54:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:54:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:54:58    INFO]  -----------------------------------------------------------------------------------------------------------
[01:54:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[01:56:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:56:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:56:38    INFO]  -----------------------------------------------------------------------------------------------------------
[01:56:38    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_63/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:56:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:56:39    INFO]  - will validate that the bias-correction actually improved the result ...
[01:56:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:56:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_63,
Warning in <Fit>: Fit data is empty 
[01:56:46    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_63/plots/
[01:56:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_63/plots output/SPEC_advanced9/regres/train/ANNZ_63/plots_biasCor_before
[01:56:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:56:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_63,
[01:57:03    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_63/plots/
[01:57:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_63/plots output/SPEC_advanced9/regres/train/ANNZ_63/plots_biasCor_after
[01:57:16    INFO]  - Got original [KS-test,N_poiss]: [0.062514 , 6.53979] , after the bias-correction: [0.0362985 , 5.67769] --> will KEEP the correction !

(01:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m64[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:57 INFO) 
[01:57:20    INFO]  -----------------------------------------------------
[01:57:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:57:20    INFO]  -----------------------------------------------------------------------------------------------------------
[01:57:21    INFO]  - starting ANNZ::Init()  ... 
[01:57:24    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_64/saveOpt.txt ...
[01:57:31    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:57:31    INFO] ----------------------------------------------------------------------------------------------------
[01:57:31    INFO]  - will book (ANNZ_64) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[01:57:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:57:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:57:31    INFO]      cuts (train):        ,
[01:57:31    INFO]      cuts (valid):       
[01:57:31    INFO]    - weights:            1
[01:57:31    INFO] ----------------------------------------------------------------------------------------------------
[01:57:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:57:52    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_64/ANNZ_64_weights/saveTrainOpt_ANNZ_64.txt ...
[01:57:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_64 ... 
[01:57:54    INFO]  - Will gen. input-parameter errors ...
[01:57:56    INFO]  - starting ANNZ::loadReaders() ... 
[01:58:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[01:59:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:59:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:59:43    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:00:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:00:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:00:10    INFO]  -----------------------------------------------------------------------------------------------------------
[02:00:10    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_64/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:00:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:00:11    INFO]  - will try to derive a bias correction ... 
[02:00:11    INFO]  - will validate that training produced an XML file for later ... 
[02:00:11    INFO]  - starting ANNZ::loadReaders() ... 
[02:00:12    INFO]  - will validate that the training was not a complete failure ... 
[02:00:12    INFO]  - training seems to have been successful! will move on ...
[02:00:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:00:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:00:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:00:18    INFO] ----------------------------------------------------------------------------------------------------
[02:00:18    INFO]  - will book (ANNZ_64_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:00:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:00:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:00:18    INFO]    - weights:            1
[02:00:18    INFO] ----------------------------------------------------------------------------------------------------
[02:00:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:00:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_64 ... 
[02:00:25    INFO]  - Will gen. input-parameter errors ...
[02:00:28    INFO]  - starting ANNZ::loadReaders() ... 
[02:00:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[02:03:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:03:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:03:06    INFO]  -----------------------------------------------------------------------------------------------------------
[02:03:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:03:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:03:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:03:58    INFO]  -----------------------------------------------------------------------------------------------------------
[02:03:58    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_64/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:04:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:04:00    INFO]  - will validate that the bias-correction actually improved the result ...
[02:04:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:04:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_64,
Warning in <Fit>: Fit data is empty 
[02:04:08    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_64/plots/
[02:04:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_64/plots output/SPEC_advanced9/regres/train/ANNZ_64/plots_biasCor_before
[02:04:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:04:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_64,
Warning in <Fit>: Fit data is empty 
[02:04:29    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_64/plots/
[02:04:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_64/plots output/SPEC_advanced9/regres/train/ANNZ_64/plots_biasCor_after
[02:04:43    INFO]  - Got original [KS-test,N_poiss]: [0.100941 , 6.44299] , after the bias-correction: [0.0448129 , 5.75736] --> will KEEP the correction !

(02:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m65[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:04 INFO) 
[02:04:47    INFO]  -----------------------------------------------------
[02:04:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:04:47    INFO]  -----------------------------------------------------------------------------------------------------------
[02:04:48    INFO]  - starting ANNZ::Init()  ... 
[02:04:49    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_65/saveOpt.txt ...
[02:04:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:04:55    INFO] ----------------------------------------------------------------------------------------------------
[02:04:55    INFO]  - will book (ANNZ_65) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N,P
[02:04:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:04:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:04:55    INFO]      cuts (train):        ,
[02:04:55    INFO]      cuts (valid):       
[02:04:55    INFO]    - weights:            1
[02:04:55    INFO] ----------------------------------------------------------------------------------------------------
[02:04:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:05:55    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_65/ANNZ_65_weights/saveTrainOpt_ANNZ_65.txt ...
[02:06:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_65 ... 
[02:06:00    INFO]  - Will gen. input-parameter errors ...
[02:06:04    INFO]  - starting ANNZ::loadReaders() ... 
[02:06:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[02:11:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:11:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:11:23    INFO]  -----------------------------------------------------------------------------------------------------------
[02:11:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:12:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:12:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:12:33    INFO]  -----------------------------------------------------------------------------------------------------------
[02:12:34    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_65/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:12:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:12:36    INFO]  - will try to derive a bias correction ... 
[02:12:36    INFO]  - will validate that training produced an XML file for later ... 
[02:12:36    INFO]  - starting ANNZ::loadReaders() ... 
[02:12:41    INFO]  - will validate that the training was not a complete failure ... 
[02:12:42    INFO]  - training seems to have been successful! will move on ...
[02:12:42    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:12:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:12:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:12:52    INFO] ----------------------------------------------------------------------------------------------------
[02:12:52    INFO]  - will book (ANNZ_65_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:12:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:12:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:12:52    INFO]    - weights:            1
[02:12:52    INFO] ----------------------------------------------------------------------------------------------------
[02:12:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:13:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_65 ... 
[02:13:03    INFO]  - Will gen. input-parameter errors ...
[02:13:08    INFO]  - starting ANNZ::loadReaders() ... 
[02:13:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[02:18:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:18:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:18:50    INFO]  -----------------------------------------------------------------------------------------------------------
[02:18:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:20:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:20:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:20:06    INFO]  -----------------------------------------------------------------------------------------------------------
[02:20:06    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_65/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:20:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:20:08    INFO]  - will validate that the bias-correction actually improved the result ...
[02:20:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:20:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_65,
[02:20:18    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_65/plots/
[02:20:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_65/plots output/SPEC_advanced9/regres/train/ANNZ_65/plots_biasCor_before
[02:20:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:20:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_65,
[02:20:36    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_65/plots/
[02:20:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_65/plots output/SPEC_advanced9/regres/train/ANNZ_65/plots_biasCor_after
[02:20:48    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.85316] , after the bias-correction: [0.044925 , 5.72542] --> will KEEP the correction !

(02:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m66[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=970:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:20 INFO) 
[02:20:53    INFO]  -----------------------------------------------------
[02:20:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:20:53    INFO]  -----------------------------------------------------------------------------------------------------------
[02:20:54    INFO]  - starting ANNZ::Init()  ... 
[02:20:56    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_66/saveOpt.txt ...
[02:21:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:21:03    INFO] ----------------------------------------------------------------------------------------------------
[02:21:03    INFO]  - will book (ANNZ_66) method(BDT) with options: :NTrees=970:BoostType=AdaBoost:VarTransform=N,P
[02:21:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:21:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:21:03    INFO]      cuts (train):        ,
[02:21:03    INFO]      cuts (valid):       
[02:21:03    INFO]    - weights:            1
[02:21:03    INFO] ----------------------------------------------------------------------------------------------------
[02:21:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:22:08    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_66/ANNZ_66_weights/saveTrainOpt_ANNZ_66.txt ...
[02:22:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_66 ... 
[02:22:12    INFO]  - Will gen. input-parameter errors ...
[02:22:19    INFO]  - starting ANNZ::loadReaders() ... 
[02:22:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[02:32:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:32:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:32:22    INFO]  -----------------------------------------------------------------------------------------------------------
[02:32:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:34:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:34:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:34:44    INFO]  -----------------------------------------------------------------------------------------------------------
[02:34:44    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_66/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:34:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:34:46    INFO]  - will try to derive a bias correction ... 
[02:34:46    INFO]  - will validate that training produced an XML file for later ... 
[02:34:46    INFO]  - starting ANNZ::loadReaders() ... 
[02:34:49    INFO]  - will validate that the training was not a complete failure ... 
[02:34:49    INFO]  - training seems to have been successful! will move on ...
[02:34:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:34:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:34:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:34:54    INFO] ----------------------------------------------------------------------------------------------------
[02:34:54    INFO]  - will book (ANNZ_66_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:34:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:34:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:34:54    INFO]    - weights:            1
[02:34:54    INFO] ----------------------------------------------------------------------------------------------------
[02:34:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:35:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_66 ... 
[02:35:04    INFO]  - Will gen. input-parameter errors ...
[02:35:05    INFO]  - starting ANNZ::loadReaders() ... 
[02:35:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[02:40:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:40:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:40:35    INFO]  -----------------------------------------------------------------------------------------------------------
[02:40:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:42:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:42:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:42:01    INFO]  -----------------------------------------------------------------------------------------------------------
[02:42:02    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_66/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:42:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:42:04    INFO]  - will validate that the bias-correction actually improved the result ...
[02:42:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:42:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_66,
[02:42:13    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_66/plots/
[02:42:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_66/plots output/SPEC_advanced9/regres/train/ANNZ_66/plots_biasCor_before
[02:42:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:42:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_66,
[02:42:37    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_66/plots/
[02:42:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_66/plots output/SPEC_advanced9/regres/train/ANNZ_66/plots_biasCor_after
[02:42:49    INFO]  - Got original [KS-test,N_poiss]: [0.101837 , 6.44297] , after the bias-correction: [0.0445889 , 5.67693] --> will KEEP the correction !

(02:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m67[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:42 INFO) 
[02:42:53    INFO]  -----------------------------------------------------
[02:42:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:42:53    INFO]  -----------------------------------------------------------------------------------------------------------
[02:42:54    INFO]  - starting ANNZ::Init()  ... 
[02:42:55    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_67/saveOpt.txt ...
[02:43:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:43:02    INFO] ----------------------------------------------------------------------------------------------------
[02:43:02    INFO]  - will book (ANNZ_67) method(BDT) with options: :NTrees=470:BoostType=AdaBoost:VarTransform=N
[02:43:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:43:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:43:02    INFO]      cuts (train):        ,
[02:43:02    INFO]      cuts (valid):       
[02:43:02    INFO]    - weights:            1
[02:43:02    INFO] ----------------------------------------------------------------------------------------------------
[02:43:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:43:36    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_67/ANNZ_67_weights/saveTrainOpt_ANNZ_67.txt ...
[02:43:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_67 ... 
[02:43:39    INFO]  - Will gen. input-parameter errors ...
[02:43:41    INFO]  - starting ANNZ::loadReaders() ... 
[02:43:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[02:45:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:45:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:45:50    INFO]  -----------------------------------------------------------------------------------------------------------
[02:45:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:46:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:46:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:46:29    INFO]  -----------------------------------------------------------------------------------------------------------
[02:46:29    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_67/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:46:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:46:30    INFO]  - will try to derive a bias correction ... 
[02:46:30    INFO]  - will validate that training produced an XML file for later ... 
[02:46:30    INFO]  - starting ANNZ::loadReaders() ... 
[02:46:33    INFO]  - will validate that the training was not a complete failure ... 
[02:46:33    INFO]  - training seems to have been successful! will move on ...
[02:46:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:46:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:46:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:46:40    INFO] ----------------------------------------------------------------------------------------------------
[02:46:40    INFO]  - will book (ANNZ_67_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:46:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:46:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:46:40    INFO]    - weights:            1
[02:46:40    INFO] ----------------------------------------------------------------------------------------------------
[02:46:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:46:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_67 ... 
[02:46:51    INFO]  - Will gen. input-parameter errors ...
[02:46:53    INFO]  - starting ANNZ::loadReaders() ... 
[02:47:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[02:49:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:49:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:49:18    INFO]  -----------------------------------------------------------------------------------------------------------
[02:49:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:49:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:49:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:49:50    INFO]  -----------------------------------------------------------------------------------------------------------
[02:49:50    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_67/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:49:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:49:51    INFO]  - will validate that the bias-correction actually improved the result ...
[02:49:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:49:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_67,
Warning in <Fit>: Fit data is empty 
[02:49:58    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_67/plots/
[02:50:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_67/plots output/SPEC_advanced9/regres/train/ANNZ_67/plots_biasCor_before
[02:50:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:50:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_67,
Warning in <Fit>: Fit data is empty 
[02:50:16    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_67/plots/
[02:50:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_67/plots output/SPEC_advanced9/regres/train/ANNZ_67/plots_biasCor_after
[02:50:28    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12581] , after the bias-correction: [0.0494062 , 5.98524] --> will KEEP the correction !

(02:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m68[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:50 INFO) 
[02:50:32    INFO]  -----------------------------------------------------
[02:50:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:50:32    INFO]  -----------------------------------------------------------------------------------------------------------
[02:50:33    INFO]  - starting ANNZ::Init()  ... 
[02:50:34    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_68/saveOpt.txt ...
[02:50:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:50:41    INFO] ----------------------------------------------------------------------------------------------------
[02:50:41    INFO]  - will book (ANNZ_68) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N,P
[02:50:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:50:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:50:41    INFO]      cuts (train):        ,
[02:50:41    INFO]      cuts (valid):       
[02:50:41    INFO]    - weights:            1
[02:50:41    INFO] ----------------------------------------------------------------------------------------------------
[02:50:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:51:40    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_68/ANNZ_68_weights/saveTrainOpt_ANNZ_68.txt ...
[02:51:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_68 ... 
[02:51:45    INFO]  - Will gen. input-parameter errors ...
[02:51:47    INFO]  - starting ANNZ::loadReaders() ... 
[02:52:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[02:57:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:57:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:57:35    INFO]  -----------------------------------------------------------------------------------------------------------
[02:57:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[02:58:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:58:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:58:59    INFO]  -----------------------------------------------------------------------------------------------------------
[02:58:59    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_68/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:59:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:59:02    INFO]  - will try to derive a bias correction ... 
[02:59:02    INFO]  - will validate that training produced an XML file for later ... 
[02:59:02    INFO]  - starting ANNZ::loadReaders() ... 
[02:59:08    INFO]  - will validate that the training was not a complete failure ... 
[02:59:09    INFO]  - training seems to have been successful! will move on ...
[02:59:09    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:59:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:59:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:59:15    INFO] ----------------------------------------------------------------------------------------------------
[02:59:15    INFO]  - will book (ANNZ_68_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:59:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:59:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:59:15    INFO]    - weights:            1
[02:59:15    INFO] ----------------------------------------------------------------------------------------------------
[02:59:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:59:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_68 ... 
[02:59:27    INFO]  - Will gen. input-parameter errors ...
[02:59:29    INFO]  - starting ANNZ::loadReaders() ... 
[02:59:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[03:05:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:05:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:05:25    INFO]  -----------------------------------------------------------------------------------------------------------
[03:05:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[03:06:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:06:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:06:57    INFO]  -----------------------------------------------------------------------------------------------------------
[03:06:57    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_68/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:07:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:07:00    INFO]  - will validate that the bias-correction actually improved the result ...
[03:07:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:07:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_68,
[03:07:22    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_68/plots/
[03:07:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_68/plots output/SPEC_advanced9/regres/train/ANNZ_68/plots_biasCor_before
[03:07:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:07:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_68,
[03:07:52    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_68/plots/
[03:08:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_68/plots output/SPEC_advanced9/regres/train/ANNZ_68/plots_biasCor_after
[03:08:16    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.85316] , after the bias-correction: [0.044925 , 5.72542] --> will KEEP the correction !

(03:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m69[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:08 INFO) 
[03:08:21    INFO]  -----------------------------------------------------
[03:08:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:08:21    INFO]  -----------------------------------------------------------------------------------------------------------
[03:08:22    INFO]  - starting ANNZ::Init()  ... 
[03:08:24    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_69/saveOpt.txt ...
[03:08:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:08:32    INFO] ----------------------------------------------------------------------------------------------------
[03:08:32    INFO]  - will book (ANNZ_69) method(BDT) with options: :NTrees=350:BoostType=Bagging:VarTransform=N,P
[03:08:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:08:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:08:32    INFO]      cuts (train):        ,
[03:08:32    INFO]      cuts (valid):       
[03:08:32    INFO]    - weights:            1
[03:08:32    INFO] ----------------------------------------------------------------------------------------------------
[03:08:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:09:17    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_69/ANNZ_69_weights/saveTrainOpt_ANNZ_69.txt ...
[03:09:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_69 ... 
[03:09:21    INFO]  - Will gen. input-parameter errors ...
[03:09:23    INFO]  - starting ANNZ::loadReaders() ... 
[03:09:32    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[03:12:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:12:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:12:31    INFO]  -----------------------------------------------------------------------------------------------------------
[03:12:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[03:13:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:13:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:13:19    INFO]  -----------------------------------------------------------------------------------------------------------
[03:13:19    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_69/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:13:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:13:21    INFO]  - will try to derive a bias correction ... 
[03:13:21    INFO]  - will validate that training produced an XML file for later ... 
[03:13:21    INFO]  - starting ANNZ::loadReaders() ... 
[03:13:26    INFO]  - will validate that the training was not a complete failure ... 
[03:13:26    INFO]  - training seems to have been successful! will move on ...
[03:13:26    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:13:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:13:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:13:32    INFO] ----------------------------------------------------------------------------------------------------
[03:13:32    INFO]  - will book (ANNZ_69_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:13:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:13:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:13:32    INFO]    - weights:            1
[03:13:32    INFO] ----------------------------------------------------------------------------------------------------
[03:13:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:13:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_69 ... 
[03:13:45    INFO]  - Will gen. input-parameter errors ...
[03:13:47    INFO]  - starting ANNZ::loadReaders() ... 
[03:14:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[03:17:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:17:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:17:16    INFO]  -----------------------------------------------------------------------------------------------------------
[03:17:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[03:18:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:18:09    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:18:09    INFO]  -----------------------------------------------------------------------------------------------------------
[03:18:09    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_69/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:18:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:18:11    INFO]  - will validate that the bias-correction actually improved the result ...
[03:18:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:18:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_69,
[03:18:20    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_69/plots/
[03:18:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_69/plots output/SPEC_advanced9/regres/train/ANNZ_69/plots_biasCor_before
[03:18:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:18:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_69,
[03:18:49    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_69/plots/
[03:19:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_69/plots output/SPEC_advanced9/regres/train/ANNZ_69/plots_biasCor_after
[03:19:02    INFO]  - Got original [KS-test,N_poiss]: [0.0930988 , 6.82866] , after the bias-correction: [0.0441408 , 5.57067] --> will KEEP the correction !

(03:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m70[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=580:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:19 INFO) 
[03:19:07    INFO]  -----------------------------------------------------
[03:19:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:19:07    INFO]  -----------------------------------------------------------------------------------------------------------
[03:19:07    INFO]  - starting ANNZ::Init()  ... 
[03:19:09    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_70/saveOpt.txt ...
[03:19:16    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:19:16    INFO] ----------------------------------------------------------------------------------------------------
[03:19:16    INFO]  - will book (ANNZ_70) method(BDT) with options: :NTrees=580:BoostType=AdaBoostR2:VarTransform=N,P
[03:19:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:19:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:19:16    INFO]      cuts (train):        ,
[03:19:16    INFO]      cuts (valid):       
[03:19:16    INFO]    - weights:            1
[03:19:16    INFO] ----------------------------------------------------------------------------------------------------
[03:19:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:20:26    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_70/ANNZ_70_weights/saveTrainOpt_ANNZ_70.txt ...
[03:20:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_70 ... 
[03:20:31    INFO]  - Will gen. input-parameter errors ...
[03:20:34    INFO]  - starting ANNZ::loadReaders() ... 
[03:20:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[03:40:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:40:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:40:26    INFO]  -----------------------------------------------------------------------------------------------------------
[03:40:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[03:44:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:44:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:44:52    INFO]  -----------------------------------------------------------------------------------------------------------
[03:44:52    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_70/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:44:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:44:54    INFO]  - will try to derive a bias correction ... 
[03:44:54    INFO]  - will validate that training produced an XML file for later ... 
[03:44:54    INFO]  - starting ANNZ::loadReaders() ... 
[03:44:59    INFO]  - will validate that the training was not a complete failure ... 
[03:44:59    INFO]  - training seems to have been successful! will move on ...
[03:44:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:45:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:45:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:45:05    INFO] ----------------------------------------------------------------------------------------------------
[03:45:05    INFO]  - will book (ANNZ_70_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:45:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:45:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:45:05    INFO]    - weights:            1
[03:45:05    INFO] ----------------------------------------------------------------------------------------------------
[03:45:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:45:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_70 ... 
[03:45:16    INFO]  - Will gen. input-parameter errors ...
[03:45:18    INFO]  - starting ANNZ::loadReaders() ... 
[03:45:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:04:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:04:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:04:31    INFO]  -----------------------------------------------------------------------------------------------------------
[04:04:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:09:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:09:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:09:15    INFO]  -----------------------------------------------------------------------------------------------------------
[04:09:15    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_70/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:09:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:09:17    INFO]  - will validate that the bias-correction actually improved the result ...
[04:09:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:09:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_70,
[04:09:24    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_70/plots/
[04:09:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_70/plots output/SPEC_advanced9/regres/train/ANNZ_70/plots_biasCor_before
[04:09:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:09:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_70,
[04:09:42    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_70/plots/
[04:09:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_70/plots output/SPEC_advanced9/regres/train/ANNZ_70/plots_biasCor_after
[04:09:54    INFO]  - Got original [KS-test,N_poiss]: [0.0701322 , 6.55681] , after the bias-correction: [0.0322653 , 5.51223] --> will KEEP the correction !

(04:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m71[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:09 INFO) 
[04:09:59    INFO]  -----------------------------------------------------
[04:09:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:09:59    INFO]  -----------------------------------------------------------------------------------------------------------
[04:09:59    INFO]  - starting ANNZ::Init()  ... 
[04:10:00    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_71/saveOpt.txt ...
[04:10:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:10:07    INFO] ----------------------------------------------------------------------------------------------------
[04:10:07    INFO]  - will book (ANNZ_71) method(BDT) with options: :NTrees=330:BoostType=AdaBoostR2:VarTransform=N
[04:10:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:10:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:10:07    INFO]      cuts (train):        ,
[04:10:07    INFO]      cuts (valid):       
[04:10:07    INFO]    - weights:            1
[04:10:07    INFO] ----------------------------------------------------------------------------------------------------
[04:10:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:10:40    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_71/ANNZ_71_weights/saveTrainOpt_ANNZ_71.txt ...
[04:10:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_71 ... 
[04:10:43    INFO]  - Will gen. input-parameter errors ...
[04:10:45    INFO]  - starting ANNZ::loadReaders() ... 
[04:10:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:15:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:15:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:15:38    INFO]  -----------------------------------------------------------------------------------------------------------
[04:15:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:16:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:16:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:16:46    INFO]  -----------------------------------------------------------------------------------------------------------
[04:16:46    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_71/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:16:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:16:48    INFO]  - will try to derive a bias correction ... 
[04:16:48    INFO]  - will validate that training produced an XML file for later ... 
[04:16:48    INFO]  - starting ANNZ::loadReaders() ... 
[04:16:50    INFO]  - will validate that the training was not a complete failure ... 
[04:16:50    INFO]  - training seems to have been successful! will move on ...
[04:16:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:16:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:16:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:16:54    INFO] ----------------------------------------------------------------------------------------------------
[04:16:54    INFO]  - will book (ANNZ_71_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:16:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:16:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:16:54    INFO]    - weights:            1
[04:16:54    INFO] ----------------------------------------------------------------------------------------------------
[04:16:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:17:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_71 ... 
[04:17:02    INFO]  - Will gen. input-parameter errors ...
[04:17:04    INFO]  - starting ANNZ::loadReaders() ... 
[04:17:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:21:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:21:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:21:24    INFO]  -----------------------------------------------------------------------------------------------------------
[04:21:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:22:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:22:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:22:27    INFO]  -----------------------------------------------------------------------------------------------------------
[04:22:28    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_71/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:22:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:22:29    INFO]  - will validate that the bias-correction actually improved the result ...
[04:22:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:22:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_71,
[04:22:34    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_71/plots/
[04:22:46        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_71/plots output/SPEC_advanced9/regres/train/ANNZ_71/plots_biasCor_before
[04:22:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:22:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_71,
[04:22:51    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_71/plots/
[04:23:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_71/plots output/SPEC_advanced9/regres/train/ANNZ_71/plots_biasCor_after
[04:23:03    INFO]  - Got original [KS-test,N_poiss]: [0.0627381 , 6.5083] , after the bias-correction: [0.0351781 , 5.77379] --> will KEEP the correction !

(04:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m72[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=730:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:23 INFO) 
[04:23:06    INFO]  -----------------------------------------------------
[04:23:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:23:06    INFO]  -----------------------------------------------------------------------------------------------------------
[04:23:07    INFO]  - starting ANNZ::Init()  ... 
[04:23:08    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_72/saveOpt.txt ...
[04:23:13    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:23:13    INFO] ----------------------------------------------------------------------------------------------------
[04:23:13    INFO]  - will book (ANNZ_72) method(BDT) with options: :NTrees=730:BoostType=Bagging:VarTransform=N
[04:23:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:23:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:23:13    INFO]      cuts (train):        ,
[04:23:13    INFO]      cuts (valid):       
[04:23:13    INFO]    - weights:            1
[04:23:13    INFO] ----------------------------------------------------------------------------------------------------
[04:23:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:24:29    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_72/ANNZ_72_weights/saveTrainOpt_ANNZ_72.txt ...
[04:24:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_72 ... 
[04:24:36    INFO]  - Will gen. input-parameter errors ...
[04:24:39    INFO]  - starting ANNZ::loadReaders() ... 
[04:24:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:31:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:31:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:31:16    INFO]  -----------------------------------------------------------------------------------------------------------
[04:31:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:33:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:33:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:33:01    INFO]  -----------------------------------------------------------------------------------------------------------
[04:33:01    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_72/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:33:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:33:04    INFO]  - will try to derive a bias correction ... 
[04:33:04    INFO]  - will validate that training produced an XML file for later ... 
[04:33:04    INFO]  - starting ANNZ::loadReaders() ... 
[04:33:11    INFO]  - will validate that the training was not a complete failure ... 
[04:33:12    INFO]  - training seems to have been successful! will move on ...
[04:33:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:33:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:33:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:33:19    INFO] ----------------------------------------------------------------------------------------------------
[04:33:19    INFO]  - will book (ANNZ_72_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:33:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:33:19    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:33:19    INFO]    - weights:            1
[04:33:19    INFO] ----------------------------------------------------------------------------------------------------
[04:33:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:33:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_72 ... 
[04:33:29    INFO]  - Will gen. input-parameter errors ...
[04:33:32    INFO]  - starting ANNZ::loadReaders() ... 
[04:33:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:40:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:40:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:40:25    INFO]  -----------------------------------------------------------------------------------------------------------
[04:40:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:41:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:41:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:41:53    INFO]  -----------------------------------------------------------------------------------------------------------
[04:41:53    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_72/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:41:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:41:56    INFO]  - will validate that the bias-correction actually improved the result ...
[04:41:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:41:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_72,
[04:42:02    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_72/plots/
[04:42:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_72/plots output/SPEC_advanced9/regres/train/ANNZ_72/plots_biasCor_before
[04:42:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:42:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_72,
Warning in <Fit>: Fit data is empty 
[04:42:19    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_72/plots/
[04:42:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_72/plots output/SPEC_advanced9/regres/train/ANNZ_72/plots_biasCor_after
[04:42:30    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.71294] , after the bias-correction: [0.0462694 , 5.64938] --> will KEEP the correction !

(04:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m73[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:42 INFO) 
[04:42:35    INFO]  -----------------------------------------------------
[04:42:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:42:35    INFO]  -----------------------------------------------------------------------------------------------------------
[04:42:36    INFO]  - starting ANNZ::Init()  ... 
[04:42:37    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_73/saveOpt.txt ...
[04:42:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:42:43    INFO] ----------------------------------------------------------------------------------------------------
[04:42:43    INFO]  - will book (ANNZ_73) method(BDT) with options: :NTrees=520:BoostType=AdaBoost:VarTransform=N,P
[04:42:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:42:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:42:43    INFO]      cuts (train):        ,
[04:42:43    INFO]      cuts (valid):       
[04:42:43    INFO]    - weights:            1
[04:42:43    INFO] ----------------------------------------------------------------------------------------------------
[04:42:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:43:13    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_73/ANNZ_73_weights/saveTrainOpt_ANNZ_73.txt ...
[04:43:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_73 ... 
[04:43:15    INFO]  - Will gen. input-parameter errors ...
[04:43:16    INFO]  - starting ANNZ::loadReaders() ... 
[04:43:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:46:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:46:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:46:16    INFO]  -----------------------------------------------------------------------------------------------------------
[04:46:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:46:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:46:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:46:56    INFO]  -----------------------------------------------------------------------------------------------------------
[04:46:56    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_73/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:46:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:46:57    INFO]  - will try to derive a bias correction ... 
[04:46:57    INFO]  - will validate that training produced an XML file for later ... 
[04:46:57    INFO]  - starting ANNZ::loadReaders() ... 
[04:46:59    INFO]  - will validate that the training was not a complete failure ... 
[04:46:59    INFO]  - training seems to have been successful! will move on ...
[04:46:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:47:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:47:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:47:03    INFO] ----------------------------------------------------------------------------------------------------
[04:47:03    INFO]  - will book (ANNZ_73_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:47:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:47:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:47:03    INFO]    - weights:            1
[04:47:03    INFO] ----------------------------------------------------------------------------------------------------
[04:47:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:47:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_73 ... 
[04:47:10    INFO]  - Will gen. input-parameter errors ...
[04:47:11    INFO]  - starting ANNZ::loadReaders() ... 
[04:47:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:49:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:49:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:49:42    INFO]  -----------------------------------------------------------------------------------------------------------
[04:49:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:50:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:50:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:50:18    INFO]  -----------------------------------------------------------------------------------------------------------
[04:50:18    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_73/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:50:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:50:19    INFO]  - will validate that the bias-correction actually improved the result ...
[04:50:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:50:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_73,
Warning in <Fit>: Fit data is empty 
[04:50:25    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_73/plots/
[04:50:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_73/plots output/SPEC_advanced9/regres/train/ANNZ_73/plots_biasCor_before
[04:50:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:50:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_73,
Warning in <Fit>: Fit data is empty 
[04:50:40    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_73/plots/
[04:50:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_73/plots output/SPEC_advanced9/regres/train/ANNZ_73/plots_biasCor_after
[04:50:51    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43715] , after the bias-correction: [0.0447009 , 5.69905] --> will KEEP the correction !

(04:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m74[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:50 INFO) 
[04:50:55    INFO]  -----------------------------------------------------
[04:50:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:50:55    INFO]  -----------------------------------------------------------------------------------------------------------
[04:50:55    INFO]  - starting ANNZ::Init()  ... 
[04:50:56    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_74/saveOpt.txt ...
[04:51:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:51:02    INFO] ----------------------------------------------------------------------------------------------------
[04:51:02    INFO]  - will book (ANNZ_74) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[04:51:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:51:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:51:02    INFO]      cuts (train):        ,
[04:51:02    INFO]      cuts (valid):       
[04:51:02    INFO]    - weights:            1
[04:51:02    INFO] ----------------------------------------------------------------------------------------------------
[04:51:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:51:51    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_74/ANNZ_74_weights/saveTrainOpt_ANNZ_74.txt ...
[04:51:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_74 ... 
[04:51:55    INFO]  - Will gen. input-parameter errors ...
[04:51:58    INFO]  - starting ANNZ::loadReaders() ... 
[04:52:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:54:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:54:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:54:33    INFO]  -----------------------------------------------------------------------------------------------------------
[04:54:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:55:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:55:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:55:10    INFO]  -----------------------------------------------------------------------------------------------------------
[04:55:10    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_74/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:55:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:55:12    INFO]  - will try to derive a bias correction ... 
[04:55:12    INFO]  - will validate that training produced an XML file for later ... 
[04:55:12    INFO]  - starting ANNZ::loadReaders() ... 
[04:55:17    INFO]  - will validate that the training was not a complete failure ... 
[04:55:17    INFO]  - training seems to have been successful! will move on ...
[04:55:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:55:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:55:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:55:23    INFO] ----------------------------------------------------------------------------------------------------
[04:55:23    INFO]  - will book (ANNZ_74_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:55:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:55:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:55:23    INFO]    - weights:            1
[04:55:23    INFO] ----------------------------------------------------------------------------------------------------
[04:55:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:55:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_74 ... 
[04:55:32    INFO]  - Will gen. input-parameter errors ...
[04:55:34    INFO]  - starting ANNZ::loadReaders() ... 
[04:55:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[04:58:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:58:27    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:58:27    INFO]  -----------------------------------------------------------------------------------------------------------
[04:58:27    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[04:59:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:59:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:59:06    INFO]  -----------------------------------------------------------------------------------------------------------
[04:59:06    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_74/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:59:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:59:08    INFO]  - will validate that the bias-correction actually improved the result ...
[04:59:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:59:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_74,
[04:59:14    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_74/plots/
[04:59:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_74/plots output/SPEC_advanced9/regres/train/ANNZ_74/plots_biasCor_before
[04:59:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:59:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_74,
[04:59:30    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_74/plots/
[04:59:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_74/plots output/SPEC_advanced9/regres/train/ANNZ_74/plots_biasCor_after
[04:59:42    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(04:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m75[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:59 INFO) 
[04:59:46    INFO]  -----------------------------------------------------
[04:59:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:59:46    INFO]  -----------------------------------------------------------------------------------------------------------
[04:59:46    INFO]  - starting ANNZ::Init()  ... 
[04:59:47    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_75/saveOpt.txt ...
[04:59:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:59:53    INFO] ----------------------------------------------------------------------------------------------------
[04:59:53    INFO]  - will book (ANNZ_75) method(BDT) with options: :NTrees=310:BoostType=AdaBoostR2:VarTransform=N,P
[04:59:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:59:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:59:53    INFO]      cuts (train):        ,
[04:59:53    INFO]      cuts (valid):       
[04:59:53    INFO]    - weights:            1
[04:59:53    INFO] ----------------------------------------------------------------------------------------------------
[04:59:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:00:24    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_75/ANNZ_75_weights/saveTrainOpt_ANNZ_75.txt ...
[05:00:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_75 ... 
[05:00:26    INFO]  - Will gen. input-parameter errors ...
[05:00:28    INFO]  - starting ANNZ::loadReaders() ... 
[05:00:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:05:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:05:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:05:08    INFO]  -----------------------------------------------------------------------------------------------------------
[05:05:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:06:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:06:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:06:15    INFO]  -----------------------------------------------------------------------------------------------------------
[05:06:15    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_75/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:06:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:06:16    INFO]  - will try to derive a bias correction ... 
[05:06:16    INFO]  - will validate that training produced an XML file for later ... 
[05:06:16    INFO]  - starting ANNZ::loadReaders() ... 
[05:06:18    INFO]  - will validate that the training was not a complete failure ... 
[05:06:18    INFO]  - training seems to have been successful! will move on ...
[05:06:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:06:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:06:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:06:23    INFO] ----------------------------------------------------------------------------------------------------
[05:06:23    INFO]  - will book (ANNZ_75_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:06:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:06:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:06:23    INFO]    - weights:            1
[05:06:23    INFO] ----------------------------------------------------------------------------------------------------
[05:06:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:06:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_75 ... 
[05:06:30    INFO]  - Will gen. input-parameter errors ...
[05:06:31    INFO]  - starting ANNZ::loadReaders() ... 
[05:06:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:10:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:10:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:10:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:10:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:11:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:11:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:11:52    INFO]  -----------------------------------------------------------------------------------------------------------
[05:11:52    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_75/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:11:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:11:53    INFO]  - will validate that the bias-correction actually improved the result ...
[05:11:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:11:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_75,
[05:11:59    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_75/plots/
[05:12:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_75/plots output/SPEC_advanced9/regres/train/ANNZ_75/plots_biasCor_before
[05:12:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:12:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_75,
[05:12:14    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_75/plots/
[05:12:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_75/plots output/SPEC_advanced9/regres/train/ANNZ_75/plots_biasCor_after
[05:12:26    INFO]  - Got original [KS-test,N_poiss]: [0.069348 , 6.64128] , after the bias-correction: [0.0339458 , 5.45762] --> will KEEP the correction !

(05:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m76[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:12 INFO) 
[05:12:29    INFO]  -----------------------------------------------------
[05:12:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:12:29    INFO]  -----------------------------------------------------------------------------------------------------------
[05:12:30    INFO]  - starting ANNZ::Init()  ... 
[05:12:31    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_76/saveOpt.txt ...
[05:12:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:12:36    INFO] ----------------------------------------------------------------------------------------------------
[05:12:36    INFO]  - will book (ANNZ_76) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N,P
[05:12:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:12:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:12:36    INFO]      cuts (train):        ,
[05:12:36    INFO]      cuts (valid):       
[05:12:36    INFO]    - weights:            1
[05:12:36    INFO] ----------------------------------------------------------------------------------------------------
[05:12:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:13:00    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_76/ANNZ_76_weights/saveTrainOpt_ANNZ_76.txt ...
[05:13:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_76 ... 
[05:13:02    INFO]  - Will gen. input-parameter errors ...
[05:13:03    INFO]  - starting ANNZ::loadReaders() ... 
[05:13:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:15:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:15:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:15:14    INFO]  -----------------------------------------------------------------------------------------------------------
[05:15:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:15:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:15:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:15:49    INFO]  -----------------------------------------------------------------------------------------------------------
[05:15:49    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_76/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:15:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:15:50    INFO]  - will try to derive a bias correction ... 
[05:15:50    INFO]  - will validate that training produced an XML file for later ... 
[05:15:50    INFO]  - starting ANNZ::loadReaders() ... 
[05:15:51    INFO]  - will validate that the training was not a complete failure ... 
[05:15:51    INFO]  - training seems to have been successful! will move on ...
[05:15:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:15:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:15:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:15:55    INFO] ----------------------------------------------------------------------------------------------------
[05:15:55    INFO]  - will book (ANNZ_76_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:15:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:15:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:15:55    INFO]    - weights:            1
[05:15:55    INFO] ----------------------------------------------------------------------------------------------------
[05:15:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:16:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_76 ... 
[05:16:02    INFO]  - Will gen. input-parameter errors ...
[05:16:03    INFO]  - starting ANNZ::loadReaders() ... 
[05:16:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:18:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:18:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:18:26    INFO]  -----------------------------------------------------------------------------------------------------------
[05:18:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:19:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:19:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:19:03    INFO]  -----------------------------------------------------------------------------------------------------------
[05:19:03    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_76/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:19:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:19:04    INFO]  - will validate that the bias-correction actually improved the result ...
[05:19:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:19:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_76,
Warning in <Fit>: Fit data is empty 
[05:19:09    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_76/plots/
[05:19:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_76/plots output/SPEC_advanced9/regres/train/ANNZ_76/plots_biasCor_before
[05:19:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:19:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_76,
Warning in <Fit>: Fit data is empty 
[05:19:24    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_76/plots/
[05:19:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_76/plots output/SPEC_advanced9/regres/train/ANNZ_76/plots_biasCor_after
[05:19:35    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40441] , after the bias-correction: [0.0434685 , 5.7773] --> will KEEP the correction !

(05:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m77[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:19 INFO) 
[05:19:38    INFO]  -----------------------------------------------------
[05:19:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:19:38    INFO]  -----------------------------------------------------------------------------------------------------------
[05:19:39    INFO]  - starting ANNZ::Init()  ... 
[05:19:40    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_77/saveOpt.txt ...
[05:19:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:19:46    INFO] ----------------------------------------------------------------------------------------------------
[05:19:46    INFO]  - will book (ANNZ_77) method(BDT) with options: :NTrees=520:BoostType=AdaBoost:VarTransform=N,P
[05:19:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:19:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:19:46    INFO]      cuts (train):        ,
[05:19:46    INFO]      cuts (valid):       
[05:19:46    INFO]    - weights:            1
[05:19:46    INFO] ----------------------------------------------------------------------------------------------------
[05:19:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:20:14    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_77/ANNZ_77_weights/saveTrainOpt_ANNZ_77.txt ...
[05:20:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_77 ... 
[05:20:16    INFO]  - Will gen. input-parameter errors ...
[05:20:17    INFO]  - starting ANNZ::loadReaders() ... 
[05:20:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:23:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:23:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:23:12    INFO]  -----------------------------------------------------------------------------------------------------------
[05:23:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:24:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:24:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:24:04    INFO]  -----------------------------------------------------------------------------------------------------------
[05:24:04    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_77/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:24:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:24:05    INFO]  - will try to derive a bias correction ... 
[05:24:05    INFO]  - will validate that training produced an XML file for later ... 
[05:24:05    INFO]  - starting ANNZ::loadReaders() ... 
[05:24:06    INFO]  - will validate that the training was not a complete failure ... 
[05:24:06    INFO]  - training seems to have been successful! will move on ...
[05:24:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:24:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:24:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:24:11    INFO] ----------------------------------------------------------------------------------------------------
[05:24:11    INFO]  - will book (ANNZ_77_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:24:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:24:11    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:24:11    INFO]    - weights:            1
[05:24:11    INFO] ----------------------------------------------------------------------------------------------------
[05:24:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:24:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_77 ... 
[05:24:18    INFO]  - Will gen. input-parameter errors ...
[05:24:19    INFO]  - starting ANNZ::loadReaders() ... 
[05:24:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:27:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:27:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:27:19    INFO]  -----------------------------------------------------------------------------------------------------------
[05:27:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:27:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:27:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:27:58    INFO]  -----------------------------------------------------------------------------------------------------------
[05:27:58    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_77/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:27:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:27:59    INFO]  - will validate that the bias-correction actually improved the result ...
[05:27:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:27:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_77,
Warning in <Fit>: Fit data is empty 
[05:28:04    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_77/plots/
[05:28:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_77/plots output/SPEC_advanced9/regres/train/ANNZ_77/plots_biasCor_before
[05:28:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:28:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_77,
Warning in <Fit>: Fit data is empty 
[05:28:21    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_77/plots/
[05:28:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_77/plots output/SPEC_advanced9/regres/train/ANNZ_77/plots_biasCor_after
[05:28:34    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43715] , after the bias-correction: [0.0447009 , 5.69905] --> will KEEP the correction !

(05:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m78[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:28 INFO) 
[05:28:37    INFO]  -----------------------------------------------------
[05:28:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:28:37    INFO]  -----------------------------------------------------------------------------------------------------------
[05:28:38    INFO]  - starting ANNZ::Init()  ... 
[05:28:39    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_78/saveOpt.txt ...
[05:28:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:28:44    INFO] ----------------------------------------------------------------------------------------------------
[05:28:44    INFO]  - will book (ANNZ_78) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N,P
[05:28:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:28:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:28:44    INFO]      cuts (train):        ,
[05:28:44    INFO]      cuts (valid):       
[05:28:44    INFO]    - weights:            1
[05:28:44    INFO] ----------------------------------------------------------------------------------------------------
[05:28:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:29:24    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_78/ANNZ_78_weights/saveTrainOpt_ANNZ_78.txt ...
[05:29:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_78 ... 
[05:29:27    INFO]  - Will gen. input-parameter errors ...
[05:29:29    INFO]  - starting ANNZ::loadReaders() ... 
[05:29:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:33:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:33:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:33:03    INFO]  -----------------------------------------------------------------------------------------------------------
[05:33:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:33:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:33:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:33:49    INFO]  -----------------------------------------------------------------------------------------------------------
[05:33:49    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_78/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:33:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:33:51    INFO]  - will try to derive a bias correction ... 
[05:33:51    INFO]  - will validate that training produced an XML file for later ... 
[05:33:51    INFO]  - starting ANNZ::loadReaders() ... 
[05:33:55    INFO]  - will validate that the training was not a complete failure ... 
[05:33:55    INFO]  - training seems to have been successful! will move on ...
[05:33:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:33:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:34:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:34:00    INFO] ----------------------------------------------------------------------------------------------------
[05:34:00    INFO]  - will book (ANNZ_78_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:34:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:34:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:34:00    INFO]    - weights:            1
[05:34:00    INFO] ----------------------------------------------------------------------------------------------------
[05:34:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:34:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_78 ... 
[05:34:09    INFO]  - Will gen. input-parameter errors ...
[05:34:10    INFO]  - starting ANNZ::loadReaders() ... 
[05:34:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:37:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:37:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:37:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:37:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:38:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:38:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:38:41    INFO]  -----------------------------------------------------------------------------------------------------------
[05:38:41    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_78/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:38:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:38:42    INFO]  - will validate that the bias-correction actually improved the result ...
[05:38:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:38:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_78,
[05:38:48    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_78/plots/
[05:39:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_78/plots output/SPEC_advanced9/regres/train/ANNZ_78/plots_biasCor_before
[05:39:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:39:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_78,
[05:39:05    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_78/plots/
[05:39:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_78/plots output/SPEC_advanced9/regres/train/ANNZ_78/plots_biasCor_after
[05:39:16    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.92138] , after the bias-correction: [0.0429084 , 5.51043] --> will KEEP the correction !

(05:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m79[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:39 INFO) 
[05:39:20    INFO]  -----------------------------------------------------
[05:39:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:39:20    INFO]  -----------------------------------------------------------------------------------------------------------
[05:39:20    INFO]  - starting ANNZ::Init()  ... 
[05:39:22    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/train/ANNZ_79/saveOpt.txt ...
[05:39:27    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:39:27    INFO] ----------------------------------------------------------------------------------------------------
[05:39:27    INFO]  - will book (ANNZ_79) method(BDT) with options: :NTrees=510:BoostType=AdaBoostR2:VarTransform=N,P
[05:39:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:39:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:39:27    INFO]      cuts (train):        ,
[05:39:27    INFO]      cuts (valid):       
[05:39:27    INFO]    - weights:            1
[05:39:27    INFO] ----------------------------------------------------------------------------------------------------
[05:39:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:40:18    INFO]  - Saving MLM information in ./output/SPEC_advanced9/regres/train/ANNZ_79/ANNZ_79_weights/saveTrainOpt_ANNZ_79.txt ...
[05:40:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_79 ... 
[05:40:22    INFO]  - Will gen. input-parameter errors ...
[05:40:24    INFO]  - starting ANNZ::loadReaders() ... 
[05:40:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[05:51:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:51:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:51:29    INFO]  -----------------------------------------------------------------------------------------------------------
[05:51:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[05:54:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:54:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:54:08    INFO]  -----------------------------------------------------------------------------------------------------------
[05:54:08    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_79/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:54:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:54:09    INFO]  - will try to derive a bias correction ... 
[05:54:09    INFO]  - will validate that training produced an XML file for later ... 
[05:54:09    INFO]  - starting ANNZ::loadReaders() ... 
[05:54:13    INFO]  - will validate that the training was not a complete failure ... 
[05:54:13    INFO]  - training seems to have been successful! will move on ...
[05:54:13    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:54:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:54:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:54:19    INFO] ----------------------------------------------------------------------------------------------------
[05:54:19    INFO]  - will book (ANNZ_79_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:54:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:54:19    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:54:19    INFO]    - weights:            1
[05:54:19    INFO] ----------------------------------------------------------------------------------------------------
[05:54:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:54:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_79 ... 
[05:54:27    INFO]  - Will gen. input-parameter errors ...
[05:54:29    INFO]  - starting ANNZ::loadReaders() ... 
[05:54:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_train*.root
[06:05:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:05:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[06:05:36    INFO]  -----------------------------------------------------------------------------------------------------------
[06:05:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced9/rootIn/ANNZ_tree_valid*.root
[06:07:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:07:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[06:07:58    INFO]  -----------------------------------------------------------------------------------------------------------
[06:07:58    INFO]  - Saving file ./output/SPEC_advanced9/regres/train/ANNZ_79/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:08:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:08:00    INFO]  - will validate that the bias-correction actually improved the result ...
[06:08:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:08:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_79,
[06:08:05    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_79/plots/
[06:08:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_79/plots output/SPEC_advanced9/regres/train/ANNZ_79/plots_biasCor_before
[06:08:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:08:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_79,
[06:08:21    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/train/ANNZ_79/plots/
[06:08:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced9/regres/train/ANNZ_79/plots output/SPEC_advanced9/regres/train/ANNZ_79/plots_biasCor_after
[06:08:33    INFO]  - Got original [KS-test,N_poiss]: [0.0696841 , 6.57644] , after the bias-correction: [0.0318172 , 5.36647] --> will KEEP the correction !

(06:08 INFO) [40;37;1m - 11/03/19 06:08:36 - finished running ANNZ ![0m
(15:36 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:36 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:36 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:36 INFO) [40;37;1m - 12/03/19 15:36:51 - starting ANNZ[0m
(15:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:36 INFO) 
[15:36:52    INFO]  -----------------------------------------------------
[15:36:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:36:52    INFO]  -----------------------------------------------------------------------------------------------------------
[15:36:54    INFO]  - starting ANNZ::Init()  ... 
[15:36:54    INFO]  - Will generate 1 PDFs ... 
[15:39:01    INFO] --------------------------------------------------------
[15:39:01    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,
[15:39:01    INFO]  - All REJECTED MLMs: 
[15:39:01    INFO] ----------------------------------------------------------------------------------------------------------------
[15:39:21    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/optim/saveOpt.txt ...
[15:40:13   ERROR]  - ... ------------------------------------------------------------ 
[15:40:13   ERROR]  - MESSAGE -  - Failed system-call (echo '[doSingleReg]=FALSE' >> ./output/SPEC_advanced9/regres/optim/saveOpt.txt) - sysReturn = -1... 
[15:40:13   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[15:40:13   ERROR]  - ..... ABORTING !!! 
[15:40:13   ERROR]  ------------------------------------------------------------ ... - 
(15:40 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(15:40 CRITICAL) [41;37;1mWill terminate !!!![0m
(15:53 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:53 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:53 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:53 INFO) [40;37;1m - 12/03/19 15:53:59 - starting ANNZ[0m
(15:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:53 INFO) 
[15:53:59    INFO]  -----------------------------------------------------
[15:53:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:53:59    INFO]  -----------------------------------------------------------------------------------------------------------
[15:54:00    INFO]  - starting ANNZ::Init()  ... 
[15:54:00    INFO]  - Will generate 1 PDFs ... 
[15:56:03    INFO] --------------------------------------------------------
[15:56:03    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,
[15:56:03    INFO]  - All REJECTED MLMs: 
[15:56:03    INFO] ----------------------------------------------------------------------------------------------------------------
[15:56:09    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/optim/saveOpt.txt ...
[15:56:56   ERROR]  - ... ------------------------------------------------------------ 
[15:56:56   ERROR]  - MESSAGE -  - Failed system-call (echo '[useBinClsPrior]=TRUE' >> ./output/SPEC_advanced9/regres/optim/saveOpt.txt) - sysReturn = -1... 
[15:56:56   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[15:56:56   ERROR]  - ..... ABORTING !!! 
[15:56:56   ERROR]  ------------------------------------------------------------ ... - 
(15:56 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(15:56 CRITICAL) [41;37;1mWill terminate !!!![0m
(16:27 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:27 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:27 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:27 INFO) [40;37;1m - 12/03/19 16:27:16 - starting ANNZ[0m
(16:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(16:27 INFO) 
[16:27:16    INFO]  -----------------------------------------------------
[16:27:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:27:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:27:17    INFO]  - starting ANNZ::Init()  ... 
[16:27:17    INFO]  - Will generate 1 PDFs ... 
[16:28:02    INFO] --------------------------------------------------------
[16:28:02    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,
[16:28:02    INFO]  - All REJECTED MLMs: 
[16:28:02    INFO] ----------------------------------------------------------------------------------------------------------------
[16:28:10    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/optim/saveOpt.txt ...
[16:31:35    INFO]  - starting ANNZ::Optim() ... 
[16:31:35    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[16:31:36    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[16:34:03    INFO]  - Found 80 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[16:34:03    INFO]  - Now in merging loop 1/2
[16:34:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:34:12    INFO]  - Now in merging loop 2/2
[16:34:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:34:23    INFO]  - Now in final merging of all sub-steps ...
[16:34:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:34:26    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced9/regres/train/postTrain/ANNZ_tree_train_00001.root) ... 
[16:36:52    INFO]  - Found 80 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[16:36:52    INFO]  - Now in merging loop 1/2
[16:36:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:37:00    INFO]  - Now in merging loop 2/2
[16:37:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:37:09    INFO]  - Now in final merging of all sub-steps ...
[16:37:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:37:10    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced9/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[16:39:30    INFO]  - Found 80 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[16:39:30    INFO]  - Now in merging loop 1/2
[16:39:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:39:41    INFO]  - Now in merging loop 2/2
[16:39:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:39:53    INFO]  - Now in final merging of all sub-steps ...
[16:39:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:39:54    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/SPEC_advanced9/regres/train/postTrain/ANNZ_tree_errKNN_00001.root) ... 
[16:40:03    INFO]  - Saving file ./output/SPEC_advanced9/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[16:40:10    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[16:40:10    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced9/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[16:40:10    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[16:40:12    INFO]  - ending makeTreeRegClsAllMLM() ... 
[16:40:12    INFO]  - starting ANNZ::optimReg() ... 
[16:40:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:40:25    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced9/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[16:40:28    INFO]  - starting ANNZ::fillColosureV() ... 
[16:40:30    INFO]  ---------------------------------------------------------------------------------- 
[16:40:30    INFO]  - Got the following average properties: 
[16:40:30    INFO]  --------------------------------------- 
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00883436 	 0.0581117 	 0.087468
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00875677 	 0.057982 	 0.0881829
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00430712 	 0.0651086 	 0.0902228
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.0106863 	 0.0471708 	 0.0881969
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00776086 	 0.0439199 	 0.0493702
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.00366581 	 0.0653548 	 0.089428
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0096025 	 0.0476502 	 0.0909677
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.0130535 	 0.0447461 	 0.0853912
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00873627 	 0.0581853 	 0.087812
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.0125696 	 0.0444983 	 0.088824
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00438971 	 0.0650386 	 0.0905951
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00854225 	 0.0581079 	 0.0875427
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.0126792 	 0.0443384 	 0.0860312
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.00876708 	 0.0582005 	 0.087723
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.0038292 	 0.0655491 	 0.0892361
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.0125609 	 0.0443955 	 0.0875288
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00350689 	 0.0655064 	 0.0888541
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0105654 	 0.0472836 	 0.0888095
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.0103032 	 0.0471605 	 0.0873625
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.0124288 	 0.0447403 	 0.0853011
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.0127751 	 0.0446416 	 0.0861694
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00850855 	 0.0582676 	 0.0876351
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00986231 	 0.0471764 	 0.0913655
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.0125696 	 0.0444983 	 0.088824
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00430712 	 0.0651086 	 0.0902228
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.00366581 	 0.0653548 	 0.089428
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.00430957 	 0.0650104 	 0.0906297
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0084914 	 0.0744274 	 0.0894628
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.00442241 	 0.0650227 	 0.0907869
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.00389577 	 0.06543 	 0.0894963
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.0103032 	 0.0471605 	 0.0873625
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00764367 	 0.0441359 	 0.051065
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.00854225 	 0.0581079 	 0.0875427
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.00353273 	 0.0653784 	 0.088871
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.0128977 	 0.0441996 	 0.0871461
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.0100497 	 0.0480481 	 0.0866745
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.0127033 	 0.044221 	 0.0857834
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.00430712 	 0.0651086 	 0.0902228
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.00706588 	 0.0445657 	 0.0447925
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.00430957 	 0.0650104 	 0.0906297
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_40 	 0.00442275 	 0.065021 	 0.0907869
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_41 	 0.00790518 	 0.0427505 	 0.0504424
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_42 	 0.0106688 	 0.0475643 	 0.089364
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_43 	 0.0125609 	 0.0443955 	 0.0875288
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_44 	 0.0103478 	 0.0478206 	 0.0870801
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_45 	 0.00774833 	 0.043124 	 0.0502775
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_46 	 0.0100785 	 0.0486434 	 0.0855856
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_47 	 0.0038292 	 0.0655491 	 0.0892361
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_48 	 0.0100497 	 0.0480481 	 0.0866745
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_49 	 0.0103768 	 0.0472582 	 0.088862
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_50 	 0.00700624 	 0.0425462 	 0.0510244
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_51 	 0.00803159 	 0.0442975 	 0.0510556
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_52 	 0.00700624 	 0.0425462 	 0.0510244
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_53 	 0.00879144 	 0.0580221 	 0.0877252
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_54 	 0.00803555 	 0.0436811 	 0.0518144
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_55 	 0.00863381 	 0.0581759 	 0.087441
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_56 	 0.00842326 	 0.0581132 	 0.0876908
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_57 	 0.00375918 	 0.0653475 	 0.0892286
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_58 	 0.010629 	 0.0474235 	 0.088243
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_59 	 0.00695148 	 0.044047 	 0.0463399
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_60 	 0.0106154 	 0.0469928 	 0.0902946
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_61 	 0.0120226 	 0.0444092 	 0.0875337
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_62 	 0.00438971 	 0.0650386 	 0.0905951
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_63 	 0.0083254 	 0.0444152 	 0.0503053
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_64 	 0.0038292 	 0.0655491 	 0.0892361
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_65 	 0.0106154 	 0.0469928 	 0.0902946
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_66 	 0.0036665 	 0.0657861 	 0.0882594
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_67 	 0.0084767 	 0.0581608 	 0.0874062
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_68 	 0.0106154 	 0.0469928 	 0.0902946
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_69 	 0.0106688 	 0.0475643 	 0.089364
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_70 	 0.007316 	 0.0437576 	 0.0472422
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_71 	 0.00775096 	 0.0440948 	 0.0490646
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_72 	 0.0126954 	 0.0446549 	 0.0851949
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_73 	 0.00375894 	 0.065348 	 0.0892286
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_74 	 0.0125696 	 0.0444983 	 0.088824
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_75 	 0.00700624 	 0.0425462 	 0.0510244
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_76 	 0.0040483 	 0.0653926 	 0.0896382
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_77 	 0.00375894 	 0.065348 	 0.0892286
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_78 	 0.0100497 	 0.0480481 	 0.0866745
[16:40:30    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_79 	 0.00746725 	 0.0431717 	 0.0486832
[16:40:30    INFO]  ------------------------------------------------------------------------------------------------- 
[16:40:30    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[16:40:30    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[16:40:30    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[16:40:30    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[16:40:30    INFO]  - Now trying to find best methods with a limit of 15% of the [sig68] dist, and 25% of the other(s) - iteration 2 ...
[16:40:30    INFO]  - Now trying to find best methods with a limit of 17.5% of the [sig68] dist, and 27.5% of the other(s) - iteration 3 ...
[16:40:30    INFO]  - Now trying to find best methods with a limit of 20% of the [sig68] dist, and 30% of the other(s) - iteration 4 ...
[16:40:30    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 20% of the [sig68] dist.
[16:40:30    INFO]  - The "best" MLM is: ANNZ_59
[16:40:30    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[16:40:30    INFO]  - initial PDF weights: ANNZ_50:0.047 ANNZ_52:0.045 ANNZ_75:0.044 ANNZ_59:0.043 ANNZ_38:0.042 ANNZ_70:0.041 ANNZ_79:0.040 ANNZ_45:0.039 ANNZ_31:0.038 ANNZ_41:0.037 ANNZ_4:0.035 ANNZ_71:0.034 ANNZ_54:0.033 ANNZ_51:0.032 ANNZ_63:0.031 ANNZ_6:0.030 ANNZ_22:0.029 ANNZ_78:0.028 ANNZ_48:0.027 ANNZ_35:0.025 ANNZ_18:0.024 ANNZ_30:0.023 ANNZ_46:0.022 ANNZ_49:0.021 ANNZ_44:0.020 ANNZ_56:0.019 ANNZ_67:0.018 ANNZ_32:0.017 ANNZ_11:0.016 ANNZ_21:0.014 ANNZ_17:0.013 ANNZ_65:0.012 ANNZ_60:0.011 ANNZ_68:0.010 ANNZ_55:0.009 ANNZ_58:0.008 ANNZ_1:0.007 ANNZ_8:0.006 ANNZ_42:0.004 ANNZ_53:0.003 ANNZ_13:0.002 ANNZ_0:0.001 
[16:40:30    INFO]  - will loop on the input trees ...
[16:40:32    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.51031e-01
[16:40:32    INFO]  - nTry: 1 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.52605e-01
[16:40:32    INFO]  - nTry: 2 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.52956e-01
[16:40:33    INFO]  - nTry: 3 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.53266e-01
[16:40:33    INFO]  - nTry: 4 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.53914e-01
[16:40:33    INFO]  - nTry: 5 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.54070e-01
[16:40:33    INFO]  - nTry: 6 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.54242e-01
[16:40:34    INFO]  - nTry: 7 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.54441e-01
[16:40:34    INFO]  - nTry: 8 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.54644e-01
[16:40:34    INFO]  - nTry: 9 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.54583e-01
[16:40:34    INFO]  - nTry: 10 - min-param best/prev/now: 2.51031e-01 / 2.51031e-01 / 2.54780e-01
[16:40:37    INFO]  - nTry: 20 - min-param best/prev/now: 2.51031e-01 / 2.54947e-01 / 2.54947e-01
[16:40:39    INFO]  - nTry: 30 - min-param best/prev/now: 2.51031e-01 / 2.54899e-01 / 2.55063e-01
[16:40:41    INFO]  - nTry: 40 - min-param best/prev/now: 2.51031e-01 / 2.54899e-01 / 2.55128e-01
[16:40:44    INFO]  - nTry: 50 - min-param best/prev/now: 2.51031e-01 / 2.55141e-01 / 2.55113e-01
[16:40:46    INFO]  - nTry: 60 - min-param best/prev/now: 2.51031e-01 / 2.55027e-01 / 2.55064e-01
[16:40:48    INFO]  - nTry: 70 - min-param best/prev/now: 2.51031e-01 / 2.55131e-01 / 2.55256e-01
[16:40:51    INFO]  - nTry: 80 - min-param best/prev/now: 2.51031e-01 / 2.55256e-01 / 2.55409e-01
[16:40:53    INFO]  - nTry: 90 - min-param best/prev/now: 2.51031e-01 / 2.55489e-01 / 2.55552e-01
[16:40:56    INFO]  - nTry: 100 - min-param best/prev/now: 2.51031e-01 / 2.55658e-01 / 2.55692e-01
[16:41:00    INFO]  - nTry: 120 - min-param best/prev/now: 2.51031e-01 / 2.55707e-01 / 2.55863e-01
[16:41:05    INFO]  - nTry: 140 - min-param best/prev/now: 2.51031e-01 / 2.55828e-01 / 2.55836e-01
[16:41:08    INFO]  - nTry: 150 - min-param best/prev/now: 2.51031e-01 / 2.55857e-01 / 2.55851e-01
[16:41:10    INFO]  - nTry: 160 - min-param best/prev/now: 2.51031e-01 / 2.55901e-01 / 2.55902e-01
[16:41:15    INFO]  - nTry: 180 - min-param best/prev/now: 2.51031e-01 / 2.56032e-01 / 2.56042e-01
[16:41:19    INFO]  - nTry: 200 - min-param best/prev/now: 2.51031e-01 / 2.56133e-01 / 2.56170e-01
[16:41:24    INFO]  - nTry: 220 - min-param best/prev/now: 2.51031e-01 / 2.56219e-01 / 2.56225e-01
[16:41:29    INFO]  - nTry: 240 - min-param best/prev/now: 2.51031e-01 / 2.56216e-01 / 2.56219e-01
[16:41:31    INFO]  - nTry: 250 - min-param best/prev/now: 2.51031e-01 / 2.56202e-01 / 2.56206e-01
[16:41:31    INFO]  - finished PDF optimization! - final minimization parameter: 2.51031e-01 , PDF weights: ANNZ_50:0.047 ANNZ_52:0.045 ANNZ_75:0.044 ANNZ_59:0.043 ANNZ_38:0.042 ANNZ_70:0.041 ANNZ_79:0.040 ANNZ_45:0.039 ANNZ_31:0.038 ANNZ_41:0.037 ANNZ_4:0.035 ANNZ_71:0.034 ANNZ_54:0.033 ANNZ_51:0.032 ANNZ_63:0.031 ANNZ_6:0.030 ANNZ_22:0.029 ANNZ_78:0.028 ANNZ_48:0.027 ANNZ_35:0.025 ANNZ_18:0.024 ANNZ_30:0.023 ANNZ_46:0.022 ANNZ_49:0.021 ANNZ_44:0.020 ANNZ_56:0.019 ANNZ_67:0.018 ANNZ_32:0.017 ANNZ_11:0.016 ANNZ_21:0.014 ANNZ_17:0.013 ANNZ_65:0.012 ANNZ_60:0.011 ANNZ_68:0.010 ANNZ_55:0.009 ANNZ_58:0.008 ANNZ_1:0.007 ANNZ_8:0.006 ANNZ_42:0.004 ANNZ_53:0.003 ANNZ_13:0.002 ANNZ_0:0.001 
[16:41:31    INFO]  - will derive the bias correction for the pdf ... 
[16:41:33    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.001107, ANNZ_1:0.006645, ANNZ_2:0.000000, ANNZ_3:0.000000, ANNZ_4:0.035437, ANNZ_5:0.000000, ANNZ_6:0.029900, ANNZ_7:0.000000, ANNZ_8:0.005537, ANNZ_9:0.000000, ANNZ_10:0.000000, ANNZ_11:0.015504, ANNZ_12:0.000000, ANNZ_13:0.002215, ANNZ_14:0.000000, ANNZ_15:0.000000, ANNZ_16:0.000000, ANNZ_17:0.013289, ANNZ_18:0.024363, ANNZ_19:0.000000, ANNZ_20:0.000000, ANNZ_21:0.014396, ANNZ_22:0.028793, ANNZ_23:0.000000, ANNZ_24:0.000000, ANNZ_25:0.000000, ANNZ_26:0.000000, ANNZ_27:0.000000, ANNZ_28:0.000000, ANNZ_29:0.000000, ANNZ_30:0.023256, ANNZ_31:0.037652, ANNZ_32:0.016611, ANNZ_33:0.000000, ANNZ_34:0.000000, ANNZ_35:0.025471, ANNZ_36:0.000000, ANNZ_37:0.000000, ANNZ_38:0.042082, ANNZ_39:0.000000, ANNZ_40:0.000000, ANNZ_41:0.036545, ANNZ_42:0.004430, ANNZ_43:0.000000, ANNZ_44:0.019934, ANNZ_45:0.038760, ANNZ_46:0.022148, ANNZ_47:0.000000, ANNZ_48:0.026578, ANNZ_49:0.021041, ANNZ_50:0.046512, ANNZ_51:0.032115, ANNZ_52:0.045404, ANNZ_53:0.003322, ANNZ_54:0.033223, ANNZ_55:0.008859, ANNZ_56:0.018826, ANNZ_57:0.000000, ANNZ_58:0.007752, ANNZ_59:0.043189, ANNZ_60:0.011074, ANNZ_61:0.000000, ANNZ_62:0.000000, ANNZ_63:0.031008, ANNZ_64:0.000000, ANNZ_65:0.012182, ANNZ_66:0.000000, ANNZ_67:0.017719, ANNZ_68:0.009967, ANNZ_69:0.000000, ANNZ_70:0.040975, ANNZ_71:0.034330, ANNZ_72:0.000000, ANNZ_73:0.000000, ANNZ_74:0.000000, ANNZ_75:0.044297, ANNZ_76:0.000000, ANNZ_77:0.000000, ANNZ_78:0.027685, ANNZ_79:0.039867, 
[16:41:33    INFO]  - Saving optimization results in ./output/SPEC_advanced9/regres/optim/saveOptimOpt.txt ...
[16:41:48    INFO]  - Saving bias-correction results in ./output/SPEC_advanced9/regres/optim/saveOptimObj.root ...
[16:42:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:42:08    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced9/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[16:42:24    INFO]  - starting ANNZ::doEvalReg() ... 
[16:42:25    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,
[16:42:25    INFO]  - Reading bias-correction results from ./output/SPEC_advanced9/regres/optim/saveOptimObj.root ...
[16:42:25    INFO]  - Getting optimization results from ./output/SPEC_advanced9/regres/optim/saveOptimOpt.txt ...
[16:42:25    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[16:42:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:42:26    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:26    INFO]  - starting storeTreeToAscii() ... 
[16:42:26    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[16:42:26    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced9/regres/optim/eval/ANNZ_randomReg_0000.csv
[16:42:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:27    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[16:42:27    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:42:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[16:42:27    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[16:42:44    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/optim/eval/plots/

(16:42 INFO) [40;37;1m - 12/03/19 16:42:52 - finished running ANNZ ![0m
(16:43 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:43 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:43 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:43 INFO) [40;37;1m - 12/03/19 16:43:39 - starting ANNZ[0m
(16:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m80[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced9[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data10c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(16:43 INFO) 
[16:43:40    INFO]  -----------------------------------------------------
[16:43:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:43:40    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:41    INFO]  - starting ANNZ::Init()  ... 
[16:43:41    INFO]  - Will generate 1 PDFs ... 
[16:44:24    INFO] --------------------------------------------------------
[16:44:24    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,
[16:44:24    INFO]  - All REJECTED MLMs: 
[16:44:24    INFO] ----------------------------------------------------------------------------------------------------------------
[16:44:32    INFO]  - Saving run information in ./output/SPEC_advanced9/regres/eval_nFile0/saveOpt.txt ...
[16:48:02    INFO]  - starting inputToFullTree(ANNz_data10c.csv) ... 
[16:48:03    INFO]  - Found 2232 lines in file PAUS/ANNz_data10c.csv -> total so far = 2232 ... 
[16:48:03    INFO]  - Now reading-in PAUS/ANNz_data10c.csv ... 
[16:48:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:48:03    INFO]  -- ANNZ_tree_eval .................................. 2232  nLine
[16:48:03    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[16:48:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:48:04    INFO]  - starting ANNZ::Eval() ... 
[16:48:04    INFO]  - starting ANNZ::doEvalReg() ... 
[16:48:04    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,
[16:48:04    INFO]  - Reading bias-correction results from ./output/SPEC_advanced9/regres/optim/saveOptimObj.root ...
[16:48:04    INFO]  - Getting optimization results from ./output/SPEC_advanced9/regres/optim/saveOptimOpt.txt ...
[16:48:04    INFO]  - creating MLM trees from input ...
[16:48:04    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,ANNZ_1,ANNZ_4,ANNZ_6,ANNZ_8,ANNZ_11,ANNZ_13,ANNZ_17,ANNZ_18,ANNZ_21,ANNZ_22,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_35,ANNZ_38,ANNZ_41,ANNZ_42,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_63,ANNZ_65,ANNZ_67,ANNZ_68,ANNZ_70,ANNZ_71,ANNZ_75,ANNZ_78,ANNZ_79,
[16:48:04    INFO]  - starting ANNZ::loadReaders() ... 
[17:24:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:24:42    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[17:24:42    INFO]  -----------------------------------------------------------------------------------------------------------
[17:24:42    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[17:24:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:24:44    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 2232  nObj
[17:24:44    INFO]  -----------------------------------------------------------------------------------------------------------
[17:24:44    INFO]  - starting storeTreeToAscii() ... 
[17:24:44    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[17:24:44    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced9/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[17:24:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:24:44    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[17:24:44    INFO]  -----------------------------------------------------------------------------------------------------------
[17:24:48    INFO]  - detected the target,zspec in the evaluated sample - Will create performance plots ...
[17:24:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:24:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[17:24:48    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[17:24:59    INFO]  - Writing to plotting directory output/SPEC_advanced9/regres/eval_nFile0/plots/

(17:25 INFO) [40;37;1m - 12/03/19 17:25:05 - finished running ANNZ ![0m
