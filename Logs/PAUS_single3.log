(21:39 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:39 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:39 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:39 INFO) [34m - Resetting directory([0m[33m/home/andrew/ProjectInstalls/ANNZ/scripts/lib[0m[34m,[0m[31mFalse[0m[34m)[0m
mkdir: created directory '/home/andrew/ProjectInstalls/ANNZ/scripts/lib'
(21:39 INFO) [34m - Moving to [0m[31m/home/andrew/ProjectInstalls/ANNZ/scripts/lib[0m[34m and compiling ANNZ... [0m
make: /home/andrew/ProjectInstalls/ANNZ/scripts/Makefile: No such file or directory
make: *** No rule to make target '/home/andrew/ProjectInstalls/ANNZ/scripts/Makefile'.  Stop.
(21:39 CRITICAL) [41;37;1mcompilation failed[0m
(21:39 CRITICAL) [41;37;1mWill terminate !!!![0m
(21:42 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:42 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:42 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:42 INFO) [40;37;1m - 22/01/19 21:42:12 - starting ANNZ[0m
(21:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:42 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data5aa.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_single3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data5ab.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:band0flux;F:band1flux;F:band2flux;F:band3flux;F:band4flux;F:band5flux;F:band6flux;F:band7flux;F:band8flux;F:band9flux;F:band10flux;F:band11flux;F:band12flux;F:band13flux;F:band14flux;F:band15flux;F:band16flux;F:band17flux;F:band18flux;F:band19flux;F:band20flux;F:band21flux;F:band22flux;F:band23flux;F:band24flux;F:band25flux;F:band26flux;F:band27flux;F:band28flux;F:band29flux;F:band30flux;F:band31flux;F:band32flux;F:band33flux;F:band34flux;F:band35flux;F:band36flux;F:band37flux;F:band38flux;F:band39flux;F:band0fluxerror;F:band1fluxerror;F:band2fluxerror;F:band3fluxerror;F:band4fluxerror;F:band5fluxerror;F:band6fluxerror;F:band7fluxerror;F:band8fluxerror;F:band9fluxerror;F:band10fluxerror;F:band11fluxerror;F:band12fluxerror;F:band13fluxerror;F:band14fluxerror;F:band15fluxerror;F:band16fluxerror;F:band17fluxerror;F:band18fluxerror;F:band19fluxerror;F:band20fluxerror;F:band21fluxerror;F:band22fluxerror;F:band23fluxerror;F:band24fluxerror;F:band25fluxerror;F:band26fluxerror;F:band27fluxerror;F:band28fluxerror;F:band29fluxerror;F:band30fluxerror;F:band31fluxerror;F:band32fluxerror;F:band33fluxerror;F:band34fluxerror;F:band35fluxerror;F:band36fluxerror;F:band37fluxerror;F:band38fluxerror;F:band39fluxerror;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:Z;F:Zerror[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:42 INFO) 
[21:42:12    INFO]  -----------------------------------------------------
[21:42:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:42:12    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:15    INFO]  - starting inputToSplitTree() ... 
[21:42:15    INFO]  - Found 12998 lines in file PAUS/ANNz_data5aa.csv -> total so far = 12998 ... 
[21:42:15    INFO]  - Found 13685 lines in file PAUS/ANNz_data5ab.csv -> total so far = 13685 ... 
[21:42:15    INFO]  - Now reading-in PAUS/ANNz_data5aa.csv ... 
[21:42:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:42:16    INFO]  -- ANNZ_tree .......................................... 0  index
[21:42:16    INFO]  -- ANNZ_tree ...................................... 12998  nLine
[21:42:16    INFO]  -- ANNZ_tree ...................................... 12998  nLineFile
[21:42:16    INFO]  -- ANNZ_tree ...................................... 12998  nObj
[21:42:16    INFO]  -- ANNZ_tree .......................................... 0  nTest
[21:42:16    INFO]  -- ANNZ_tree ...................................... 12998  nTrain
[21:42:16    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:16    INFO]  - Now reading-in PAUS/ANNz_data5ab.csv ... 
[21:42:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:42:17    INFO]  -- ANNZ_tree .......................................... 0  index
[21:42:17    INFO]  -- ANNZ_tree ...................................... 26683  nLine
[21:42:17    INFO]  -- ANNZ_tree ...................................... 13685  nLineFile
[21:42:17    INFO]  -- ANNZ_tree ...................................... 13685  nObj
[21:42:17    INFO]  -- ANNZ_tree ...................................... 13685  nTest
[21:42:17    INFO]  -- ANNZ_tree ...................................... 12998  nTrain
[21:42:17    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:18    INFO]  - Writing to plotting directory output/PAUS_single3/rootIn/plots/
[21:42:19    INFO]  - Writing to plotting directory output/PAUS_single3/rootIn/plots/

(21:42 INFO) [40;37;1m - 22/01/19 21:42:20 - finished running ANNZ ![0m
(21:42 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:42 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:42 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:42 INFO) [40;37;1m - 22/01/19 21:42:35 - starting ANNZ[0m
(21:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_single3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:42 INFO) 
[21:42:36    INFO]  -----------------------------------------------------
[21:42:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:42:36    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:37    INFO]  - starting ANNZ::Init()  ... 
[21:42:38    INFO]  - Saving run information in ./output/PAUS_single3/regres/train/ANNZ_0/saveOpt.txt ...
[21:42:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:42:51    INFO]  - Found userMLMopts = "" - will generate randomized options... 
[21:42:51    INFO] ----------------------------------------------------------------------------------------------------
[21:42:51    INFO]  - will book (ANNZ_0) method(ANN) with options: :HiddenLayers=N+3,N+8:VarTransform=N,P:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=800:UseRegulator=True:ConvergenceTests=25:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=101979
[21:42:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random::NormMode=NumEvents
[21:42:51    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[21:42:51    INFO]      cuts (train):        ,
[21:42:51    INFO]      cuts (valid):       
[21:42:51    INFO]    - weights:            1
[21:42:51    INFO] ----------------------------------------------------------------------------------------------------
[21:42:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
(21:44 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:44 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:44 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:44 INFO) [40;37;1m - 22/01/19 21:44:29 - starting ANNZ[0m
(21:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_single3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:44 INFO) 
[21:44:29    INFO]  -----------------------------------------------------
[21:44:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:44:29    INFO]  -----------------------------------------------------------------------------------------------------------
[21:44:30    INFO]  - starting ANNZ::Init()  ... 
[21:44:31    INFO]  - Saving run information in ./output/PAUS_single3/regres/train/ANNZ_0/saveOpt.txt ...
[21:44:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:44:45    INFO]  - Found userMLMopts = "" - will generate randomized options... 
[21:44:45    INFO] ----------------------------------------------------------------------------------------------------
[21:44:45    INFO]  - will book (ANNZ_0) method(ANN) with options: :HiddenLayers=N+3,N+8:VarTransform=N,P:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=800:UseRegulator=True:ConvergenceTests=25:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=101979
[21:44:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random::NormMode=NumEvents
[21:44:45    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[21:44:45    INFO]      cuts (train):        ,
[21:44:45    INFO]      cuts (valid):       
[21:44:45    INFO]    - weights:            1
[21:44:45    INFO] ----------------------------------------------------------------------------------------------------
[21:44:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:05:29    INFO]  - Saving MLM information in ./output/PAUS_single3/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[01:05:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[01:05:36    INFO]  - Will gen. errors by KNN method ...
[01:05:38    INFO]  - starting ANNZ::loadReaders() ... 
[01:06:20    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_single3/rootIn/ANNZ_tree_train*.root
[01:06:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:06:37    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:06:37    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:06:37    INFO]  -----------------------------------------------------------------------------------------------------------
[01:06:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:06:42    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:06:42    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[01:06:42    INFO]  -----------------------------------------------------------------------------------------------------------
[01:06:44    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_single3/rootIn/ANNZ_tree_valid*.root
[01:07:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:07:02    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:07:02    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:07:02    INFO]  -----------------------------------------------------------------------------------------------------------
[01:07:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:07:08    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:07:08    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:07:08    INFO]  -----------------------------------------------------------------------------------------------------------
[01:07:10    INFO]  - Saving file ./output/PAUS_single3/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:07:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:07:11    INFO]  - will try to derive a bias correction ... 
[01:07:11    INFO]  - will validate that training produced an XML file for later ... 
[01:07:11    INFO]  - starting ANNZ::loadReaders() ... 
[01:07:49    INFO]  - will validate that the training was not a complete failure ... 
[01:07:49    INFO]  - training seems to have been successful! will move on ...
[01:07:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:07:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:07:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:07:58    INFO] ----------------------------------------------------------------------------------------------------
[01:07:58    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:07:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:07:58    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[01:07:58    INFO]    - weights:            1
[01:07:58    INFO] ----------------------------------------------------------------------------------------------------
[01:07:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:08:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[01:08:07    INFO]  - Will gen. errors by KNN method ...
[01:08:10    INFO]  - starting ANNZ::loadReaders() ... 
[01:08:54    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_single3/rootIn/ANNZ_tree_train*.root
[01:09:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:09:35    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:09:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:09:35    INFO]  -----------------------------------------------------------------------------------------------------------
[01:09:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:09:48    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:09:48    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[01:09:48    INFO]  -----------------------------------------------------------------------------------------------------------
[01:09:50    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_single3/rootIn/ANNZ_tree_valid*.root
[01:10:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:10:27    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:10:27    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:10:27    INFO]  -----------------------------------------------------------------------------------------------------------
[01:10:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:10:41    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:10:41    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:10:41    INFO]  -----------------------------------------------------------------------------------------------------------
[01:10:42    INFO]  - Saving file ./output/PAUS_single3/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:10:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:10:44    INFO]  - will validate that the bias-correction actually improved the result ...
[01:10:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:10:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[01:10:53    INFO]  - Writing to plotting directory output/PAUS_single3/regres/train/ANNZ_0/plots/
[01:11:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_single3/regres/train/ANNZ_0/plots output/PAUS_single3/regres/train/ANNZ_0/plots_biasCor_before
[01:11:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:11:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[01:11:20    INFO]  - Writing to plotting directory output/PAUS_single3/regres/train/ANNZ_0/plots/
[01:11:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_single3/regres/train/ANNZ_0/plots output/PAUS_single3/regres/train/ANNZ_0/plots_biasCor_after
[01:11:39    INFO]  - Got original [KS-test,N_poiss]: [0.0512213 , 5.00143] , after the bias-correction: [0.0399733 , 4.35053] --> will KEEP the correction !

(01:11 INFO) [40;37;1m - 23/01/19 01:11:44 - finished running ANNZ ![0m
(09:01 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:01 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:01 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:01 INFO) [40;37;1m - 23/01/19 09:01:50 - starting ANNZ[0m
(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_single3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:50    INFO]  -----------------------------------------------------
[09:01:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:50    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:53    INFO]  - starting ANNZ::Init()  ... 
[09:01:53    INFO]  - Will generate 0 PDFs ... 
[09:01:59    INFO] --------------------------------------------------------
[09:01:59    INFO]  - All ACCEPTED MLMs: ANNZ_0,
[09:01:59    INFO]  - All REJECTED MLMs: 
[09:01:59    INFO] ----------------------------------------------------------------------------------------------------------------
[09:02:02    INFO]  - Saving run information in ./output/PAUS_single3/regres/optim/saveOpt.txt ...
[09:02:42    INFO]  - starting ANNZ::Optim() ... 
[09:02:42    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[09:02:42    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[09:02:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:02:45    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_single3/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[09:02:45    INFO]  - found only 1 MLMs in the chain. Nothing to do... 
[09:02:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:02:46    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_single3/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[09:02:46    INFO]  - found only 1 MLMs in the chain. Nothing to do... 
[09:02:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:02:47    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/PAUS_single3/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[09:02:47    INFO]  - found only 1 MLMs in the chain. Nothing to do... 
[09:02:47    INFO]  - Saving file ./output/PAUS_single3/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[09:02:47    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[09:02:47    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_single3/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[09:02:47    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[09:02:47    INFO]  - ending makeTreeRegClsAllMLM() ... 
[09:02:47    INFO]  - starting ANNZ::optimReg() ... 
[09:02:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:02:50    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_single3/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[09:02:50    INFO]  - starting ANNZ::fillColosureV() ... 
[09:02:51    INFO]  ---------------------------------------------------------------------------------- 
[09:02:51    INFO]  - Got the following average properties: 
[09:02:51    INFO]  --------------------------------------- 
[09:02:51    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_0 	 0.00577568 	 0.063766 	 0.0611511
[09:02:51    INFO]  ------------------------------------------------------------------------------------------------- 
[09:02:51    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[09:02:51    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[09:02:51    INFO]  - The "best" MLM is: ANNZ_0
[09:02:51    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[09:02:51    INFO]  - no PDFs requested - nothing to do here... 
[09:02:51    INFO]  - Saving optimization results in ./output/PAUS_single3/regres/optim/saveOptimOpt.txt ...
[09:02:52    INFO]  - Saving bias-correction results in ./output/PAUS_single3/regres/optim/saveOptimObj.root ...
[09:02:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:02:55    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_single3/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[09:02:58    INFO]  - starting ANNZ::doEvalReg() ... 
[09:02:58    INFO]  - Will gen. errors by KNN method for:   ANNZ_0,
[09:02:58    INFO]  - Reading bias-correction results from ./output/PAUS_single3/regres/optim/saveOptimObj.root ...
[09:02:58    INFO]  - Getting optimization results from ./output/PAUS_single3/regres/optim/saveOptimOpt.txt ...
[09:02:58    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[09:02:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:02:58    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[09:02:58    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:58    INFO]  - starting storeTreeToAscii() ... 
[09:02:58    INFO]  - will write to file the following branches: Z,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,
[09:02:58    INFO]  - Will parse  ANNZ_tree_singleReg(13685)... Now in ./output/PAUS_single3/regres/optim/eval/ANNZ_singleReg_0000.csv
[09:02:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:02:58    INFO]  -- ANNZ_singleReg ................................. 13685  nObj
[09:02:58    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:02:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[09:03:00    INFO]  - Writing to plotting directory output/PAUS_single3/regres/optim/eval/plots/

(09:03 INFO) [40;37;1m - 23/01/19 09:03:01 - finished running ANNZ ![0m
(09:03 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:03 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:03 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:03 INFO) [40;37;1m - 23/01/19 09:03:41 - starting ANNZ[0m
(09:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_single3[0m' , [34mevalDirPostfix[0m[31m=[0m'[32meval1[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data5b.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:band0flux;F:band1flux;F:band2flux;F:band3flux;F:band4flux;F:band5flux;F:band6flux;F:band7flux;F:band8flux;F:band9flux;F:band10flux;F:band11flux;F:band12flux;F:band13flux;F:band14flux;F:band15flux;F:band16flux;F:band17flux;F:band18flux;F:band19flux;F:band20flux;F:band21flux;F:band22flux;F:band23flux;F:band24flux;F:band25flux;F:band26flux;F:band27flux;F:band28flux;F:band29flux;F:band30flux;F:band31flux;F:band32flux;F:band33flux;F:band34flux;F:band35flux;F:band36flux;F:band37flux;F:band38flux;F:band39flux;F:band0fluxerror;F:band1fluxerror;F:band2fluxerror;F:band3fluxerror;F:band4fluxerror;F:band5fluxerror;F:band6fluxerror;F:band7fluxerror;F:band8fluxerror;F:band9fluxerror;F:band10fluxerror;F:band11fluxerror;F:band12fluxerror;F:band13fluxerror;F:band14fluxerror;F:band15fluxerror;F:band16fluxerror;F:band17fluxerror;F:band18fluxerror;F:band19fluxerror;F:band20fluxerror;F:band21fluxerror;F:band22fluxerror;F:band23fluxerror;F:band24fluxerror;F:band25fluxerror;F:band26fluxerror;F:band27fluxerror;F:band28fluxerror;F:band29fluxerror;F:band30fluxerror;F:band31fluxerror;F:band32fluxerror;F:band33fluxerror;F:band34fluxerror;F:band35fluxerror;F:band36fluxerror;F:band37fluxerror;F:band38fluxerror;F:band39fluxerror;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:Z;F:Zerror[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:03 INFO) 
[09:03:41    INFO]  -----------------------------------------------------
[09:03:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:03:41    INFO]  -----------------------------------------------------------------------------------------------------------
[09:03:43    INFO]  - starting ANNZ::Init()  ... 
[09:03:43    INFO]  - Will generate 0 PDFs ... 
[09:03:50    INFO] --------------------------------------------------------
[09:03:50    INFO]  - All ACCEPTED MLMs: ANNZ_0,
[09:03:50    INFO]  - All REJECTED MLMs: 
[09:03:50    INFO] ----------------------------------------------------------------------------------------------------------------
[09:03:53    INFO]  - Saving run information in ./output/PAUS_single3/regres/eval_eval1/saveOpt.txt ...
[09:04:28    INFO]  - starting inputToFullTree(ANNz_data5b.csv) ... 
[09:04:28    INFO]  - Found 13343 lines in file PAUS/ANNz_data5b.csv -> total so far = 13343 ... 
[09:04:28    INFO]  - Now reading-in PAUS/ANNz_data5b.csv ... 
[09:04:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:04:29    INFO]  -- ANNZ_tree_eval ................................. 13343  nLine
[09:04:29    INFO]  -- ANNZ_tree_eval ................................. 13343  nObj
[09:04:29    INFO]  -----------------------------------------------------------------------------------------------------------
[09:04:29    INFO]  - starting ANNZ::Eval() ... 
[09:04:29    INFO]  - starting ANNZ::doEvalReg() ... 
[09:04:29    INFO]  - Will gen. errors by KNN method for:   ANNZ_0,
[09:04:29    INFO]  - Reading bias-correction results from ./output/PAUS_single3/regres/optim/saveOptimObj.root ...
[09:04:29    INFO]  - Getting optimization results from ./output/PAUS_single3/regres/optim/saveOptimOpt.txt ...
[09:04:29    INFO]  - creating MLM trees from input ...
[09:04:29    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,
[09:04:29    INFO]  - starting ANNZ::loadReaders() ... 
[09:04:51    INFO]  - Created KnnErr chain  ANNZ_tree_errKNN+ANNZ_tree_train(12998) from ./output/PAUS_single3/regres/train/postTrain/ANNZ_tree_errKNN*.root+./output/PAUS_single3/rootIn/ANNZ_tree_train*.root
[09:05:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:05:07    INFO]  -- ANNZ_tree_eval ................................. 13343  nObj
[09:05:07    INFO]  -----------------------------------------------------------------------------------------------------------
[09:05:08    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[09:05:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:05:08    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................ 13343  nObj
[09:05:08    INFO]  -----------------------------------------------------------------------------------------------------------
[09:05:08    INFO]  - starting storeTreeToAscii() ... 
[09:05:08    INFO]  - will write to file the following branches: Z,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,
[09:05:08    INFO]  - Will parse  ANNZ_tree_singleReg(13343)... Now in ./output/PAUS_single3/regres/eval_eval1/ANNZ_singleReg_0000.csv
[09:05:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:05:08    INFO]  -- ANNZ_singleReg ................................. 13343  nObj
[09:05:08    INFO]  -----------------------------------------------------------------------------------------------------------
[09:05:09    INFO]  - detected the target,Z in the evaluated sample - Will create performance plots ...
[09:05:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:05:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[09:05:09    INFO]  - Writing to plotting directory output/PAUS_single3/regres/eval_eval1/plots/

(09:05 INFO) [40;37;1m - 23/01/19 09:05:10 - finished running ANNZ ![0m
