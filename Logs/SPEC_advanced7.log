(11:11 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:11 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:11 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:11 INFO) [40;37;1m - 10/03/19 11:11:33 - starting ANNZ[0m
(11:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:11 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:11 INFO) 
[11:11:33    INFO]  -----------------------------------------------------
[11:11:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:11:33    INFO]  -----------------------------------------------------------------------------------------------------------
[11:11:35    INFO]  - starting inputToSplitTree() ... 
[11:11:35    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[11:11:35    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[11:11:35    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[11:11:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:11:36    INFO]  -- ANNZ_tree .......................................... 0  index
[11:11:36    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[11:11:36    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[11:11:36    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[11:11:36    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:11:36    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:11:36    INFO]  -----------------------------------------------------------------------------------------------------------
[11:11:36    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[11:11:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:11:36    INFO]  -- ANNZ_tree .......................................... 0  index
[11:11:36    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[11:11:36    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[11:11:36    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[11:11:36    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[11:11:36    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:11:36    INFO]  -----------------------------------------------------------------------------------------------------------
[11:11:37    INFO]  - Writing to plotting directory output/SPEC_advanced7/rootIn/plots/
[11:11:38    INFO]  - Writing to plotting directory output/SPEC_advanced7/rootIn/plots/

(11:11 INFO) [40;37;1m - 10/03/19 11:11:39 - finished running ANNZ ![0m
(11:12 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:12 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:12 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:12 INFO) [40;37;1m - 10/03/19 11:12:02 - starting ANNZ[0m
(11:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:12 INFO) 
[11:12:02    INFO]  -----------------------------------------------------
[11:12:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:12:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:12:03    INFO]  - starting ANNZ::Init()  ... 
[11:12:04    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_0/saveOpt.txt ...
[11:12:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:12:09    INFO] ----------------------------------------------------------------------------------------------------
[11:12:09    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N,P
[11:12:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:12:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:12:09    INFO]      cuts (train):        ,
[11:12:09    INFO]      cuts (valid):       
[11:12:09    INFO]    - weights:            1
[11:12:09    INFO] ----------------------------------------------------------------------------------------------------
[11:12:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:12:54    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[11:12:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:12:58    INFO]  - Will gen. input-parameter errors ...
[11:12:59    INFO]  - starting ANNZ::loadReaders() ... 
[11:13:10    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[11:16:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:16:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:16:31    INFO]  -----------------------------------------------------------------------------------------------------------
[11:16:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[11:17:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:17:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:17:23    INFO]  -----------------------------------------------------------------------------------------------------------
[11:17:23    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:17:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:17:25    INFO]  - will try to derive a bias correction ... 
[11:17:25    INFO]  - will validate that training produced an XML file for later ... 
[11:17:25    INFO]  - starting ANNZ::loadReaders() ... 
[11:17:29    INFO]  - will validate that the training was not a complete failure ... 
[11:17:30    INFO]  - training seems to have been successful! will move on ...
[11:17:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:17:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:17:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:17:35    INFO] ----------------------------------------------------------------------------------------------------
[11:17:35    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:17:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:17:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:17:35    INFO]    - weights:            1
[11:17:35    INFO] ----------------------------------------------------------------------------------------------------
[11:17:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:17:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:17:44    INFO]  - Will gen. input-parameter errors ...
[11:17:46    INFO]  - starting ANNZ::loadReaders() ... 
[11:17:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[11:22:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:22:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:22:30    INFO]  -----------------------------------------------------------------------------------------------------------
[11:22:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[11:23:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:23:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:23:35    INFO]  -----------------------------------------------------------------------------------------------------------
[11:23:35    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:23:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:23:37    INFO]  - will validate that the bias-correction actually improved the result ...
[11:23:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:23:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[11:23:45    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_0/plots/
[11:23:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_0/plots output/SPEC_advanced7/regres/train/ANNZ_0/plots_biasCor_before
[11:23:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:23:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[11:24:05    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_0/plots/
[11:24:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_0/plots output/SPEC_advanced7/regres/train/ANNZ_0/plots_biasCor_after
[11:24:19    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.89108] , after the bias-correction: [0.0442528 , 5.55252] --> will KEEP the correction !

(11:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:24 INFO) 
[11:24:26    INFO]  -----------------------------------------------------
[11:24:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:24:26    INFO]  -----------------------------------------------------------------------------------------------------------
[11:24:27    INFO]  - starting ANNZ::Init()  ... 
[11:24:28    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_1/saveOpt.txt ...
[11:24:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:24:36    INFO] ----------------------------------------------------------------------------------------------------
[11:24:36    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=310:BoostType=AdaBoostR2:VarTransform=N
[11:24:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:24:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:24:36    INFO]      cuts (train):        ,
[11:24:36    INFO]      cuts (valid):       
[11:24:36    INFO]    - weights:            1
[11:24:36    INFO] ----------------------------------------------------------------------------------------------------
[11:24:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:25:14    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[11:25:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:25:16    INFO]  - Will gen. input-parameter errors ...
[11:25:18    INFO]  - starting ANNZ::loadReaders() ... 
[11:25:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[11:31:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:31:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:31:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:31:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[11:32:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:32:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:32:33    INFO]  -----------------------------------------------------------------------------------------------------------
[11:32:33    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:32:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:32:34    INFO]  - will try to derive a bias correction ... 
[11:32:34    INFO]  - will validate that training produced an XML file for later ... 
[11:32:34    INFO]  - starting ANNZ::loadReaders() ... 
[11:32:38    INFO]  - will validate that the training was not a complete failure ... 
[11:32:38    INFO]  - training seems to have been successful! will move on ...
[11:32:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:32:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:32:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:32:44    INFO] ----------------------------------------------------------------------------------------------------
[11:32:44    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:32:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:32:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:32:44    INFO]    - weights:            1
[11:32:44    INFO] ----------------------------------------------------------------------------------------------------
[11:32:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:32:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:32:54    INFO]  - Will gen. input-parameter errors ...
[11:32:56    INFO]  - starting ANNZ::loadReaders() ... 
[11:33:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[11:38:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:38:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:38:12    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[11:39:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:39:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:39:43    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:43    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:39:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:39:44    INFO]  - will validate that the bias-correction actually improved the result ...
[11:39:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:39:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[11:39:52    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_1/plots/
[11:40:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_1/plots output/SPEC_advanced7/regres/train/ANNZ_1/plots_biasCor_before
[11:40:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:40:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[11:40:14    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_1/plots/
[11:40:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_1/plots output/SPEC_advanced7/regres/train/ANNZ_1/plots_biasCor_after
[11:40:28    INFO]  - Got original [KS-test,N_poiss]: [0.0626261 , 6.53232] , after the bias-correction: [0.034506 , 5.77992] --> will KEEP the correction !

(11:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:40 INFO) 
[11:40:32    INFO]  -----------------------------------------------------
[11:40:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:40:32    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:33    INFO]  - starting ANNZ::Init()  ... 
[11:40:35    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_2/saveOpt.txt ...
[11:40:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:40:41    INFO] ----------------------------------------------------------------------------------------------------
[11:40:41    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=450:BoostType=Bagging:VarTransform=N,P
[11:40:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:40:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:40:41    INFO]      cuts (train):        ,
[11:40:41    INFO]      cuts (valid):       
[11:40:41    INFO]    - weights:            1
[11:40:41    INFO] ----------------------------------------------------------------------------------------------------
[11:40:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:41:37    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[11:41:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[11:41:42    INFO]  - Will gen. input-parameter errors ...
[11:41:45    INFO]  - starting ANNZ::loadReaders() ... 
[11:41:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[11:47:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:47:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:47:23    INFO]  -----------------------------------------------------------------------------------------------------------
[11:47:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[11:49:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:49:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:49:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:49:02    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:49:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:49:05    INFO]  - will try to derive a bias correction ... 
[11:49:05    INFO]  - will validate that training produced an XML file for later ... 
[11:49:05    INFO]  - starting ANNZ::loadReaders() ... 
[11:49:10    INFO]  - will validate that the training was not a complete failure ... 
[11:49:10    INFO]  - training seems to have been successful! will move on ...
[11:49:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:49:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:49:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:49:17    INFO] ----------------------------------------------------------------------------------------------------
[11:49:17    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:49:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:49:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:49:17    INFO]    - weights:            1
[11:49:17    INFO] ----------------------------------------------------------------------------------------------------
[11:49:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:49:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[11:49:29    INFO]  - Will gen. input-parameter errors ...
[11:49:32    INFO]  - starting ANNZ::loadReaders() ... 
[11:49:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[11:56:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:56:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:56:26    INFO]  -----------------------------------------------------------------------------------------------------------
[11:56:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[11:58:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:58:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:58:00    INFO]  -----------------------------------------------------------------------------------------------------------
[11:58:00    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:58:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:58:02    INFO]  - will validate that the bias-correction actually improved the result ...
[11:58:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:58:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[11:58:20    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_2/plots/
[11:59:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_2/plots output/SPEC_advanced7/regres/train/ANNZ_2/plots_biasCor_before
[11:59:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:59:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[11:59:26    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_2/plots/
[11:59:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_2/plots output/SPEC_advanced7/regres/train/ANNZ_2/plots_biasCor_after
[11:59:48    INFO]  - Got original [KS-test,N_poiss]: [0.0932109 , 6.86145] , after the bias-correction: [0.0442528 , 5.68964] --> will KEEP the correction !
[12:00:01 WARNING]  - Could not execute command [rm -rf ./output/SPEC_advanced7/regres/train/ANNZ_2/ANNZ_tree_valid*.root] - will move to junk-dir, /tmp/ANNZ__junk/99408811749890446663/ , instead ...
mv: cannot stat './output/SPEC_advanced7/regres/train/ANNZ_2/ANNZ_tree_valid*.root': No such file or directory
[12:00:03   ERROR]  - ... ------------------------------------------------------------ 
[12:00:03   ERROR]  - MESSAGE -  - Failed system-call (mkdir -p /tmp/ANNZ__junk/99408811749890446663/ ; mv ./output/SPEC_advanced7/regres/train/ANNZ_2/ANNZ_tree_valid*.root /tmp/ANNZ__junk/99408811749890446663/) - sysReturn = 256... 
[12:00:03   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[12:00:03   ERROR]  - ..... ABORTING !!! 
[12:00:03   ERROR]  ------------------------------------------------------------ ... - 
(12:00 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(12:00 CRITICAL) [41;37;1mWill terminate !!!![0m
(12:05 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(12:05 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(12:05 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(12:05 INFO) [40;37;1m - 10/03/19 12:05:23 - starting ANNZ[0m
(12:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:05 INFO) 
[12:05:23    INFO]  -----------------------------------------------------
[12:05:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:05:23    INFO]  -----------------------------------------------------------------------------------------------------------
[12:05:24    INFO]  - starting ANNZ::Init()  ... 
[12:05:25    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced7/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[12:05:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:05 INFO) 
[12:05:25    INFO]  -----------------------------------------------------
[12:05:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:05:25    INFO]  -----------------------------------------------------------------------------------------------------------
[12:05:26    INFO]  - starting ANNZ::Init()  ... 
[12:05:26    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced7/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[12:05:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:05 INFO) 
[12:05:26    INFO]  -----------------------------------------------------
[12:05:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:05:26    INFO]  -----------------------------------------------------------------------------------------------------------
[12:05:27    INFO]  - starting ANNZ::Init()  ... 
[12:05:28    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced7/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[12:05:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:05 INFO) 
[12:05:28    INFO]  -----------------------------------------------------
[12:05:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:05:28    INFO]  -----------------------------------------------------------------------------------------------------------
[12:05:28    INFO]  - starting ANNZ::Init()  ... 
[12:05:30    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_3/saveOpt.txt ...
[12:05:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:05:36    INFO] ----------------------------------------------------------------------------------------------------
[12:05:36    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=500:BoostType=AdaBoostR2:VarTransform=N
[12:05:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:05:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:05:36    INFO]      cuts (train):        ,
[12:05:36    INFO]      cuts (valid):       
[12:05:36    INFO]    - weights:            1
[12:05:36    INFO] ----------------------------------------------------------------------------------------------------
[12:05:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:06:41    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[12:06:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[12:06:45    INFO]  - Will gen. input-parameter errors ...
[12:06:48    INFO]  - starting ANNZ::loadReaders() ... 
[12:07:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[12:21:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:21:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:21:52    INFO]  -----------------------------------------------------------------------------------------------------------
[12:21:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[12:25:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:25:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:25:57    INFO]  -----------------------------------------------------------------------------------------------------------
[12:25:57    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:25:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:25:59    INFO]  - will try to derive a bias correction ... 
[12:25:59    INFO]  - will validate that training produced an XML file for later ... 
[12:25:59    INFO]  - starting ANNZ::loadReaders() ... 
[12:26:03    INFO]  - will validate that the training was not a complete failure ... 
[12:26:03    INFO]  - training seems to have been successful! will move on ...
[12:26:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:26:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:26:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:26:09    INFO] ----------------------------------------------------------------------------------------------------
[12:26:09    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:26:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:26:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:26:09    INFO]    - weights:            1
[12:26:09    INFO] ----------------------------------------------------------------------------------------------------
[12:26:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:26:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[12:26:21    INFO]  - Will gen. input-parameter errors ...
[12:26:23    INFO]  - starting ANNZ::loadReaders() ... 
[12:26:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[12:40:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:40:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:40:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:40:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[12:43:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:43:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:43:43    INFO]  -----------------------------------------------------------------------------------------------------------
[12:43:43    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:43:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:43:45    INFO]  - will validate that the bias-correction actually improved the result ...
[12:43:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:43:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
Warning in <Fit>: Fit data is empty 
[12:43:57    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_3/plots/
[12:44:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_3/plots output/SPEC_advanced7/regres/train/ANNZ_3/plots_biasCor_before
[12:44:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:44:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[12:44:28    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_3/plots/
[12:44:44        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_3/plots output/SPEC_advanced7/regres/train/ANNZ_3/plots_biasCor_after
[12:44:44    INFO]  - Got original [KS-test,N_poiss]: [0.0626261 , 6.54453] , after the bias-correction: [0.0339458 , 5.5579] --> will KEEP the correction !

(12:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:44 INFO) 
[12:44:48    INFO]  -----------------------------------------------------
[12:44:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:44:48    INFO]  -----------------------------------------------------------------------------------------------------------
[12:44:50    INFO]  - starting ANNZ::Init()  ... 
[12:44:51    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_4/saveOpt.txt ...
[12:44:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:44:59    INFO] ----------------------------------------------------------------------------------------------------
[12:44:59    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=250:BoostType=AdaBoostR2:VarTransform=N
[12:44:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:44:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:44:59    INFO]      cuts (train):        ,
[12:44:59    INFO]      cuts (valid):       
[12:44:59    INFO]    - weights:            1
[12:44:59    INFO] ----------------------------------------------------------------------------------------------------
[12:44:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:45:26    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[12:45:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[12:45:28    INFO]  - Will gen. input-parameter errors ...
[12:45:30    INFO]  - starting ANNZ::loadReaders() ... 
[12:45:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[12:49:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:49:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:49:15    INFO]  -----------------------------------------------------------------------------------------------------------
[12:49:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[12:50:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:50:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:50:12    INFO]  -----------------------------------------------------------------------------------------------------------
[12:50:13    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:50:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:50:14    INFO]  - will try to derive a bias correction ... 
[12:50:14    INFO]  - will validate that training produced an XML file for later ... 
[12:50:14    INFO]  - starting ANNZ::loadReaders() ... 
[12:50:16    INFO]  - will validate that the training was not a complete failure ... 
[12:50:16    INFO]  - training seems to have been successful! will move on ...
[12:50:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:50:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:50:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:50:21    INFO] ----------------------------------------------------------------------------------------------------
[12:50:21    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:50:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:50:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:50:21    INFO]    - weights:            1
[12:50:21    INFO] ----------------------------------------------------------------------------------------------------
[12:50:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:50:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[12:50:31    INFO]  - Will gen. input-parameter errors ...
[12:50:33    INFO]  - starting ANNZ::loadReaders() ... 
[12:50:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[12:54:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:54:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:54:28    INFO]  -----------------------------------------------------------------------------------------------------------
[12:54:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[12:55:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:55:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:55:24    INFO]  -----------------------------------------------------------------------------------------------------------
[12:55:24    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:55:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:55:25    INFO]  - will validate that the bias-correction actually improved the result ...
[12:55:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:55:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[12:55:35    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_4/plots/
[12:55:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_4/plots output/SPEC_advanced7/regres/train/ANNZ_4/plots_biasCor_before
[12:55:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:55:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[12:55:59    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_4/plots/
[12:56:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_4/plots output/SPEC_advanced7/regres/train/ANNZ_4/plots_biasCor_after
[12:56:15    INFO]  - Got original [KS-test,N_poiss]: [0.0627381 , 6.58589] , after the bias-correction: [0.0339458 , 5.57845] --> will KEEP the correction !

(12:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:56 INFO) 
[12:56:19    INFO]  -----------------------------------------------------
[12:56:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:56:19    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:21    INFO]  - starting ANNZ::Init()  ... 
[12:56:22    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_5/saveOpt.txt ...
[12:56:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:56:29    INFO] ----------------------------------------------------------------------------------------------------
[12:56:29    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=410:BoostType=AdaBoost:VarTransform=N,P
[12:56:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:56:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:56:29    INFO]      cuts (train):        ,
[12:56:29    INFO]      cuts (valid):       
[12:56:29    INFO]    - weights:            1
[12:56:29    INFO] ----------------------------------------------------------------------------------------------------
[12:56:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:57:03    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[12:57:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[12:57:06    INFO]  - Will gen. input-parameter errors ...
[12:57:08    INFO]  - starting ANNZ::loadReaders() ... 
[12:57:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[13:00:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:00:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:00:29    INFO]  -----------------------------------------------------------------------------------------------------------
[13:00:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[13:01:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:01:16    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:01:16    INFO]  -----------------------------------------------------------------------------------------------------------
[13:01:16    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:01:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:01:17    INFO]  - will try to derive a bias correction ... 
[13:01:17    INFO]  - will validate that training produced an XML file for later ... 
[13:01:17    INFO]  - starting ANNZ::loadReaders() ... 
[13:01:19    INFO]  - will validate that the training was not a complete failure ... 
[13:01:19    INFO]  - training seems to have been successful! will move on ...
[13:01:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:01:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:01:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:01:27    INFO] ----------------------------------------------------------------------------------------------------
[13:01:27    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:01:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:01:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:01:27    INFO]    - weights:            1
[13:01:27    INFO] ----------------------------------------------------------------------------------------------------
[13:01:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:01:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[13:01:37    INFO]  - Will gen. input-parameter errors ...
[13:01:39    INFO]  - starting ANNZ::loadReaders() ... 
[13:01:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[13:05:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:05:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:05:12    INFO]  -----------------------------------------------------------------------------------------------------------
[13:05:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[13:06:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:06:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:06:19    INFO]  -----------------------------------------------------------------------------------------------------------
[13:06:19    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:06:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:06:20    INFO]  - will validate that the bias-correction actually improved the result ...
[13:06:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:06:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
Warning in <Fit>: Fit data is empty 
[13:06:27    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_5/plots/
[13:06:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_5/plots output/SPEC_advanced7/regres/train/ANNZ_5/plots_biasCor_before
[13:06:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:06:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[13:06:50    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_5/plots/
[13:07:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_5/plots output/SPEC_advanced7/regres/train/ANNZ_5/plots_biasCor_after
[13:07:05    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40316] , after the bias-correction: [0.0434685 , 5.7673] --> will KEEP the correction !

(13:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:07 INFO) 
[13:07:10    INFO]  -----------------------------------------------------
[13:07:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:07:10    INFO]  -----------------------------------------------------------------------------------------------------------
[13:07:11    INFO]  - starting ANNZ::Init()  ... 
[13:07:12    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_6/saveOpt.txt ...
[13:07:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:07:19    INFO] ----------------------------------------------------------------------------------------------------
[13:07:19    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=540:BoostType=AdaBoost:VarTransform=N
[13:07:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:07:19    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:07:19    INFO]      cuts (train):        ,
[13:07:19    INFO]      cuts (valid):       
[13:07:19    INFO]    - weights:            1
[13:07:19    INFO] ----------------------------------------------------------------------------------------------------
[13:07:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:08:02    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[13:08:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[13:08:05    INFO]  - Will gen. input-parameter errors ...
[13:08:07    INFO]  - starting ANNZ::loadReaders() ... 
[13:08:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[13:10:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:10:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:10:48    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[13:11:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:11:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:11:26    INFO]  -----------------------------------------------------------------------------------------------------------
[13:11:26    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:11:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:11:27    INFO]  - will try to derive a bias correction ... 
[13:11:27    INFO]  - will validate that training produced an XML file for later ... 
[13:11:27    INFO]  - starting ANNZ::loadReaders() ... 
[13:11:30    INFO]  - will validate that the training was not a complete failure ... 
[13:11:30    INFO]  - training seems to have been successful! will move on ...
[13:11:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:11:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:11:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:11:36    INFO] ----------------------------------------------------------------------------------------------------
[13:11:36    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:11:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:11:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:11:36    INFO]    - weights:            1
[13:11:36    INFO] ----------------------------------------------------------------------------------------------------
[13:11:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:11:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[13:11:47    INFO]  - Will gen. input-parameter errors ...
[13:11:49    INFO]  - starting ANNZ::loadReaders() ... 
[13:11:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[13:14:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:14:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:14:20    INFO]  -----------------------------------------------------------------------------------------------------------
[13:14:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[13:14:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:14:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:14:55    INFO]  -----------------------------------------------------------------------------------------------------------
[13:14:55    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:14:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:14:56    INFO]  - will validate that the bias-correction actually improved the result ...
[13:14:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:14:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
Warning in <Fit>: Fit data is empty 
[13:15:10    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_6/plots/
[13:15:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_6/plots output/SPEC_advanced7/regres/train/ANNZ_6/plots_biasCor_before
[13:15:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:15:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
Warning in <Fit>: Fit data is empty 
[13:15:48    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_6/plots/
[13:16:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_6/plots output/SPEC_advanced7/regres/train/ANNZ_6/plots_biasCor_after
[13:16:07    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.14175] , after the bias-correction: [0.0500785 , 6.14491] --> will KEEP the correction !

(13:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=910:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:16 INFO) 
[13:16:12    INFO]  -----------------------------------------------------
[13:16:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:16:12    INFO]  -----------------------------------------------------------------------------------------------------------
[13:16:13    INFO]  - starting ANNZ::Init()  ... 
[13:16:15    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_7/saveOpt.txt ...
[13:16:22    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:16:22    INFO] ----------------------------------------------------------------------------------------------------
[13:16:22    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=910:BoostType=AdaBoost:VarTransform=P
[13:16:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:16:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:16:22    INFO]      cuts (train):        ,
[13:16:22    INFO]      cuts (valid):       
[13:16:22    INFO]    - weights:            1
[13:16:22    INFO] ----------------------------------------------------------------------------------------------------
[13:16:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:17:40    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[13:17:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[13:17:45    INFO]  - Will gen. input-parameter errors ...
[13:17:47    INFO]  - starting ANNZ::loadReaders() ... 
[13:18:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[13:27:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:27:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:27:17    INFO]  -----------------------------------------------------------------------------------------------------------
[13:27:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[13:29:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:29:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:29:30    INFO]  -----------------------------------------------------------------------------------------------------------
[13:29:30    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:29:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:29:32    INFO]  - will try to derive a bias correction ... 
[13:29:32    INFO]  - will validate that training produced an XML file for later ... 
[13:29:32    INFO]  - starting ANNZ::loadReaders() ... 
[13:29:36    INFO]  - will validate that the training was not a complete failure ... 
[13:29:36    INFO]  - training seems to have been successful! will move on ...
[13:29:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:29:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:29:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:29:43    INFO] ----------------------------------------------------------------------------------------------------
[13:29:43    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:29:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:29:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:29:43    INFO]    - weights:            1
[13:29:43    INFO] ----------------------------------------------------------------------------------------------------
[13:29:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:29:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[13:29:55    INFO]  - Will gen. input-parameter errors ...
[13:29:57    INFO]  - starting ANNZ::loadReaders() ... 
[13:30:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[13:36:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:36:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:36:19    INFO]  -----------------------------------------------------------------------------------------------------------
[13:36:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[13:37:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:37:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:37:53    INFO]  -----------------------------------------------------------------------------------------------------------
[13:37:54    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:37:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:37:55    INFO]  - will validate that the bias-correction actually improved the result ...
[13:37:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:37:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[13:38:04    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_7/plots/
[13:38:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_7/plots output/SPEC_advanced7/regres/train/ANNZ_7/plots_biasCor_before
[13:38:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:38:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[13:38:25    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_7/plots/
[13:38:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_7/plots output/SPEC_advanced7/regres/train/ANNZ_7/plots_biasCor_after
[13:38:43    INFO]  - Got original [KS-test,N_poiss]: [0.0849205 , 6.52285] , after the bias-correction: [0.0354876 , 5.57852] --> will KEEP the correction !

(13:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoostR2:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:38 INFO) 
[13:38:47    INFO]  -----------------------------------------------------
[13:38:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:38:47    INFO]  -----------------------------------------------------------------------------------------------------------
[13:38:49    INFO]  - starting ANNZ::Init()  ... 
[13:38:51    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_8/saveOpt.txt ...
[13:38:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:38:58    INFO] ----------------------------------------------------------------------------------------------------
[13:38:58    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=530:BoostType=AdaBoostR2:VarTransform=P
[13:38:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:38:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:38:58    INFO]      cuts (train):        ,
[13:38:58    INFO]      cuts (valid):       
[13:38:58    INFO]    - weights:            1
[13:38:58    INFO] ----------------------------------------------------------------------------------------------------
[13:38:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.17646
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(13:39 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(13:39 CRITICAL) [41;37;1mWill terminate !!!![0m
(14:08 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(14:08 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(14:08 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(14:08 INFO) [40;37;1m - 10/03/19 14:08:14 - starting ANNZ[0m
(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:14    INFO]  -----------------------------------------------------
[14:08:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:14    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:15    INFO]  - starting ANNZ::Init()  ... 
[14:08:16    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced7/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[14:08:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:16    INFO]  -----------------------------------------------------
[14:08:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:16    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:17    INFO]  - starting ANNZ::Init()  ... 
[14:08:17    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced7/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[14:08:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:17    INFO]  -----------------------------------------------------
[14:08:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:17    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:18    INFO]  - starting ANNZ::Init()  ... 
[14:08:19    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced7/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[14:08:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:19    INFO]  -----------------------------------------------------
[14:08:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:19    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:20    INFO]  - starting ANNZ::Init()  ... 
[14:08:21    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced7/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[14:08:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:21    INFO]  -----------------------------------------------------
[14:08:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:21    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:21    INFO]  - starting ANNZ::Init()  ... 
[14:08:22    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced7/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[14:08:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:22    INFO]  -----------------------------------------------------
[14:08:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:22    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:23    INFO]  - starting ANNZ::Init()  ... 
[14:08:23    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced7/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[14:08:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:23    INFO]  -----------------------------------------------------
[14:08:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:23    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:24    INFO]  - starting ANNZ::Init()  ... 
[14:08:24    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced7/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[14:08:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:24    INFO]  -----------------------------------------------------
[14:08:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:24    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:25    INFO]  - starting ANNZ::Init()  ... 
[14:08:26    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced7/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[14:08:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(14:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:08 INFO) 
[14:08:26    INFO]  -----------------------------------------------------
[14:08:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:08:26    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:27    INFO]  - starting ANNZ::Init()  ... 
[14:08:29    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_8/saveOpt.txt ...
[14:08:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:08:37    INFO] ----------------------------------------------------------------------------------------------------
[14:08:37    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[14:08:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:08:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:08:37    INFO]      cuts (train):        ,
[14:08:37    INFO]      cuts (valid):       
[14:08:37    INFO]    - weights:            1
[14:08:37    INFO] ----------------------------------------------------------------------------------------------------
[14:08:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:08:59    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[14:09:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[14:09:00    INFO]  - Will gen. input-parameter errors ...
[14:09:02    INFO]  - starting ANNZ::loadReaders() ... 
[14:09:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[14:11:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:11:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:11:14    INFO]  -----------------------------------------------------------------------------------------------------------
[14:11:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[14:11:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:11:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:11:48    INFO]  -----------------------------------------------------------------------------------------------------------
[14:11:48    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:11:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:11:49    INFO]  - will try to derive a bias correction ... 
[14:11:49    INFO]  - will validate that training produced an XML file for later ... 
[14:11:49    INFO]  - starting ANNZ::loadReaders() ... 
[14:11:50    INFO]  - will validate that the training was not a complete failure ... 
[14:11:50    INFO]  - training seems to have been successful! will move on ...
[14:11:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:11:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:11:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:11:56    INFO] ----------------------------------------------------------------------------------------------------
[14:11:56    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:11:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:11:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:11:56    INFO]    - weights:            1
[14:11:56    INFO] ----------------------------------------------------------------------------------------------------
[14:11:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:12:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[14:12:04    INFO]  - Will gen. input-parameter errors ...
[14:12:07    INFO]  - starting ANNZ::loadReaders() ... 
[14:12:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[14:14:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:14:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:14:50    INFO]  -----------------------------------------------------------------------------------------------------------
[14:14:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[14:15:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:15:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:15:36    INFO]  -----------------------------------------------------------------------------------------------------------
[14:15:37    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:15:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:15:38    INFO]  - will validate that the bias-correction actually improved the result ...
[14:15:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:15:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[14:15:46    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_8/plots/
[14:16:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_8/plots output/SPEC_advanced7/regres/train/ANNZ_8/plots_biasCor_before
[14:16:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:16:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[14:16:15    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_8/plots/
[14:16:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_8/plots output/SPEC_advanced7/regres/train/ANNZ_8/plots_biasCor_after
[14:16:29    INFO]  - Got original [KS-test,N_poiss]: [0.100941 , 6.44299] , after the bias-correction: [0.0448129 , 5.75736] --> will KEEP the correction !

(14:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:16 INFO) 
[14:16:33    INFO]  -----------------------------------------------------
[14:16:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:16:33    INFO]  -----------------------------------------------------------------------------------------------------------
[14:16:34    INFO]  - starting ANNZ::Init()  ... 
[14:16:35    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_9/saveOpt.txt ...
[14:16:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:16:42    INFO] ----------------------------------------------------------------------------------------------------
[14:16:42    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=470:BoostType=AdaBoost:VarTransform=N,P
[14:16:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:16:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:16:42    INFO]      cuts (train):        ,
[14:16:42    INFO]      cuts (valid):       
[14:16:42    INFO]    - weights:            1
[14:16:42    INFO] ----------------------------------------------------------------------------------------------------
[14:16:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:17:16    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[14:17:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[14:17:18    INFO]  - Will gen. input-parameter errors ...
[14:17:20    INFO]  - starting ANNZ::loadReaders() ... 
[14:17:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[14:21:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:21:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:21:01    INFO]  -----------------------------------------------------------------------------------------------------------
[14:21:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[14:21:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:21:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:21:51    INFO]  -----------------------------------------------------------------------------------------------------------
[14:21:51    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:21:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:21:52    INFO]  - will try to derive a bias correction ... 
[14:21:52    INFO]  - will validate that training produced an XML file for later ... 
[14:21:52    INFO]  - starting ANNZ::loadReaders() ... 
[14:21:54    INFO]  - will validate that the training was not a complete failure ... 
[14:21:54    INFO]  - training seems to have been successful! will move on ...
[14:21:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:21:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:21:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:22:00    INFO] ----------------------------------------------------------------------------------------------------
[14:22:00    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:22:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:22:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:22:00    INFO]    - weights:            1
[14:22:00    INFO] ----------------------------------------------------------------------------------------------------
[14:22:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:22:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[14:22:09    INFO]  - Will gen. input-parameter errors ...
[14:22:12    INFO]  - starting ANNZ::loadReaders() ... 
[14:22:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[14:26:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:26:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:26:12    INFO]  -----------------------------------------------------------------------------------------------------------
[14:26:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[14:27:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:27:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:27:02    INFO]  -----------------------------------------------------------------------------------------------------------
[14:27:02    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:27:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:27:03    INFO]  - will validate that the bias-correction actually improved the result ...
[14:27:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:27:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[14:27:09    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_9/plots/
[14:27:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_9/plots output/SPEC_advanced7/regres/train/ANNZ_9/plots_biasCor_before
[14:27:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:27:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[14:27:27    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_9/plots/
[14:27:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_9/plots output/SPEC_advanced7/regres/train/ANNZ_9/plots_biasCor_after
[14:27:41    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40773] , after the bias-correction: [0.0442528 , 5.76265] --> will KEEP the correction !

(14:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1000:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:27 INFO) 
[14:27:45    INFO]  -----------------------------------------------------
[14:27:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:27:45    INFO]  -----------------------------------------------------------------------------------------------------------
[14:27:46    INFO]  - starting ANNZ::Init()  ... 
[14:27:47    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_10/saveOpt.txt ...
[14:27:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:27:55    INFO] ----------------------------------------------------------------------------------------------------
[14:27:55    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=1000:BoostType=AdaBoostR2:VarTransform=N,P
[14:27:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:27:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:27:55    INFO]      cuts (train):        ,
[14:27:55    INFO]      cuts (valid):       
[14:27:55    INFO]    - weights:            1
[14:27:55    INFO] ----------------------------------------------------------------------------------------------------
[14:27:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:30:13    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[14:30:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[14:30:20    INFO]  - Will gen. input-parameter errors ...
[14:30:23    INFO]  - starting ANNZ::loadReaders() ... 
[14:31:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[15:15:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:15:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:15:41    INFO]  -----------------------------------------------------------------------------------------------------------
[15:15:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[15:26:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:26:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:26:24    INFO]  -----------------------------------------------------------------------------------------------------------
[15:26:24    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:26:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:26:28    INFO]  - will try to derive a bias correction ... 
[15:26:28    INFO]  - will validate that training produced an XML file for later ... 
[15:26:28    INFO]  - starting ANNZ::loadReaders() ... 
[15:26:38    INFO]  - will validate that the training was not a complete failure ... 
[15:26:39    INFO]  - training seems to have been successful! will move on ...
[15:26:39    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:26:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:26:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:26:52    INFO] ----------------------------------------------------------------------------------------------------
[15:26:52    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:26:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:26:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:26:52    INFO]    - weights:            1
[15:26:52    INFO] ----------------------------------------------------------------------------------------------------
[15:26:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:27:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[15:27:04    INFO]  - Will gen. input-parameter errors ...
[15:27:07    INFO]  - starting ANNZ::loadReaders() ... 
[15:27:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[16:11:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:11:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:11:15    INFO]  -----------------------------------------------------------------------------------------------------------
[16:11:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[16:22:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:22:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:22:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:22:12    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:22:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:22:15    INFO]  - will validate that the bias-correction actually improved the result ...
[16:22:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:22:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[16:22:23    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_10/plots/
[16:22:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_10/plots output/SPEC_advanced7/regres/train/ANNZ_10/plots_biasCor_before
[16:22:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:22:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[16:22:43    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_10/plots/
[16:22:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_10/plots output/SPEC_advanced7/regres/train/ANNZ_10/plots_biasCor_after
[16:22:56    INFO]  - Got original [KS-test,N_poiss]: [0.0699081 , 6.67966] , after the bias-correction: [0.0318172 , 5.83332] --> will KEEP the correction !

(16:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:23 INFO) 
[16:23:02    INFO]  -----------------------------------------------------
[16:23:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:23:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:23:02    INFO]  - starting ANNZ::Init()  ... 
[16:23:03    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_11/saveOpt.txt ...
[16:23:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:23:09    INFO] ----------------------------------------------------------------------------------------------------
[16:23:09    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N
[16:23:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:23:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:23:09    INFO]      cuts (train):        ,
[16:23:09    INFO]      cuts (valid):       
[16:23:09    INFO]    - weights:            1
[16:23:09    INFO] ----------------------------------------------------------------------------------------------------
[16:23:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:23:45    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[16:23:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[16:23:48    INFO]  - Will gen. input-parameter errors ...
[16:23:49    INFO]  - starting ANNZ::loadReaders() ... 
[16:23:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[16:26:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:26:23    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[16:26:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:26:59    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:59    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:27:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:27:00    INFO]  - will try to derive a bias correction ... 
[16:27:00    INFO]  - will validate that training produced an XML file for later ... 
[16:27:00    INFO]  - starting ANNZ::loadReaders() ... 
[16:27:02    INFO]  - will validate that the training was not a complete failure ... 
[16:27:02    INFO]  - training seems to have been successful! will move on ...
[16:27:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:27:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:27:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:27:06    INFO] ----------------------------------------------------------------------------------------------------
[16:27:06    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:27:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:27:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:27:06    INFO]    - weights:            1
[16:27:06    INFO] ----------------------------------------------------------------------------------------------------
[16:27:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:27:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[16:27:16    INFO]  - Will gen. input-parameter errors ...
[16:27:17    INFO]  - starting ANNZ::loadReaders() ... 
[16:27:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[16:29:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:29:32    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:29:32    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:32    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[16:30:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:30:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:30:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:30:03    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:30:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:30:04    INFO]  - will validate that the bias-correction actually improved the result ...
[16:30:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:30:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
Warning in <Fit>: Fit data is empty 
[16:30:10    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_11/plots/
[16:30:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_11/plots output/SPEC_advanced7/regres/train/ANNZ_11/plots_biasCor_before
[16:30:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:30:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
Warning in <Fit>: Fit data is empty 
[16:30:27    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_11/plots/
[16:30:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_11/plots output/SPEC_advanced7/regres/train/ANNZ_11/plots_biasCor_after
[16:30:39    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12424] , after the bias-correction: [0.0495183 , 5.94383] --> will KEEP the correction !

(16:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=910:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:30 INFO) 
[16:30:43    INFO]  -----------------------------------------------------
[16:30:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:30:43    INFO]  -----------------------------------------------------------------------------------------------------------
[16:30:44    INFO]  - starting ANNZ::Init()  ... 
[16:30:45    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_12/saveOpt.txt ...
[16:30:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:30:51    INFO] ----------------------------------------------------------------------------------------------------
[16:30:51    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=910:BoostType=Bagging:VarTransform=P
[16:30:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:30:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:30:51    INFO]      cuts (train):        ,
[16:30:51    INFO]      cuts (valid):       
[16:30:51    INFO]    - weights:            1
[16:30:51    INFO] ----------------------------------------------------------------------------------------------------
[16:30:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.101365
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(16:30 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(16:30 CRITICAL) [41;37;1mWill terminate !!!![0m
(23:00 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:00 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:00 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:00 INFO) [40;37;1m - 10/03/19 23:00:15 - starting ANNZ[0m
(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:15    INFO]  -----------------------------------------------------
[23:00:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:15    INFO]  - starting ANNZ::Init()  ... 
[23:00:16    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced7/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[23:00:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:16    INFO]  -----------------------------------------------------
[23:00:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:17    INFO]  - starting ANNZ::Init()  ... 
[23:00:17    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced7/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[23:00:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:17    INFO]  -----------------------------------------------------
[23:00:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:17    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:18    INFO]  - starting ANNZ::Init()  ... 
[23:00:19    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced7/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[23:00:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:19    INFO]  -----------------------------------------------------
[23:00:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:19    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:19    INFO]  - starting ANNZ::Init()  ... 
[23:00:20    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced7/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[23:00:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:20    INFO]  -----------------------------------------------------
[23:00:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:20    INFO]  - starting ANNZ::Init()  ... 
[23:00:21    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced7/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[23:00:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:21    INFO]  -----------------------------------------------------
[23:00:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:21    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:21    INFO]  - starting ANNZ::Init()  ... 
[23:00:21    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced7/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[23:00:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:21    INFO]  -----------------------------------------------------
[23:00:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:21    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:22    INFO]  - starting ANNZ::Init()  ... 
[23:00:22    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced7/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[23:00:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:22    INFO]  -----------------------------------------------------
[23:00:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:23    INFO]  - starting ANNZ::Init()  ... 
[23:00:23    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced7/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[23:00:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=730:BoostType=AdaBoostR2:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:23    INFO]  -----------------------------------------------------
[23:00:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:24    INFO]  - starting ANNZ::Init()  ... 
[23:00:24    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced7/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[23:00:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:24    INFO]  -----------------------------------------------------
[23:00:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:25    INFO]  - starting ANNZ::Init()  ... 
[23:00:25    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced7/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[23:00:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:25    INFO]  -----------------------------------------------------
[23:00:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:25    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:26    INFO]  - starting ANNZ::Init()  ... 
[23:00:27    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced7/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[23:00:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:27    INFO]  -----------------------------------------------------
[23:00:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:27    INFO]  - starting ANNZ::Init()  ... 
[23:00:28    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced7/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[23:00:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:00 INFO) 
[23:00:28    INFO]  -----------------------------------------------------
[23:00:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:00:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:28    INFO]  - starting ANNZ::Init()  ... 
[23:00:30    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_12/saveOpt.txt ...
[23:00:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:00:35    INFO] ----------------------------------------------------------------------------------------------------
[23:00:35    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N,P
[23:00:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:00:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:00:35    INFO]      cuts (train):        ,
[23:00:35    INFO]      cuts (valid):       
[23:00:35    INFO]    - weights:            1
[23:00:35    INFO] ----------------------------------------------------------------------------------------------------
[23:00:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:01:32    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[23:01:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[23:01:37    INFO]  - Will gen. input-parameter errors ...
[23:01:40    INFO]  - starting ANNZ::loadReaders() ... 
[23:01:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:07:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:07:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:07:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:07:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:09:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:09:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:09:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:09:09    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:09:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:09:11    INFO]  - will try to derive a bias correction ... 
[23:09:11    INFO]  - will validate that training produced an XML file for later ... 
[23:09:11    INFO]  - starting ANNZ::loadReaders() ... 
[23:09:19    INFO]  - will validate that the training was not a complete failure ... 
[23:09:19    INFO]  - training seems to have been successful! will move on ...
[23:09:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:09:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:09:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:09:27    INFO] ----------------------------------------------------------------------------------------------------
[23:09:27    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:09:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:09:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:09:27    INFO]    - weights:            1
[23:09:27    INFO] ----------------------------------------------------------------------------------------------------
[23:09:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:09:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[23:09:40    INFO]  - Will gen. input-parameter errors ...
[23:09:43    INFO]  - starting ANNZ::loadReaders() ... 
[23:09:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:15:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:15:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:15:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:15:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:17:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:17:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:17:12    INFO]  -----------------------------------------------------------------------------------------------------------
[23:17:12    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:17:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:17:14    INFO]  - will validate that the bias-correction actually improved the result ...
[23:17:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:17:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[23:17:21    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_12/plots/
[23:17:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_12/plots output/SPEC_advanced7/regres/train/ANNZ_12/plots_biasCor_before
[23:17:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:17:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[23:17:40    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_12/plots/
[23:17:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_12/plots output/SPEC_advanced7/regres/train/ANNZ_12/plots_biasCor_after
[23:17:52    INFO]  - Got original [KS-test,N_poiss]: [0.0933229 , 6.85173] , after the bias-correction: [0.0453731 , 5.58688] --> will KEEP the correction !

(23:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:17 INFO) 
[23:17:57    INFO]  -----------------------------------------------------
[23:17:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:17:57    INFO]  -----------------------------------------------------------------------------------------------------------
[23:17:57    INFO]  - starting ANNZ::Init()  ... 
[23:17:59    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_13/saveOpt.txt ...
[23:18:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:18:05    INFO] ----------------------------------------------------------------------------------------------------
[23:18:05    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=460:BoostType=AdaBoost:VarTransform=N,P
[23:18:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:18:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:18:05    INFO]      cuts (train):        ,
[23:18:05    INFO]      cuts (valid):       
[23:18:05    INFO]    - weights:            1
[23:18:05    INFO] ----------------------------------------------------------------------------------------------------
[23:18:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:18:36    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[23:18:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[23:18:39    INFO]  - Will gen. input-parameter errors ...
[23:18:40    INFO]  - starting ANNZ::loadReaders() ... 
[23:18:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:21:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:21:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:21:51    INFO]  -----------------------------------------------------------------------------------------------------------
[23:21:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:22:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:22:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:22:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:22:33    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:22:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:22:34    INFO]  - will try to derive a bias correction ... 
[23:22:34    INFO]  - will validate that training produced an XML file for later ... 
[23:22:34    INFO]  - starting ANNZ::loadReaders() ... 
[23:22:36    INFO]  - will validate that the training was not a complete failure ... 
[23:22:36    INFO]  - training seems to have been successful! will move on ...
[23:22:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:22:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:22:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:22:40    INFO] ----------------------------------------------------------------------------------------------------
[23:22:40    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:22:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:22:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:22:40    INFO]    - weights:            1
[23:22:40    INFO] ----------------------------------------------------------------------------------------------------
[23:22:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:22:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[23:22:48    INFO]  - Will gen. input-parameter errors ...
[23:22:50    INFO]  - starting ANNZ::loadReaders() ... 
[23:22:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:25:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:25:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:25:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:25:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:26:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:26:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:26:30    INFO]  -----------------------------------------------------------------------------------------------------------
[23:26:30    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:26:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:26:31    INFO]  - will validate that the bias-correction actually improved the result ...
[23:26:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:26:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
Warning in <Fit>: Fit data is empty 
[23:26:37    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_13/plots/
[23:26:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_13/plots output/SPEC_advanced7/regres/train/ANNZ_13/plots_biasCor_before
[23:26:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:26:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
Warning in <Fit>: Fit data is empty 
[23:26:54    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_13/plots/
[23:27:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_13/plots output/SPEC_advanced7/regres/train/ANNZ_13/plots_biasCor_after
[23:27:06    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40365] , after the bias-correction: [0.0442528 , 5.77607] --> will KEEP the correction !

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:10    INFO]  -----------------------------------------------------
[23:27:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:10    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:11    INFO]  - starting ANNZ::Init()  ... 
[23:27:12    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_14/saveOpt.txt ...
[23:27:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:27:18    INFO] ----------------------------------------------------------------------------------------------------
[23:27:18    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=410:BoostType=AdaBoost:VarTransform=N,P
[23:27:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:27:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:27:18    INFO]      cuts (train):        ,
[23:27:18    INFO]      cuts (valid):       
[23:27:18    INFO]    - weights:            1
[23:27:18    INFO] ----------------------------------------------------------------------------------------------------
[23:27:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:27:46    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[23:27:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[23:27:48    INFO]  - Will gen. input-parameter errors ...
[23:27:50    INFO]  - starting ANNZ::loadReaders() ... 
[23:27:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:30:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:30:21    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:30:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:30:59    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:59    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:31:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:31:00    INFO]  - will try to derive a bias correction ... 
[23:31:00    INFO]  - will validate that training produced an XML file for later ... 
[23:31:00    INFO]  - starting ANNZ::loadReaders() ... 
[23:31:01    INFO]  - will validate that the training was not a complete failure ... 
[23:31:01    INFO]  - training seems to have been successful! will move on ...
[23:31:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:31:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:31:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:31:06    INFO] ----------------------------------------------------------------------------------------------------
[23:31:06    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:31:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:31:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:31:06    INFO]    - weights:            1
[23:31:06    INFO] ----------------------------------------------------------------------------------------------------
[23:31:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:31:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[23:31:14    INFO]  - Will gen. input-parameter errors ...
[23:31:16    INFO]  - starting ANNZ::loadReaders() ... 
[23:31:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:34:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:34:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:34:09    INFO]  -----------------------------------------------------------------------------------------------------------
[23:34:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:34:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:34:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:34:49    INFO]  -----------------------------------------------------------------------------------------------------------
[23:34:49    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:34:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:34:50    INFO]  - will validate that the bias-correction actually improved the result ...
[23:34:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:34:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[23:34:56    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_14/plots/
[23:35:08        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_14/plots output/SPEC_advanced7/regres/train/ANNZ_14/plots_biasCor_before
[23:35:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:35:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[23:35:13    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_14/plots/
[23:35:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_14/plots output/SPEC_advanced7/regres/train/ANNZ_14/plots_biasCor_after
[23:35:25    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40316] , after the bias-correction: [0.0434685 , 5.7673] --> will KEEP the correction !

(23:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:35 INFO) 
[23:35:28    INFO]  -----------------------------------------------------
[23:35:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:35:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:35:29    INFO]  - starting ANNZ::Init()  ... 
[23:35:30    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_15/saveOpt.txt ...
[23:35:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:35:36    INFO] ----------------------------------------------------------------------------------------------------
[23:35:36    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N,P
[23:35:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:35:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:35:36    INFO]      cuts (train):        ,
[23:35:36    INFO]      cuts (valid):       
[23:35:36    INFO]    - weights:            1
[23:35:36    INFO] ----------------------------------------------------------------------------------------------------
[23:35:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:36:33    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[23:36:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[23:36:39    INFO]  - Will gen. input-parameter errors ...
[23:36:42    INFO]  - starting ANNZ::loadReaders() ... 
[23:36:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:41:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:41:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:41:37    INFO]  -----------------------------------------------------------------------------------------------------------
[23:41:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:42:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:42:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:42:49    INFO]  -----------------------------------------------------------------------------------------------------------
[23:42:49    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:42:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:42:51    INFO]  - will try to derive a bias correction ... 
[23:42:51    INFO]  - will validate that training produced an XML file for later ... 
[23:42:51    INFO]  - starting ANNZ::loadReaders() ... 
[23:42:56    INFO]  - will validate that the training was not a complete failure ... 
[23:42:57    INFO]  - training seems to have been successful! will move on ...
[23:42:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:43:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:43:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:43:03    INFO] ----------------------------------------------------------------------------------------------------
[23:43:03    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:43:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:43:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:43:03    INFO]    - weights:            1
[23:43:03    INFO] ----------------------------------------------------------------------------------------------------
[23:43:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:43:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[23:43:13    INFO]  - Will gen. input-parameter errors ...
[23:43:16    INFO]  - starting ANNZ::loadReaders() ... 
[23:43:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:49:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:49:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:49:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:49:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:50:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:50:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:50:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:50:46    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:50:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:50:48    INFO]  - will validate that the bias-correction actually improved the result ...
[23:50:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:50:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[23:50:56    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_15/plots/
[23:51:08        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_15/plots output/SPEC_advanced7/regres/train/ANNZ_15/plots_biasCor_before
[23:51:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:51:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[23:51:15    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_15/plots/
[23:51:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_15/plots output/SPEC_advanced7/regres/train/ANNZ_15/plots_biasCor_after
[23:51:27    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.8969] , after the bias-correction: [0.0439166 , 5.81088] --> will KEEP the correction !

(23:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:51 INFO) 
[23:51:32    INFO]  -----------------------------------------------------
[23:51:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:51:32    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:32    INFO]  - starting ANNZ::Init()  ... 
[23:51:34    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_16/saveOpt.txt ...
[23:51:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:51:40    INFO] ----------------------------------------------------------------------------------------------------
[23:51:40    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=290:BoostType=AdaBoost:VarTransform=N,P
[23:51:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:51:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:51:40    INFO]      cuts (train):        ,
[23:51:40    INFO]      cuts (valid):       
[23:51:40    INFO]    - weights:            1
[23:51:40    INFO] ----------------------------------------------------------------------------------------------------
[23:51:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:52:01    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[23:52:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[23:52:03    INFO]  - Will gen. input-parameter errors ...
[23:52:05    INFO]  - starting ANNZ::loadReaders() ... 
[23:52:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:54:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:54:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:54:12    INFO]  -----------------------------------------------------------------------------------------------------------
[23:54:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:54:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:54:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:54:39    INFO]  -----------------------------------------------------------------------------------------------------------
[23:54:39    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:54:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:54:39    INFO]  - will try to derive a bias correction ... 
[23:54:39    INFO]  - will validate that training produced an XML file for later ... 
[23:54:39    INFO]  - starting ANNZ::loadReaders() ... 
[23:54:41    INFO]  - will validate that the training was not a complete failure ... 
[23:54:41    INFO]  - training seems to have been successful! will move on ...
[23:54:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:54:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:54:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:54:45    INFO] ----------------------------------------------------------------------------------------------------
[23:54:45    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:54:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:54:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:54:45    INFO]    - weights:            1
[23:54:45    INFO] ----------------------------------------------------------------------------------------------------
[23:54:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:54:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[23:54:52    INFO]  - Will gen. input-parameter errors ...
[23:54:54    INFO]  - starting ANNZ::loadReaders() ... 
[23:54:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[23:57:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:57:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:57:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:57:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[23:57:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:57:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:57:47    INFO]  -----------------------------------------------------------------------------------------------------------
[23:57:47    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:57:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:57:48    INFO]  - will validate that the bias-correction actually improved the result ...
[23:57:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:57:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[23:57:54    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_16/plots/
[23:58:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_16/plots output/SPEC_advanced7/regres/train/ANNZ_16/plots_biasCor_before
[23:58:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:58:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[23:58:11    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_16/plots/
[23:58:23        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_16/plots output/SPEC_advanced7/regres/train/ANNZ_16/plots_biasCor_after
[23:58:23    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40459] , after the bias-correction: [0.0447009 , 5.72421] --> will KEEP the correction !

(23:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:58 INFO) 
[23:58:26    INFO]  -----------------------------------------------------
[23:58:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:58:26    INFO]  -----------------------------------------------------------------------------------------------------------
[23:58:27    INFO]  - starting ANNZ::Init()  ... 
[23:58:28    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_17/saveOpt.txt ...
[23:58:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:58:34    INFO] ----------------------------------------------------------------------------------------------------
[23:58:34    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=410:BoostType=AdaBoost:VarTransform=N
[23:58:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:58:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:58:34    INFO]      cuts (train):        ,
[23:58:34    INFO]      cuts (valid):       
[23:58:34    INFO]    - weights:            1
[23:58:34    INFO] ----------------------------------------------------------------------------------------------------
[23:58:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:59:04    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[23:59:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[23:59:07    INFO]  - Will gen. input-parameter errors ...
[23:59:08    INFO]  - starting ANNZ::loadReaders() ... 
[23:59:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[00:00:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:00:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:00:45    INFO]  -----------------------------------------------------------------------------------------------------------
[00:00:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[00:01:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:01:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:01:08    INFO]  -----------------------------------------------------------------------------------------------------------
[00:01:08    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:01:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:01:09    INFO]  - will try to derive a bias correction ... 
[00:01:09    INFO]  - will validate that training produced an XML file for later ... 
[00:01:09    INFO]  - starting ANNZ::loadReaders() ... 
[00:01:11    INFO]  - will validate that the training was not a complete failure ... 
[00:01:11    INFO]  - training seems to have been successful! will move on ...
[00:01:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:01:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:01:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:01:16    INFO] ----------------------------------------------------------------------------------------------------
[00:01:16    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:01:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:01:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:01:16    INFO]    - weights:            1
[00:01:16    INFO] ----------------------------------------------------------------------------------------------------
[00:01:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:01:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[00:01:25    INFO]  - Will gen. input-parameter errors ...
[00:01:27    INFO]  - starting ANNZ::loadReaders() ... 
[00:01:32    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[00:03:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:03:17    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[00:03:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:03:43    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:43    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:03:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:03:44    INFO]  - will validate that the bias-correction actually improved the result ...
[00:03:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:03:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
Warning in <Fit>: Fit data is empty 
[00:03:50    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_17/plots/
[00:04:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_17/plots output/SPEC_advanced7/regres/train/ANNZ_17/plots_biasCor_before
[00:04:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:04:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
Warning in <Fit>: Fit data is empty 
[00:04:07    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_17/plots/
[00:04:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_17/plots output/SPEC_advanced7/regres/train/ANNZ_17/plots_biasCor_after
[00:04:20    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12306] , after the bias-correction: [0.0497423 , 6.02726] --> will KEEP the correction !

(00:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:04 INFO) 
[00:04:23    INFO]  -----------------------------------------------------
[00:04:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:04:23    INFO]  -----------------------------------------------------------------------------------------------------------
[00:04:24    INFO]  - starting ANNZ::Init()  ... 
[00:04:26    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_18/saveOpt.txt ...
[00:04:31    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:04:32    INFO] ----------------------------------------------------------------------------------------------------
[00:04:32    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=310:BoostType=AdaBoost:VarTransform=N,P
[00:04:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:04:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:04:32    INFO]      cuts (train):        ,
[00:04:32    INFO]      cuts (valid):       
[00:04:32    INFO]    - weights:            1
[00:04:32    INFO] ----------------------------------------------------------------------------------------------------
[00:04:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:04:54    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[00:04:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[00:04:56    INFO]  - Will gen. input-parameter errors ...
[00:04:57    INFO]  - starting ANNZ::loadReaders() ... 
[00:05:01    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[00:07:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:07:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:07:06    INFO]  -----------------------------------------------------------------------------------------------------------
[00:07:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[00:07:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:07:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:07:41    INFO]  -----------------------------------------------------------------------------------------------------------
[00:07:41    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:07:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:07:42    INFO]  - will try to derive a bias correction ... 
[00:07:42    INFO]  - will validate that training produced an XML file for later ... 
[00:07:42    INFO]  - starting ANNZ::loadReaders() ... 
[00:07:43    INFO]  - will validate that the training was not a complete failure ... 
[00:07:43    INFO]  - training seems to have been successful! will move on ...
[00:07:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:07:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:07:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:07:47    INFO] ----------------------------------------------------------------------------------------------------
[00:07:47    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:07:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:07:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:07:47    INFO]    - weights:            1
[00:07:47    INFO] ----------------------------------------------------------------------------------------------------
[00:07:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:07:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[00:07:55    INFO]  - Will gen. input-parameter errors ...
[00:07:56    INFO]  - starting ANNZ::loadReaders() ... 
[00:08:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[00:10:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:10:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:10:24    INFO]  -----------------------------------------------------------------------------------------------------------
[00:10:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[00:11:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:11:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:11:02    INFO]  -----------------------------------------------------------------------------------------------------------
[00:11:02    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:11:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:11:03    INFO]  - will validate that the bias-correction actually improved the result ...
[00:11:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:11:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
Warning in <Fit>: Fit data is empty 
[00:11:09    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_18/plots/
[00:11:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_18/plots output/SPEC_advanced7/regres/train/ANNZ_18/plots_biasCor_before
[00:11:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:11:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[00:11:26    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_18/plots/
[00:11:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_18/plots output/SPEC_advanced7/regres/train/ANNZ_18/plots_biasCor_after
[00:11:38    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40465] , after the bias-correction: [0.0435806 , 5.8127] --> will KEEP the correction !

(00:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=550:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:11 INFO) 
[00:11:42    INFO]  -----------------------------------------------------
[00:11:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:11:42    INFO]  -----------------------------------------------------------------------------------------------------------
[00:11:43    INFO]  - starting ANNZ::Init()  ... 
[00:11:44    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_19/saveOpt.txt ...
[00:11:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:11:50    INFO] ----------------------------------------------------------------------------------------------------
[00:11:50    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=550:BoostType=AdaBoostR2:VarTransform=N,P
[00:11:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:11:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:11:50    INFO]      cuts (train):        ,
[00:11:50    INFO]      cuts (valid):       
[00:11:50    INFO]    - weights:            1
[00:11:50    INFO] ----------------------------------------------------------------------------------------------------
[00:11:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:12:53    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[00:12:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[00:12:58    INFO]  - Will gen. input-parameter errors ...
[00:13:00    INFO]  - starting ANNZ::loadReaders() ... 
[00:13:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[00:29:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:29:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:29:46    INFO]  -----------------------------------------------------------------------------------------------------------
[00:29:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[00:33:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:33:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:33:34    INFO]  -----------------------------------------------------------------------------------------------------------
[00:33:34    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:33:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:33:36    INFO]  - will try to derive a bias correction ... 
[00:33:36    INFO]  - will validate that training produced an XML file for later ... 
[00:33:36    INFO]  - starting ANNZ::loadReaders() ... 
[00:33:40    INFO]  - will validate that the training was not a complete failure ... 
[00:33:40    INFO]  - training seems to have been successful! will move on ...
[00:33:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:33:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:33:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:33:46    INFO] ----------------------------------------------------------------------------------------------------
[00:33:46    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:33:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:33:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:33:46    INFO]    - weights:            1
[00:33:46    INFO] ----------------------------------------------------------------------------------------------------
[00:33:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:33:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[00:33:55    INFO]  - Will gen. input-parameter errors ...
[00:33:57    INFO]  - starting ANNZ::loadReaders() ... 
[00:34:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[00:51:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:51:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:51:18    INFO]  -----------------------------------------------------------------------------------------------------------
[00:51:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[00:55:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:55:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:55:22    INFO]  -----------------------------------------------------------------------------------------------------------
[00:55:22    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:55:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:55:24    INFO]  - will validate that the bias-correction actually improved the result ...
[00:55:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:55:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[00:55:32    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_19/plots/
[00:55:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_19/plots output/SPEC_advanced7/regres/train/ANNZ_19/plots_biasCor_before
[00:55:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:55:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[00:55:55    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_19/plots/
[00:56:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_19/plots output/SPEC_advanced7/regres/train/ANNZ_19/plots_biasCor_after
[00:56:10    INFO]  - Got original [KS-test,N_poiss]: [0.0700202 , 6.51533] , after the bias-correction: [0.0323773 , 5.58294] --> will KEEP the correction !

(00:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:56 INFO) 
[00:56:14    INFO]  -----------------------------------------------------
[00:56:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:56:14    INFO]  -----------------------------------------------------------------------------------------------------------
[00:56:15    INFO]  - starting ANNZ::Init()  ... 
[00:56:16    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_20/saveOpt.txt ...
[00:56:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:56:24    INFO] ----------------------------------------------------------------------------------------------------
[00:56:24    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N
[00:56:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:56:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:56:24    INFO]      cuts (train):        ,
[00:56:24    INFO]      cuts (valid):       
[00:56:24    INFO]    - weights:            1
[00:56:24    INFO] ----------------------------------------------------------------------------------------------------
[00:56:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:57:02    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[00:57:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[00:57:04    INFO]  - Will gen. input-parameter errors ...
[00:57:06    INFO]  - starting ANNZ::loadReaders() ... 
[00:57:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[00:59:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:59:10    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:59:10    INFO]  -----------------------------------------------------------------------------------------------------------
[00:59:10    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[00:59:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:59:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:59:39    INFO]  -----------------------------------------------------------------------------------------------------------
[00:59:39    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:59:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:59:41    INFO]  - will try to derive a bias correction ... 
[00:59:41    INFO]  - will validate that training produced an XML file for later ... 
[00:59:41    INFO]  - starting ANNZ::loadReaders() ... 
[00:59:43    INFO]  - will validate that the training was not a complete failure ... 
[00:59:43    INFO]  - training seems to have been successful! will move on ...
[00:59:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:59:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:59:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:59:48    INFO] ----------------------------------------------------------------------------------------------------
[00:59:48    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:59:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:59:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:59:48    INFO]    - weights:            1
[00:59:48    INFO] ----------------------------------------------------------------------------------------------------
[00:59:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:59:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[00:59:58    INFO]  - Will gen. input-parameter errors ...
[00:59:59    INFO]  - starting ANNZ::loadReaders() ... 
[01:00:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:02:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:02:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:02:01    INFO]  -----------------------------------------------------------------------------------------------------------
[01:02:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:02:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:02:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:02:42    INFO]  -----------------------------------------------------------------------------------------------------------
[01:02:42    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:02:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:02:43    INFO]  - will validate that the bias-correction actually improved the result ...
[01:02:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:02:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
Warning in <Fit>: Fit data is empty 
[01:02:50    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_20/plots/
[01:03:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_20/plots output/SPEC_advanced7/regres/train/ANNZ_20/plots_biasCor_before
[01:03:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:03:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
Warning in <Fit>: Fit data is empty 
[01:03:07    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_20/plots/
[01:03:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_20/plots output/SPEC_advanced7/regres/train/ANNZ_20/plots_biasCor_after
[01:03:20    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12424] , after the bias-correction: [0.0495183 , 5.94383] --> will KEEP the correction !

(01:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:03 INFO) 
[01:03:24    INFO]  -----------------------------------------------------
[01:03:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:03:24    INFO]  -----------------------------------------------------------------------------------------------------------
[01:03:25    INFO]  - starting ANNZ::Init()  ... 
[01:03:26    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_21/saveOpt.txt ...
[01:03:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:03:32    INFO] ----------------------------------------------------------------------------------------------------
[01:03:32    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=540:BoostType=AdaBoost:VarTransform=N,P
[01:03:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:03:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:03:32    INFO]      cuts (train):        ,
[01:03:32    INFO]      cuts (valid):       
[01:03:32    INFO]    - weights:            1
[01:03:32    INFO] ----------------------------------------------------------------------------------------------------
[01:03:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:04:09    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[01:04:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[01:04:12    INFO]  - Will gen. input-parameter errors ...
[01:04:14    INFO]  - starting ANNZ::loadReaders() ... 
[01:04:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:07:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:07:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:07:48    INFO]  -----------------------------------------------------------------------------------------------------------
[01:07:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:08:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:08:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:08:38    INFO]  -----------------------------------------------------------------------------------------------------------
[01:08:39    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:08:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:08:40    INFO]  - will try to derive a bias correction ... 
[01:08:40    INFO]  - will validate that training produced an XML file for later ... 
[01:08:40    INFO]  - starting ANNZ::loadReaders() ... 
[01:08:42    INFO]  - will validate that the training was not a complete failure ... 
[01:08:42    INFO]  - training seems to have been successful! will move on ...
[01:08:42    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:08:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:08:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:08:47    INFO] ----------------------------------------------------------------------------------------------------
[01:08:47    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:08:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:08:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:08:47    INFO]    - weights:            1
[01:08:47    INFO] ----------------------------------------------------------------------------------------------------
[01:08:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:08:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[01:08:56    INFO]  - Will gen. input-parameter errors ...
[01:08:57    INFO]  - starting ANNZ::loadReaders() ... 
[01:09:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:12:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:12:05    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:12:05    INFO]  -----------------------------------------------------------------------------------------------------------
[01:12:05    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:12:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:12:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:12:51    INFO]  -----------------------------------------------------------------------------------------------------------
[01:12:51    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:12:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:12:52    INFO]  - will validate that the bias-correction actually improved the result ...
[01:12:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:12:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
Warning in <Fit>: Fit data is empty 
[01:12:59    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_21/plots/
[01:13:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_21/plots output/SPEC_advanced7/regres/train/ANNZ_21/plots_biasCor_before
[01:13:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:13:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
Warning in <Fit>: Fit data is empty 
[01:13:18    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_21/plots/
[01:13:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_21/plots output/SPEC_advanced7/regres/train/ANNZ_21/plots_biasCor_after
[01:13:33    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43565] , after the bias-correction: [0.0444768 , 5.70774] --> will KEEP the correction !

(01:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:13 INFO) 
[01:13:37    INFO]  -----------------------------------------------------
[01:13:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:13:37    INFO]  -----------------------------------------------------------------------------------------------------------
[01:13:37    INFO]  - starting ANNZ::Init()  ... 
[01:13:41    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_22/saveOpt.txt ...
[01:13:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:13:48    INFO] ----------------------------------------------------------------------------------------------------
[01:13:48    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N,P
[01:13:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:13:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:13:48    INFO]      cuts (train):        ,
[01:13:48    INFO]      cuts (valid):       
[01:13:48    INFO]    - weights:            1
[01:13:48    INFO] ----------------------------------------------------------------------------------------------------
[01:13:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:14:30    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[01:14:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[01:14:35    INFO]  - Will gen. input-parameter errors ...
[01:14:37    INFO]  - starting ANNZ::loadReaders() ... 
[01:14:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:18:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:18:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:18:30    INFO]  -----------------------------------------------------------------------------------------------------------
[01:18:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:19:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:19:25    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:19:25    INFO]  -----------------------------------------------------------------------------------------------------------
[01:19:25    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:19:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:19:27    INFO]  - will try to derive a bias correction ... 
[01:19:27    INFO]  - will validate that training produced an XML file for later ... 
[01:19:27    INFO]  - starting ANNZ::loadReaders() ... 
[01:19:31    INFO]  - will validate that the training was not a complete failure ... 
[01:19:31    INFO]  - training seems to have been successful! will move on ...
[01:19:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:19:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:19:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:19:41    INFO] ----------------------------------------------------------------------------------------------------
[01:19:41    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:19:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:19:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:19:41    INFO]    - weights:            1
[01:19:41    INFO] ----------------------------------------------------------------------------------------------------
[01:19:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:19:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[01:19:51    INFO]  - Will gen. input-parameter errors ...
[01:19:54    INFO]  - starting ANNZ::loadReaders() ... 
[01:20:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:24:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:24:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:24:01    INFO]  -----------------------------------------------------------------------------------------------------------
[01:24:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:24:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:24:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:24:55    INFO]  -----------------------------------------------------------------------------------------------------------
[01:24:55    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:24:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:24:57    INFO]  - will validate that the bias-correction actually improved the result ...
[01:24:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:24:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[01:25:04    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_22/plots/
[01:25:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_22/plots output/SPEC_advanced7/regres/train/ANNZ_22/plots_biasCor_before
[01:25:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:25:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[01:25:22    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_22/plots/
[01:25:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_22/plots output/SPEC_advanced7/regres/train/ANNZ_22/plots_biasCor_after
[01:25:35    INFO]  - Got original [KS-test,N_poiss]: [0.0932109 , 6.88301] , after the bias-correction: [0.0436926 , 5.59882] --> will KEEP the correction !

(01:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:25 INFO) 
[01:25:39    INFO]  -----------------------------------------------------
[01:25:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:25:39    INFO]  -----------------------------------------------------------------------------------------------------------
[01:25:40    INFO]  - starting ANNZ::Init()  ... 
[01:25:45    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_23/saveOpt.txt ...
[01:25:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:25:52    INFO] ----------------------------------------------------------------------------------------------------
[01:25:52    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[01:25:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:25:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:25:52    INFO]      cuts (train):        ,
[01:25:52    INFO]      cuts (valid):       
[01:25:52    INFO]    - weights:            1
[01:25:52    INFO] ----------------------------------------------------------------------------------------------------
[01:25:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:26:49    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[01:26:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[01:26:55    INFO]  - Will gen. input-parameter errors ...
[01:27:00    INFO]  - starting ANNZ::loadReaders() ... 
[01:27:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:30:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:30:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:30:03    INFO]  -----------------------------------------------------------------------------------------------------------
[01:30:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:30:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:30:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:30:43    INFO]  -----------------------------------------------------------------------------------------------------------
[01:30:44    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:30:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:30:46    INFO]  - will try to derive a bias correction ... 
[01:30:46    INFO]  - will validate that training produced an XML file for later ... 
[01:30:46    INFO]  - starting ANNZ::loadReaders() ... 
[01:30:51    INFO]  - will validate that the training was not a complete failure ... 
[01:30:52    INFO]  - training seems to have been successful! will move on ...
[01:30:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:31:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:31:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:31:02    INFO] ----------------------------------------------------------------------------------------------------
[01:31:02    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:31:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:31:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:31:02    INFO]    - weights:            1
[01:31:02    INFO] ----------------------------------------------------------------------------------------------------
[01:31:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:31:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[01:31:16    INFO]  - Will gen. input-parameter errors ...
[01:31:21    INFO]  - starting ANNZ::loadReaders() ... 
[01:31:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:34:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:34:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:34:43    INFO]  -----------------------------------------------------------------------------------------------------------
[01:34:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:35:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:35:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:35:31    INFO]  -----------------------------------------------------------------------------------------------------------
[01:35:31    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:35:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:35:33    INFO]  - will validate that the bias-correction actually improved the result ...
[01:35:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:35:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[01:35:46    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_23/plots/
[01:36:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_23/plots output/SPEC_advanced7/regres/train/ANNZ_23/plots_biasCor_before
[01:36:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:36:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[01:36:23    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_23/plots/
[01:36:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_23/plots output/SPEC_advanced7/regres/train/ANNZ_23/plots_biasCor_after
[01:36:40    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(01:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:36 INFO) 
[01:36:45    INFO]  -----------------------------------------------------
[01:36:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:36:45    INFO]  -----------------------------------------------------------------------------------------------------------
[01:36:46    INFO]  - starting ANNZ::Init()  ... 
[01:36:48    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_24/saveOpt.txt ...
[01:36:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:36:55    INFO] ----------------------------------------------------------------------------------------------------
[01:36:55    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=410:BoostType=AdaBoost:VarTransform=N,P
[01:36:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:36:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:36:55    INFO]      cuts (train):        ,
[01:36:55    INFO]      cuts (valid):       
[01:36:55    INFO]    - weights:            1
[01:36:55    INFO] ----------------------------------------------------------------------------------------------------
[01:36:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:37:28    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[01:37:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[01:37:30    INFO]  - Will gen. input-parameter errors ...
[01:37:34    INFO]  - starting ANNZ::loadReaders() ... 
[01:37:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:40:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:40:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:40:12    INFO]  -----------------------------------------------------------------------------------------------------------
[01:40:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:40:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:40:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:40:48    INFO]  -----------------------------------------------------------------------------------------------------------
[01:40:49    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:40:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:40:50    INFO]  - will try to derive a bias correction ... 
[01:40:50    INFO]  - will validate that training produced an XML file for later ... 
[01:40:50    INFO]  - starting ANNZ::loadReaders() ... 
[01:40:51    INFO]  - will validate that the training was not a complete failure ... 
[01:40:51    INFO]  - training seems to have been successful! will move on ...
[01:40:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:40:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:41:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:41:00    INFO] ----------------------------------------------------------------------------------------------------
[01:41:00    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:41:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:41:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:41:00    INFO]    - weights:            1
[01:41:00    INFO] ----------------------------------------------------------------------------------------------------
[01:41:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:41:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[01:41:08    INFO]  - Will gen. input-parameter errors ...
[01:41:12    INFO]  - starting ANNZ::loadReaders() ... 
[01:41:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:43:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:43:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:43:59    INFO]  -----------------------------------------------------------------------------------------------------------
[01:43:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:44:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:44:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:44:40    INFO]  -----------------------------------------------------------------------------------------------------------
[01:44:40    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:44:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:44:41    INFO]  - will validate that the bias-correction actually improved the result ...
[01:44:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:44:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
Warning in <Fit>: Fit data is empty 
[01:44:48    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_24/plots/
[01:45:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_24/plots output/SPEC_advanced7/regres/train/ANNZ_24/plots_biasCor_before
[01:45:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:45:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[01:45:06    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_24/plots/
[01:45:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_24/plots output/SPEC_advanced7/regres/train/ANNZ_24/plots_biasCor_after
[01:45:18    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40316] , after the bias-correction: [0.0434685 , 5.7673] --> will KEEP the correction !

(01:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:45 INFO) 
[01:45:23    INFO]  -----------------------------------------------------
[01:45:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:45:23    INFO]  -----------------------------------------------------------------------------------------------------------
[01:45:24    INFO]  - starting ANNZ::Init()  ... 
[01:45:27    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_25/saveOpt.txt ...
[01:45:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:45:33    INFO] ----------------------------------------------------------------------------------------------------
[01:45:33    INFO]  - will book (ANNZ_25) method(BDT) with options: :NTrees=350:BoostType=AdaBoost:VarTransform=P
[01:45:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:45:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:45:33    INFO]      cuts (train):        ,
[01:45:33    INFO]      cuts (valid):       
[01:45:33    INFO]    - weights:            1
[01:45:33    INFO] ----------------------------------------------------------------------------------------------------
[01:45:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:46:05    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_25/ANNZ_25_weights/saveTrainOpt_ANNZ_25.txt ...
[01:46:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[01:46:07    INFO]  - Will gen. input-parameter errors ...
[01:46:10    INFO]  - starting ANNZ::loadReaders() ... 
[01:46:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:48:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:48:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:48:15    INFO]  -----------------------------------------------------------------------------------------------------------
[01:48:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:48:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:48:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:48:42    INFO]  -----------------------------------------------------------------------------------------------------------
[01:48:42    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:48:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:48:43    INFO]  - will try to derive a bias correction ... 
[01:48:43    INFO]  - will validate that training produced an XML file for later ... 
[01:48:43    INFO]  - starting ANNZ::loadReaders() ... 
[01:48:45    INFO]  - will validate that the training was not a complete failure ... 
[01:48:45    INFO]  - training seems to have been successful! will move on ...
[01:48:45    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:48:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:48:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:48:55    INFO] ----------------------------------------------------------------------------------------------------
[01:48:55    INFO]  - will book (ANNZ_25_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:48:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:48:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:48:55    INFO]    - weights:            1
[01:48:55    INFO] ----------------------------------------------------------------------------------------------------
[01:48:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:49:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[01:49:04    INFO]  - Will gen. input-parameter errors ...
[01:49:08    INFO]  - starting ANNZ::loadReaders() ... 
[01:49:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[01:51:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:51:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:51:18    INFO]  -----------------------------------------------------------------------------------------------------------
[01:51:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[01:51:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:51:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:51:50    INFO]  -----------------------------------------------------------------------------------------------------------
[01:51:50    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:51:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:51:51    INFO]  - will validate that the bias-correction actually improved the result ...
[01:51:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:51:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
Warning in <Fit>: Fit data is empty 
[01:51:58    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_25/plots/
[01:52:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_25/plots output/SPEC_advanced7/regres/train/ANNZ_25/plots_biasCor_before
[01:52:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:52:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
Warning in <Fit>: Fit data is empty 
[01:52:15    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_25/plots/
[01:52:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_25/plots output/SPEC_advanced7/regres/train/ANNZ_25/plots_biasCor_after
[01:52:28    INFO]  - Got original [KS-test,N_poiss]: [0.0722609 , 6.20015] , after the bias-correction: [0.0332462 , 5.38942] --> will KEEP the correction !

(01:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:52 INFO) 
[01:52:32    INFO]  -----------------------------------------------------
[01:52:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:52:32    INFO]  -----------------------------------------------------------------------------------------------------------
[01:52:32    INFO]  - starting ANNZ::Init()  ... 
[01:52:36    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_26/saveOpt.txt ...
[01:52:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:52:42    INFO] ----------------------------------------------------------------------------------------------------
[01:52:42    INFO]  - will book (ANNZ_26) method(BDT) with options: :NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P
[01:52:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:52:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:52:42    INFO]      cuts (train):        ,
[01:52:42    INFO]      cuts (valid):       
[01:52:42    INFO]    - weights:            1
[01:52:42    INFO] ----------------------------------------------------------------------------------------------------
[01:52:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:53:28    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_26/ANNZ_26_weights/saveTrainOpt_ANNZ_26.txt ...
[01:53:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[01:53:32    INFO]  - Will gen. input-parameter errors ...
[01:53:35    INFO]  - starting ANNZ::loadReaders() ... 
[01:53:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:01:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:01:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:01:38    INFO]  -----------------------------------------------------------------------------------------------------------
[02:01:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:04:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:04:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:04:06    INFO]  -----------------------------------------------------------------------------------------------------------
[02:04:07    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:04:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:04:08    INFO]  - will try to derive a bias correction ... 
[02:04:08    INFO]  - will validate that training produced an XML file for later ... 
[02:04:08    INFO]  - starting ANNZ::loadReaders() ... 
[02:04:12    INFO]  - will validate that the training was not a complete failure ... 
[02:04:12    INFO]  - training seems to have been successful! will move on ...
[02:04:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:04:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:04:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:04:23    INFO] ----------------------------------------------------------------------------------------------------
[02:04:23    INFO]  - will book (ANNZ_26_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:04:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:04:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:04:23    INFO]    - weights:            1
[02:04:23    INFO] ----------------------------------------------------------------------------------------------------
[02:04:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:04:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[02:04:32    INFO]  - Will gen. input-parameter errors ...
[02:04:35    INFO]  - starting ANNZ::loadReaders() ... 
[02:04:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:12:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:12:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:12:21    INFO]  -----------------------------------------------------------------------------------------------------------
[02:12:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:14:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:14:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:14:07    INFO]  -----------------------------------------------------------------------------------------------------------
[02:14:07    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:14:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:14:08    INFO]  - will validate that the bias-correction actually improved the result ...
[02:14:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:14:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[02:14:15    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_26/plots/
[02:14:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_26/plots output/SPEC_advanced7/regres/train/ANNZ_26/plots_biasCor_before
[02:14:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:14:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[02:14:33    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_26/plots/
[02:14:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_26/plots output/SPEC_advanced7/regres/train/ANNZ_26/plots_biasCor_after
[02:14:45    INFO]  - Got original [KS-test,N_poiss]: [0.0701322 , 6.63987] , after the bias-correction: [0.0337217 , 5.45539] --> will KEEP the correction !

(02:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:14 INFO) 
[02:14:49    INFO]  -----------------------------------------------------
[02:14:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:14:49    INFO]  -----------------------------------------------------------------------------------------------------------
[02:14:50    INFO]  - starting ANNZ::Init()  ... 
[02:14:51    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_27/saveOpt.txt ...
[02:14:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:14:58    INFO] ----------------------------------------------------------------------------------------------------
[02:14:58    INFO]  - will book (ANNZ_27) method(BDT) with options: :NTrees=520:BoostType=AdaBoost:VarTransform=N,P
[02:14:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:14:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:14:58    INFO]      cuts (train):        ,
[02:14:58    INFO]      cuts (valid):       
[02:14:58    INFO]    - weights:            1
[02:14:58    INFO] ----------------------------------------------------------------------------------------------------
[02:14:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:15:36    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_27/ANNZ_27_weights/saveTrainOpt_ANNZ_27.txt ...
[02:15:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[02:15:38    INFO]  - Will gen. input-parameter errors ...
[02:15:41    INFO]  - starting ANNZ::loadReaders() ... 
[02:15:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:19:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:19:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:19:13    INFO]  -----------------------------------------------------------------------------------------------------------
[02:19:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:19:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:19:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:19:59    INFO]  -----------------------------------------------------------------------------------------------------------
[02:19:59    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:20:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:20:00    INFO]  - will try to derive a bias correction ... 
[02:20:00    INFO]  - will validate that training produced an XML file for later ... 
[02:20:00    INFO]  - starting ANNZ::loadReaders() ... 
[02:20:02    INFO]  - will validate that the training was not a complete failure ... 
[02:20:02    INFO]  - training seems to have been successful! will move on ...
[02:20:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:20:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:20:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:20:12    INFO] ----------------------------------------------------------------------------------------------------
[02:20:12    INFO]  - will book (ANNZ_27_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:20:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:20:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:20:12    INFO]    - weights:            1
[02:20:12    INFO] ----------------------------------------------------------------------------------------------------
[02:20:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:20:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[02:20:20    INFO]  - Will gen. input-parameter errors ...
[02:20:24    INFO]  - starting ANNZ::loadReaders() ... 
[02:20:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:23:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:23:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:23:50    INFO]  -----------------------------------------------------------------------------------------------------------
[02:23:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:24:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:24:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:24:34    INFO]  -----------------------------------------------------------------------------------------------------------
[02:24:34    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:24:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:24:35    INFO]  - will validate that the bias-correction actually improved the result ...
[02:24:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:24:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
Warning in <Fit>: Fit data is empty 
[02:24:41    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_27/plots/
[02:24:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_27/plots output/SPEC_advanced7/regres/train/ANNZ_27/plots_biasCor_before
[02:24:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:24:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
Warning in <Fit>: Fit data is empty 
[02:24:58    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_27/plots/
[02:25:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_27/plots output/SPEC_advanced7/regres/train/ANNZ_27/plots_biasCor_after
[02:25:10    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43715] , after the bias-correction: [0.0447009 , 5.69905] --> will KEEP the correction !

(02:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:25 INFO) 
[02:25:14    INFO]  -----------------------------------------------------
[02:25:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:25:14    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:15    INFO]  - starting ANNZ::Init()  ... 
[02:25:19    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_28/saveOpt.txt ...
[02:25:26    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:25:26    INFO] ----------------------------------------------------------------------------------------------------
[02:25:26    INFO]  - will book (ANNZ_28) method(BDT) with options: :NTrees=300:BoostType=Bagging:VarTransform=N
[02:25:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:25:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:25:26    INFO]      cuts (train):        ,
[02:25:26    INFO]      cuts (valid):       
[02:25:26    INFO]    - weights:            1
[02:25:26    INFO] ----------------------------------------------------------------------------------------------------
[02:25:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:26:01    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_28/ANNZ_28_weights/saveTrainOpt_ANNZ_28.txt ...
[02:26:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[02:26:04    INFO]  - Will gen. input-parameter errors ...
[02:26:08    INFO]  - starting ANNZ::loadReaders() ... 
[02:26:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:27:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:27:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:27:47    INFO]  -----------------------------------------------------------------------------------------------------------
[02:27:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:28:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:28:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:28:17    INFO]  -----------------------------------------------------------------------------------------------------------
[02:28:17    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:28:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:28:19    INFO]  - will try to derive a bias correction ... 
[02:28:19    INFO]  - will validate that training produced an XML file for later ... 
[02:28:19    INFO]  - starting ANNZ::loadReaders() ... 
[02:28:24    INFO]  - will validate that the training was not a complete failure ... 
[02:28:24    INFO]  - training seems to have been successful! will move on ...
[02:28:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:28:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:28:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:28:33    INFO] ----------------------------------------------------------------------------------------------------
[02:28:33    INFO]  - will book (ANNZ_28_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:28:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:28:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:28:33    INFO]    - weights:            1
[02:28:33    INFO] ----------------------------------------------------------------------------------------------------
[02:28:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:28:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[02:28:44    INFO]  - Will gen. input-parameter errors ...
[02:28:47    INFO]  - starting ANNZ::loadReaders() ... 
[02:28:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:30:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:30:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:30:29    INFO]  -----------------------------------------------------------------------------------------------------------
[02:30:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:30:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:30:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:30:52    INFO]  -----------------------------------------------------------------------------------------------------------
[02:30:52    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:30:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:30:54    INFO]  - will validate that the bias-correction actually improved the result ...
[02:30:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:30:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
[02:31:00    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_28/plots/
[02:31:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_28/plots output/SPEC_advanced7/regres/train/ANNZ_28/plots_biasCor_before
[02:31:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:31:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
[02:31:19    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_28/plots/
[02:31:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_28/plots output/SPEC_advanced7/regres/train/ANNZ_28/plots_biasCor_after
[02:31:35    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.69274] , after the bias-correction: [0.0464934 , 5.64462] --> will KEEP the correction !

(02:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:31 INFO) 
[02:31:40    INFO]  -----------------------------------------------------
[02:31:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:31:40    INFO]  -----------------------------------------------------------------------------------------------------------
[02:31:41    INFO]  - starting ANNZ::Init()  ... 
[02:31:42    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_29/saveOpt.txt ...
[02:31:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:31:50    INFO] ----------------------------------------------------------------------------------------------------
[02:31:50    INFO]  - will book (ANNZ_29) method(BDT) with options: :NTrees=330:BoostType=Bagging:VarTransform=N,P
[02:31:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:31:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:31:50    INFO]      cuts (train):        ,
[02:31:50    INFO]      cuts (valid):       
[02:31:50    INFO]    - weights:            1
[02:31:50    INFO] ----------------------------------------------------------------------------------------------------
[02:31:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:32:29    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_29/ANNZ_29_weights/saveTrainOpt_ANNZ_29.txt ...
[02:32:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[02:32:32    INFO]  - Will gen. input-parameter errors ...
[02:32:34    INFO]  - starting ANNZ::loadReaders() ... 
[02:32:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:35:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:35:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:35:38    INFO]  -----------------------------------------------------------------------------------------------------------
[02:35:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:36:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:36:25    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:36:25    INFO]  -----------------------------------------------------------------------------------------------------------
[02:36:25    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:36:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:36:27    INFO]  - will try to derive a bias correction ... 
[02:36:27    INFO]  - will validate that training produced an XML file for later ... 
[02:36:27    INFO]  - starting ANNZ::loadReaders() ... 
[02:36:31    INFO]  - will validate that the training was not a complete failure ... 
[02:36:31    INFO]  - training seems to have been successful! will move on ...
[02:36:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:36:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:36:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:36:36    INFO] ----------------------------------------------------------------------------------------------------
[02:36:36    INFO]  - will book (ANNZ_29_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:36:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:36:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:36:36    INFO]    - weights:            1
[02:36:36    INFO] ----------------------------------------------------------------------------------------------------
[02:36:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:36:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[02:36:46    INFO]  - Will gen. input-parameter errors ...
[02:36:48    INFO]  - starting ANNZ::loadReaders() ... 
[02:36:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:40:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:40:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:40:06    INFO]  -----------------------------------------------------------------------------------------------------------
[02:40:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:40:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:40:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:40:56    INFO]  -----------------------------------------------------------------------------------------------------------
[02:40:57    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:40:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:40:59    INFO]  - will validate that the bias-correction actually improved the result ...
[02:40:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:40:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
[02:41:08    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_29/plots/
[02:41:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_29/plots output/SPEC_advanced7/regres/train/ANNZ_29/plots_biasCor_before
[02:41:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:41:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
[02:41:31    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_29/plots/
[02:41:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_29/plots output/SPEC_advanced7/regres/train/ANNZ_29/plots_biasCor_after
[02:41:45    INFO]  - Got original [KS-test,N_poiss]: [0.0933229 , 6.83048] , after the bias-correction: [0.0443648 , 5.70508] --> will KEEP the correction !

(02:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:41 INFO) 
[02:41:49    INFO]  -----------------------------------------------------
[02:41:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:41:49    INFO]  -----------------------------------------------------------------------------------------------------------
[02:41:50    INFO]  - starting ANNZ::Init()  ... 
[02:41:51    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_30/saveOpt.txt ...
[02:41:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:42:00    INFO] ----------------------------------------------------------------------------------------------------
[02:42:00    INFO]  - will book (ANNZ_30) method(BDT) with options: :NTrees=350:BoostType=AdaBoostR2:VarTransform=N
[02:42:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:42:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:42:00    INFO]      cuts (train):        ,
[02:42:00    INFO]      cuts (valid):       
[02:42:00    INFO]    - weights:            1
[02:42:00    INFO] ----------------------------------------------------------------------------------------------------
[02:42:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:42:36    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_30/ANNZ_30_weights/saveTrainOpt_ANNZ_30.txt ...
[02:42:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[02:42:38    INFO]  - Will gen. input-parameter errors ...
[02:42:40    INFO]  - starting ANNZ::loadReaders() ... 
[02:42:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:49:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:49:05    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:49:05    INFO]  -----------------------------------------------------------------------------------------------------------
[02:49:05    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:50:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:50:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:50:39    INFO]  -----------------------------------------------------------------------------------------------------------
[02:50:39    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:50:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:50:40    INFO]  - will try to derive a bias correction ... 
[02:50:40    INFO]  - will validate that training produced an XML file for later ... 
[02:50:40    INFO]  - starting ANNZ::loadReaders() ... 
[02:50:43    INFO]  - will validate that the training was not a complete failure ... 
[02:50:43    INFO]  - training seems to have been successful! will move on ...
[02:50:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:50:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:50:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:50:50    INFO] ----------------------------------------------------------------------------------------------------
[02:50:50    INFO]  - will book (ANNZ_30_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:50:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:50:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:50:50    INFO]    - weights:            1
[02:50:50    INFO] ----------------------------------------------------------------------------------------------------
[02:50:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:51:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[02:51:01    INFO]  - Will gen. input-parameter errors ...
[02:51:03    INFO]  - starting ANNZ::loadReaders() ... 
[02:51:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[02:56:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:56:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:56:35    INFO]  -----------------------------------------------------------------------------------------------------------
[02:56:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[02:57:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:57:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:57:45    INFO]  -----------------------------------------------------------------------------------------------------------
[02:57:46    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:57:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:57:47    INFO]  - will validate that the bias-correction actually improved the result ...
[02:57:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:57:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
Warning in <Fit>: Fit data is empty 
[02:57:54    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_30/plots/
[02:58:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_30/plots output/SPEC_advanced7/regres/train/ANNZ_30/plots_biasCor_before
[02:58:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:58:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
[02:58:12    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_30/plots/
[02:58:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_30/plots output/SPEC_advanced7/regres/train/ANNZ_30/plots_biasCor_after
[02:58:25    INFO]  - Got original [KS-test,N_poiss]: [0.0621779 , 6.63202] , after the bias-correction: [0.0340578 , 5.56738] --> will KEEP the correction !

(02:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:58 INFO) 
[02:58:29    INFO]  -----------------------------------------------------
[02:58:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:58:29    INFO]  -----------------------------------------------------------------------------------------------------------
[02:58:30    INFO]  - starting ANNZ::Init()  ... 
[02:58:31    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_31/saveOpt.txt ...
[02:58:38    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:58:38    INFO] ----------------------------------------------------------------------------------------------------
[02:58:38    INFO]  - will book (ANNZ_31) method(BDT) with options: :NTrees=430:BoostType=AdaBoost:VarTransform=N,P
[02:58:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:58:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:58:38    INFO]      cuts (train):        ,
[02:58:38    INFO]      cuts (valid):       
[02:58:38    INFO]    - weights:            1
[02:58:38    INFO] ----------------------------------------------------------------------------------------------------
[02:58:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:59:11    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_31/ANNZ_31_weights/saveTrainOpt_ANNZ_31.txt ...
[02:59:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[02:59:13    INFO]  - Will gen. input-parameter errors ...
[02:59:15    INFO]  - starting ANNZ::loadReaders() ... 
[02:59:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:02:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:02:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:02:15    INFO]  -----------------------------------------------------------------------------------------------------------
[03:02:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:02:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:02:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:02:56    INFO]  -----------------------------------------------------------------------------------------------------------
[03:02:57    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:02:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:02:58    INFO]  - will try to derive a bias correction ... 
[03:02:58    INFO]  - will validate that training produced an XML file for later ... 
[03:02:58    INFO]  - starting ANNZ::loadReaders() ... 
[03:02:59    INFO]  - will validate that the training was not a complete failure ... 
[03:02:59    INFO]  - training seems to have been successful! will move on ...
[03:02:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:03:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:03:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:03:04    INFO] ----------------------------------------------------------------------------------------------------
[03:03:04    INFO]  - will book (ANNZ_31_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:03:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:03:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:03:04    INFO]    - weights:            1
[03:03:04    INFO] ----------------------------------------------------------------------------------------------------
[03:03:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:03:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[03:03:13    INFO]  - Will gen. input-parameter errors ...
[03:03:14    INFO]  - starting ANNZ::loadReaders() ... 
[03:03:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:06:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:06:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:06:19    INFO]  -----------------------------------------------------------------------------------------------------------
[03:06:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:07:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:07:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:07:00    INFO]  -----------------------------------------------------------------------------------------------------------
[03:07:01    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:07:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:07:02    INFO]  - will validate that the bias-correction actually improved the result ...
[03:07:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:07:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
Warning in <Fit>: Fit data is empty 
[03:07:22    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_31/plots/
[03:07:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_31/plots output/SPEC_advanced7/regres/train/ANNZ_31/plots_biasCor_before
[03:07:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:07:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
Warning in <Fit>: Fit data is empty 
[03:07:45    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_31/plots/
[03:08:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_31/plots output/SPEC_advanced7/regres/train/ANNZ_31/plots_biasCor_after
[03:08:06    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40381] , after the bias-correction: [0.0441408 , 5.75862] --> will KEEP the correction !

(03:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:08 INFO) 
[03:08:11    INFO]  -----------------------------------------------------
[03:08:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:08:11    INFO]  -----------------------------------------------------------------------------------------------------------
[03:08:12    INFO]  - starting ANNZ::Init()  ... 
[03:08:13    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_32/saveOpt.txt ...
[03:08:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:08:21    INFO] ----------------------------------------------------------------------------------------------------
[03:08:21    INFO]  - will book (ANNZ_32) method(BDT) with options: :NTrees=470:BoostType=AdaBoost:VarTransform=N,P,D
[03:08:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:08:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:08:21    INFO]      cuts (train):        ,
[03:08:21    INFO]      cuts (valid):       
[03:08:21    INFO]    - weights:            1
[03:08:21    INFO] ----------------------------------------------------------------------------------------------------
[03:08:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:09:01    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_32/ANNZ_32_weights/saveTrainOpt_ANNZ_32.txt ...
[03:09:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[03:09:04    INFO]  - Will gen. input-parameter errors ...
[03:09:05    INFO]  - starting ANNZ::loadReaders() ... 
[03:09:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:12:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:12:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:12:12    INFO]  -----------------------------------------------------------------------------------------------------------
[03:12:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:12:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:12:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:12:57    INFO]  -----------------------------------------------------------------------------------------------------------
[03:12:57    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:12:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:12:58    INFO]  - will try to derive a bias correction ... 
[03:12:58    INFO]  - will validate that training produced an XML file for later ... 
[03:12:58    INFO]  - starting ANNZ::loadReaders() ... 
[03:13:00    INFO]  - will validate that the training was not a complete failure ... 
[03:13:00    INFO]  - training seems to have been successful! will move on ...
[03:13:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:13:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:13:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:13:05    INFO] ----------------------------------------------------------------------------------------------------
[03:13:05    INFO]  - will book (ANNZ_32_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:13:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:13:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:13:05    INFO]    - weights:            1
[03:13:05    INFO] ----------------------------------------------------------------------------------------------------
[03:13:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:13:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[03:13:13    INFO]  - Will gen. input-parameter errors ...
[03:13:15    INFO]  - starting ANNZ::loadReaders() ... 
[03:13:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:16:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:16:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:16:34    INFO]  -----------------------------------------------------------------------------------------------------------
[03:16:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:17:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:17:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:17:19    INFO]  -----------------------------------------------------------------------------------------------------------
[03:17:19    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:17:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:17:20    INFO]  - will validate that the bias-correction actually improved the result ...
[03:17:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:17:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
Warning in <Fit>: Fit data is empty 
[03:17:27    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_32/plots/
[03:17:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_32/plots output/SPEC_advanced7/regres/train/ANNZ_32/plots_biasCor_before
[03:17:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:17:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
Warning in <Fit>: Fit data is empty 
[03:17:46    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_32/plots/
[03:18:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_32/plots output/SPEC_advanced7/regres/train/ANNZ_32/plots_biasCor_after
[03:18:00    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40773] , after the bias-correction: [0.0442528 , 5.76265] --> will KEEP the correction !

(03:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:18 INFO) 
[03:18:04    INFO]  -----------------------------------------------------
[03:18:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:18:04    INFO]  -----------------------------------------------------------------------------------------------------------
[03:18:04    INFO]  - starting ANNZ::Init()  ... 
[03:18:05    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_33/saveOpt.txt ...
[03:18:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:18:12    INFO] ----------------------------------------------------------------------------------------------------
[03:18:12    INFO]  - will book (ANNZ_33) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N,P
[03:18:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:18:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:18:12    INFO]      cuts (train):        ,
[03:18:12    INFO]      cuts (valid):       
[03:18:12    INFO]    - weights:            1
[03:18:12    INFO] ----------------------------------------------------------------------------------------------------
[03:18:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:18:56    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_33/ANNZ_33_weights/saveTrainOpt_ANNZ_33.txt ...
[03:19:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[03:19:01    INFO]  - Will gen. input-parameter errors ...
[03:19:03    INFO]  - starting ANNZ::loadReaders() ... 
[03:19:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:23:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:23:10    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:23:10    INFO]  -----------------------------------------------------------------------------------------------------------
[03:23:10    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:24:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:24:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:24:04    INFO]  -----------------------------------------------------------------------------------------------------------
[03:24:05    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:24:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:24:07    INFO]  - will try to derive a bias correction ... 
[03:24:07    INFO]  - will validate that training produced an XML file for later ... 
[03:24:07    INFO]  - starting ANNZ::loadReaders() ... 
[03:24:11    INFO]  - will validate that the training was not a complete failure ... 
[03:24:11    INFO]  - training seems to have been successful! will move on ...
[03:24:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:24:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:24:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:24:17    INFO] ----------------------------------------------------------------------------------------------------
[03:24:17    INFO]  - will book (ANNZ_33_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:24:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:24:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:24:17    INFO]    - weights:            1
[03:24:17    INFO] ----------------------------------------------------------------------------------------------------
[03:24:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:24:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[03:24:27    INFO]  - Will gen. input-parameter errors ...
[03:24:30    INFO]  - starting ANNZ::loadReaders() ... 
[03:24:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:28:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:28:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:28:39    INFO]  -----------------------------------------------------------------------------------------------------------
[03:28:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:29:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:29:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:29:35    INFO]  -----------------------------------------------------------------------------------------------------------
[03:29:35    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:29:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:29:37    INFO]  - will validate that the bias-correction actually improved the result ...
[03:29:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:29:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
[03:29:46    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_33/plots/
[03:30:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_33/plots output/SPEC_advanced7/regres/train/ANNZ_33/plots_biasCor_before
[03:30:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:30:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
[03:30:14    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_33/plots/
[03:30:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_33/plots output/SPEC_advanced7/regres/train/ANNZ_33/plots_biasCor_after
[03:30:35    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.92138] , after the bias-correction: [0.0429084 , 5.51043] --> will KEEP the correction !

(03:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:30 INFO) 
[03:30:40    INFO]  -----------------------------------------------------
[03:30:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:30:40    INFO]  -----------------------------------------------------------------------------------------------------------
[03:30:41    INFO]  - starting ANNZ::Init()  ... 
[03:30:42    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_34/saveOpt.txt ...
[03:30:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:30:50    INFO] ----------------------------------------------------------------------------------------------------
[03:30:50    INFO]  - will book (ANNZ_34) method(BDT) with options: :NTrees=340:BoostType=AdaBoost:VarTransform=N,P
[03:30:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:30:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:30:50    INFO]      cuts (train):        ,
[03:30:50    INFO]      cuts (valid):       
[03:30:50    INFO]    - weights:            1
[03:30:50    INFO] ----------------------------------------------------------------------------------------------------
[03:30:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:31:17    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_34/ANNZ_34_weights/saveTrainOpt_ANNZ_34.txt ...
[03:31:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[03:31:19    INFO]  - Will gen. input-parameter errors ...
[03:31:20    INFO]  - starting ANNZ::loadReaders() ... 
[03:31:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:33:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:33:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:33:33    INFO]  -----------------------------------------------------------------------------------------------------------
[03:33:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:34:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:34:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:34:02    INFO]  -----------------------------------------------------------------------------------------------------------
[03:34:02    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:34:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:34:03    INFO]  - will try to derive a bias correction ... 
[03:34:03    INFO]  - will validate that training produced an XML file for later ... 
[03:34:03    INFO]  - starting ANNZ::loadReaders() ... 
[03:34:04    INFO]  - will validate that the training was not a complete failure ... 
[03:34:05    INFO]  - training seems to have been successful! will move on ...
[03:34:05    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:34:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:34:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:34:09    INFO] ----------------------------------------------------------------------------------------------------
[03:34:09    INFO]  - will book (ANNZ_34_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:34:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:34:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:34:09    INFO]    - weights:            1
[03:34:09    INFO] ----------------------------------------------------------------------------------------------------
[03:34:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:34:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[03:34:17    INFO]  - Will gen. input-parameter errors ...
[03:34:18    INFO]  - starting ANNZ::loadReaders() ... 
[03:34:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:37:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:37:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:37:16    INFO]  -----------------------------------------------------------------------------------------------------------
[03:37:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:37:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:37:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:37:54    INFO]  -----------------------------------------------------------------------------------------------------------
[03:37:54    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:37:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:37:55    INFO]  - will validate that the bias-correction actually improved the result ...
[03:37:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:37:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[03:38:01    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_34/plots/
[03:38:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_34/plots output/SPEC_advanced7/regres/train/ANNZ_34/plots_biasCor_before
[03:38:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:38:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
Warning in <Fit>: Fit data is empty 
[03:38:18    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_34/plots/
[03:38:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_34/plots output/SPEC_advanced7/regres/train/ANNZ_34/plots_biasCor_after
[03:38:30    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.39997] , after the bias-correction: [0.0445889 , 5.73908] --> will KEEP the correction !

(03:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:38 INFO) 
[03:38:34    INFO]  -----------------------------------------------------
[03:38:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:38:34    INFO]  -----------------------------------------------------------------------------------------------------------
[03:38:35    INFO]  - starting ANNZ::Init()  ... 
[03:38:36    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_35/saveOpt.txt ...
[03:38:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:38:43    INFO] ----------------------------------------------------------------------------------------------------
[03:38:43    INFO]  - will book (ANNZ_35) method(BDT) with options: :NTrees=460:BoostType=Bagging:VarTransform=N
[03:38:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:38:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:38:43    INFO]      cuts (train):        ,
[03:38:43    INFO]      cuts (valid):       
[03:38:43    INFO]    - weights:            1
[03:38:43    INFO] ----------------------------------------------------------------------------------------------------
[03:38:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:39:35    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_35/ANNZ_35_weights/saveTrainOpt_ANNZ_35.txt ...
[03:39:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[03:39:39    INFO]  - Will gen. input-parameter errors ...
[03:39:42    INFO]  - starting ANNZ::loadReaders() ... 
[03:39:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:42:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:42:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:42:22    INFO]  -----------------------------------------------------------------------------------------------------------
[03:42:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:43:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:43:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:43:00    INFO]  -----------------------------------------------------------------------------------------------------------
[03:43:00    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:43:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:43:02    INFO]  - will try to derive a bias correction ... 
[03:43:02    INFO]  - will validate that training produced an XML file for later ... 
[03:43:02    INFO]  - starting ANNZ::loadReaders() ... 
[03:43:08    INFO]  - will validate that the training was not a complete failure ... 
[03:43:08    INFO]  - training seems to have been successful! will move on ...
[03:43:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:43:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:43:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:43:14    INFO] ----------------------------------------------------------------------------------------------------
[03:43:14    INFO]  - will book (ANNZ_35_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:43:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:43:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:43:14    INFO]    - weights:            1
[03:43:14    INFO] ----------------------------------------------------------------------------------------------------
[03:43:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:43:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[03:43:25    INFO]  - Will gen. input-parameter errors ...
[03:43:27    INFO]  - starting ANNZ::loadReaders() ... 
[03:43:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:46:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:46:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:46:24    INFO]  -----------------------------------------------------------------------------------------------------------
[03:46:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:47:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:47:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:47:04    INFO]  -----------------------------------------------------------------------------------------------------------
[03:47:04    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:47:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:47:06    INFO]  - will validate that the bias-correction actually improved the result ...
[03:47:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:47:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
[03:47:13    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_35/plots/
[03:47:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_35/plots output/SPEC_advanced7/regres/train/ANNZ_35/plots_biasCor_before
[03:47:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:47:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
[03:47:34    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_35/plots/
[03:47:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_35/plots output/SPEC_advanced7/regres/train/ANNZ_35/plots_biasCor_after
[03:47:48    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.645] , after the bias-correction: [0.0455971 , 5.59973] --> will KEEP the correction !

(03:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:47 INFO) 
[03:47:52    INFO]  -----------------------------------------------------
[03:47:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:47:52    INFO]  -----------------------------------------------------------------------------------------------------------
[03:47:53    INFO]  - starting ANNZ::Init()  ... 
[03:47:54    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_36/saveOpt.txt ...
[03:48:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:48:01    INFO] ----------------------------------------------------------------------------------------------------
[03:48:01    INFO]  - will book (ANNZ_36) method(BDT) with options: :NTrees=510:BoostType=AdaBoost:VarTransform=N
[03:48:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:48:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:48:01    INFO]      cuts (train):        ,
[03:48:01    INFO]      cuts (valid):       
[03:48:01    INFO]    - weights:            1
[03:48:01    INFO] ----------------------------------------------------------------------------------------------------
[03:48:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:48:39    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_36/ANNZ_36_weights/saveTrainOpt_ANNZ_36.txt ...
[03:48:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[03:48:42    INFO]  - Will gen. input-parameter errors ...
[03:48:44    INFO]  - starting ANNZ::loadReaders() ... 
[03:48:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:50:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:50:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:50:51    INFO]  -----------------------------------------------------------------------------------------------------------
[03:50:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:51:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:51:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:51:23    INFO]  -----------------------------------------------------------------------------------------------------------
[03:51:23    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:51:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:51:24    INFO]  - will try to derive a bias correction ... 
[03:51:24    INFO]  - will validate that training produced an XML file for later ... 
[03:51:24    INFO]  - starting ANNZ::loadReaders() ... 
[03:51:27    INFO]  - will validate that the training was not a complete failure ... 
[03:51:27    INFO]  - training seems to have been successful! will move on ...
[03:51:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:51:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:51:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:51:32    INFO] ----------------------------------------------------------------------------------------------------
[03:51:32    INFO]  - will book (ANNZ_36_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:51:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:51:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:51:32    INFO]    - weights:            1
[03:51:32    INFO] ----------------------------------------------------------------------------------------------------
[03:51:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:51:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[03:51:41    INFO]  - Will gen. input-parameter errors ...
[03:51:43    INFO]  - starting ANNZ::loadReaders() ... 
[03:51:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[03:53:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:53:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:53:49    INFO]  -----------------------------------------------------------------------------------------------------------
[03:53:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[03:54:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:54:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:54:28    INFO]  -----------------------------------------------------------------------------------------------------------
[03:54:28    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:54:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:54:30    INFO]  - will validate that the bias-correction actually improved the result ...
[03:54:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:54:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
Warning in <Fit>: Fit data is empty 
[03:54:36    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_36/plots/
[03:54:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_36/plots output/SPEC_advanced7/regres/train/ANNZ_36/plots_biasCor_before
[03:54:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:54:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
Warning in <Fit>: Fit data is empty 
[03:54:54    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_36/plots/
[03:55:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_36/plots output/SPEC_advanced7/regres/train/ANNZ_36/plots_biasCor_after
[03:55:06    INFO]  - Got original [KS-test,N_poiss]: [0.0823438 , 6.12987] , after the bias-correction: [0.0497423 , 6.105] --> will KEEP the correction !

(03:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:55 INFO) 
[03:55:10    INFO]  -----------------------------------------------------
[03:55:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:55:10    INFO]  -----------------------------------------------------------------------------------------------------------
[03:55:11    INFO]  - starting ANNZ::Init()  ... 
[03:55:12    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_37/saveOpt.txt ...
[03:55:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:55:19    INFO] ----------------------------------------------------------------------------------------------------
[03:55:19    INFO]  - will book (ANNZ_37) method(BDT) with options: :NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P
[03:55:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:55:19    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:55:19    INFO]      cuts (train):        ,
[03:55:19    INFO]      cuts (valid):       
[03:55:19    INFO]    - weights:            1
[03:55:19    INFO] ----------------------------------------------------------------------------------------------------
[03:55:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:56:03    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_37/ANNZ_37_weights/saveTrainOpt_ANNZ_37.txt ...
[03:56:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[03:56:06    INFO]  - Will gen. input-parameter errors ...
[03:56:08    INFO]  - starting ANNZ::loadReaders() ... 
[03:56:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[04:03:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:03:27    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:03:27    INFO]  -----------------------------------------------------------------------------------------------------------
[04:03:27    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[04:05:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:05:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:05:14    INFO]  -----------------------------------------------------------------------------------------------------------
[04:05:14    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:05:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:05:15    INFO]  - will try to derive a bias correction ... 
[04:05:15    INFO]  - will validate that training produced an XML file for later ... 
[04:05:15    INFO]  - starting ANNZ::loadReaders() ... 
[04:05:18    INFO]  - will validate that the training was not a complete failure ... 
[04:05:18    INFO]  - training seems to have been successful! will move on ...
[04:05:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:05:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:05:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:05:25    INFO] ----------------------------------------------------------------------------------------------------
[04:05:25    INFO]  - will book (ANNZ_37_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:05:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:05:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:05:25    INFO]    - weights:            1
[04:05:25    INFO] ----------------------------------------------------------------------------------------------------
[04:05:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:05:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[04:05:35    INFO]  - Will gen. input-parameter errors ...
[04:05:37    INFO]  - starting ANNZ::loadReaders() ... 
[04:05:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[04:12:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:12:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:12:42    INFO]  -----------------------------------------------------------------------------------------------------------
[04:12:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[04:14:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:14:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:14:24    INFO]  -----------------------------------------------------------------------------------------------------------
[04:14:24    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:14:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:14:25    INFO]  - will validate that the bias-correction actually improved the result ...
[04:14:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:14:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
[04:14:32    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_37/plots/
[04:14:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_37/plots output/SPEC_advanced7/regres/train/ANNZ_37/plots_biasCor_before
[04:14:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:14:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
[04:14:50    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_37/plots/
[04:15:04        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_37/plots output/SPEC_advanced7/regres/train/ANNZ_37/plots_biasCor_after
[04:15:04    INFO]  - Got original [KS-test,N_poiss]: [0.0701322 , 6.63987] , after the bias-correction: [0.0337217 , 5.45539] --> will KEEP the correction !

(04:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:15 INFO) 
[04:15:09    INFO]  -----------------------------------------------------
[04:15:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:15:09    INFO]  -----------------------------------------------------------------------------------------------------------
[04:15:09    INFO]  - starting ANNZ::Init()  ... 
[04:15:11    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_38/saveOpt.txt ...
[04:15:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:15:17    INFO] ----------------------------------------------------------------------------------------------------
[04:15:17    INFO]  - will book (ANNZ_38) method(BDT) with options: :NTrees=360:BoostType=Bagging:VarTransform=P
[04:15:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:15:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:15:17    INFO]      cuts (train):        ,
[04:15:17    INFO]      cuts (valid):       
[04:15:17    INFO]    - weights:            1
[04:15:17    INFO] ----------------------------------------------------------------------------------------------------
[04:15:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.101365
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(04:15 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(04:15 CRITICAL) [41;37;1mWill terminate !!!![0m
(09:01 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:01 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:01 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:01 INFO) [40;37;1m - 11/03/19 09:01:27 - starting ANNZ[0m
(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:28    INFO]  -----------------------------------------------------
[09:01:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:28    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:29    INFO]  - starting ANNZ::Init()  ... 
[09:01:30    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced7/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[09:01:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:30    INFO]  -----------------------------------------------------
[09:01:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:30    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:31    INFO]  - starting ANNZ::Init()  ... 
[09:01:31    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced7/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[09:01:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:31    INFO]  -----------------------------------------------------
[09:01:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:31    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:32    INFO]  - starting ANNZ::Init()  ... 
[09:01:33    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced7/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[09:01:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:33    INFO]  -----------------------------------------------------
[09:01:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:33    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:34    INFO]  - starting ANNZ::Init()  ... 
[09:01:35    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced7/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[09:01:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:35    INFO]  -----------------------------------------------------
[09:01:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:35    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:36    INFO]  - starting ANNZ::Init()  ... 
[09:01:37    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced7/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[09:01:37    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:37    INFO]  -----------------------------------------------------
[09:01:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:37    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:38    INFO]  - starting ANNZ::Init()  ... 
[09:01:38    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced7/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[09:01:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:38    INFO]  -----------------------------------------------------
[09:01:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:38    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:39    INFO]  - starting ANNZ::Init()  ... 
[09:01:39    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced7/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[09:01:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:39    INFO]  -----------------------------------------------------
[09:01:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:39    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:40    INFO]  - starting ANNZ::Init()  ... 
[09:01:41    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced7/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[09:01:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:41    INFO]  -----------------------------------------------------
[09:01:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:41    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:42    INFO]  - starting ANNZ::Init()  ... 
[09:01:43    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced7/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[09:01:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1000:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:43    INFO]  -----------------------------------------------------
[09:01:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:43    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:44    INFO]  - starting ANNZ::Init()  ... 
[09:01:44    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced7/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[09:01:44    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:44    INFO]  -----------------------------------------------------
[09:01:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:44    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:45    INFO]  - starting ANNZ::Init()  ... 
[09:01:47    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced7/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[09:01:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:47    INFO]  -----------------------------------------------------
[09:01:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:47    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:48    INFO]  - starting ANNZ::Init()  ... 
[09:01:49    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced7/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[09:01:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=580:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:49    INFO]  -----------------------------------------------------
[09:01:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:49    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:50    INFO]  - starting ANNZ::Init()  ... 
[09:01:51    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced7/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[09:01:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:51    INFO]  -----------------------------------------------------
[09:01:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:51    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:52    INFO]  - starting ANNZ::Init()  ... 
[09:01:53    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced7/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[09:01:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=820:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:53    INFO]  -----------------------------------------------------
[09:01:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:53    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:53    INFO]  - starting ANNZ::Init()  ... 
[09:01:54    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced7/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[09:01:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:54    INFO]  -----------------------------------------------------
[09:01:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:54    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:55    INFO]  - starting ANNZ::Init()  ... 
[09:01:56    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced7/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[09:01:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:56    INFO]  -----------------------------------------------------
[09:01:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:56    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:57    INFO]  - starting ANNZ::Init()  ... 
[09:01:57    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced7/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[09:01:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:57    INFO]  -----------------------------------------------------
[09:01:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:57    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:58    INFO]  - starting ANNZ::Init()  ... 
[09:01:58    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced7/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[09:01:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:59    INFO]  -----------------------------------------------------
[09:01:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:59    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:59    INFO]  - starting ANNZ::Init()  ... 
[09:01:59    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced7/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[09:01:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:59    INFO]  -----------------------------------------------------
[09:01:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:59    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:00    INFO]  - starting ANNZ::Init()  ... 
[09:02:01    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced7/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[09:02:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:01    INFO]  -----------------------------------------------------
[09:02:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:01    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:02    INFO]  - starting ANNZ::Init()  ... 
[09:02:02    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced7/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[09:02:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:02    INFO]  -----------------------------------------------------
[09:02:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:02    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:03    INFO]  - starting ANNZ::Init()  ... 
[09:02:03    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced7/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[09:02:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:03    INFO]  -----------------------------------------------------
[09:02:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:03    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:04    INFO]  - starting ANNZ::Init()  ... 
[09:02:05    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced7/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[09:02:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:05    INFO]  -----------------------------------------------------
[09:02:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:05    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:05    INFO]  - starting ANNZ::Init()  ... 
[09:02:06    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced7/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[09:02:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:06    INFO]  -----------------------------------------------------
[09:02:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:06    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:07    INFO]  - starting ANNZ::Init()  ... 
[09:02:07    INFO]  - found trained "ANNZ_24" (./output/SPEC_advanced7/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[09:02:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:07    INFO]  -----------------------------------------------------
[09:02:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:07    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:08    INFO]  - starting ANNZ::Init()  ... 
[09:02:08    INFO]  - found trained "ANNZ_25" (./output/SPEC_advanced7/regres/train/ANNZ_25/ANNZ_25_weights/randomReg_ANNZ_25.weights.xml)
[09:02:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:08    INFO]  -----------------------------------------------------
[09:02:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:08    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:09    INFO]  - starting ANNZ::Init()  ... 
[09:02:09    INFO]  - found trained "ANNZ_26" (./output/SPEC_advanced7/regres/train/ANNZ_26/ANNZ_26_weights/randomReg_ANNZ_26.weights.xml)
[09:02:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:09    INFO]  -----------------------------------------------------
[09:02:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:09    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:10    INFO]  - starting ANNZ::Init()  ... 
[09:02:11    INFO]  - found trained "ANNZ_27" (./output/SPEC_advanced7/regres/train/ANNZ_27/ANNZ_27_weights/randomReg_ANNZ_27.weights.xml)
[09:02:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:11    INFO]  -----------------------------------------------------
[09:02:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:11    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:11    INFO]  - starting ANNZ::Init()  ... 
[09:02:12    INFO]  - found trained "ANNZ_28" (./output/SPEC_advanced7/regres/train/ANNZ_28/ANNZ_28_weights/randomReg_ANNZ_28.weights.xml)
[09:02:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:13    INFO]  -----------------------------------------------------
[09:02:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:13    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:13    INFO]  - starting ANNZ::Init()  ... 
[09:02:14    INFO]  - found trained "ANNZ_29" (./output/SPEC_advanced7/regres/train/ANNZ_29/ANNZ_29_weights/randomReg_ANNZ_29.weights.xml)
[09:02:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:14    INFO]  -----------------------------------------------------
[09:02:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:14    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:15    INFO]  - starting ANNZ::Init()  ... 
[09:02:15    INFO]  - found trained "ANNZ_30" (./output/SPEC_advanced7/regres/train/ANNZ_30/ANNZ_30_weights/randomReg_ANNZ_30.weights.xml)
[09:02:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:16    INFO]  -----------------------------------------------------
[09:02:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:16    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:16    INFO]  - starting ANNZ::Init()  ... 
[09:02:17    INFO]  - found trained "ANNZ_31" (./output/SPEC_advanced7/regres/train/ANNZ_31/ANNZ_31_weights/randomReg_ANNZ_31.weights.xml)
[09:02:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:17    INFO]  -----------------------------------------------------
[09:02:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:17    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:17    INFO]  - starting ANNZ::Init()  ... 
[09:02:18    INFO]  - found trained "ANNZ_32" (./output/SPEC_advanced7/regres/train/ANNZ_32/ANNZ_32_weights/randomReg_ANNZ_32.weights.xml)
[09:02:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:18    INFO]  -----------------------------------------------------
[09:02:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:18    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:19    INFO]  - starting ANNZ::Init()  ... 
[09:02:20    INFO]  - found trained "ANNZ_33" (./output/SPEC_advanced7/regres/train/ANNZ_33/ANNZ_33_weights/randomReg_ANNZ_33.weights.xml)
[09:02:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:20    INFO]  -----------------------------------------------------
[09:02:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:20    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:20    INFO]  - starting ANNZ::Init()  ... 
[09:02:21    INFO]  - found trained "ANNZ_34" (./output/SPEC_advanced7/regres/train/ANNZ_34/ANNZ_34_weights/randomReg_ANNZ_34.weights.xml)
[09:02:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:21    INFO]  -----------------------------------------------------
[09:02:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:21    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:22    INFO]  - starting ANNZ::Init()  ... 
[09:02:23    INFO]  - found trained "ANNZ_35" (./output/SPEC_advanced7/regres/train/ANNZ_35/ANNZ_35_weights/randomReg_ANNZ_35.weights.xml)
[09:02:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:23    INFO]  -----------------------------------------------------
[09:02:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:23    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:24    INFO]  - starting ANNZ::Init()  ... 
[09:02:24    INFO]  - found trained "ANNZ_36" (./output/SPEC_advanced7/regres/train/ANNZ_36/ANNZ_36_weights/randomReg_ANNZ_36.weights.xml)
[09:02:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:24    INFO]  -----------------------------------------------------
[09:02:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:24    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:25    INFO]  - starting ANNZ::Init()  ... 
[09:02:25    INFO]  - found trained "ANNZ_37" (./output/SPEC_advanced7/regres/train/ANNZ_37/ANNZ_37_weights/randomReg_ANNZ_37.weights.xml)
[09:02:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:02 INFO) 
[09:02:26    INFO]  -----------------------------------------------------
[09:02:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:02:26    INFO]  -----------------------------------------------------------------------------------------------------------
[09:02:26    INFO]  - starting ANNZ::Init()  ... 
[09:02:27    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_38/saveOpt.txt ...
[09:02:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:02:34    INFO] ----------------------------------------------------------------------------------------------------
[09:02:34    INFO]  - will book (ANNZ_38) method(BDT) with options: :NTrees=370:BoostType=AdaBoost:VarTransform=N
[09:02:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:02:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:02:34    INFO]      cuts (train):        ,
[09:02:34    INFO]      cuts (valid):       
[09:02:34    INFO]    - weights:            1
[09:02:34    INFO] ----------------------------------------------------------------------------------------------------
[09:02:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:03:01    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_38/ANNZ_38_weights/saveTrainOpt_ANNZ_38.txt ...
[09:03:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[09:03:04    INFO]  - Will gen. input-parameter errors ...
[09:03:05    INFO]  - starting ANNZ::loadReaders() ... 
[09:03:10    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[09:04:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:04:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:04:46    INFO]  -----------------------------------------------------------------------------------------------------------
[09:04:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[09:05:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:05:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:05:11    INFO]  -----------------------------------------------------------------------------------------------------------
[09:05:11    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:05:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:05:12    INFO]  - will try to derive a bias correction ... 
[09:05:12    INFO]  - will validate that training produced an XML file for later ... 
[09:05:12    INFO]  - starting ANNZ::loadReaders() ... 
[09:05:13    INFO]  - will validate that the training was not a complete failure ... 
[09:05:14    INFO]  - training seems to have been successful! will move on ...
[09:05:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:05:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:05:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:05:18    INFO] ----------------------------------------------------------------------------------------------------
[09:05:18    INFO]  - will book (ANNZ_38_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:05:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:05:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:05:18    INFO]    - weights:            1
[09:05:18    INFO] ----------------------------------------------------------------------------------------------------
[09:05:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:05:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[09:05:27    INFO]  - Will gen. input-parameter errors ...
[09:05:29    INFO]  - starting ANNZ::loadReaders() ... 
[09:05:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[09:07:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:07:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:07:30    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[09:07:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:07:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:07:58    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:58    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:07:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:07:59    INFO]  - will validate that the bias-correction actually improved the result ...
[09:07:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:07:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
Warning in <Fit>: Fit data is empty 
[09:08:06    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_38/plots/
[09:08:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_38/plots output/SPEC_advanced7/regres/train/ANNZ_38/plots_biasCor_before
[09:08:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:08:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
Warning in <Fit>: Fit data is empty 
[09:08:23    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_38/plots/
[09:08:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_38/plots output/SPEC_advanced7/regres/train/ANNZ_38/plots_biasCor_after
[09:08:36    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11284] , after the bias-correction: [0.0498544 , 6.0313] --> will KEEP the correction !

(09:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:08 INFO) 
[09:08:40    INFO]  -----------------------------------------------------
[09:08:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:08:40    INFO]  -----------------------------------------------------------------------------------------------------------
[09:08:41    INFO]  - starting ANNZ::Init()  ... 
[09:08:42    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/train/ANNZ_39/saveOpt.txt ...
[09:08:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:08:48    INFO] ----------------------------------------------------------------------------------------------------
[09:08:48    INFO]  - will book (ANNZ_39) method(BDT) with options: :NTrees=390:BoostType=AdaBoostR2:VarTransform=N,P
[09:08:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:08:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:08:48    INFO]      cuts (train):        ,
[09:08:48    INFO]      cuts (valid):       
[09:08:48    INFO]    - weights:            1
[09:08:48    INFO] ----------------------------------------------------------------------------------------------------
[09:08:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:09:32    INFO]  - Saving MLM information in ./output/SPEC_advanced7/regres/train/ANNZ_39/ANNZ_39_weights/saveTrainOpt_ANNZ_39.txt ...
[09:09:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[09:09:35    INFO]  - Will gen. input-parameter errors ...
[09:09:37    INFO]  - starting ANNZ::loadReaders() ... 
[09:09:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[09:18:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:18:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:18:29    INFO]  -----------------------------------------------------------------------------------------------------------
[09:18:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[09:20:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:20:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:20:45    INFO]  -----------------------------------------------------------------------------------------------------------
[09:20:46    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:20:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:20:47    INFO]  - will try to derive a bias correction ... 
[09:20:47    INFO]  - will validate that training produced an XML file for later ... 
[09:20:47    INFO]  - starting ANNZ::loadReaders() ... 
[09:20:51    INFO]  - will validate that the training was not a complete failure ... 
[09:20:52    INFO]  - training seems to have been successful! will move on ...
[09:20:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:20:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:20:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:20:58    INFO] ----------------------------------------------------------------------------------------------------
[09:20:58    INFO]  - will book (ANNZ_39_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:20:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:20:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:20:58    INFO]    - weights:            1
[09:20:58    INFO] ----------------------------------------------------------------------------------------------------
[09:20:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:21:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[09:21:09    INFO]  - Will gen. input-parameter errors ...
[09:21:11    INFO]  - starting ANNZ::loadReaders() ... 
[09:21:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_train*.root
[09:29:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:29:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:29:49    INFO]  -----------------------------------------------------------------------------------------------------------
[09:29:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced7/rootIn/ANNZ_tree_valid*.root
[09:31:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:31:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:31:54    INFO]  -----------------------------------------------------------------------------------------------------------
[09:31:54    INFO]  - Saving file ./output/SPEC_advanced7/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:31:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:31:55    INFO]  - will validate that the bias-correction actually improved the result ...
[09:31:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:31:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
[09:32:02    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_39/plots/
[09:32:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_39/plots output/SPEC_advanced7/regres/train/ANNZ_39/plots_biasCor_before
[09:32:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:32:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
[09:32:20    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/train/ANNZ_39/plots/
[09:32:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced7/regres/train/ANNZ_39/plots output/SPEC_advanced7/regres/train/ANNZ_39/plots_biasCor_after
[09:32:34    INFO]  - Got original [KS-test,N_poiss]: [0.0703563 , 6.56537] , after the bias-correction: [0.0309209 , 5.5648] --> will KEEP the correction !

(09:32 INFO) [40;37;1m - 11/03/19 09:32:38 - finished running ANNZ ![0m
(15:36 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:36 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:36 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:36 INFO) [40;37;1m - 12/03/19 15:36:17 - starting ANNZ[0m
(15:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:36 INFO) 
[15:36:17    INFO]  -----------------------------------------------------
[15:36:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:36:17    INFO]  -----------------------------------------------------------------------------------------------------------
[15:36:18    INFO]  - starting ANNZ::Init()  ... 
[15:36:18    INFO]  - Will generate 1 PDFs ... 
[15:36:38    INFO] --------------------------------------------------------
[15:36:38    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,
[15:36:38    INFO]  - All REJECTED MLMs: 
[15:36:38    INFO] ----------------------------------------------------------------------------------------------------------------
[15:36:41    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/optim/saveOpt.txt ...
[15:38:03    INFO]  - starting ANNZ::Optim() ... 
[15:38:03    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[15:38:07    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[15:38:51   ERROR]  - ... ------------------------------------------------------------ 
[15:38:51   ERROR]  - MESSAGE - Could not find expected file(s) by pattern: ./output/SPEC_advanced7/regres/train/ANNZ_24/postTrain/ANNZ_tree_train*.root - Try to erase the directory, ./output/SPEC_advanced7/regres/train/ANNZ_24/postTrain/ , and re-running ... 
[15:38:51   ERROR]  - FROM    - FILE: ../src/ANNZ_loopRegCls.cpp , LINE: 389 , (Mar  8 2019 14:47:31) 
[15:38:51   ERROR]  - ..... ABORTING !!! 
[15:38:51   ERROR]  ------------------------------------------------------------ ... - 
(15:38 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(15:38 CRITICAL) [41;37;1mWill terminate !!!![0m
(15:41 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:41 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:41 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:41 INFO) [40;37;1m - 12/03/19 15:41:35 - starting ANNZ[0m
(15:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:41 INFO) 
[15:41:35    INFO]  -----------------------------------------------------
[15:41:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:41:35    INFO]  -----------------------------------------------------------------------------------------------------------
[15:41:35    INFO]  - starting ANNZ::Init()  ... 
[15:41:35    INFO]  - Will generate 1 PDFs ... 
[15:41:53    INFO] --------------------------------------------------------
[15:41:53    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,
[15:41:53    INFO]  - All REJECTED MLMs: ANNZ_24,
[15:41:53    INFO] ----------------------------------------------------------------------------------------------------------------
[15:41:56    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/optim/saveOpt.txt ...
[15:43:01    INFO]  - starting ANNZ::Optim() ... 
[15:43:01    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[15:43:01    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[15:43:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:43:27    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced7/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[15:43:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:44:00    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced7/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[15:44:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:44:39    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/SPEC_advanced7/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[15:44:39    INFO]  - Saving file ./output/SPEC_advanced7/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[15:44:41    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[15:44:41    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced7/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[15:44:41    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[15:44:41    INFO]  - ending makeTreeRegClsAllMLM() ... 
[15:44:41    INFO]  - starting ANNZ::optimReg() ... 
[15:44:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:44:47    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced7/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[15:44:48    INFO]  - starting ANNZ::fillColosureV() ... 
[15:44:49    INFO]  ---------------------------------------------------------------------------------- 
[15:44:49    INFO]  - Got the following average properties: 
[15:44:49    INFO]  --------------------------------------- 
[15:44:49    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.0104928 	 0.0474512 	 0.0882743
[15:44:49    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00784497 	 0.0456552 	 0.0451876
[15:44:49    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0106365 	 0.0479063 	 0.0860554
[15:44:49    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00767092 	 0.0441353 	 0.0510795
[15:44:49    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00805719 	 0.045182 	 0.0483716
[15:44:49    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0040802 	 0.0654276 	 0.0895293
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.00886035 	 0.0581922 	 0.0873144
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00396814 	 0.0600701 	 0.0907825
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00382898 	 0.0655856 	 0.0891273
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00415294 	 0.0650286 	 0.0908387
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00726098 	 0.0434045 	 0.0465976
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00855375 	 0.05812 	 0.0874821
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.0106442 	 0.0479857 	 0.0878606
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.00422609 	 0.064839 	 0.0912719
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.0040802 	 0.0654276 	 0.0895293
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.0107057 	 0.0472006 	 0.0881101
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00457043 	 0.0651091 	 0.0901082
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00852372 	 0.0582613 	 0.087527
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.0043103 	 0.0650411 	 0.0905133
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00800532 	 0.0434601 	 0.0482597
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00855375 	 0.05812 	 0.0874821
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00350772 	 0.0655358 	 0.08875
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.0101373 	 0.0485833 	 0.085994
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.0126053 	 0.0445298 	 0.0887642
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.00395875 	 0.0605059 	 0.0891217
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.00778117 	 0.0431185 	 0.0502921
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0037598 	 0.0653791 	 0.0891226
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.0127803 	 0.0448535 	 0.0858224
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.0102248 	 0.0471599 	 0.0895664
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.00841207 	 0.0440139 	 0.0510083
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00426415 	 0.0651205 	 0.0901868
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.00415294 	 0.0650286 	 0.0908387
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.0100665 	 0.0480792 	 0.0866003
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.00438934 	 0.0650686 	 0.0904901
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.0127361 	 0.0442444 	 0.0857008
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.0087693 	 0.0579939 	 0.0881121
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.00778117 	 0.0431185 	 0.0502921
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.00874971 	 0.0581945 	 0.0877547
[15:44:50    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.006828 	 0.0443177 	 0.0475411
[15:44:50    INFO]  ------------------------------------------------------------------------------------------------- 
[15:44:50    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[15:44:50    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[15:44:50    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[15:44:50    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[15:44:50    INFO]  - Now trying to find best methods with a limit of 15% of the [sig68] dist, and 25% of the other(s) - iteration 2 ...
[15:44:50    INFO]  - Now trying to find best methods with a limit of 17.5% of the [sig68] dist, and 27.5% of the other(s) - iteration 3 ...
[15:44:50    INFO]  - Now trying to find best methods with a limit of 20% of the [sig68] dist, and 30% of the other(s) - iteration 4 ...
[15:44:50    INFO]  - Now trying to find best methods with a limit of 22.5% of the [sig68] dist, and 32.5% of the other(s) - iteration 5 ...
[15:44:50    INFO]  - Now trying to find best methods with a limit of 25% of the [sig68] dist, and 35% of the other(s) - iteration 6 ...
[15:44:50    INFO]  - Now trying to find best methods with a limit of 27.5% of the [sig68] dist, and 37.5% of the other(s) - iteration 7 ...
[15:44:50    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 27.5% of the [sig68] dist.
[15:44:50    INFO]  - The "best" MLM is: ANNZ_39
[15:44:50    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[15:44:50    INFO]  - initial PDF weights: ANNZ_7:0.091 ANNZ_25:0.087 ANNZ_39:0.082 ANNZ_10:0.078 ANNZ_32:0.074 ANNZ_9:0.069 ANNZ_13:0.065 ANNZ_18:0.061 ANNZ_34:0.056 ANNZ_3:0.052 ANNZ_26:0.048 ANNZ_37:0.043 ANNZ_19:0.039 ANNZ_1:0.035 ANNZ_4:0.030 ANNZ_30:0.026 ANNZ_17:0.022 ANNZ_20:0.017 ANNZ_11:0.013 ANNZ_36:0.009 ANNZ_38:0.004 
[15:44:50    INFO]  - will loop on the input trees ...
[15:44:51    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.36102e-01
[15:44:51    INFO]  - nTry: 1 - min-param best/prev/now: 2.36102e-01 / 2.36102e-01 / 2.38173e-01
[15:44:51    INFO]  - nTry: 2 - min-param best/prev/now: 2.36102e-01 / 2.38173e-01 / 2.38803e-01
[15:44:51    INFO]  - nTry: 3 - min-param best/prev/now: 2.36102e-01 / 2.38173e-01 / 2.39815e-01
[15:44:51    INFO]  - nTry: 4 - min-param best/prev/now: 2.36102e-01 / 2.38173e-01 / 2.39891e-01
[15:44:51    INFO]  - nTry: 5 - min-param best/prev/now: 2.36102e-01 / 2.39891e-01 / 2.40228e-01
[15:44:51    INFO]  - nTry: 6 - min-param best/prev/now: 2.36102e-01 / 2.39891e-01 / 2.40240e-01
[15:44:52    INFO]  - nTry: 7 - min-param best/prev/now: 2.36102e-01 / 2.40240e-01 / 2.40376e-01
[15:44:52    INFO]  - nTry: 8 - min-param best/prev/now: 2.36102e-01 / 2.40240e-01 / 2.40606e-01
[15:44:52    INFO]  - nTry: 9 - min-param best/prev/now: 2.36102e-01 / 2.40240e-01 / 2.40831e-01
[15:44:52    INFO]  - nTry: 10 - min-param best/prev/now: 2.36102e-01 / 2.40240e-01 / 2.40765e-01
[15:44:53    INFO]  - nTry: 20 - min-param best/prev/now: 2.36102e-01 / 2.40240e-01 / 2.41213e-01
[15:44:54    INFO]  - nTry: 30 - min-param best/prev/now: 2.36102e-01 / 2.41625e-01 / 2.41713e-01
[15:44:56    INFO]  - nTry: 40 - min-param best/prev/now: 2.36102e-01 / 2.42327e-01 / 2.42384e-01
[15:44:57    INFO]  - nTry: 50 - min-param best/prev/now: 2.36102e-01 / 2.42544e-01 / 2.42641e-01
[15:44:58    INFO]  - nTry: 60 - min-param best/prev/now: 2.36102e-01 / 2.42753e-01 / 2.42797e-01
[15:45:00    INFO]  - nTry: 70 - min-param best/prev/now: 2.36102e-01 / 2.42837e-01 / 2.42885e-01
[15:45:01    INFO]  - nTry: 80 - min-param best/prev/now: 2.36102e-01 / 2.42878e-01 / 2.42920e-01
[15:45:02    INFO]  - nTry: 90 - min-param best/prev/now: 2.36102e-01 / 2.42874e-01 / 2.42885e-01
[15:45:03    INFO]  - nTry: 100 - min-param best/prev/now: 2.36102e-01 / 2.42874e-01 / 2.42897e-01
[15:45:06    INFO]  - nTry: 120 - min-param best/prev/now: 2.36102e-01 / 2.42783e-01 / 2.42831e-01
[15:45:08    INFO]  - nTry: 140 - min-param best/prev/now: 2.36102e-01 / 2.42842e-01 / 2.42916e-01
[15:45:10    INFO]  - nTry: 150 - min-param best/prev/now: 2.36102e-01 / 2.42957e-01 / 2.43012e-01
[15:45:11    INFO]  - nTry: 160 - min-param best/prev/now: 2.36102e-01 / 2.42957e-01 / 2.43111e-01
[15:45:14    INFO]  - nTry: 180 - min-param best/prev/now: 2.36102e-01 / 2.43273e-01 / 2.43300e-01
[15:45:16    INFO]  - nTry: 200 - min-param best/prev/now: 2.36102e-01 / 2.43322e-01 / 2.43328e-01
[15:45:19    INFO]  - nTry: 220 - min-param best/prev/now: 2.36102e-01 / 2.43347e-01 / 2.43348e-01
[15:45:21    INFO]  - nTry: 240 - min-param best/prev/now: 2.36102e-01 / 2.43324e-01 / 2.43354e-01
[15:45:22    INFO]  - nTry: 250 - min-param best/prev/now: 2.36102e-01 / 2.43328e-01 / 2.43332e-01
[15:45:22    INFO]  - finished PDF optimization! - final minimization parameter: 2.36102e-01 , PDF weights: ANNZ_7:0.091 ANNZ_25:0.087 ANNZ_39:0.082 ANNZ_10:0.078 ANNZ_32:0.074 ANNZ_9:0.069 ANNZ_13:0.065 ANNZ_18:0.061 ANNZ_34:0.056 ANNZ_3:0.052 ANNZ_26:0.048 ANNZ_37:0.043 ANNZ_19:0.039 ANNZ_1:0.035 ANNZ_4:0.030 ANNZ_30:0.026 ANNZ_17:0.022 ANNZ_20:0.017 ANNZ_11:0.013 ANNZ_36:0.009 ANNZ_38:0.004 
[15:45:22    INFO]  - will derive the bias correction for the pdf ... 
[15:45:24    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.000000, ANNZ_1:0.034632, ANNZ_2:0.000000, ANNZ_3:0.051948, ANNZ_4:0.030303, ANNZ_5:0.000000, ANNZ_6:0.000000, ANNZ_7:0.090909, ANNZ_8:0.000000, ANNZ_9:0.069264, ANNZ_10:0.077922, ANNZ_11:0.012987, ANNZ_12:0.000000, ANNZ_13:0.064935, ANNZ_14:0.000000, ANNZ_15:0.000000, ANNZ_16:0.000000, ANNZ_17:0.021645, ANNZ_18:0.060606, ANNZ_19:0.038961, ANNZ_20:0.017316, ANNZ_21:0.000000, ANNZ_22:0.000000, ANNZ_23:0.000000, ANNZ_24:0.000000, ANNZ_25:0.086580, ANNZ_26:0.047619, ANNZ_27:0.000000, ANNZ_28:0.000000, ANNZ_29:0.000000, ANNZ_30:0.025974, ANNZ_31:0.000000, ANNZ_32:0.073593, ANNZ_33:0.000000, ANNZ_34:0.056277, ANNZ_35:0.000000, ANNZ_36:0.008658, ANNZ_37:0.043290, ANNZ_38:0.004329, ANNZ_39:0.082251, 
[15:45:24    INFO]  - Saving optimization results in ./output/SPEC_advanced7/regres/optim/saveOptimOpt.txt ...
[15:45:28    INFO]  - Saving bias-correction results in ./output/SPEC_advanced7/regres/optim/saveOptimObj.root ...
[15:45:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:45:34    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced7/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[15:45:40    INFO]  - starting ANNZ::doEvalReg() ... 
[15:45:40    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,
[15:45:40    INFO]  - Reading bias-correction results from ./output/SPEC_advanced7/regres/optim/saveOptimObj.root ...
[15:45:40    INFO]  - Getting optimization results from ./output/SPEC_advanced7/regres/optim/saveOptimOpt.txt ...
[15:45:40    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[15:45:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:45:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:45:41    INFO]  -----------------------------------------------------------------------------------------------------------
[15:45:41    INFO]  - starting storeTreeToAscii() ... 
[15:45:41    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[15:45:41    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced7/regres/optim/eval/ANNZ_randomReg_0000.csv
[15:45:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:45:41    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[15:45:41    INFO]  -----------------------------------------------------------------------------------------------------------
[15:45:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:45:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[15:45:41    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[15:46:00    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/optim/eval/plots/

(15:46 INFO) [40;37;1m - 12/03/19 15:46:11 - finished running ANNZ ![0m
(15:53 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:53 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:53 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:53 INFO) [40;37;1m - 12/03/19 15:53:42 - starting ANNZ[0m
(15:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data10c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:53 INFO) 
[15:53:42    INFO]  -----------------------------------------------------
[15:53:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:53:42    INFO]  -----------------------------------------------------------------------------------------------------------
[15:53:42    INFO]  - starting ANNZ::Init()  ... 
[15:53:42    INFO]  - Will generate 1 PDFs ... 
[15:54:10    INFO] --------------------------------------------------------
[15:54:10    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,
[15:54:10    INFO]  - All REJECTED MLMs: ANNZ_24,
[15:54:10    INFO] ----------------------------------------------------------------------------------------------------------------
[15:54:15    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/eval_nFile0/saveOpt.txt ...
[15:55:45   ERROR]  - ... ------------------------------------------------------------ 
[15:55:45   ERROR]  - MESSAGE -  - Failed system-call (echo '[postTrainDirName]=regres/train/postTrain/' >> ./output/SPEC_advanced7/regres/eval_nFile0/saveOpt.txt) - sysReturn = -1... 
[15:55:45   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[15:55:45   ERROR]  - ..... ABORTING !!! 
[15:55:45   ERROR]  ------------------------------------------------------------ ... - 
(15:55 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(15:55 CRITICAL) [41;37;1mWill terminate !!!![0m
(00:00 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(00:00 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(00:00 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(00:00 INFO) [40;37;1m - 13/03/19 00:00:47 - starting ANNZ[0m
(00:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m40[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced7[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data10c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(00:00 INFO) 
[00:00:48    INFO]  -----------------------------------------------------
[00:00:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:00:48    INFO]  -----------------------------------------------------------------------------------------------------------
[00:00:49    INFO]  - starting ANNZ::Init()  ... 
[00:00:49    INFO]  - Will generate 1 PDFs ... 
[00:01:11    INFO] --------------------------------------------------------
[00:01:11    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,
[00:01:11    INFO]  - All REJECTED MLMs: ANNZ_24,
[00:01:11    INFO] ----------------------------------------------------------------------------------------------------------------
[00:01:16    INFO]  - Saving run information in ./output/SPEC_advanced7/regres/eval_nFile0/saveOpt.txt ...
[00:02:02    INFO]  - starting inputToFullTree(ANNz_data10c.csv) ... 
[00:02:03    INFO]  - Found 2232 lines in file PAUS/ANNz_data10c.csv -> total so far = 2232 ... 
[00:02:03    INFO]  - Now reading-in PAUS/ANNz_data10c.csv ... 
[00:02:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:02:03    INFO]  -- ANNZ_tree_eval .................................. 2232  nLine
[00:02:03    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[00:02:03    INFO]  -----------------------------------------------------------------------------------------------------------
[00:02:03    INFO]  - starting ANNZ::Eval() ... 
[00:02:03    INFO]  - starting ANNZ::doEvalReg() ... 
[00:02:03    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,
[00:02:03    INFO]  - Reading bias-correction results from ./output/SPEC_advanced7/regres/optim/saveOptimObj.root ...
[00:02:03    INFO]  - Getting optimization results from ./output/SPEC_advanced7/regres/optim/saveOptimOpt.txt ...
[00:02:03    INFO]  - creating MLM trees from input ...
[00:02:03    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_1,ANNZ_3,ANNZ_4,ANNZ_7,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_13,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_25,ANNZ_26,ANNZ_30,ANNZ_32,ANNZ_34,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,
[00:02:03    INFO]  - starting ANNZ::loadReaders() ... 
[00:26:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:26:22    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[00:26:22    INFO]  -----------------------------------------------------------------------------------------------------------
[00:26:22    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[00:26:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:26:24    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 2232  nObj
[00:26:24    INFO]  -----------------------------------------------------------------------------------------------------------
[00:26:24    INFO]  - starting storeTreeToAscii() ... 
[00:26:24    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[00:26:24    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced7/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[00:26:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:26:24    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[00:26:24    INFO]  -----------------------------------------------------------------------------------------------------------
[00:26:25    INFO]  - detected the target,zspec in the evaluated sample - Will create performance plots ...
[00:26:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:26:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[00:26:25    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[00:26:34    INFO]  - Writing to plotting directory output/SPEC_advanced7/regres/eval_nFile0/plots/

(00:26 INFO) [40;37;1m - 13/03/19 00:26:39 - finished running ANNZ ![0m
