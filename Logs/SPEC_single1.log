(13:16 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(13:16 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(13:16 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(13:16 INFO) [40;37;1m - 01/02/19 13:16:00 - starting ANNZ[0m
(13:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:16 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data7a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_single1[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data7b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:16 INFO) 
[13:16:00    INFO]  -----------------------------------------------------
[13:16:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:16:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:16:03    INFO]  - starting inputToSplitTree() ... 
[13:16:03    INFO]  - Found 8927 lines in file PAUS/ANNz_data7a.csv -> total so far = 8927 ... 
[13:16:03    INFO]  - Found 2233 lines in file PAUS/ANNz_data7b.csv -> total so far = 2233 ... 
[13:16:03    INFO]  - Now reading-in PAUS/ANNz_data7a.csv ... 
[13:16:03   ERROR]  - ... ------------------------------------------------------------ 
[13:16:03   ERROR]  - MESSAGE -  - Could not perform conversion from string to float for stof(ref_id) 
[13:16:03   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 164 , (Jan 22 2019 21:40:08) 
[13:16:03   ERROR]  - ..... ABORTING !!! 
[13:16:03   ERROR]  ------------------------------------------------------------ ... - 
(13:16 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(13:16 CRITICAL) [41;37;1mWill terminate !!!![0m
(13:19 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(13:19 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(13:19 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(13:19 INFO) [40;37;1m - 01/02/19 13:19:14 - starting ANNZ[0m
(13:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:19 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data7a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_single1[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data7b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:19 INFO) 
[13:19:14    INFO]  -----------------------------------------------------
[13:19:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:19:14    INFO]  -----------------------------------------------------------------------------------------------------------
[13:19:15    INFO]  - starting inputToSplitTree() ... 
[13:19:15    INFO]  - Found 8926 lines in file PAUS/ANNz_data7a.csv -> total so far = 8926 ... 
[13:19:15    INFO]  - Found 2232 lines in file PAUS/ANNz_data7b.csv -> total so far = 2232 ... 
[13:19:15    INFO]  - Now reading-in PAUS/ANNz_data7a.csv ... 
[13:19:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:19:15    INFO]  -- ANNZ_tree .......................................... 0  index
[13:19:15    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[13:19:15    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[13:19:15    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[13:19:15    INFO]  -- ANNZ_tree .......................................... 0  nTest
[13:19:15    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[13:19:15    INFO]  -----------------------------------------------------------------------------------------------------------
[13:19:16    INFO]  - Now reading-in PAUS/ANNz_data7b.csv ... 
[13:19:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:19:16    INFO]  -- ANNZ_tree .......................................... 0  index
[13:19:16    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[13:19:16    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[13:19:16    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[13:19:16    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[13:19:16    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[13:19:16    INFO]  -----------------------------------------------------------------------------------------------------------
[13:19:16    INFO]  - Writing to plotting directory output/SPEC_single1/rootIn/plots/
[13:19:18    INFO]  - Writing to plotting directory output/SPEC_single1/rootIn/plots/

(13:19 INFO) [40;37;1m - 01/02/19 13:19:19 - finished running ANNZ ![0m
(13:20 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(13:20 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(13:20 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(13:20 INFO) [40;37;1m - 01/02/19 13:20:04 - starting ANNZ[0m
(13:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_single1[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:20 INFO) 
[13:20:04    INFO]  -----------------------------------------------------
[13:20:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:20:04    INFO]  -----------------------------------------------------------------------------------------------------------
[13:20:04    INFO]  - starting ANNZ::Init()  ... 
[13:20:05    INFO]  - Saving run information in ./output/SPEC_single1/regres/train/ANNZ_0/saveOpt.txt ...
[13:20:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:20:10    INFO]  - Found userMLMopts = "" - will generate randomized options... 
[13:20:10   ERROR]  - ... ------------------------------------------------------------ 
[13:20:10   ERROR]  - MESSAGE - Currently the target of the regression ("zTrg") can only be set as one of the input variables ! 
[13:20:10   ERROR]  - FROM    - FILE: ../src/ANNZ_train.cpp , LINE: 1655 , (Jan 22 2019 21:40:46) 
[13:20:10   ERROR]  - ..... ABORTING !!! 
[13:20:10   ERROR]  ------------------------------------------------------------ ... - 
(13:20 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(13:20 CRITICAL) [41;37;1mWill terminate !!!![0m
(13:22 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(13:22 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(13:22 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(13:22 INFO) [40;37;1m - 01/02/19 13:22:57 - starting ANNZ[0m
(13:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_single1[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:22 INFO) 
[13:22:57    INFO]  -----------------------------------------------------
[13:22:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:22:57    INFO]  -----------------------------------------------------------------------------------------------------------
[13:22:58    INFO]  - starting ANNZ::Init()  ... 
[13:22:58    INFO]  - Saving run information in ./output/SPEC_single1/regres/train/ANNZ_0/saveOpt.txt ...
[13:23:03    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:23:03    INFO]  - Found userMLMopts = "" - will generate randomized options... 
[13:23:03    INFO] ----------------------------------------------------------------------------------------------------
[13:23:03    INFO]  - will book (ANNZ_0) method(BDT) with options: :VarTransform=N,P:NTrees=520:BoostType=AdaBoost
[13:23:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random::NormMode=NumEvents
[13:23:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:23:03    INFO]      cuts (train):        ,
[13:23:03    INFO]      cuts (valid):       
[13:23:03    INFO]    - weights:            1
[13:23:03    INFO] ----------------------------------------------------------------------------------------------------
[13:23:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:23:31    INFO]  - Saving MLM information in ./output/SPEC_single1/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[13:23:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[13:23:33    INFO]  - Will gen. errors by KNN method ...
[13:23:34    INFO]  - starting ANNZ::loadReaders() ... 
[13:23:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_single1/rootIn/ANNZ_tree_train*.root
[13:24:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:24:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:24:03    INFO]  -----------------------------------------------------------------------------------------------------------
[13:24:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_single1/rootIn/ANNZ_tree_valid*.root
[13:24:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:24:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:24:10    INFO]  -----------------------------------------------------------------------------------------------------------
[13:24:11    INFO]  - Saving file ./output/SPEC_single1/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:24:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:24:12    INFO]  - will try to derive a bias correction ... 
[13:24:12    INFO]  - will validate that training produced an XML file for later ... 
[13:24:12    INFO]  - starting ANNZ::loadReaders() ... 
[13:24:14    INFO]  - will validate that the training was not a complete failure ... 
[13:24:14    INFO]  - training seems to have been successful! will move on ...
[13:24:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:24:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:24:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:24:17    INFO] ----------------------------------------------------------------------------------------------------
[13:24:17    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:24:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:24:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:24:17    INFO]    - weights:            1
[13:24:17    INFO] ----------------------------------------------------------------------------------------------------
[13:24:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:24:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[13:24:24    INFO]  - Will gen. errors by KNN method ...
[13:24:25    INFO]  - starting ANNZ::loadReaders() ... 
[13:24:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_single1/rootIn/ANNZ_tree_train*.root
[13:24:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:24:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:24:53    INFO]  -----------------------------------------------------------------------------------------------------------
[13:24:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_single1/rootIn/ANNZ_tree_valid*.root
[13:25:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:25:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:25:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:25:01    INFO]  - Saving file ./output/SPEC_single1/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:25:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:25:02    INFO]  - will validate that the bias-correction actually improved the result ...
[13:25:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:25:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[13:25:07    INFO]  - Writing to plotting directory output/SPEC_single1/regres/train/ANNZ_0/plots/
[13:25:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_single1/regres/train/ANNZ_0/plots output/SPEC_single1/regres/train/ANNZ_0/plots_biasCor_before
[13:25:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:25:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[13:25:23    INFO]  - Writing to plotting directory output/SPEC_single1/regres/train/ANNZ_0/plots/
[13:25:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_single1/regres/train/ANNZ_0/plots output/SPEC_single1/regres/train/ANNZ_0/plots_biasCor_after
[13:25:34    INFO]  - Got original [KS-test,N_poiss]: [0.0610576 , 5.88276] , after the bias-correction: [0.032011 , 5.35086] --> will KEEP the correction !

(13:25 INFO) [40;37;1m - 01/02/19 13:25:37 - finished running ANNZ ![0m
(13:31 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(13:31 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(13:31 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(13:31 INFO) [40;37;1m - 01/02/19 13:31:09 - starting ANNZ[0m
(13:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_single1[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:31 INFO) 
[13:31:09    INFO]  -----------------------------------------------------
[13:31:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:31:09    INFO]  -----------------------------------------------------------------------------------------------------------
[13:31:09    INFO]  - starting ANNZ::Init()  ... 
[13:31:09    INFO]  - Will generate 0 PDFs ... 
[13:31:09    INFO] --------------------------------------------------------
[13:31:09    INFO]  - All ACCEPTED MLMs: ANNZ_0,
[13:31:09    INFO]  - All REJECTED MLMs: 
[13:31:09    INFO] ----------------------------------------------------------------------------------------------------------------
[13:31:10    INFO]  - Saving run information in ./output/SPEC_single1/regres/optim/saveOpt.txt ...
[13:31:16    INFO]  - starting ANNZ::Optim() ... 
[13:31:16    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[13:31:16    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[13:31:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:31:17    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_single1/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[13:31:17    INFO]  - found only 1 MLMs in the chain. Nothing to do... 
[13:31:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:31:17    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_single1/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[13:31:17    INFO]  - found only 1 MLMs in the chain. Nothing to do... 
[13:31:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:31:17    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/SPEC_single1/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[13:31:17    INFO]  - found only 1 MLMs in the chain. Nothing to do... 
[13:31:17    INFO]  - Saving file ./output/SPEC_single1/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[13:31:17    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[13:31:17    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_single1/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[13:31:17    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[13:31:17    INFO]  - ending makeTreeRegClsAllMLM() ... 
[13:31:17    INFO]  - starting ANNZ::optimReg() ... 
[13:31:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:31:18    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_single1/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[13:31:18    INFO]  - starting ANNZ::fillColosureV() ... 
[13:31:18    INFO]  ---------------------------------------------------------------------------------- 
[13:31:18    INFO]  - Got the following average properties: 
[13:31:18    INFO]  --------------------------------------- 
[13:31:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00531663 	 0.042011 	 0.0966603
[13:31:18    INFO]  ------------------------------------------------------------------------------------------------- 
[13:31:18    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[13:31:18    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[13:31:18    INFO]  - The "best" MLM is: ANNZ_0
[13:31:18    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[13:31:18    INFO]  - no PDFs requested - nothing to do here... 
[13:31:18    INFO]  - Saving optimization results in ./output/SPEC_single1/regres/optim/saveOptimOpt.txt ...
[13:31:18    INFO]  - Saving bias-correction results in ./output/SPEC_single1/regres/optim/saveOptimObj.root ...
[13:31:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:31:19    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_single1/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[13:31:19    INFO]  - starting ANNZ::doEvalReg() ... 
[13:31:19    INFO]  - Will gen. errors by KNN method for:   ANNZ_0,
[13:31:19    INFO]  - Reading bias-correction results from ./output/SPEC_single1/regres/optim/saveOptimObj.root ...
[13:31:19    INFO]  - Getting optimization results from ./output/SPEC_single1/regres/optim/saveOptimOpt.txt ...
[13:31:19    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[13:31:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:31:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:31:19    INFO]  -----------------------------------------------------------------------------------------------------------
[13:31:19    INFO]  - starting storeTreeToAscii() ... 
[13:31:19    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,
[13:31:19    INFO]  - Will parse  ANNZ_tree_singleReg(2232)... Now in ./output/SPEC_single1/regres/optim/eval/ANNZ_singleReg_0000.csv
[13:31:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:31:19    INFO]  -- ANNZ_singleReg .................................. 2232  nObj
[13:31:19    INFO]  -----------------------------------------------------------------------------------------------------------
[13:31:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:31:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[13:31:21    INFO]  - Writing to plotting directory output/SPEC_single1/regres/optim/eval/plots/

(13:31 INFO) [40;37;1m - 01/02/19 13:31:23 - finished running ANNZ ![0m
(13:32 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(13:32 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(13:32 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(13:32 INFO) [40;37;1m - 01/02/19 13:32:11 - starting ANNZ[0m
(13:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m1[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_single1[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32meval1[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data7c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mTrue[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:32 INFO) 
[13:32:11    INFO]  -----------------------------------------------------
[13:32:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:32:11    INFO]  -----------------------------------------------------------------------------------------------------------
[13:32:11    INFO]  - starting ANNZ::Init()  ... 
[13:32:11    INFO]  - Will generate 0 PDFs ... 
[13:32:11    INFO] --------------------------------------------------------
[13:32:11    INFO]  - All ACCEPTED MLMs: ANNZ_0,
[13:32:11    INFO]  - All REJECTED MLMs: 
[13:32:11    INFO] ----------------------------------------------------------------------------------------------------------------
[13:32:12    INFO]  - Saving run information in ./output/SPEC_single1/regres/eval_eval1/saveOpt.txt ...
[13:32:18    INFO]  - starting inputToFullTree(ANNz_data7c.csv) ... 
[13:32:18    INFO]  - Found 2232 lines in file PAUS/ANNz_data7c.csv -> total so far = 2232 ... 
[13:32:18    INFO]  - Now reading-in PAUS/ANNz_data7c.csv ... 
[13:32:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:32:18    INFO]  -- ANNZ_tree_eval .................................. 2232  nLine
[13:32:18    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[13:32:18    INFO]  -----------------------------------------------------------------------------------------------------------
[13:32:18    INFO]  - starting ANNZ::Eval() ... 
[13:32:18    INFO]  - starting ANNZ::doEvalReg() ... 
[13:32:18    INFO]  - Will gen. errors by KNN method for:   ANNZ_0,
[13:32:18    INFO]  - Reading bias-correction results from ./output/SPEC_single1/regres/optim/saveOptimObj.root ...
[13:32:18    INFO]  - Getting optimization results from ./output/SPEC_single1/regres/optim/saveOptimOpt.txt ...
[13:32:18    INFO]  - creating MLM trees from input ...
[13:32:18    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,
[13:32:18    INFO]  - starting ANNZ::loadReaders() ... 
[13:32:20    INFO]  - Created KnnErr chain  ANNZ_tree_errKNN+ANNZ_tree_train(8926) from ./output/SPEC_single1/regres/train/postTrain/ANNZ_tree_errKNN*.root+./output/SPEC_single1/rootIn/ANNZ_tree_train*.root
[13:32:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:32:22    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[13:32:22    INFO]  -----------------------------------------------------------------------------------------------------------
[13:32:22    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[13:32:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:32:22    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 2232  nObj
[13:32:22    INFO]  -----------------------------------------------------------------------------------------------------------
[13:32:22    INFO]  - starting storeTreeToAscii() ... 
[13:32:22    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,
[13:32:22    INFO]  - Will parse  ANNZ_tree_singleReg(2232)... Now in ./output/SPEC_single1/regres/eval_eval1/ANNZ_singleReg_0000.csv
[13:32:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:32:22    INFO]  -- ANNZ_singleReg .................................. 2232  nObj
[13:32:22    INFO]  -----------------------------------------------------------------------------------------------------------
[13:32:22    INFO]  - detected the target,zspec in the evaluated sample - Will create performance plots ...
[13:32:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:32:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[13:32:24    INFO]  - Writing to plotting directory output/SPEC_single1/regres/eval_eval1/plots/

(13:32 INFO) [40;37;1m - 01/02/19 13:32:26 - finished running ANNZ ![0m
