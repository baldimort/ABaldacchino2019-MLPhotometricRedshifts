(21:35 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:35 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:35 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:35 INFO) [40;37;1m - 12/02/19 21:35:52 - starting ANNZ[0m
(21:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:35 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data8a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data8b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:35 INFO) 
[21:35:52    INFO]  -----------------------------------------------------
[21:35:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:35:52    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:55    INFO]  - starting inputToSplitTree() ... 
[21:35:55    INFO]  - Found 13465 lines in file PAUS/ANNz_data8a.csv -> total so far = 13465 ... 
[21:35:56    INFO]  - Found 3366 lines in file PAUS/ANNz_data8b.csv -> total so far = 3366 ... 
[21:35:56    INFO]  - Now reading-in PAUS/ANNz_data8a.csv ... 
[21:35:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:35:58    INFO]  -- ANNZ_tree .......................................... 0  index
[21:35:58    INFO]  -- ANNZ_tree ...................................... 13465  nLine
[21:35:58    INFO]  -- ANNZ_tree ...................................... 13465  nLineFile
[21:35:58    INFO]  -- ANNZ_tree ...................................... 13465  nObj
[21:35:58    INFO]  -- ANNZ_tree .......................................... 0  nTest
[21:35:58    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[21:35:58    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:58    INFO]  - Now reading-in PAUS/ANNz_data8b.csv ... 
[21:35:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:35:59    INFO]  -- ANNZ_tree .......................................... 0  index
[21:35:59    INFO]  -- ANNZ_tree ...................................... 16831  nLine
[21:35:59    INFO]  -- ANNZ_tree ....................................... 3366  nLineFile
[21:35:59    INFO]  -- ANNZ_tree ....................................... 3366  nObj
[21:35:59    INFO]  -- ANNZ_tree ....................................... 3366  nTest
[21:35:59    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[21:35:59    INFO]  -----------------------------------------------------------------------------------------------------------
[21:36:00    INFO]  - Writing to plotting directory output/PAUS_advanced13/rootIn/plots/
[21:36:02    INFO]  - Writing to plotting directory output/PAUS_advanced13/rootIn/plots/

(21:36 INFO) [40;37;1m - 12/02/19 21:36:04 - finished running ANNZ ![0m
(21:36 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:36 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:36 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:36 INFO) [40;37;1m - 12/02/19 21:36:35 - starting ANNZ[0m
(21:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=670:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:36 INFO) 
[21:36:36    INFO]  -----------------------------------------------------
[21:36:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:36:36    INFO]  -----------------------------------------------------------------------------------------------------------
[21:36:37    INFO]  - starting ANNZ::Init()  ... 
[21:36:39    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_0/saveOpt.txt ...
[21:36:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:36:55    INFO] ----------------------------------------------------------------------------------------------------
[21:36:55    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=670:BoostType=AdaBoost:VarTransform=N,P
[21:36:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:36:55    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:36:55    INFO]      cuts (train):        ,
[21:36:55    INFO]      cuts (valid):       
[21:36:55    INFO]    - weights:            1
[21:36:55    INFO] ----------------------------------------------------------------------------------------------------
[21:36:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:37:59    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[21:38:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[21:38:02    INFO]  - Will gen. errors by KNN method ...
[21:38:04    INFO]  - starting ANNZ::loadReaders() ... 
[21:38:18    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:39:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:39:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:39:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:39:04    INFO]  -----------------------------------------------------------------------------------------------------------
[21:39:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:39:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:39:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:39:21    INFO]  -----------------------------------------------------------------------------------------------------------
[21:39:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[21:39:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:39:38    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:39:38    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:39:38    INFO]  -----------------------------------------------------------------------------------------------------------
[21:39:39    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:39:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:39:41    INFO]  - will try to derive a bias correction ... 
[21:39:41    INFO]  - will validate that training produced an XML file for later ... 
[21:39:41    INFO]  - starting ANNZ::loadReaders() ... 
[21:39:44    INFO]  - will validate that the training was not a complete failure ... 
[21:39:44    INFO]  - training seems to have been successful! will move on ...
[21:39:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:39:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:39:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:39:50    INFO] ----------------------------------------------------------------------------------------------------
[21:39:50    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:39:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:39:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:39:50    INFO]    - weights:            1
[21:39:50    INFO] ----------------------------------------------------------------------------------------------------
[21:39:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:40:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[21:40:05    INFO]  - Will gen. errors by KNN method ...
[21:40:07    INFO]  - starting ANNZ::loadReaders() ... 
[21:40:19    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:41:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:41:05    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:41:05    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:41:05    INFO]  -----------------------------------------------------------------------------------------------------------
[21:41:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:41:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:41:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:41:21    INFO]  -----------------------------------------------------------------------------------------------------------
[21:41:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[21:41:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:41:37    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:41:37    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:41:37    INFO]  -----------------------------------------------------------------------------------------------------------
[21:41:38    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:41:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:41:40    INFO]  - will validate that the bias-correction actually improved the result ...
[21:41:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:41:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[21:41:48    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_0/plots/
[21:41:59        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_0/plots output/PAUS_advanced13/regres/train/ANNZ_0/plots_biasCor_before
[21:41:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:41:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[21:42:04    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_0/plots/
[21:42:16        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_0/plots output/PAUS_advanced13/regres/train/ANNZ_0/plots_biasCor_after
[21:42:16    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.90436] , after the bias-correction: [0.022148 , 3.45132] --> will KEEP the correction !

(21:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:42 INFO) 
[21:42:21    INFO]  -----------------------------------------------------
[21:42:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:42:21    INFO]  -----------------------------------------------------------------------------------------------------------
[21:42:22    INFO]  - starting ANNZ::Init()  ... 
[21:42:23    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_1/saveOpt.txt ...
[21:42:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:42:37    INFO] ----------------------------------------------------------------------------------------------------
[21:42:37    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=270:BoostType=AdaBoost:VarTransform=P
[21:42:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:42:37    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:42:37    INFO]      cuts (train):        ,
[21:42:37    INFO]      cuts (valid):       
[21:42:37    INFO]    - weights:            1
[21:42:37    INFO] ----------------------------------------------------------------------------------------------------
[21:42:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:43:01    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[21:43:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[21:43:03    INFO]  - Will gen. errors by KNN method ...
[21:43:04    INFO]  - starting ANNZ::loadReaders() ... 
[21:43:08    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:43:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:43:44    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:43:44    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:43:44    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:43:59    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:43:59    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:43:59    INFO]  -----------------------------------------------------------------------------------------------------------
[21:44:01    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[21:44:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:44:14    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:44:14    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:44:14    INFO]  -----------------------------------------------------------------------------------------------------------
[21:44:15    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:44:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:44:16    INFO]  - will try to derive a bias correction ... 
[21:44:16    INFO]  - will validate that training produced an XML file for later ... 
[21:44:16    INFO]  - starting ANNZ::loadReaders() ... 
[21:44:17    INFO]  - will validate that the training was not a complete failure ... 
[21:44:17    INFO]  - training seems to have been successful! will move on ...
[21:44:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:44:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:44:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:44:22    INFO] ----------------------------------------------------------------------------------------------------
[21:44:22    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:44:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:44:22    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:44:22    INFO]    - weights:            1
[21:44:22    INFO] ----------------------------------------------------------------------------------------------------
[21:44:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:44:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[21:44:32    INFO]  - Will gen. errors by KNN method ...
[21:44:33    INFO]  - starting ANNZ::loadReaders() ... 
[21:44:44    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:45:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:45:21    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:45:21    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:45:21    INFO]  -----------------------------------------------------------------------------------------------------------
[21:45:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:45:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:45:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:45:33    INFO]  -----------------------------------------------------------------------------------------------------------
[21:45:35    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[21:45:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:45:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:45:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:45:44    INFO]  -----------------------------------------------------------------------------------------------------------
[21:45:45    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:45:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:45:46    INFO]  - will validate that the bias-correction actually improved the result ...
[21:45:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:45:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[21:45:51    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_1/plots/
[21:46:02        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_1/plots output/PAUS_advanced13/regres/train/ANNZ_1/plots_biasCor_before
[21:46:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:46:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[21:46:07    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_1/plots/
[21:46:20        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_1/plots output/PAUS_advanced13/regres/train/ANNZ_1/plots_biasCor_after
[21:46:20    INFO]  - Got original [KS-test,N_poiss]: [0.0473709 , 4.21006] , after the bias-correction: [0.0189363 , 3.55434] --> will KEEP the correction !

(21:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:46 INFO) 
[21:46:23    INFO]  -----------------------------------------------------
[21:46:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:46:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:46:25    INFO]  - starting ANNZ::Init()  ... 
[21:46:26    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_2/saveOpt.txt ...
[21:46:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:46:40    INFO] ----------------------------------------------------------------------------------------------------
[21:46:40    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N,P
[21:46:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:46:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:46:40    INFO]      cuts (train):        ,
[21:46:40    INFO]      cuts (valid):       
[21:46:40    INFO]    - weights:            1
[21:46:40    INFO] ----------------------------------------------------------------------------------------------------
[21:46:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:47:26    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[21:47:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[21:47:29    INFO]  - Will gen. errors by KNN method ...
[21:47:31    INFO]  - starting ANNZ::loadReaders() ... 
[21:47:40    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:48:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:48:23    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:48:23    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:48:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:48:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:48:37    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:48:37    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:48:37    INFO]  -----------------------------------------------------------------------------------------------------------
[21:48:39    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[21:48:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:48:53    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:48:53    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:48:53    INFO]  -----------------------------------------------------------------------------------------------------------
[21:48:54    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:48:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:48:55    INFO]  - will try to derive a bias correction ... 
[21:48:55    INFO]  - will validate that training produced an XML file for later ... 
[21:48:55    INFO]  - starting ANNZ::loadReaders() ... 
[21:48:58    INFO]  - will validate that the training was not a complete failure ... 
[21:48:58    INFO]  - training seems to have been successful! will move on ...
[21:48:58    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:49:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:49:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:49:03    INFO] ----------------------------------------------------------------------------------------------------
[21:49:03    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:49:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:49:03    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:49:03    INFO]    - weights:            1
[21:49:03    INFO] ----------------------------------------------------------------------------------------------------
[21:49:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:49:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[21:49:16    INFO]  - Will gen. errors by KNN method ...
[21:49:18    INFO]  - starting ANNZ::loadReaders() ... 
[21:49:28    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:50:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:50:14    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:50:14    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:50:14    INFO]  -----------------------------------------------------------------------------------------------------------
[21:50:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:50:28    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:50:28    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:50:28    INFO]  -----------------------------------------------------------------------------------------------------------
[21:50:30    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[21:50:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:50:43    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:50:43    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:50:43    INFO]  -----------------------------------------------------------------------------------------------------------
[21:50:44    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:50:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:50:46    INFO]  - will validate that the bias-correction actually improved the result ...
[21:50:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:50:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[21:50:52    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_2/plots/
[21:51:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_2/plots output/PAUS_advanced13/regres/train/ANNZ_2/plots_biasCor_before
[21:51:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:51:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[21:51:10    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_2/plots/
[21:51:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_2/plots output/PAUS_advanced13/regres/train/ANNZ_2/plots_biasCor_after
[21:51:23    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.8953] , after the bias-correction: [0.0219252 , 3.46552] --> will KEEP the correction !

(21:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:51 INFO) 
[21:51:29    INFO]  -----------------------------------------------------
[21:51:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:51:29    INFO]  -----------------------------------------------------------------------------------------------------------
[21:51:30    INFO]  - starting ANNZ::Init()  ... 
[21:51:32    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_3/saveOpt.txt ...
[21:51:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:51:48    INFO] ----------------------------------------------------------------------------------------------------
[21:51:48    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N
[21:51:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:51:48    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:51:48    INFO]      cuts (train):        ,
[21:51:48    INFO]      cuts (valid):       
[21:51:48    INFO]    - weights:            1
[21:51:48    INFO] ----------------------------------------------------------------------------------------------------
[21:51:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:52:52    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[21:52:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[21:52:58    INFO]  - Will gen. errors by KNN method ...
[21:53:01    INFO]  - starting ANNZ::loadReaders() ... 
[21:53:18    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:54:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:54:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:54:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:54:08    INFO]  -----------------------------------------------------------------------------------------------------------
[21:54:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:54:25    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:54:25    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:54:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:54:27    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[21:54:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:54:43    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:54:43    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:54:43    INFO]  -----------------------------------------------------------------------------------------------------------
[21:54:45    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:54:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:54:47    INFO]  - will try to derive a bias correction ... 
[21:54:47    INFO]  - will validate that training produced an XML file for later ... 
[21:54:47    INFO]  - starting ANNZ::loadReaders() ... 
[21:54:55    INFO]  - will validate that the training was not a complete failure ... 
[21:54:55    INFO]  - training seems to have been successful! will move on ...
[21:54:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:55:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:55:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:55:02    INFO] ----------------------------------------------------------------------------------------------------
[21:55:02    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:55:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:55:02    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:55:02    INFO]    - weights:            1
[21:55:02    INFO] ----------------------------------------------------------------------------------------------------
[21:55:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:55:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[21:55:17    INFO]  - Will gen. errors by KNN method ...
[21:55:20    INFO]  - starting ANNZ::loadReaders() ... 
[21:55:39    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:56:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:56:28    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:56:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:56:28    INFO]  -----------------------------------------------------------------------------------------------------------
[21:56:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:56:45    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:56:45    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:56:45    INFO]  -----------------------------------------------------------------------------------------------------------
[21:56:47    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[21:57:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:57:04    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:57:04    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:57:04    INFO]  -----------------------------------------------------------------------------------------------------------
[21:57:05    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:57:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:57:08    INFO]  - will validate that the bias-correction actually improved the result ...
[21:57:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:57:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[21:57:14    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_3/plots/
[21:57:27        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_3/plots output/PAUS_advanced13/regres/train/ANNZ_3/plots_biasCor_before
[21:57:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:57:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[21:57:32    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_3/plots/
[21:57:44        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_3/plots output/PAUS_advanced13/regres/train/ANNZ_3/plots_biasCor_after
[21:57:44    INFO]  - Got original [KS-test,N_poiss]: [0.0411676 , 4.62703] , after the bias-correction: [0.0263082 , 3.67218] --> will KEEP the correction !

(21:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:57 INFO) 
[21:57:50    INFO]  -----------------------------------------------------
[21:57:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:57:50    INFO]  -----------------------------------------------------------------------------------------------------------
[21:57:51    INFO]  - starting ANNZ::Init()  ... 
[21:57:52    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_4/saveOpt.txt ...
[21:58:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:58:10    INFO] ----------------------------------------------------------------------------------------------------
[21:58:10    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N
[21:58:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:58:10    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:58:10    INFO]      cuts (train):        ,
[21:58:10    INFO]      cuts (valid):       
[21:58:10    INFO]    - weights:            1
[21:58:10    INFO] ----------------------------------------------------------------------------------------------------
[21:58:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:58:43    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[21:58:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[21:58:46    INFO]  - Will gen. errors by KNN method ...
[21:58:47    INFO]  - starting ANNZ::loadReaders() ... 
[21:58:55    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[21:59:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:59:35    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:59:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:59:35    INFO]  -----------------------------------------------------------------------------------------------------------
[21:59:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:59:50    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:59:50    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:59:50    INFO]  -----------------------------------------------------------------------------------------------------------
[21:59:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:00:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:00:06    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:00:06    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:00:06    INFO]  -----------------------------------------------------------------------------------------------------------
[22:00:07    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:00:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:00:09    INFO]  - will try to derive a bias correction ... 
[22:00:09    INFO]  - will validate that training produced an XML file for later ... 
[22:00:09    INFO]  - starting ANNZ::loadReaders() ... 
[22:00:11    INFO]  - will validate that the training was not a complete failure ... 
[22:00:11    INFO]  - training seems to have been successful! will move on ...
[22:00:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:00:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:00:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:00:18    INFO] ----------------------------------------------------------------------------------------------------
[22:00:18    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:00:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:00:18    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:00:18    INFO]    - weights:            1
[22:00:18    INFO] ----------------------------------------------------------------------------------------------------
[22:00:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:00:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[22:00:32    INFO]  - Will gen. errors by KNN method ...
[22:00:35    INFO]  - starting ANNZ::loadReaders() ... 
[22:00:46    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:01:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:01:23    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:01:23    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:01:23    INFO]  -----------------------------------------------------------------------------------------------------------
[22:01:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:01:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:01:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:01:35    INFO]  -----------------------------------------------------------------------------------------------------------
[22:01:37    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:01:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:01:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:01:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:01:47    INFO]  -----------------------------------------------------------------------------------------------------------
[22:01:48    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:01:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:01:49    INFO]  - will validate that the bias-correction actually improved the result ...
[22:01:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:01:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[22:01:56    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_4/plots/
[22:02:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_4/plots output/PAUS_advanced13/regres/train/ANNZ_4/plots_biasCor_before
[22:02:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:02:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[22:02:13    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_4/plots/
[22:02:25        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_4/plots output/PAUS_advanced13/regres/train/ANNZ_4/plots_biasCor_after
[22:02:25    INFO]  - Got original [KS-test,N_poiss]: [0.0470478 , 5.03644] , after the bias-correction: [0.0242288 , 4.12677] --> will KEEP the correction !

(22:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:02 INFO) 
[22:02:29    INFO]  -----------------------------------------------------
[22:02:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:02:29    INFO]  -----------------------------------------------------------------------------------------------------------
[22:02:30    INFO]  - starting ANNZ::Init()  ... 
[22:02:31    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_5/saveOpt.txt ...
[22:02:47    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:02:48    INFO] ----------------------------------------------------------------------------------------------------
[22:02:48    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N
[22:02:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:02:48    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:02:48    INFO]      cuts (train):        ,
[22:02:48    INFO]      cuts (valid):       
[22:02:48    INFO]    - weights:            1
[22:02:48    INFO] ----------------------------------------------------------------------------------------------------
[22:02:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:03:32    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[22:03:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[22:03:36    INFO]  - Will gen. errors by KNN method ...
[22:03:38    INFO]  - starting ANNZ::loadReaders() ... 
[22:03:48    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:04:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:04:32    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:04:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:04:32    INFO]  -----------------------------------------------------------------------------------------------------------
[22:04:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:04:48    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:04:48    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:04:48    INFO]  -----------------------------------------------------------------------------------------------------------
[22:04:50    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:05:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:05:05    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:05:05    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:05:05    INFO]  -----------------------------------------------------------------------------------------------------------
[22:05:06    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:05:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:05:08    INFO]  - will try to derive a bias correction ... 
[22:05:08    INFO]  - will validate that training produced an XML file for later ... 
[22:05:08    INFO]  - starting ANNZ::loadReaders() ... 
[22:05:12    INFO]  - will validate that the training was not a complete failure ... 
[22:05:12    INFO]  - training seems to have been successful! will move on ...
[22:05:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:05:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:05:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:05:19    INFO] ----------------------------------------------------------------------------------------------------
[22:05:19    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:05:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:05:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:05:19    INFO]    - weights:            1
[22:05:19    INFO] ----------------------------------------------------------------------------------------------------
[22:05:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:05:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[22:05:33    INFO]  - Will gen. errors by KNN method ...
[22:05:35    INFO]  - starting ANNZ::loadReaders() ... 
[22:05:46    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:06:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:06:32    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:06:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:06:32    INFO]  -----------------------------------------------------------------------------------------------------------
[22:06:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:06:46    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:06:46    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:06:46    INFO]  -----------------------------------------------------------------------------------------------------------
[22:06:48    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:07:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:07:03    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:07:03    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:07:03    INFO]  -----------------------------------------------------------------------------------------------------------
[22:07:04    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:07:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:07:06    INFO]  - will validate that the bias-correction actually improved the result ...
[22:07:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:07:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[22:07:12    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_5/plots/
[22:07:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_5/plots output/PAUS_advanced13/regres/train/ANNZ_5/plots_biasCor_before
[22:07:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:07:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[22:07:34    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_5/plots/
[22:07:48        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_5/plots output/PAUS_advanced13/regres/train/ANNZ_5/plots_biasCor_after
[22:07:48    INFO]  - Got original [KS-test,N_poiss]: [0.0410191 , 4.63287] , after the bias-correction: [0.0261596 , 3.66187] --> will KEEP the correction !

(22:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:07 INFO) 
[22:07:52    INFO]  -----------------------------------------------------
[22:07:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:07:52    INFO]  -----------------------------------------------------------------------------------------------------------
[22:07:53    INFO]  - starting ANNZ::Init()  ... 
[22:07:55    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_6/saveOpt.txt ...
[22:08:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:08:09    INFO] ----------------------------------------------------------------------------------------------------
[22:08:09    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=450:BoostType=AdaBoost:VarTransform=N
[22:08:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:08:09    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:08:09    INFO]      cuts (train):        ,
[22:08:09    INFO]      cuts (valid):       
[22:08:09    INFO]    - weights:            1
[22:08:09    INFO] ----------------------------------------------------------------------------------------------------
[22:08:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:08:48    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[22:08:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[22:08:51    INFO]  - Will gen. errors by KNN method ...
[22:08:53    INFO]  - starting ANNZ::loadReaders() ... 
[22:09:03    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:09:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:09:46    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:09:46    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:09:46    INFO]  -----------------------------------------------------------------------------------------------------------
[22:09:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:09:59    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:09:59    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:09:59    INFO]  -----------------------------------------------------------------------------------------------------------
[22:10:00    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:10:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:10:12    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:10:12    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:10:12    INFO]  -----------------------------------------------------------------------------------------------------------
[22:10:13    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:10:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:10:15    INFO]  - will try to derive a bias correction ... 
[22:10:15    INFO]  - will validate that training produced an XML file for later ... 
[22:10:15    INFO]  - starting ANNZ::loadReaders() ... 
[22:10:17    INFO]  - will validate that the training was not a complete failure ... 
[22:10:17    INFO]  - training seems to have been successful! will move on ...
[22:10:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:10:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:10:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:10:22    INFO] ----------------------------------------------------------------------------------------------------
[22:10:22    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:10:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:10:22    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:10:22    INFO]    - weights:            1
[22:10:22    INFO] ----------------------------------------------------------------------------------------------------
[22:10:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:10:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[22:10:32    INFO]  - Will gen. errors by KNN method ...
[22:10:34    INFO]  - starting ANNZ::loadReaders() ... 
[22:10:44    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:11:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:11:22    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:11:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:11:22    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:11:36    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:11:36    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:11:36    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:38    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:11:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:11:49    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:11:49    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:11:49    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:50    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:11:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:11:52    INFO]  - will validate that the bias-correction actually improved the result ...
[22:11:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:11:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[22:11:58    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_6/plots/
[22:12:16        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_6/plots output/PAUS_advanced13/regres/train/ANNZ_6/plots_biasCor_before
[22:12:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:12:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[22:12:22    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_6/plots/
[22:12:40        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_6/plots output/PAUS_advanced13/regres/train/ANNZ_6/plots_biasCor_after
[22:12:40    INFO]  - Got original [KS-test,N_poiss]: [0.0471963 , 5.05311] , after the bias-correction: [0.0246761 , 4.04574] --> will KEEP the correction !

(22:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:12 INFO) 
[22:12:45    INFO]  -----------------------------------------------------
[22:12:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:12:45    INFO]  -----------------------------------------------------------------------------------------------------------
[22:12:47    INFO]  - starting ANNZ::Init()  ... 
[22:12:48    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_7/saveOpt.txt ...
[22:13:03    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:13:03    INFO] ----------------------------------------------------------------------------------------------------
[22:13:03    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=460:BoostType=AdaBoostR2:VarTransform=N
[22:13:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:13:03    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:13:03    INFO]      cuts (train):        ,
[22:13:03    INFO]      cuts (valid):       
[22:13:03    INFO]    - weights:            1
[22:13:03    INFO] ----------------------------------------------------------------------------------------------------
[22:13:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:13:54    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[22:13:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[22:13:58    INFO]  - Will gen. errors by KNN method ...
[22:14:00    INFO]  - starting ANNZ::loadReaders() ... 
[22:14:23    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:15:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:15:17    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:15:17    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:15:17    INFO]  -----------------------------------------------------------------------------------------------------------
[22:15:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:15:34    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:15:34    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:15:34    INFO]  -----------------------------------------------------------------------------------------------------------
[22:15:36    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:15:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:15:52    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:15:52    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:15:52    INFO]  -----------------------------------------------------------------------------------------------------------
[22:15:53    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:15:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:15:54    INFO]  - will try to derive a bias correction ... 
[22:15:54    INFO]  - will validate that training produced an XML file for later ... 
[22:15:54    INFO]  - starting ANNZ::loadReaders() ... 
[22:15:57    INFO]  - will validate that the training was not a complete failure ... 
[22:15:57    INFO]  - training seems to have been successful! will move on ...
[22:15:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:16:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:16:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:16:03    INFO] ----------------------------------------------------------------------------------------------------
[22:16:03    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:16:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:16:03    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:16:03    INFO]    - weights:            1
[22:16:03    INFO] ----------------------------------------------------------------------------------------------------
[22:16:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:16:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[22:16:15    INFO]  - Will gen. errors by KNN method ...
[22:16:17    INFO]  - starting ANNZ::loadReaders() ... 
[22:16:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:17:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:17:13    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:17:13    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:17:13    INFO]  -----------------------------------------------------------------------------------------------------------
[22:17:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:17:29    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:17:29    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:17:29    INFO]  -----------------------------------------------------------------------------------------------------------
[22:17:31    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:17:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:17:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:17:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:17:44    INFO]  -----------------------------------------------------------------------------------------------------------
[22:17:45    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:17:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:17:46    INFO]  - will validate that the bias-correction actually improved the result ...
[22:17:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:17:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[22:17:53    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_7/plots/
[22:18:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_7/plots output/PAUS_advanced13/regres/train/ANNZ_7/plots_biasCor_before
[22:18:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:18:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[22:18:11    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_7/plots/
[22:18:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_7/plots output/PAUS_advanced13/regres/train/ANNZ_7/plots_biasCor_after
[22:18:23    INFO]  - Got original [KS-test,N_poiss]: [0.0638581 , 5.17441] , after the bias-correction: [0.0185137 , 4.02551] --> will KEEP the correction !

(22:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:18 INFO) 
[22:18:27    INFO]  -----------------------------------------------------
[22:18:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:18:27    INFO]  -----------------------------------------------------------------------------------------------------------
[22:18:29    INFO]  - starting ANNZ::Init()  ... 
[22:18:30    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_8/saveOpt.txt ...
[22:18:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:18:45    INFO] ----------------------------------------------------------------------------------------------------
[22:18:45    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=310:BoostType=Bagging:VarTransform=N
[22:18:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:18:45    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:18:45    INFO]      cuts (train):        ,
[22:18:45    INFO]      cuts (valid):       
[22:18:45    INFO]    - weights:            1
[22:18:45    INFO] ----------------------------------------------------------------------------------------------------
[22:18:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:19:24    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[22:19:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[22:19:28    INFO]  - Will gen. errors by KNN method ...
[22:19:30    INFO]  - starting ANNZ::loadReaders() ... 
[22:19:40    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:20:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:20:23    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:20:23    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:20:23    INFO]  -----------------------------------------------------------------------------------------------------------
[22:20:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:20:39    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:20:39    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:20:39    INFO]  -----------------------------------------------------------------------------------------------------------
[22:20:41    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:20:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:20:56    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:20:56    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:20:56    INFO]  -----------------------------------------------------------------------------------------------------------
[22:20:57    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:20:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:20:59    INFO]  - will try to derive a bias correction ... 
[22:20:59    INFO]  - will validate that training produced an XML file for later ... 
[22:20:59    INFO]  - starting ANNZ::loadReaders() ... 
[22:21:02    INFO]  - will validate that the training was not a complete failure ... 
[22:21:02    INFO]  - training seems to have been successful! will move on ...
[22:21:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:21:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:21:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:21:08    INFO] ----------------------------------------------------------------------------------------------------
[22:21:08    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:21:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:21:08    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:21:08    INFO]    - weights:            1
[22:21:08    INFO] ----------------------------------------------------------------------------------------------------
[22:21:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:21:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[22:21:22    INFO]  - Will gen. errors by KNN method ...
[22:21:24    INFO]  - starting ANNZ::loadReaders() ... 
[22:21:33    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:22:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:22:16    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:22:16    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:22:16    INFO]  -----------------------------------------------------------------------------------------------------------
[22:22:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:22:30    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:22:30    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:22:30    INFO]  -----------------------------------------------------------------------------------------------------------
[22:22:33    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:22:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:22:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:22:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:22:47    INFO]  -----------------------------------------------------------------------------------------------------------
[22:22:48    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:22:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:22:50    INFO]  - will validate that the bias-correction actually improved the result ...
[22:22:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:22:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[22:22:56    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_8/plots/
[22:23:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_8/plots output/PAUS_advanced13/regres/train/ANNZ_8/plots_biasCor_before
[22:23:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:23:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[22:23:17    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_8/plots/
[22:23:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_8/plots output/PAUS_advanced13/regres/train/ANNZ_8/plots_biasCor_after
[22:23:29    INFO]  - Got original [KS-test,N_poiss]: [0.0410191 , 4.63169] , after the bias-correction: [0.0260834 , 3.69454] --> will KEEP the correction !

(22:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:23 INFO) 
[22:23:34    INFO]  -----------------------------------------------------
[22:23:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:23:34    INFO]  -----------------------------------------------------------------------------------------------------------
[22:23:35    INFO]  - starting ANNZ::Init()  ... 
[22:23:36    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_9/saveOpt.txt ...
[22:23:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:23:52    INFO] ----------------------------------------------------------------------------------------------------
[22:23:52    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=330:BoostType=AdaBoostR2:VarTransform=N
[22:23:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:23:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:23:52    INFO]      cuts (train):        ,
[22:23:52    INFO]      cuts (valid):       
[22:23:52    INFO]    - weights:            1
[22:23:52    INFO] ----------------------------------------------------------------------------------------------------
[22:23:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:24:28    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[22:24:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[22:24:31    INFO]  - Will gen. errors by KNN method ...
[22:24:33    INFO]  - starting ANNZ::loadReaders() ... 
[22:24:42    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:25:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:25:26    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:25:26    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:25:26    INFO]  -----------------------------------------------------------------------------------------------------------
[22:25:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:25:39    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:25:39    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:25:39    INFO]  -----------------------------------------------------------------------------------------------------------
[22:25:40    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:25:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:25:55    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:25:55    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:25:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:25:56    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:25:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:25:57    INFO]  - will try to derive a bias correction ... 
[22:25:57    INFO]  - will validate that training produced an XML file for later ... 
[22:25:57    INFO]  - starting ANNZ::loadReaders() ... 
[22:25:59    INFO]  - will validate that the training was not a complete failure ... 
[22:25:59    INFO]  - training seems to have been successful! will move on ...
[22:25:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:26:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:26:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:26:05    INFO] ----------------------------------------------------------------------------------------------------
[22:26:05    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:26:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:26:05    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:26:05    INFO]    - weights:            1
[22:26:05    INFO] ----------------------------------------------------------------------------------------------------
[22:26:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:26:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[22:26:16    INFO]  - Will gen. errors by KNN method ...
[22:26:18    INFO]  - starting ANNZ::loadReaders() ... 
[22:26:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:27:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:27:17    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:27:17    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:27:17    INFO]  -----------------------------------------------------------------------------------------------------------
[22:27:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:27:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:27:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:27:32    INFO]  -----------------------------------------------------------------------------------------------------------
[22:27:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:27:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:27:46    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:27:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:27:46    INFO]  -----------------------------------------------------------------------------------------------------------
[22:27:47    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:27:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:27:48    INFO]  - will validate that the bias-correction actually improved the result ...
[22:27:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:27:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[22:27:55    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_9/plots/
[22:28:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_9/plots output/PAUS_advanced13/regres/train/ANNZ_9/plots_biasCor_before
[22:28:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:28:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[22:28:11    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_9/plots/
[22:28:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_9/plots output/PAUS_advanced13/regres/train/ANNZ_9/plots_biasCor_after
[22:28:22    INFO]  - Got original [KS-test,N_poiss]: [0.0627441 , 5.25935] , after the bias-correction: [0.0197762 , 4.09969] --> will KEEP the correction !

(22:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:28 INFO) 
[22:28:27    INFO]  -----------------------------------------------------
[22:28:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:28:27    INFO]  -----------------------------------------------------------------------------------------------------------
[22:28:28    INFO]  - starting ANNZ::Init()  ... 
[22:28:29    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_10/saveOpt.txt ...
[22:28:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:28:43    INFO] ----------------------------------------------------------------------------------------------------
[22:28:43    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[22:28:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:28:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:28:43    INFO]      cuts (train):        ,
[22:28:43    INFO]      cuts (valid):       
[22:28:43    INFO]    - weights:            1
[22:28:43    INFO] ----------------------------------------------------------------------------------------------------
[22:28:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:29:09    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[22:29:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[22:29:11    INFO]  - Will gen. errors by KNN method ...
[22:29:13    INFO]  - starting ANNZ::loadReaders() ... 
[22:29:18    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:29:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:29:56    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:29:56    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:29:56    INFO]  -----------------------------------------------------------------------------------------------------------
[22:30:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:30:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:30:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:30:11    INFO]  -----------------------------------------------------------------------------------------------------------
[22:30:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:30:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:30:25    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:30:25    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:30:25    INFO]  -----------------------------------------------------------------------------------------------------------
[22:30:26    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:30:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:30:27    INFO]  - will try to derive a bias correction ... 
[22:30:27    INFO]  - will validate that training produced an XML file for later ... 
[22:30:27    INFO]  - starting ANNZ::loadReaders() ... 
[22:30:28    INFO]  - will validate that the training was not a complete failure ... 
[22:30:29    INFO]  - training seems to have been successful! will move on ...
[22:30:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:30:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:30:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:30:34    INFO] ----------------------------------------------------------------------------------------------------
[22:30:34    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:30:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:30:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:30:34    INFO]    - weights:            1
[22:30:34    INFO] ----------------------------------------------------------------------------------------------------
[22:30:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:30:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[22:30:46    INFO]  - Will gen. errors by KNN method ...
[22:30:47    INFO]  - starting ANNZ::loadReaders() ... 
[22:30:54    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:31:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:31:26    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:31:26    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:31:26    INFO]  -----------------------------------------------------------------------------------------------------------
[22:31:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:31:36    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:31:36    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:31:36    INFO]  -----------------------------------------------------------------------------------------------------------
[22:31:38    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:31:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:31:48    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:31:48    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:31:48    INFO]  -----------------------------------------------------------------------------------------------------------
[22:31:48    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:31:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:31:50    INFO]  - will validate that the bias-correction actually improved the result ...
[22:31:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:31:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[22:31:55    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_10/plots/
[22:32:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_10/plots output/PAUS_advanced13/regres/train/ANNZ_10/plots_biasCor_before
[22:32:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:32:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[22:32:11    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_10/plots/
[22:32:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_10/plots output/PAUS_advanced13/regres/train/ANNZ_10/plots_biasCor_after
[22:32:22    INFO]  - Got original [KS-test,N_poiss]: [0.0381206 , 3.87193] , after the bias-correction: [0.0219234 , 3.46819] --> will KEEP the correction !

(22:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:32 INFO) 
[22:32:26    INFO]  -----------------------------------------------------
[22:32:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:32:26    INFO]  -----------------------------------------------------------------------------------------------------------
[22:32:27    INFO]  - starting ANNZ::Init()  ... 
[22:32:28    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_11/saveOpt.txt ...
[22:32:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:32:43    INFO] ----------------------------------------------------------------------------------------------------
[22:32:43    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P
[22:32:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:32:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:32:43    INFO]      cuts (train):        ,
[22:32:43    INFO]      cuts (valid):       
[22:32:43    INFO]    - weights:            1
[22:32:43    INFO] ----------------------------------------------------------------------------------------------------
[22:32:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:35:17    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[22:35:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[22:35:24    INFO]  - Will gen. errors by KNN method ...
[22:35:27    INFO]  - starting ANNZ::loadReaders() ... 
[22:36:19    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:37:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:37:31    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:37:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:37:31    INFO]  -----------------------------------------------------------------------------------------------------------
[22:37:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:37:55    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:37:55    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:37:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:37:58    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:38:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:38:25    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:38:25    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:38:25    INFO]  -----------------------------------------------------------------------------------------------------------
[22:38:26    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:38:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:38:29    INFO]  - will try to derive a bias correction ... 
[22:38:29    INFO]  - will validate that training produced an XML file for later ... 
[22:38:29    INFO]  - starting ANNZ::loadReaders() ... 
[22:38:35    INFO]  - will validate that the training was not a complete failure ... 
[22:38:35    INFO]  - training seems to have been successful! will move on ...
[22:38:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:38:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:38:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:38:42    INFO] ----------------------------------------------------------------------------------------------------
[22:38:42    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:38:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:38:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:38:42    INFO]    - weights:            1
[22:38:42    INFO] ----------------------------------------------------------------------------------------------------
[22:38:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:38:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[22:38:56    INFO]  - Will gen. errors by KNN method ...
[22:38:59    INFO]  - starting ANNZ::loadReaders() ... 
[22:39:54    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:41:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:41:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:41:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:41:08    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:41:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:41:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:41:33    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:36    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:42:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:42:00    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:42:00    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:42:00    INFO]  -----------------------------------------------------------------------------------------------------------
[22:42:01    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:42:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:42:04    INFO]  - will validate that the bias-correction actually improved the result ...
[22:42:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:42:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[22:42:14    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_11/plots/
[22:42:34        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_11/plots output/PAUS_advanced13/regres/train/ANNZ_11/plots_biasCor_before
[22:42:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:42:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[22:42:39    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_11/plots/
[22:42:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_11/plots output/PAUS_advanced13/regres/train/ANNZ_11/plots_biasCor_after
[22:42:53    INFO]  - Got original [KS-test,N_poiss]: [0.0294309 , 4.8763] , after the bias-correction: [0.015543 , 3.81412] --> will KEEP the correction !

(22:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:42 INFO) 
[22:42:58    INFO]  -----------------------------------------------------
[22:42:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:42:58    INFO]  -----------------------------------------------------------------------------------------------------------
[22:43:00    INFO]  - starting ANNZ::Init()  ... 
[22:43:01    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_12/saveOpt.txt ...
[22:43:16    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:43:17    INFO] ----------------------------------------------------------------------------------------------------
[22:43:17    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P
[22:43:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:43:17    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:43:17    INFO]      cuts (train):        ,
[22:43:17    INFO]      cuts (valid):       
[22:43:17    INFO]    - weights:            1
[22:43:17    INFO] ----------------------------------------------------------------------------------------------------
[22:43:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:45:58    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[22:46:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[22:46:05    INFO]  - Will gen. errors by KNN method ...
[22:46:07    INFO]  - starting ANNZ::loadReaders() ... 
[22:47:03    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:48:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:48:17    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:48:17    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:48:17    INFO]  -----------------------------------------------------------------------------------------------------------
[22:48:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:48:42    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:48:42    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:48:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:48:46    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:49:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:49:11    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:49:11    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:49:11    INFO]  -----------------------------------------------------------------------------------------------------------
[22:49:12    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:49:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:49:15    INFO]  - will try to derive a bias correction ... 
[22:49:15    INFO]  - will validate that training produced an XML file for later ... 
[22:49:15    INFO]  - starting ANNZ::loadReaders() ... 
[22:49:21    INFO]  - will validate that the training was not a complete failure ... 
[22:49:21    INFO]  - training seems to have been successful! will move on ...
[22:49:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:49:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:49:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:49:28    INFO] ----------------------------------------------------------------------------------------------------
[22:49:28    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:49:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:49:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:49:28    INFO]    - weights:            1
[22:49:28    INFO] ----------------------------------------------------------------------------------------------------
[22:49:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:49:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[22:49:42    INFO]  - Will gen. errors by KNN method ...
[22:49:45    INFO]  - starting ANNZ::loadReaders() ... 
[22:50:35    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:51:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:51:46    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:51:46    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:51:46    INFO]  -----------------------------------------------------------------------------------------------------------
[22:52:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:52:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:52:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:52:11    INFO]  -----------------------------------------------------------------------------------------------------------
[22:52:13    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:52:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:52:38    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:52:38    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:52:38    INFO]  -----------------------------------------------------------------------------------------------------------
[22:52:40    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:52:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:52:43    INFO]  - will validate that the bias-correction actually improved the result ...
[22:52:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:52:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[22:52:51    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_12/plots/
[22:53:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_12/plots output/PAUS_advanced13/regres/train/ANNZ_12/plots_biasCor_before
[22:53:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:53:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[22:53:11    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_12/plots/
[22:53:31        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_12/plots output/PAUS_advanced13/regres/train/ANNZ_12/plots_biasCor_after
[22:53:31    INFO]  - Got original [KS-test,N_poiss]: [0.0294309 , 4.8763] , after the bias-correction: [0.015543 , 3.81412] --> will KEEP the correction !

(22:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:53 INFO) 
[22:53:37    INFO]  -----------------------------------------------------
[22:53:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:53:37    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:39    INFO]  - starting ANNZ::Init()  ... 
[22:53:40    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_13/saveOpt.txt ...
[22:53:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:53:56    INFO] ----------------------------------------------------------------------------------------------------
[22:53:56    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[22:53:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:53:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:53:56    INFO]      cuts (train):        ,
[22:53:56    INFO]      cuts (valid):       
[22:53:56    INFO]    - weights:            1
[22:53:56    INFO] ----------------------------------------------------------------------------------------------------
[22:53:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:54:50    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[22:54:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[22:54:55    INFO]  - Will gen. errors by KNN method ...
[22:54:57    INFO]  - starting ANNZ::loadReaders() ... 
[22:55:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:55:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:55:54    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:55:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:55:54    INFO]  -----------------------------------------------------------------------------------------------------------
[22:56:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:56:10    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:56:10    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:56:10    INFO]  -----------------------------------------------------------------------------------------------------------
[22:56:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:56:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:56:27    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:56:27    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:56:27    INFO]  -----------------------------------------------------------------------------------------------------------
[22:56:28    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:56:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:56:30    INFO]  - will try to derive a bias correction ... 
[22:56:30    INFO]  - will validate that training produced an XML file for later ... 
[22:56:30    INFO]  - starting ANNZ::loadReaders() ... 
[22:56:34    INFO]  - will validate that the training was not a complete failure ... 
[22:56:35    INFO]  - training seems to have been successful! will move on ...
[22:56:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:56:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:56:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:56:41    INFO] ----------------------------------------------------------------------------------------------------
[22:56:41    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:56:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:56:41    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:56:41    INFO]    - weights:            1
[22:56:41    INFO] ----------------------------------------------------------------------------------------------------
[22:56:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:56:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[22:56:55    INFO]  - Will gen. errors by KNN method ...
[22:56:58    INFO]  - starting ANNZ::loadReaders() ... 
[22:57:11    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[22:57:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:57:55    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:57:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:57:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:58:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:58:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:58:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:58:11    INFO]  -----------------------------------------------------------------------------------------------------------
[22:58:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[22:58:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:58:29    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:58:29    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:58:29    INFO]  -----------------------------------------------------------------------------------------------------------
[22:58:30    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:58:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:58:32    INFO]  - will validate that the bias-correction actually improved the result ...
[22:58:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:58:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[22:58:39    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_13/plots/
[22:58:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_13/plots output/PAUS_advanced13/regres/train/ANNZ_13/plots_biasCor_before
[22:58:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:58:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[22:58:56    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_13/plots/
[22:59:07        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_13/plots output/PAUS_advanced13/regres/train/ANNZ_13/plots_biasCor_after
[22:59:07    INFO]  - Got original [KS-test,N_poiss]: [0.0409427 , 4.66358] , after the bias-correction: [0.0261596 , 3.7274] --> will KEEP the correction !

(22:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=730:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:59 INFO) 
[22:59:12    INFO]  -----------------------------------------------------
[22:59:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:59:12    INFO]  -----------------------------------------------------------------------------------------------------------
[22:59:13    INFO]  - starting ANNZ::Init()  ... 
[22:59:14    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_14/saveOpt.txt ...
[22:59:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:59:28    INFO] ----------------------------------------------------------------------------------------------------
[22:59:28    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=730:BoostType=AdaBoost:VarTransform=N,P
[22:59:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:59:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:59:28    INFO]      cuts (train):        ,
[22:59:28    INFO]      cuts (valid):       
[22:59:28    INFO]    - weights:            1
[22:59:28    INFO] ----------------------------------------------------------------------------------------------------
[22:59:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:00:34    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[23:00:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[23:00:38    INFO]  - Will gen. errors by KNN method ...
[23:00:40    INFO]  - starting ANNZ::loadReaders() ... 
[23:00:54    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:01:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:01:39    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:01:39    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:01:39    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:01:55    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:01:55    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:01:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:58    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:02:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:02:13    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:02:13    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:02:13    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:14    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:02:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:02:16    INFO]  - will try to derive a bias correction ... 
[23:02:16    INFO]  - will validate that training produced an XML file for later ... 
[23:02:16    INFO]  - starting ANNZ::loadReaders() ... 
[23:02:21    INFO]  - will validate that the training was not a complete failure ... 
[23:02:21    INFO]  - training seems to have been successful! will move on ...
[23:02:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:02:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:02:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:02:29    INFO] ----------------------------------------------------------------------------------------------------
[23:02:29    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:02:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:02:29    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:02:29    INFO]    - weights:            1
[23:02:29    INFO] ----------------------------------------------------------------------------------------------------
[23:02:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:02:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[23:02:45    INFO]  - Will gen. errors by KNN method ...
[23:02:48    INFO]  - starting ANNZ::loadReaders() ... 
[23:03:01    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:03:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:03:44    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:03:44    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:03:44    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:03:59    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:03:59    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:03:59    INFO]  -----------------------------------------------------------------------------------------------------------
[23:04:01    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:04:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:04:17    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:04:17    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:04:17    INFO]  -----------------------------------------------------------------------------------------------------------
[23:04:18    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:04:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:04:21    INFO]  - will validate that the bias-correction actually improved the result ...
[23:04:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:04:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[23:04:29    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_14/plots/
[23:04:44        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_14/plots output/PAUS_advanced13/regres/train/ANNZ_14/plots_biasCor_before
[23:04:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:04:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[23:04:49    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_14/plots/
[23:05:00        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_14/plots output/PAUS_advanced13/regres/train/ANNZ_14/plots_biasCor_after
[23:05:00    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.90461] , after the bias-correction: [0.0222222 , 3.42033] --> will KEEP the correction !

(23:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:05 INFO) 
[23:05:05    INFO]  -----------------------------------------------------
[23:05:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:05:05    INFO]  -----------------------------------------------------------------------------------------------------------
[23:05:06    INFO]  - starting ANNZ::Init()  ... 
[23:05:08    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_15/saveOpt.txt ...
[23:05:22    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:05:23    INFO] ----------------------------------------------------------------------------------------------------
[23:05:23    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=260:BoostType=Bagging:VarTransform=N
[23:05:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:05:23    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:05:23    INFO]      cuts (train):        ,
[23:05:23    INFO]      cuts (valid):       
[23:05:23    INFO]    - weights:            1
[23:05:23    INFO] ----------------------------------------------------------------------------------------------------
[23:05:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:05:52    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[23:05:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[23:05:56    INFO]  - Will gen. errors by KNN method ...
[23:05:58    INFO]  - starting ANNZ::loadReaders() ... 
[23:06:06    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:06:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:06:45    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:06:45    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:06:45    INFO]  -----------------------------------------------------------------------------------------------------------
[23:06:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:06:59    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:06:59    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:06:59    INFO]  -----------------------------------------------------------------------------------------------------------
[23:07:01    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:07:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:07:15    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:07:15    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:07:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:07:15    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:07:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:07:17    INFO]  - will try to derive a bias correction ... 
[23:07:17    INFO]  - will validate that training produced an XML file for later ... 
[23:07:17    INFO]  - starting ANNZ::loadReaders() ... 
[23:07:20    INFO]  - will validate that the training was not a complete failure ... 
[23:07:20    INFO]  - training seems to have been successful! will move on ...
[23:07:20    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:07:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:07:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:07:25    INFO] ----------------------------------------------------------------------------------------------------
[23:07:25    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:07:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:07:25    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:07:25    INFO]    - weights:            1
[23:07:25    INFO] ----------------------------------------------------------------------------------------------------
[23:07:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:07:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[23:07:38    INFO]  - Will gen. errors by KNN method ...
[23:07:39    INFO]  - starting ANNZ::loadReaders() ... 
[23:07:47    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:08:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:08:27    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:08:27    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:08:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:08:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:08:40    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:08:40    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:08:40    INFO]  -----------------------------------------------------------------------------------------------------------
[23:08:42    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:08:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:08:55    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:08:55    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:08:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:08:56    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:08:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:08:58    INFO]  - will validate that the bias-correction actually improved the result ...
[23:08:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:08:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[23:09:04    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_15/plots/
[23:09:15        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_15/plots output/PAUS_advanced13/regres/train/ANNZ_15/plots_biasCor_before
[23:09:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:09:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[23:09:20    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_15/plots/
[23:09:31        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_15/plots output/PAUS_advanced13/regres/train/ANNZ_15/plots_biasCor_after
[23:09:31    INFO]  - Got original [KS-test,N_poiss]: [0.0412419 , 4.63326] , after the bias-correction: [0.0262339 , 3.72912] --> will KEEP the correction !

(23:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:09 INFO) 
[23:09:36    INFO]  -----------------------------------------------------
[23:09:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:09:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:09:37    INFO]  - starting ANNZ::Init()  ... 
[23:09:38    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_16/saveOpt.txt ...
[23:09:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:09:53    INFO] ----------------------------------------------------------------------------------------------------
[23:09:53    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=510:BoostType=AdaBoostR2:VarTransform=N
[23:09:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:09:53    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:09:53    INFO]      cuts (train):        ,
[23:09:53    INFO]      cuts (valid):       
[23:09:53    INFO]    - weights:            1
[23:09:53    INFO] ----------------------------------------------------------------------------------------------------
[23:09:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:10:54    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[23:10:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[23:10:57    INFO]  - Will gen. errors by KNN method ...
[23:10:59    INFO]  - starting ANNZ::loadReaders() ... 
[23:11:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:12:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:12:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:12:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:12:04    INFO]  -----------------------------------------------------------------------------------------------------------
[23:12:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:12:22    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:12:22    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:12:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:12:24    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:12:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:12:40    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:12:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:12:40    INFO]  -----------------------------------------------------------------------------------------------------------
[23:12:41    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:12:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:12:43    INFO]  - will try to derive a bias correction ... 
[23:12:43    INFO]  - will validate that training produced an XML file for later ... 
[23:12:43    INFO]  - starting ANNZ::loadReaders() ... 
[23:12:46    INFO]  - will validate that the training was not a complete failure ... 
[23:12:46    INFO]  - training seems to have been successful! will move on ...
[23:12:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:12:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:12:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:12:52    INFO] ----------------------------------------------------------------------------------------------------
[23:12:52    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:12:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:12:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:12:52    INFO]    - weights:            1
[23:12:52    INFO] ----------------------------------------------------------------------------------------------------
[23:12:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:13:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[23:13:05    INFO]  - Will gen. errors by KNN method ...
[23:13:06    INFO]  - starting ANNZ::loadReaders() ... 
[23:13:22    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:14:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:14:10    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:14:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:14:10    INFO]  -----------------------------------------------------------------------------------------------------------
[23:14:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:14:27    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:14:27    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:14:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:14:28    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:14:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:14:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:14:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:14:44    INFO]  -----------------------------------------------------------------------------------------------------------
[23:14:45    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:14:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:14:47    INFO]  - will validate that the bias-correction actually improved the result ...
[23:14:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:14:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[23:14:53    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_16/plots/
[23:15:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_16/plots output/PAUS_advanced13/regres/train/ANNZ_16/plots_biasCor_before
[23:15:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:15:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[23:15:09    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_16/plots/
[23:15:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_16/plots output/PAUS_advanced13/regres/train/ANNZ_16/plots_biasCor_after
[23:15:21    INFO]  - Got original [KS-test,N_poiss]: [0.0640066 , 5.21331] , after the bias-correction: [0.0188108 , 4.08228] --> will KEEP the correction !

(23:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:15 INFO) 
[23:15:25    INFO]  -----------------------------------------------------
[23:15:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:15:25    INFO]  -----------------------------------------------------------------------------------------------------------
[23:15:26    INFO]  - starting ANNZ::Init()  ... 
[23:15:28    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_17/saveOpt.txt ...
[23:15:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:15:42    INFO] ----------------------------------------------------------------------------------------------------
[23:15:42    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P
[23:15:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:15:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:15:42    INFO]      cuts (train):        ,
[23:15:42    INFO]      cuts (valid):       
[23:15:42    INFO]    - weights:            1
[23:15:42    INFO] ----------------------------------------------------------------------------------------------------
[23:15:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:16:29    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[23:16:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[23:16:33    INFO]  - Will gen. errors by KNN method ...
[23:16:34    INFO]  - starting ANNZ::loadReaders() ... 
[23:16:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:17:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:17:36    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:17:36    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:17:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:17:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:17:52    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:17:52    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:17:52    INFO]  -----------------------------------------------------------------------------------------------------------
[23:17:54    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:18:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:18:09    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:18:09    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:18:09    INFO]  -----------------------------------------------------------------------------------------------------------
[23:18:10    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:18:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:18:12    INFO]  - will try to derive a bias correction ... 
[23:18:12    INFO]  - will validate that training produced an XML file for later ... 
[23:18:12    INFO]  - starting ANNZ::loadReaders() ... 
[23:18:14    INFO]  - will validate that the training was not a complete failure ... 
[23:18:14    INFO]  - training seems to have been successful! will move on ...
[23:18:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:18:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:18:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:18:20    INFO] ----------------------------------------------------------------------------------------------------
[23:18:20    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:18:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:18:20    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:18:20    INFO]    - weights:            1
[23:18:20    INFO] ----------------------------------------------------------------------------------------------------
[23:18:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:18:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[23:18:31    INFO]  - Will gen. errors by KNN method ...
[23:18:33    INFO]  - starting ANNZ::loadReaders() ... 
[23:18:46    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:19:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:19:31    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:19:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:19:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:19:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:19:45    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:19:45    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:19:45    INFO]  -----------------------------------------------------------------------------------------------------------
[23:19:47    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:20:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:20:01    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:20:01    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:20:01    INFO]  -----------------------------------------------------------------------------------------------------------
[23:20:02    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:20:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:20:03    INFO]  - will validate that the bias-correction actually improved the result ...
[23:20:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:20:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[23:20:09    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_17/plots/
[23:20:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_17/plots output/PAUS_advanced13/regres/train/ANNZ_17/plots_biasCor_before
[23:20:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:20:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[23:20:26    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_17/plots/
[23:20:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_17/plots output/PAUS_advanced13/regres/train/ANNZ_17/plots_biasCor_after
[23:20:37    INFO]  - Got original [KS-test,N_poiss]: [0.0292824 , 4.91066] , after the bias-correction: [0.0173254 , 4.08487] --> will KEEP the correction !

(23:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:20 INFO) 
[23:20:42    INFO]  -----------------------------------------------------
[23:20:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:20:42    INFO]  -----------------------------------------------------------------------------------------------------------
[23:20:43    INFO]  - starting ANNZ::Init()  ... 
[23:20:44    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_18/saveOpt.txt ...
[23:20:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:20:59    INFO] ----------------------------------------------------------------------------------------------------
[23:20:59    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N
[23:20:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:20:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:20:59    INFO]      cuts (train):        ,
[23:20:59    INFO]      cuts (valid):       
[23:20:59    INFO]    - weights:            1
[23:20:59    INFO] ----------------------------------------------------------------------------------------------------
[23:21:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:21:55    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[23:22:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[23:22:00    INFO]  - Will gen. errors by KNN method ...
[23:22:03    INFO]  - starting ANNZ::loadReaders() ... 
[23:22:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:23:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:23:02    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:23:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:23:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:23:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:23:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:23:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:23:17    INFO]  -----------------------------------------------------------------------------------------------------------
[23:23:20    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:23:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:23:35    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:23:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:23:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:23:37    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:23:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:23:39    INFO]  - will try to derive a bias correction ... 
[23:23:39    INFO]  - will validate that training produced an XML file for later ... 
[23:23:39    INFO]  - starting ANNZ::loadReaders() ... 
[23:23:45    INFO]  - will validate that the training was not a complete failure ... 
[23:23:45    INFO]  - training seems to have been successful! will move on ...
[23:23:45    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:23:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:23:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:23:52    INFO] ----------------------------------------------------------------------------------------------------
[23:23:52    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:23:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:23:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:23:52    INFO]    - weights:            1
[23:23:52    INFO] ----------------------------------------------------------------------------------------------------
[23:23:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:24:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[23:24:08    INFO]  - Will gen. errors by KNN method ...
[23:24:11    INFO]  - starting ANNZ::loadReaders() ... 
[23:24:29    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:25:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:25:15    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:25:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:25:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:25:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:25:31    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:25:31    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:25:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:25:33    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:25:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:25:49    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:25:49    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:25:49    INFO]  -----------------------------------------------------------------------------------------------------------
[23:25:50    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:25:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:25:52    INFO]  - will validate that the bias-correction actually improved the result ...
[23:25:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:25:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[23:25:59    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_18/plots/
[23:26:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_18/plots output/PAUS_advanced13/regres/train/ANNZ_18/plots_biasCor_before
[23:26:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:26:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[23:26:17    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_18/plots/
[23:26:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_18/plots output/PAUS_advanced13/regres/train/ANNZ_18/plots_biasCor_after
[23:26:29    INFO]  - Got original [KS-test,N_poiss]: [0.0411676 , 4.64383] , after the bias-correction: [0.0260854 , 3.64063] --> will KEEP the correction !

(23:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:26 INFO) 
[23:26:34    INFO]  -----------------------------------------------------
[23:26:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:26:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:26:35    INFO]  - starting ANNZ::Init()  ... 
[23:26:36    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_19/saveOpt.txt ...
[23:26:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:26:51    INFO] ----------------------------------------------------------------------------------------------------
[23:26:51    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[23:26:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:26:51    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:26:51    INFO]      cuts (train):        ,
[23:26:51    INFO]      cuts (valid):       
[23:26:51    INFO]    - weights:            1
[23:26:51    INFO] ----------------------------------------------------------------------------------------------------
[23:26:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:27:32    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[23:27:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[23:27:36    INFO]  - Will gen. errors by KNN method ...
[23:27:39    INFO]  - starting ANNZ::loadReaders() ... 
[23:27:52    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:28:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:28:35    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:28:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:28:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:28:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:28:50    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:28:50    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:28:50    INFO]  -----------------------------------------------------------------------------------------------------------
[23:28:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:29:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:29:07    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:29:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:29:07    INFO]  -----------------------------------------------------------------------------------------------------------
[23:29:08    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:29:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:29:10    INFO]  - will try to derive a bias correction ... 
[23:29:10    INFO]  - will validate that training produced an XML file for later ... 
[23:29:10    INFO]  - starting ANNZ::loadReaders() ... 
[23:29:13    INFO]  - will validate that the training was not a complete failure ... 
[23:29:13    INFO]  - training seems to have been successful! will move on ...
[23:29:13    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:29:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:29:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:29:19    INFO] ----------------------------------------------------------------------------------------------------
[23:29:19    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:29:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:29:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:29:19    INFO]    - weights:            1
[23:29:19    INFO] ----------------------------------------------------------------------------------------------------
[23:29:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:29:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[23:29:34    INFO]  - Will gen. errors by KNN method ...
[23:29:36    INFO]  - starting ANNZ::loadReaders() ... 
[23:29:46    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:30:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:28    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:30:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:30:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:42    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:30:42    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:30:42    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:30:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:58    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:30:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:30:58    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:59    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:31:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:31:01    INFO]  - will validate that the bias-correction actually improved the result ...
[23:31:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:31:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[23:31:07    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_19/plots/
[23:31:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_19/plots output/PAUS_advanced13/regres/train/ANNZ_19/plots_biasCor_before
[23:31:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:31:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[23:31:24    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_19/plots/
[23:31:35        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_19/plots output/PAUS_advanced13/regres/train/ANNZ_19/plots_biasCor_after
[23:31:35    INFO]  - Got original [KS-test,N_poiss]: [0.0260889 , 4.15205] , after the bias-correction: [0.0178401 , 3.29091] --> will KEEP the correction !

(23:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:31 INFO) 
[23:31:40    INFO]  -----------------------------------------------------
[23:31:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:31:40    INFO]  -----------------------------------------------------------------------------------------------------------
[23:31:41    INFO]  - starting ANNZ::Init()  ... 
[23:31:43    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_20/saveOpt.txt ...
[23:32:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:32:03    INFO] ----------------------------------------------------------------------------------------------------
[23:32:03    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N,P
[23:32:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:32:03    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:32:03    INFO]      cuts (train):        ,
[23:32:03    INFO]      cuts (valid):       
[23:32:03    INFO]    - weights:            1
[23:32:03    INFO] ----------------------------------------------------------------------------------------------------
[23:32:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:32:39    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[23:32:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[23:32:42    INFO]  - Will gen. errors by KNN method ...
[23:32:43    INFO]  - starting ANNZ::loadReaders() ... 
[23:32:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:33:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:33:29    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:33:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:33:29    INFO]  -----------------------------------------------------------------------------------------------------------
[23:33:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:33:42    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:33:42    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:33:42    INFO]  -----------------------------------------------------------------------------------------------------------
[23:33:43    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:33:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:33:56    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:33:56    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:33:56    INFO]  -----------------------------------------------------------------------------------------------------------
[23:33:57    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:33:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:33:58    INFO]  - will try to derive a bias correction ... 
[23:33:58    INFO]  - will validate that training produced an XML file for later ... 
[23:33:58    INFO]  - starting ANNZ::loadReaders() ... 
[23:34:00    INFO]  - will validate that the training was not a complete failure ... 
[23:34:00    INFO]  - training seems to have been successful! will move on ...
[23:34:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:34:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:34:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:34:05    INFO] ----------------------------------------------------------------------------------------------------
[23:34:05    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:34:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:34:05    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:34:05    INFO]    - weights:            1
[23:34:05    INFO] ----------------------------------------------------------------------------------------------------
[23:34:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:34:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[23:34:17    INFO]  - Will gen. errors by KNN method ...
[23:34:19    INFO]  - starting ANNZ::loadReaders() ... 
[23:34:27    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:35:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:35:10    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:35:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:35:10    INFO]  -----------------------------------------------------------------------------------------------------------
[23:35:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:35:24    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:35:24    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:35:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:35:26    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:35:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:35:36    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:35:36    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:35:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:35:37    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:35:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:35:39    INFO]  - will validate that the bias-correction actually improved the result ...
[23:35:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:35:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[23:35:44    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_20/plots/
[23:35:55        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_20/plots output/PAUS_advanced13/regres/train/ANNZ_20/plots_biasCor_before
[23:35:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:35:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[23:36:00    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_20/plots/
[23:36:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_20/plots output/PAUS_advanced13/regres/train/ANNZ_20/plots_biasCor_after
[23:36:11    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.897] , after the bias-correction: [0.0219252 , 3.42443] --> will KEEP the correction !

(23:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:36 INFO) 
[23:36:15    INFO]  -----------------------------------------------------
[23:36:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:36:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:36:17    INFO]  - starting ANNZ::Init()  ... 
[23:36:18    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_21/saveOpt.txt ...
[23:36:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:36:33    INFO] ----------------------------------------------------------------------------------------------------
[23:36:33    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N,P
[23:36:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:36:33    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:36:33    INFO]      cuts (train):        ,
[23:36:33    INFO]      cuts (valid):       
[23:36:33    INFO]    - weights:            1
[23:36:33    INFO] ----------------------------------------------------------------------------------------------------
[23:36:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:37:18    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[23:37:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[23:37:21    INFO]  - Will gen. errors by KNN method ...
[23:37:23    INFO]  - starting ANNZ::loadReaders() ... 
[23:37:33    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:38:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:16    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:38:16    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:38:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:31    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:38:31    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:38:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:38:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:38:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:38:47    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:48    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:38:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:38:50    INFO]  - will try to derive a bias correction ... 
[23:38:50    INFO]  - will validate that training produced an XML file for later ... 
[23:38:50    INFO]  - starting ANNZ::loadReaders() ... 
[23:38:52    INFO]  - will validate that the training was not a complete failure ... 
[23:38:53    INFO]  - training seems to have been successful! will move on ...
[23:38:53    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:38:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:39:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:39:01    INFO] ----------------------------------------------------------------------------------------------------
[23:39:01    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:39:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:39:01    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:39:01    INFO]    - weights:            1
[23:39:01    INFO] ----------------------------------------------------------------------------------------------------
[23:39:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:39:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[23:39:13    INFO]  - Will gen. errors by KNN method ...
[23:39:15    INFO]  - starting ANNZ::loadReaders() ... 
[23:39:25    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:40:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:40:07    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:40:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:40:07    INFO]  -----------------------------------------------------------------------------------------------------------
[23:40:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:40:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:40:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:40:21    INFO]  -----------------------------------------------------------------------------------------------------------
[23:40:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:40:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:40:35    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:40:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:40:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:40:36    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:40:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:40:37    INFO]  - will validate that the bias-correction actually improved the result ...
[23:40:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:40:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[23:40:43    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_21/plots/
[23:40:54        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_21/plots output/PAUS_advanced13/regres/train/ANNZ_21/plots_biasCor_before
[23:40:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:40:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[23:41:00    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_21/plots/
[23:41:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_21/plots output/PAUS_advanced13/regres/train/ANNZ_21/plots_biasCor_after
[23:41:11    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.89511] , after the bias-correction: [0.0219994 , 3.47426] --> will KEEP the correction !

(23:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:41 INFO) 
[23:41:15    INFO]  -----------------------------------------------------
[23:41:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:41:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:41:17    INFO]  - starting ANNZ::Init()  ... 
[23:41:19    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_22/saveOpt.txt ...
[23:41:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:41:36    INFO] ----------------------------------------------------------------------------------------------------
[23:41:36    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[23:41:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:41:36    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:41:36    INFO]      cuts (train):        ,
[23:41:36    INFO]      cuts (valid):       
[23:41:36    INFO]    - weights:            1
[23:41:36    INFO] ----------------------------------------------------------------------------------------------------
[23:41:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:42:01    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[23:42:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[23:42:03    INFO]  - Will gen. errors by KNN method ...
[23:42:05    INFO]  - starting ANNZ::loadReaders() ... 
[23:42:11    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:42:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:42:48    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:42:48    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:42:48    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:43:01    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:43:01    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:43:01    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:43:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:43:14    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:43:14    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:43:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:15    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:43:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:43:16    INFO]  - will try to derive a bias correction ... 
[23:43:16    INFO]  - will validate that training produced an XML file for later ... 
[23:43:16    INFO]  - starting ANNZ::loadReaders() ... 
[23:43:18    INFO]  - will validate that the training was not a complete failure ... 
[23:43:18    INFO]  - training seems to have been successful! will move on ...
[23:43:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:43:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:43:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:43:23    INFO] ----------------------------------------------------------------------------------------------------
[23:43:23    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:43:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:43:23    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:43:23    INFO]    - weights:            1
[23:43:23    INFO] ----------------------------------------------------------------------------------------------------
[23:43:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:43:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[23:43:36    INFO]  - Will gen. errors by KNN method ...
[23:43:39    INFO]  - starting ANNZ::loadReaders() ... 
[23:43:49    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:44:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:44:23    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:44:23    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:44:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:44:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:44:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:44:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:44:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:44:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:44:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:44:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:44:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:44:44    INFO]  -----------------------------------------------------------------------------------------------------------
[23:44:45    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:44:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:44:46    INFO]  - will validate that the bias-correction actually improved the result ...
[23:44:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:44:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[23:44:52    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_22/plots/
[23:45:03        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_22/plots output/PAUS_advanced13/regres/train/ANNZ_22/plots_biasCor_before
[23:45:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:45:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[23:45:08    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_22/plots/
[23:45:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_22/plots output/PAUS_advanced13/regres/train/ANNZ_22/plots_biasCor_after
[23:45:19    INFO]  - Got original [KS-test,N_poiss]: [0.0381206 , 3.87193] , after the bias-correction: [0.0219234 , 3.46819] --> will KEEP the correction !

(23:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:45 INFO) 
[23:45:23    INFO]  -----------------------------------------------------
[23:45:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:45:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:45:25    INFO]  - starting ANNZ::Init()  ... 
[23:45:26    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_23/saveOpt.txt ...
[23:45:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:45:42    INFO] ----------------------------------------------------------------------------------------------------
[23:45:42    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=300:BoostType=AdaBoost:VarTransform=N
[23:45:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:45:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:45:42    INFO]      cuts (train):        ,
[23:45:42    INFO]      cuts (valid):       
[23:45:42    INFO]    - weights:            1
[23:45:42    INFO] ----------------------------------------------------------------------------------------------------
[23:45:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:46:07    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[23:46:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[23:46:10    INFO]  - Will gen. errors by KNN method ...
[23:46:11    INFO]  - starting ANNZ::loadReaders() ... 
[23:46:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:46:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:46:55    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:46:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:46:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:47:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:47:08    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:47:08    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:47:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:47:10    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:47:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:47:22    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:47:22    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:47:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:47:22    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:47:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:47:24    INFO]  - will try to derive a bias correction ... 
[23:47:24    INFO]  - will validate that training produced an XML file for later ... 
[23:47:24    INFO]  - starting ANNZ::loadReaders() ... 
[23:47:25    INFO]  - will validate that the training was not a complete failure ... 
[23:47:25    INFO]  - training seems to have been successful! will move on ...
[23:47:25    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:47:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:47:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:47:30    INFO] ----------------------------------------------------------------------------------------------------
[23:47:30    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:47:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:47:30    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:47:30    INFO]    - weights:            1
[23:47:30    INFO] ----------------------------------------------------------------------------------------------------
[23:47:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:47:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[23:47:40    INFO]  - Will gen. errors by KNN method ...
[23:47:42    INFO]  - starting ANNZ::loadReaders() ... 
[23:47:49    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:48:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:48:22    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:48:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:48:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:48:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:48:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:48:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:48:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:48:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:48:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:48:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:48:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:48:44    INFO]  -----------------------------------------------------------------------------------------------------------
[23:48:45    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:48:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:48:47    INFO]  - will validate that the bias-correction actually improved the result ...
[23:48:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:48:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[23:48:52    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_23/plots/
[23:49:03        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_23/plots output/PAUS_advanced13/regres/train/ANNZ_23/plots_biasCor_before
[23:49:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:49:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[23:49:08    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_23/plots/
[23:49:20        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_23/plots output/PAUS_advanced13/regres/train/ANNZ_23/plots_biasCor_after
[23:49:20    INFO]  - Got original [KS-test,N_poiss]: [0.0466765 , 5.00639] , after the bias-correction: [0.0241562 , 4.0594] --> will KEEP the correction !

(23:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32m[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:49 INFO) 
[23:49:24    INFO]  -----------------------------------------------------
[23:49:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:49:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:49:26    INFO]  - starting ANNZ::Init()  ... 
[23:49:27    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/train/ANNZ_24/saveOpt.txt ...
[23:49:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:49:42    INFO] ----------------------------------------------------------------------------------------------------
[23:49:42    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=290:BoostType=AdaBoost:VarTransform=N
[23:49:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:49:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:49:42    INFO]      cuts (train):        ,
[23:49:42    INFO]      cuts (valid):       
[23:49:42    INFO]    - weights:            1
[23:49:42    INFO] ----------------------------------------------------------------------------------------------------
[23:49:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:50:07    INFO]  - Saving MLM information in ./output/PAUS_advanced13/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[23:50:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[23:50:10    INFO]  - Will gen. errors by KNN method ...
[23:50:11    INFO]  - starting ANNZ::loadReaders() ... 
[23:50:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:50:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:50:57    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:50:57    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:50:57    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:51:10    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:51:10    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:51:10    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:51:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:51:24    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:51:24    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:51:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:24    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:51:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:51:26    INFO]  - will try to derive a bias correction ... 
[23:51:26    INFO]  - will validate that training produced an XML file for later ... 
[23:51:26    INFO]  - starting ANNZ::loadReaders() ... 
[23:51:27    INFO]  - will validate that the training was not a complete failure ... 
[23:51:27    INFO]  - training seems to have been successful! will move on ...
[23:51:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:51:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:51:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:51:32    INFO] ----------------------------------------------------------------------------------------------------
[23:51:32    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:51:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:51:32    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:51:32    INFO]    - weights:            1
[23:51:32    INFO] ----------------------------------------------------------------------------------------------------
[23:51:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:51:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[23:51:41    INFO]  - Will gen. errors by KNN method ...
[23:51:43    INFO]  - starting ANNZ::loadReaders() ... 
[23:51:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[23:52:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:52:22    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:52:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:52:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:52:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:52:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:52:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:52:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:52:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced13/rootIn/ANNZ_tree_valid*.root
[23:52:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:52:45    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:52:45    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:52:45    INFO]  -----------------------------------------------------------------------------------------------------------
[23:52:46    INFO]  - Saving file ./output/PAUS_advanced13/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:52:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:52:47    INFO]  - will validate that the bias-correction actually improved the result ...
[23:52:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:52:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[23:52:53    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_24/plots/
[23:53:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_24/plots output/PAUS_advanced13/regres/train/ANNZ_24/plots_biasCor_before
[23:53:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:53:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[23:53:12    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/train/ANNZ_24/plots/
[23:53:24        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced13/regres/train/ANNZ_24/plots output/PAUS_advanced13/regres/train/ANNZ_24/plots_biasCor_after
[23:53:24    INFO]  - Got original [KS-test,N_poiss]: [0.0466765 , 5.00705] , after the bias-correction: [0.0241562 , 4.06804] --> will KEEP the correction !

(23:53 INFO) [40;37;1m - 12/02/19 23:53:28 - finished running ANNZ ![0m
(09:54 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:54 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:54 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:54 INFO) [40;37;1m - 13/02/19 09:54:53 - starting ANNZ[0m
(09:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:54 INFO) 
[09:54:53    INFO]  -----------------------------------------------------
[09:54:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:54:53    INFO]  -----------------------------------------------------------------------------------------------------------
[09:54:54    INFO]  - starting ANNZ::Init()  ... 
[09:54:54    INFO]  - Will generate 1 PDFs ... 
[09:55:13    INFO] --------------------------------------------------------
[09:55:13    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[09:55:13    INFO]  - All REJECTED MLMs: 
[09:55:13    INFO] ----------------------------------------------------------------------------------------------------------------
[09:55:16    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/optim/saveOpt.txt ...
[09:56:30    INFO]  - starting ANNZ::Optim() ... 
[09:56:30    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[09:56:31    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[09:56:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:49    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced13/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[09:57:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:57:04    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced13/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[09:57:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:57:18    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/PAUS_advanced13/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[09:57:18    INFO]  - Saving file ./output/PAUS_advanced13/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[09:57:19    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[09:57:19    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced13/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[09:57:19    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[09:57:19    INFO]  - ending makeTreeRegClsAllMLM() ... 
[09:57:19    INFO]  - starting ANNZ::optimReg() ... 
[09:57:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:57:23    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced13/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[09:57:23    INFO]  - starting ANNZ::fillColosureV() ... 
[09:57:24    INFO]  ---------------------------------------------------------------------------------- 
[09:57:24    INFO]  - Got the following average properties: 
[09:57:24    INFO]  --------------------------------------- 
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00393251 	 0.0386633 	 0.0837717
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.0068409 	 0.0514583 	 0.0873204
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00387319 	 0.0385566 	 0.0841739
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00650889 	 0.0351196 	 0.0777867
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00442802 	 0.0513221 	 0.0766498
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.00671792 	 0.0355359 	 0.0753359
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.00490963 	 0.0514477 	 0.0762525
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00599805 	 0.0391441 	 0.038086
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00664914 	 0.0360132 	 0.0751448
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00617842 	 0.0390978 	 0.0370147
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00392601 	 0.0383685 	 0.0855588
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00557804 	 0.0323109 	 0.0348102
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00557804 	 0.0323109 	 0.0348102
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.00633836 	 0.035546 	 0.0756296
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00390044 	 0.038555 	 0.0840874
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00657076 	 0.0355402 	 0.0764719
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00561946 	 0.0392352 	 0.0371572
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00568231 	 0.0322361 	 0.0358728
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.0065026 	 0.0354237 	 0.0769379
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00367045 	 0.0284335 	 0.0825211
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00383746 	 0.0386812 	 0.083148
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.0038566 	 0.0386002 	 0.0840756
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00392601 	 0.0383685 	 0.0855588
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00485633 	 0.0512763 	 0.0773564
[09:57:24    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00485435 	 0.0514614 	 0.0769253
[09:57:24    INFO]  ------------------------------------------------------------------------------------------------- 
[09:57:24    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[09:57:24    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[09:57:24    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[09:57:24    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 10% of the [sig68] dist.
[09:57:24    INFO]  - The "best" MLM is: ANNZ_19
[09:57:24    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[09:57:24    INFO]  - initial PDF weights: ANNZ_19:0.125 ANNZ_20:0.117 ANNZ_21:0.108 ANNZ_2:0.100 ANNZ_22:0.092 ANNZ_10:0.083 ANNZ_14:0.075 ANNZ_0:0.067 ANNZ_11:0.058 ANNZ_12:0.050 ANNZ_17:0.042 ANNZ_13:0.033 ANNZ_3:0.025 ANNZ_18:0.017 ANNZ_9:0.008 
[09:57:24    INFO]  - will loop on the input trees ...
[09:57:25    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.18663e-01
[09:57:25    INFO]  - nTry: 1 - min-param best/prev/now: 2.18663e-01 / 2.18663e-01 / 2.18691e-01
[09:57:25    INFO]  - NEW:  2 - min-param best/prev/now: 2.18663e-01 / 2.18663e-01 / 2.17552e-01
[09:57:25    INFO]  - NEW:  3 - min-param best/prev/now: 2.17552e-01 / 2.17552e-01 / 2.16832e-01
[09:57:25    INFO]  - nTry: 4 - min-param best/prev/now: 2.16832e-01 / 2.16832e-01 / 2.16935e-01
[09:57:25    INFO]  - nTry: 5 - min-param best/prev/now: 2.16832e-01 / 2.16832e-01 / 2.16947e-01
[09:57:25    INFO]  - nTry: 6 - min-param best/prev/now: 2.16832e-01 / 2.16832e-01 / 2.17035e-01
[09:57:26    INFO]  - nTry: 7 - min-param best/prev/now: 2.16832e-01 / 2.16832e-01 / 2.16966e-01
[09:57:26    INFO]  - nTry: 8 - min-param best/prev/now: 2.16832e-01 / 2.16832e-01 / 2.16842e-01
[09:57:26    INFO]  - nTry: 9 - min-param best/prev/now: 2.16832e-01 / 2.16832e-01 / 2.16960e-01
[09:57:26    INFO]  - nTry: 10 - min-param best/prev/now: 2.16832e-01 / 2.16832e-01 / 2.17037e-01
[09:57:27    INFO]  - nTry: 20 - min-param best/prev/now: 2.16655e-01 / 2.16655e-01 / 2.17177e-01
[09:57:27    INFO]  - nTry: 30 - min-param best/prev/now: 2.16655e-01 / 2.16655e-01 / 2.17056e-01
[09:57:28    INFO]  - nTry: 40 - min-param best/prev/now: 2.16655e-01 / 2.16995e-01 / 2.17006e-01
[09:57:29    INFO]  - nTry: 50 - min-param best/prev/now: 2.16655e-01 / 2.17042e-01 / 2.17039e-01
[09:57:30    INFO]  - nTry: 60 - min-param best/prev/now: 2.16655e-01 / 2.16912e-01 / 2.16874e-01
[09:57:31    INFO]  - nTry: 70 - min-param best/prev/now: 2.16655e-01 / 2.16850e-01 / 2.16875e-01
[09:57:32    INFO]  - nTry: 80 - min-param best/prev/now: 2.16655e-01 / 2.16797e-01 / 2.16794e-01
[09:57:32    INFO]  - nTry: 90 - min-param best/prev/now: 2.16655e-01 / 2.16823e-01 / 2.16829e-01
[09:57:33    INFO]  - nTry: 100 - min-param best/prev/now: 2.16655e-01 / 2.16799e-01 / 2.16802e-01
[09:57:35    INFO]  - nTry: 120 - min-param best/prev/now: 2.16655e-01 / 2.16910e-01 / 2.16904e-01
[09:57:36    INFO]  - nTry: 140 - min-param best/prev/now: 2.16655e-01 / 2.16816e-01 / 2.16820e-01
[09:57:37    INFO]  - nTry: 150 - min-param best/prev/now: 2.16655e-01 / 2.16847e-01 / 2.16848e-01
[09:57:38    INFO]  - nTry: 160 - min-param best/prev/now: 2.16655e-01 / 2.16806e-01 / 2.16807e-01
[09:57:40    INFO]  - nTry: 180 - min-param best/prev/now: 2.16655e-01 / 2.16848e-01 / 2.16920e-01
[09:57:41    INFO]  - nTry: 200 - min-param best/prev/now: 2.16655e-01 / 2.17046e-01 / 2.17059e-01
[09:57:43    INFO]  - nTry: 220 - min-param best/prev/now: 2.16655e-01 / 2.17079e-01 / 2.17067e-01
[09:57:44    INFO]  - nTry: 240 - min-param best/prev/now: 2.16655e-01 / 2.17013e-01 / 2.17010e-01
[09:57:45    INFO]  - nTry: 250 - min-param best/prev/now: 2.16655e-01 / 2.16960e-01 / 2.16961e-01
[09:57:46    INFO]  - nTry: 260 - min-param best/prev/now: 2.16655e-01 / 2.16932e-01 / 2.16933e-01
[09:57:46    INFO]  - finished PDF optimization! - final minimization parameter: 2.16655e-01 , PDF weights: ANNZ_13:0.099 ANNZ_11:0.097 ANNZ_19:0.087 ANNZ_12:0.083 ANNZ_14:0.082 ANNZ_3:0.081 ANNZ_20:0.073 ANNZ_17:0.065 ANNZ_21:0.058 ANNZ_2:0.056 ANNZ_0:0.051 ANNZ_22:0.049 ANNZ_10:0.048 ANNZ_9:0.044 ANNZ_18:0.027 
[09:57:46    INFO]  - will derive the bias correction for the pdf ... 
[09:57:47    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.051367, ANNZ_1:0.000000, ANNZ_2:0.055749, ANNZ_3:0.080636, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.000000, ANNZ_7:0.000000, ANNZ_8:0.000000, ANNZ_9:0.043560, ANNZ_10:0.047880, ANNZ_11:0.097284, ANNZ_12:0.083477, ANNZ_13:0.098699, ANNZ_14:0.082334, ANNZ_15:0.000000, ANNZ_16:0.000000, ANNZ_17:0.065495, ANNZ_18:0.026805, ANNZ_19:0.086538, ANNZ_20:0.073138, ANNZ_21:0.058057, ANNZ_22:0.048981, ANNZ_23:0.000000, ANNZ_24:0.000000, 
[09:57:47    INFO]  - Saving optimization results in ./output/PAUS_advanced13/regres/optim/saveOptimOpt.txt ...
[09:57:49    INFO]  - Saving bias-correction results in ./output/PAUS_advanced13/regres/optim/saveOptimObj.root ...
[09:57:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:57:52    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced13/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[09:57:55    INFO]  - starting ANNZ::doEvalReg() ... 
[09:57:55    INFO]  - Will gen. errors by KNN method for:   ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[09:57:55    INFO]  - Reading bias-correction results from ./output/PAUS_advanced13/regres/optim/saveOptimObj.root ...
[09:57:55    INFO]  - Getting optimization results from ./output/PAUS_advanced13/regres/optim/saveOptimOpt.txt ...
[09:57:55    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[09:57:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:57:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:57:57    INFO]  -----------------------------------------------------------------------------------------------------------
[09:57:57    INFO]  - starting storeTreeToAscii() ... 
[09:57:57    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[09:57:57    INFO]  - Will parse  ANNZ_tree_randomReg(3366)... Now in ./output/PAUS_advanced13/regres/optim/eval/ANNZ_randomReg_0000.csv
[09:57:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:57:57    INFO]  -- ANNZ_randomReg .................................. 3366  nObj
[09:57:57    INFO]  -----------------------------------------------------------------------------------------------------------
[09:57:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:57:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[09:57:57    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[09:58:06    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/optim/eval/plots/

(09:58 INFO) [40;37;1m - 13/02/19 09:58:12 - finished running ANNZ ![0m
(09:59 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:59 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:59 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:59 INFO) [40;37;1m - 13/02/19 09:59:41 - starting ANNZ[0m
(09:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced13[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data8c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:59 INFO) 
[09:59:41    INFO]  -----------------------------------------------------
[09:59:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:59:41    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:42    INFO]  - starting ANNZ::Init()  ... 
[09:59:42    INFO]  - Will generate 1 PDFs ... 
[09:59:55    INFO] --------------------------------------------------------
[09:59:55    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[09:59:55    INFO]  - All REJECTED MLMs: 
[09:59:55    INFO] ----------------------------------------------------------------------------------------------------------------
[09:59:58    INFO]  - Saving run information in ./output/PAUS_advanced13/regres/eval_nFile0/saveOpt.txt ...
[10:00:55    INFO]  - starting inputToFullTree(ANNz_data8c.csv) ... 
[10:00:56    INFO]  - Found 3367 lines in file PAUS/ANNz_data8c.csv -> total so far = 3367 ... 
[10:00:56    INFO]  - Now reading-in PAUS/ANNz_data8c.csv ... 
[10:00:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:00:56    INFO]  -- ANNZ_tree_eval .................................. 3367  nLine
[10:00:56    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[10:00:56    INFO]  -----------------------------------------------------------------------------------------------------------
[10:00:56    INFO]  - starting ANNZ::Eval() ... 
[10:00:56    INFO]  - starting ANNZ::doEvalReg() ... 
[10:00:56    INFO]  - Will gen. errors by KNN method for:   ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[10:00:56    INFO]  - Reading bias-correction results from ./output/PAUS_advanced13/regres/optim/saveOptimObj.root ...
[10:00:56    INFO]  - Getting optimization results from ./output/PAUS_advanced13/regres/optim/saveOptimOpt.txt ...
[10:00:56    INFO]  - creating MLM trees from input ...
[10:00:56    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,ANNZ_2,ANNZ_3,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,
[10:00:56    INFO]  - starting ANNZ::loadReaders() ... 
[10:01:26    INFO]  - Created KnnErr chain  ANNZ_tree_errKNN+ANNZ_tree_train(13465) from ./output/PAUS_advanced13/regres/train/postTrain/ANNZ_tree_errKNN*.root+./output/PAUS_advanced13/rootIn/ANNZ_tree_train*.root
[10:02:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:02:05    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[10:02:05    INFO]  -----------------------------------------------------------------------------------------------------------
[10:02:07    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[10:02:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:02:08    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 3367  nObj
[10:02:08    INFO]  -----------------------------------------------------------------------------------------------------------
[10:02:09    INFO]  - starting storeTreeToAscii() ... 
[10:02:09    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[10:02:09    INFO]  - Will parse  ANNZ_tree_randomReg(3367)... Now in ./output/PAUS_advanced13/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[10:02:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:02:09    INFO]  -- ANNZ_randomReg .................................. 3367  nObj
[10:02:09    INFO]  -----------------------------------------------------------------------------------------------------------
[10:02:10    INFO]  - detected the target,zb in the evaluated sample - Will create performance plots ...
[10:02:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:02:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[10:02:10    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[10:02:18    INFO]  - Writing to plotting directory output/PAUS_advanced13/regres/eval_nFile0/plots/

(10:02 INFO) [40;37;1m - 13/02/19 10:02:24 - finished running ANNZ ![0m
