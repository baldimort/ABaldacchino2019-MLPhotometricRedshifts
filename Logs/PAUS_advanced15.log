(18:08 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:08 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:08 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:08 INFO) [40;37;1m - 18/02/19 18:08:55 - starting ANNZ[0m
(18:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:08 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data8a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data8b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:08 INFO) 
[18:08:56    INFO]  -----------------------------------------------------
[18:08:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:08:56    INFO]  -----------------------------------------------------------------------------------------------------------
[18:08:59    INFO]  - starting inputToSplitTree() ... 
[18:08:59    INFO]  - Found 13465 lines in file PAUS/ANNz_data8a.csv -> total so far = 13465 ... 
[18:08:59    INFO]  - Found 3366 lines in file PAUS/ANNz_data8b.csv -> total so far = 3366 ... 
[18:08:59    INFO]  - Now reading-in PAUS/ANNz_data8a.csv ... 
[18:09:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:01    INFO]  -- ANNZ_tree .......................................... 0  index
[18:09:01    INFO]  -- ANNZ_tree ...................................... 13465  nLine
[18:09:01    INFO]  -- ANNZ_tree ...................................... 13465  nLineFile
[18:09:01    INFO]  -- ANNZ_tree ...................................... 13465  nObj
[18:09:01    INFO]  -- ANNZ_tree .......................................... 0  nTest
[18:09:01    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[18:09:01    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:01    INFO]  - Now reading-in PAUS/ANNz_data8b.csv ... 
[18:09:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:01    INFO]  -- ANNZ_tree .......................................... 0  index
[18:09:01    INFO]  -- ANNZ_tree ...................................... 16831  nLine
[18:09:01    INFO]  -- ANNZ_tree ....................................... 3366  nLineFile
[18:09:01    INFO]  -- ANNZ_tree ....................................... 3366  nObj
[18:09:01    INFO]  -- ANNZ_tree ....................................... 3366  nTest
[18:09:01    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[18:09:01    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:02    INFO]  - Writing to plotting directory output/PAUS_advanced15/rootIn/plots/
[18:09:03    INFO]  - Writing to plotting directory output/PAUS_advanced15/rootIn/plots/

(18:09 INFO) [40;37;1m - 18/02/19 18:09:05 - finished running ANNZ ![0m
(18:09 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:09 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:09 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:09 INFO) [40;37;1m - 18/02/19 18:09:27 - starting ANNZ[0m
(18:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:09 INFO) 
[18:09:27    INFO]  -----------------------------------------------------
[18:09:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:09:27    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:28    INFO]  - starting ANNZ::Init()  ... 
[18:09:29    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_0/saveOpt.txt ...
[18:09:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:09:47    INFO] ----------------------------------------------------------------------------------------------------
[18:09:47    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=480:BoostType=Bagging:VarTransform=N,P
[18:09:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:09:47    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:09:47    INFO]      cuts (train):        ,
[18:09:47    INFO]      cuts (valid):       
[18:09:47    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:09:47    INFO] ----------------------------------------------------------------------------------------------------
[18:09:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:10:28    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[18:10:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[18:10:33    INFO]  - Will gen. input-parameter errors ...
[18:10:35    INFO]  - starting ANNZ::loadReaders() ... 
[18:10:51    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[18:14:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:14:11    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:14:11    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:14:11    INFO]  -----------------------------------------------------------------------------------------------------------
[18:15:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:15:24    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:15:24    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:15:24    INFO]  -----------------------------------------------------------------------------------------------------------
[18:15:24    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[18:16:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:16:32    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:16:32    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:16:32    INFO]  -----------------------------------------------------------------------------------------------------------
[18:16:32    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:16:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:16:34    INFO]  - will try to derive a bias correction ... 
[18:16:34    INFO]  - will validate that training produced an XML file for later ... 
[18:16:34    INFO]  - starting ANNZ::loadReaders() ... 
[18:16:38    INFO]  - will validate that the training was not a complete failure ... 
[18:16:39    INFO]  - training seems to have been successful! will move on ...
[18:16:39    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:16:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:16:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:16:45    INFO] ----------------------------------------------------------------------------------------------------
[18:16:45    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:16:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:16:45    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:16:45    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:16:45    INFO] ----------------------------------------------------------------------------------------------------
[18:16:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:16:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[18:16:57    INFO]  - Will gen. input-parameter errors ...
[18:16:59    INFO]  - starting ANNZ::loadReaders() ... 
[18:17:09    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[18:21:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:21:00    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:21:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:21:00    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:22:30    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:22:30    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:22:30    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:30    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[18:23:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:23:46    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:23:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:23:46    INFO]  -----------------------------------------------------------------------------------------------------------
[18:23:49    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:23:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:23:51    INFO]  - will validate that the bias-correction actually improved the result ...
[18:23:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:23:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[18:23:57    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_0/plots/
[18:24:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_0/plots output/PAUS_advanced15/regres/train/ANNZ_0/plots_biasCor_before
[18:24:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:24:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[18:24:16    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_0/plots/
[18:24:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_0/plots output/PAUS_advanced15/regres/train/ANNZ_0/plots_biasCor_after
[18:24:29    INFO]  - Got original [KS-test,N_poiss]: [0.0426066 , 90.3277] , after the bias-correction: [0.0287363 , 71.2082] --> will KEEP the correction !

(18:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:24 INFO) 
[18:24:35    INFO]  -----------------------------------------------------
[18:24:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:24:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:24:37    INFO]  - starting ANNZ::Init()  ... 
[18:24:38    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_1/saveOpt.txt ...
[18:24:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:24:56    INFO] ----------------------------------------------------------------------------------------------------
[18:24:56    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P
[18:24:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:24:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:24:56    INFO]      cuts (train):        ,
[18:24:56    INFO]      cuts (valid):       
[18:24:56    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:24:56    INFO] ----------------------------------------------------------------------------------------------------
[18:24:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:25:45    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[18:25:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[18:25:49    INFO]  - Will gen. input-parameter errors ...
[18:25:52    INFO]  - starting ANNZ::loadReaders() ... 
[18:26:11    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[18:33:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:33:53    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:33:53    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:33:53    INFO]  -----------------------------------------------------------------------------------------------------------
[18:36:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:36:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:36:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:36:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:36:35    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[18:39:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:39:03    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:39:03    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:39:03    INFO]  -----------------------------------------------------------------------------------------------------------
[18:39:06    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:39:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:39:08    INFO]  - will try to derive a bias correction ... 
[18:39:08    INFO]  - will validate that training produced an XML file for later ... 
[18:39:08    INFO]  - starting ANNZ::loadReaders() ... 
[18:39:10    INFO]  - will validate that the training was not a complete failure ... 
[18:39:11    INFO]  - training seems to have been successful! will move on ...
[18:39:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:39:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:39:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:39:17    INFO] ----------------------------------------------------------------------------------------------------
[18:39:17    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:39:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:39:17    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:39:17    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:39:17    INFO] ----------------------------------------------------------------------------------------------------
[18:39:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:39:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[18:39:29    INFO]  - Will gen. input-parameter errors ...
[18:39:32    INFO]  - starting ANNZ::loadReaders() ... 
[18:39:51    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[18:46:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:46:59    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:46:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:46:59    INFO]  -----------------------------------------------------------------------------------------------------------
[18:49:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:49:27    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:49:27    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:49:27    INFO]  -----------------------------------------------------------------------------------------------------------
[18:49:27    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[18:51:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:51:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:51:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:51:44    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:47    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:51:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:51:49    INFO]  - will validate that the bias-correction actually improved the result ...
[18:51:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:51:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[18:51:56    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_1/plots/
[18:52:10        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_1/plots output/PAUS_advanced15/regres/train/ANNZ_1/plots_biasCor_before
[18:52:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:52:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[18:52:16    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_1/plots/
[18:52:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_1/plots output/PAUS_advanced15/regres/train/ANNZ_1/plots_biasCor_after
[18:52:28    INFO]  - Got original [KS-test,N_poiss]: [0.0620491 , 86.063] , after the bias-correction: [0.0328676 , 71.9696] --> will KEEP the correction !

(18:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:52 INFO) 
[18:52:35    INFO]  -----------------------------------------------------
[18:52:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:52:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:52:36    INFO]  - starting ANNZ::Init()  ... 
[18:52:39    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_2/saveOpt.txt ...
[18:52:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:52:58    INFO] ----------------------------------------------------------------------------------------------------
[18:52:58    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=410:BoostType=Bagging:VarTransform=N
[18:52:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:52:58    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:52:58    INFO]      cuts (train):        ,
[18:52:58    INFO]      cuts (valid):       
[18:52:58    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:52:58    INFO] ----------------------------------------------------------------------------------------------------
[18:52:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:53:31    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[18:53:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[18:53:35    INFO]  - Will gen. input-parameter errors ...
[18:53:36    INFO]  - starting ANNZ::loadReaders() ... 
[18:53:44    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[18:55:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:55:32    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:55:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:55:32    INFO]  -----------------------------------------------------------------------------------------------------------
[18:56:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:56:09    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:56:09    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:56:09    INFO]  -----------------------------------------------------------------------------------------------------------
[18:56:09    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[18:56:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:56:46    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:56:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:56:46    INFO]  -----------------------------------------------------------------------------------------------------------
[18:56:46    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:56:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:56:47    INFO]  - will try to derive a bias correction ... 
[18:56:47    INFO]  - will validate that training produced an XML file for later ... 
[18:56:47    INFO]  - starting ANNZ::loadReaders() ... 
[18:56:50    INFO]  - will validate that the training was not a complete failure ... 
[18:56:50    INFO]  - training seems to have been successful! will move on ...
[18:56:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:56:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:56:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:56:55    INFO] ----------------------------------------------------------------------------------------------------
[18:56:55    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:56:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:56:55    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:56:55    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:56:55    INFO] ----------------------------------------------------------------------------------------------------
[18:56:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:57:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[18:57:06    INFO]  - Will gen. input-parameter errors ...
[18:57:08    INFO]  - starting ANNZ::loadReaders() ... 
[18:57:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[18:59:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:59:24    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:59:24    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:59:24    INFO]  -----------------------------------------------------------------------------------------------------------
[19:00:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:00:08    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:00:08    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[19:00:08    INFO]  -----------------------------------------------------------------------------------------------------------
[19:00:08    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[19:00:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:00:48    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:00:48    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[19:00:48    INFO]  -----------------------------------------------------------------------------------------------------------
[19:00:48    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:00:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:00:50    INFO]  - will validate that the bias-correction actually improved the result ...
[19:00:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:00:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[19:00:58    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_2/plots/
[19:01:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_2/plots output/PAUS_advanced15/regres/train/ANNZ_2/plots_biasCor_before
[19:01:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:01:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[19:01:18    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_2/plots/
[19:01:34        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_2/plots output/PAUS_advanced15/regres/train/ANNZ_2/plots_biasCor_after
[19:01:34    INFO]  - Got original [KS-test,N_poiss]: [0.0608614 , 103.452] , after the bias-correction: [0.0338684 , 69.6997] --> will KEEP the correction !

(19:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:01 INFO) 
[19:01:41    INFO]  -----------------------------------------------------
[19:01:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:01:41    INFO]  -----------------------------------------------------------------------------------------------------------
[19:01:42    INFO]  - starting ANNZ::Init()  ... 
[19:01:44    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_3/saveOpt.txt ...
[19:02:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:02:01    INFO] ----------------------------------------------------------------------------------------------------
[19:02:01    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=850:BoostType=AdaBoostR2:VarTransform=N
[19:02:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:02:01    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[19:02:01    INFO]      cuts (train):        ,
[19:02:01    INFO]      cuts (valid):       
[19:02:01    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[19:02:01    INFO] ----------------------------------------------------------------------------------------------------
[19:02:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:03:46    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[19:03:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[19:03:51    INFO]  - Will gen. input-parameter errors ...
[19:03:54    INFO]  - starting ANNZ::loadReaders() ... 
[19:04:26    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[19:33:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:33:41    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:33:41    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:33:41    INFO]  -----------------------------------------------------------------------------------------------------------
[19:43:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:43:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:43:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[19:43:35    INFO]  -----------------------------------------------------------------------------------------------------------
[19:43:35    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[19:53:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:53:39    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:53:39    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[19:53:39    INFO]  -----------------------------------------------------------------------------------------------------------
[19:53:43    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:53:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:53:45    INFO]  - will try to derive a bias correction ... 
[19:53:45    INFO]  - will validate that training produced an XML file for later ... 
[19:53:45    INFO]  - starting ANNZ::loadReaders() ... 
[19:53:49    INFO]  - will validate that the training was not a complete failure ... 
[19:53:50    INFO]  - training seems to have been successful! will move on ...
[19:53:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:53:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:53:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:53:56    INFO] ----------------------------------------------------------------------------------------------------
[19:53:56    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:53:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:53:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[19:53:56    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[19:53:56    INFO] ----------------------------------------------------------------------------------------------------
[19:53:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:54:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[19:54:06    INFO]  - Will gen. input-parameter errors ...
[19:54:09    INFO]  - starting ANNZ::loadReaders() ... 
[19:54:42    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[20:24:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:24:06    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:24:06    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:24:06    INFO]  -----------------------------------------------------------------------------------------------------------
[20:33:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:33:37    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:33:37    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:33:37    INFO]  -----------------------------------------------------------------------------------------------------------
[20:33:37    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[20:43:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:43:34    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:43:34    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:43:34    INFO]  -----------------------------------------------------------------------------------------------------------
[20:43:38    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:43:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:43:41    INFO]  - will validate that the bias-correction actually improved the result ...
[20:43:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:43:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
Warning in <Fit>: Fit data is empty 
[20:43:49    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_3/plots/
[20:44:02        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_3/plots output/PAUS_advanced15/regres/train/ANNZ_3/plots_biasCor_before
[20:44:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:44:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
Warning in <Fit>: Fit data is empty 
[20:44:08    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_3/plots/
[20:44:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_3/plots output/PAUS_advanced15/regres/train/ANNZ_3/plots_biasCor_after
[20:44:21    INFO]  - Got original [KS-test,N_poiss]: [0.129901 , 116.232] , after the bias-correction: [0.0460174 , 108.364] --> will KEEP the correction !

(20:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=820:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:44 INFO) 
[20:44:28    INFO]  -----------------------------------------------------
[20:44:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:44:28    INFO]  -----------------------------------------------------------------------------------------------------------
[20:44:30    INFO]  - starting ANNZ::Init()  ... 
[20:44:31    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_4/saveOpt.txt ...
[20:44:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:44:46    INFO] ----------------------------------------------------------------------------------------------------
[20:44:46    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=820:BoostType=AdaBoost:VarTransform=N
[20:44:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:44:46    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:44:46    INFO]      cuts (train):        ,
[20:44:46    INFO]      cuts (valid):       
[20:44:46    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[20:44:46    INFO] ----------------------------------------------------------------------------------------------------
[20:44:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:45:16    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[20:45:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[20:45:19    INFO]  - Will gen. input-parameter errors ...
[20:45:20    INFO]  - starting ANNZ::loadReaders() ... 
[20:45:25    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[20:47:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:47:45    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:47:45    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:47:45    INFO]  -----------------------------------------------------------------------------------------------------------
[20:48:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:48:29    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:48:29    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:48:29    INFO]  -----------------------------------------------------------------------------------------------------------
[20:48:29    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[20:49:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:49:12    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:49:12    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:49:12    INFO]  -----------------------------------------------------------------------------------------------------------
[20:49:12    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:49:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:49:14    INFO]  - will try to derive a bias correction ... 
[20:49:14    INFO]  - will validate that training produced an XML file for later ... 
[20:49:14    INFO]  - starting ANNZ::loadReaders() ... 
[20:49:16    INFO]  - will validate that the training was not a complete failure ... 
[20:49:16    INFO]  - training seems to have been successful! will move on ...
[20:49:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:49:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:49:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:49:22    INFO] ----------------------------------------------------------------------------------------------------
[20:49:22    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:49:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:49:22    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[20:49:22    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[20:49:22    INFO] ----------------------------------------------------------------------------------------------------
[20:49:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:49:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[20:49:32    INFO]  - Will gen. input-parameter errors ...
[20:49:34    INFO]  - starting ANNZ::loadReaders() ... 
[20:49:40    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[20:51:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:51:19    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:51:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:51:19    INFO]  -----------------------------------------------------------------------------------------------------------
[20:51:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:51:52    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:51:52    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:51:52    INFO]  -----------------------------------------------------------------------------------------------------------
[20:51:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[20:52:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:52:22    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:52:22    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:52:22    INFO]  -----------------------------------------------------------------------------------------------------------
[20:52:23    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:52:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:52:24    INFO]  - will validate that the bias-correction actually improved the result ...
[20:52:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:52:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[20:52:30    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_4/plots/
[20:52:43        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_4/plots output/PAUS_advanced15/regres/train/ANNZ_4/plots_biasCor_before
[20:52:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:52:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[20:52:49    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_4/plots/
[20:53:02        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_4/plots output/PAUS_advanced15/regres/train/ANNZ_4/plots_biasCor_after
[20:53:02    INFO]  - Got original [KS-test,N_poiss]: [0.0434985 , 124.379] , after the bias-correction: [0.0345332 , 96.5331] --> will KEEP the correction !

(20:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:53 INFO) 
[20:53:08    INFO]  -----------------------------------------------------
[20:53:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:53:08    INFO]  -----------------------------------------------------------------------------------------------------------
[20:53:09    INFO]  - starting ANNZ::Init()  ... 
[20:53:11    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_5/saveOpt.txt ...
[20:53:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:53:28    INFO] ----------------------------------------------------------------------------------------------------
[20:53:28    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N,P
[20:53:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:53:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:53:28    INFO]      cuts (train):        ,
[20:53:28    INFO]      cuts (valid):       
[20:53:28    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[20:53:28    INFO] ----------------------------------------------------------------------------------------------------
[20:53:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:54:03    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[20:54:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[20:54:07    INFO]  - Will gen. input-parameter errors ...
[20:54:09    INFO]  - starting ANNZ::loadReaders() ... 
[20:54:19    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[20:56:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:56:52    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:56:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:56:52    INFO]  -----------------------------------------------------------------------------------------------------------
[20:57:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:57:48    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:57:48    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:57:48    INFO]  -----------------------------------------------------------------------------------------------------------
[20:57:48    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[20:58:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:58:42    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:58:42    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:58:42    INFO]  -----------------------------------------------------------------------------------------------------------
[20:58:42    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:58:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:58:43    INFO]  - will try to derive a bias correction ... 
[20:58:43    INFO]  - will validate that training produced an XML file for later ... 
[20:58:43    INFO]  - starting ANNZ::loadReaders() ... 
[20:58:46    INFO]  - will validate that the training was not a complete failure ... 
[20:58:46    INFO]  - training seems to have been successful! will move on ...
[20:58:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:58:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:58:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:58:51    INFO] ----------------------------------------------------------------------------------------------------
[20:58:51    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:58:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:58:51    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[20:58:51    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[20:58:51    INFO] ----------------------------------------------------------------------------------------------------
[20:58:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:58:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[20:58:58    INFO]  - Will gen. input-parameter errors ...
[20:59:00    INFO]  - starting ANNZ::loadReaders() ... 
[20:59:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[21:01:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:01:19    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:01:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:01:19    INFO]  -----------------------------------------------------------------------------------------------------------
[21:02:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:02:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:02:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:02:06    INFO]  -----------------------------------------------------------------------------------------------------------
[21:02:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[21:02:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:02:48    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:02:48    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:02:48    INFO]  -----------------------------------------------------------------------------------------------------------
[21:02:48    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:02:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:02:50    INFO]  - will validate that the bias-correction actually improved the result ...
[21:02:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:02:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[21:02:55    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_5/plots/
[21:03:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_5/plots output/PAUS_advanced15/regres/train/ANNZ_5/plots_biasCor_before
[21:03:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:03:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[21:03:14    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_5/plots/
[21:03:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_5/plots output/PAUS_advanced15/regres/train/ANNZ_5/plots_biasCor_after
[21:03:30    INFO]  - Got original [KS-test,N_poiss]: [0.0497718 , 104.831] , after the bias-correction: [0.0294123 , 95.9805] --> will KEEP the correction !

(21:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:03 INFO) 
[21:03:35    INFO]  -----------------------------------------------------
[21:03:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:03:35    INFO]  -----------------------------------------------------------------------------------------------------------
[21:03:37    INFO]  - starting ANNZ::Init()  ... 
[21:03:38    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_6/saveOpt.txt ...
[21:03:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:03:56    INFO] ----------------------------------------------------------------------------------------------------
[21:03:56    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=700:BoostType=AdaBoost:VarTransform=N,P
[21:03:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:03:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:03:56    INFO]      cuts (train):        ,
[21:03:56    INFO]      cuts (valid):       
[21:03:56    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[21:03:56    INFO] ----------------------------------------------------------------------------------------------------
[21:03:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:04:47    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[21:04:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[21:04:51    INFO]  - Will gen. input-parameter errors ...
[21:04:53    INFO]  - starting ANNZ::loadReaders() ... 
[21:05:09    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[21:09:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:09:32    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:09:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:09:32    INFO]  -----------------------------------------------------------------------------------------------------------
[21:10:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:10:40    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:10:40    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:10:40    INFO]  -----------------------------------------------------------------------------------------------------------
[21:10:40    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[21:12:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:12:28    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:12:28    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:12:28    INFO]  -----------------------------------------------------------------------------------------------------------
[21:12:31    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:12:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:12:33    INFO]  - will try to derive a bias correction ... 
[21:12:33    INFO]  - will validate that training produced an XML file for later ... 
[21:12:33    INFO]  - starting ANNZ::loadReaders() ... 
[21:12:35    INFO]  - will validate that the training was not a complete failure ... 
[21:12:36    INFO]  - training seems to have been successful! will move on ...
[21:12:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:12:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:12:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:12:42    INFO] ----------------------------------------------------------------------------------------------------
[21:12:42    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:12:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:12:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:12:42    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[21:12:42    INFO] ----------------------------------------------------------------------------------------------------
[21:12:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:12:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[21:12:52    INFO]  - Will gen. input-parameter errors ...
[21:12:54    INFO]  - starting ANNZ::loadReaders() ... 
[21:13:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[21:16:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:16:10    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:16:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:16:10    INFO]  -----------------------------------------------------------------------------------------------------------
[21:17:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:17:05    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:17:05    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:17:05    INFO]  -----------------------------------------------------------------------------------------------------------
[21:17:05    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[21:18:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:18:05    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:18:05    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:18:05    INFO]  -----------------------------------------------------------------------------------------------------------
[21:18:06    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:18:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:18:07    INFO]  - will validate that the bias-correction actually improved the result ...
[21:18:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:18:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[21:18:14    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_6/plots/
[21:18:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_6/plots output/PAUS_advanced15/regres/train/ANNZ_6/plots_biasCor_before
[21:18:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:18:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[21:18:32    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_6/plots/
[21:18:45        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_6/plots output/PAUS_advanced15/regres/train/ANNZ_6/plots_biasCor_after
[21:18:45    INFO]  - Got original [KS-test,N_poiss]: [0.050658 , 104.454] , after the bias-correction: [0.0267841 , 95.2903] --> will KEEP the correction !

(21:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:18 INFO) 
[21:18:51    INFO]  -----------------------------------------------------
[21:18:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:18:51    INFO]  -----------------------------------------------------------------------------------------------------------
[21:18:52    INFO]  - starting ANNZ::Init()  ... 
[21:18:54    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_7/saveOpt.txt ...
[21:19:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:19:11    INFO] ----------------------------------------------------------------------------------------------------
[21:19:11    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=510:BoostType=Bagging:VarTransform=N,P
[21:19:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:19:11    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:19:11    INFO]      cuts (train):        ,
[21:19:11    INFO]      cuts (valid):       
[21:19:11    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[21:19:11    INFO] ----------------------------------------------------------------------------------------------------
[21:19:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:20:01    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[21:20:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[21:20:06    INFO]  - Will gen. input-parameter errors ...
[21:20:08    INFO]  - starting ANNZ::loadReaders() ... 
[21:20:18    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[21:23:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:23:40    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:23:40    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:23:40    INFO]  -----------------------------------------------------------------------------------------------------------
[21:24:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:24:49    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:24:49    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:24:49    INFO]  -----------------------------------------------------------------------------------------------------------
[21:24:49    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[21:26:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:26:05    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:26:05    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:26:05    INFO]  -----------------------------------------------------------------------------------------------------------
[21:26:05    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:26:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:26:07    INFO]  - will try to derive a bias correction ... 
[21:26:07    INFO]  - will validate that training produced an XML file for later ... 
[21:26:07    INFO]  - starting ANNZ::loadReaders() ... 
[21:26:12    INFO]  - will validate that the training was not a complete failure ... 
[21:26:12    INFO]  - training seems to have been successful! will move on ...
[21:26:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:26:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:26:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:26:19    INFO] ----------------------------------------------------------------------------------------------------
[21:26:19    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:26:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:26:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:26:19    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[21:26:19    INFO] ----------------------------------------------------------------------------------------------------
[21:26:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:26:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[21:26:35    INFO]  - Will gen. input-parameter errors ...
[21:26:38    INFO]  - starting ANNZ::loadReaders() ... 
[21:26:57    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[21:30:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:30:53    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:30:53    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:30:53    INFO]  -----------------------------------------------------------------------------------------------------------
[21:32:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:32:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:32:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:32:17    INFO]  -----------------------------------------------------------------------------------------------------------
[21:32:17    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[21:33:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:33:39    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:33:39    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:33:39    INFO]  -----------------------------------------------------------------------------------------------------------
[21:33:42    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:33:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:33:45    INFO]  - will validate that the bias-correction actually improved the result ...
[21:33:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:33:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[21:33:53    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_7/plots/
[21:34:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_7/plots output/PAUS_advanced15/regres/train/ANNZ_7/plots_biasCor_before
[21:34:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:34:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[21:34:10    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_7/plots/
[21:34:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_7/plots output/PAUS_advanced15/regres/train/ANNZ_7/plots_biasCor_after
[21:34:21    INFO]  - Got original [KS-test,N_poiss]: [0.0427877 , 90.3167] , after the bias-correction: [0.0285919 , 70.7532] --> will KEEP the correction !

(21:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:34 INFO) 
[21:34:26    INFO]  -----------------------------------------------------
[21:34:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:34:26    INFO]  -----------------------------------------------------------------------------------------------------------
[21:34:27    INFO]  - starting ANNZ::Init()  ... 
[21:34:28    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_8/saveOpt.txt ...
[21:34:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:34:43    INFO] ----------------------------------------------------------------------------------------------------
[21:34:43    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=280:BoostType=AdaBoostR2:VarTransform=N
[21:34:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:34:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:34:43    INFO]      cuts (train):        ,
[21:34:43    INFO]      cuts (valid):       
[21:34:43    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[21:34:43    INFO] ----------------------------------------------------------------------------------------------------
[21:34:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:35:11    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[21:35:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[21:35:14    INFO]  - Will gen. input-parameter errors ...
[21:35:16    INFO]  - starting ANNZ::loadReaders() ... 
[21:35:24    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[21:38:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:38:52    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:38:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:38:52    INFO]  -----------------------------------------------------------------------------------------------------------
[21:40:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:40:08    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:40:08    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:40:08    INFO]  -----------------------------------------------------------------------------------------------------------
[21:40:08    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[21:41:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:41:20    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:41:20    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:41:20    INFO]  -----------------------------------------------------------------------------------------------------------
[21:41:23    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:41:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:41:25    INFO]  - will try to derive a bias correction ... 
[21:41:25    INFO]  - will validate that training produced an XML file for later ... 
[21:41:25    INFO]  - starting ANNZ::loadReaders() ... 
[21:41:26    INFO]  - will validate that the training was not a complete failure ... 
[21:41:26    INFO]  - training seems to have been successful! will move on ...
[21:41:26    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:41:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:41:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:41:31    INFO] ----------------------------------------------------------------------------------------------------
[21:41:31    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:41:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:41:31    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:41:31    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[21:41:31    INFO] ----------------------------------------------------------------------------------------------------
[21:41:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:41:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[21:41:39    INFO]  - Will gen. input-parameter errors ...
[21:41:41    INFO]  - starting ANNZ::loadReaders() ... 
[21:41:47    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[21:45:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:45:12    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:45:12    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:45:12    INFO]  -----------------------------------------------------------------------------------------------------------
[21:46:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:46:23    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:46:23    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:46:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:46:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[21:47:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:47:35    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:47:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:47:35    INFO]  -----------------------------------------------------------------------------------------------------------
[21:47:35    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:47:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:47:36    INFO]  - will validate that the bias-correction actually improved the result ...
[21:47:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:47:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[21:47:44    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_8/plots/
[21:47:56        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_8/plots output/PAUS_advanced15/regres/train/ANNZ_8/plots_biasCor_before
[21:47:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:47:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[21:48:00    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_8/plots/
[21:48:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_8/plots output/PAUS_advanced15/regres/train/ANNZ_8/plots_biasCor_after
[21:48:11    INFO]  - Got original [KS-test,N_poiss]: [0.127344 , 111.518] , after the bias-correction: [0.0419936 , 109.085] --> will KEEP the correction !

(21:48 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:48 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=940:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:48 INFO) 
[21:48:15    INFO]  -----------------------------------------------------
[21:48:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:48:15    INFO]  -----------------------------------------------------------------------------------------------------------
[21:48:17    INFO]  - starting ANNZ::Init()  ... 
[21:48:18    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_9/saveOpt.txt ...
[21:48:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:48:36    INFO] ----------------------------------------------------------------------------------------------------
[21:48:36    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=940:BoostType=AdaBoostR2:VarTransform=N
[21:48:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:48:36    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:48:36    INFO]      cuts (train):        ,
[21:48:36    INFO]      cuts (valid):       
[21:48:36    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[21:48:36    INFO] ----------------------------------------------------------------------------------------------------
[21:48:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:50:38    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[21:50:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[21:50:46    INFO]  - Will gen. input-parameter errors ...
[21:50:49    INFO]  - starting ANNZ::loadReaders() ... 
[21:51:37    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[22:28:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:28:21    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:28:21    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:28:21    INFO]  -----------------------------------------------------------------------------------------------------------
[22:40:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:40:18    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:40:18    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:40:18    INFO]  -----------------------------------------------------------------------------------------------------------
[22:40:18    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[22:52:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:52:29    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:52:29    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:52:29    INFO]  -----------------------------------------------------------------------------------------------------------
[22:52:32    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:52:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:52:35    INFO]  - will try to derive a bias correction ... 
[22:52:35    INFO]  - will validate that training produced an XML file for later ... 
[22:52:35    INFO]  - starting ANNZ::loadReaders() ... 
[22:52:40    INFO]  - will validate that the training was not a complete failure ... 
[22:52:40    INFO]  - training seems to have been successful! will move on ...
[22:52:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:52:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:52:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:52:46    INFO] ----------------------------------------------------------------------------------------------------
[22:52:46    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:52:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:52:46    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:52:46    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[22:52:46    INFO] ----------------------------------------------------------------------------------------------------
[22:52:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:52:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[22:52:57    INFO]  - Will gen. input-parameter errors ...
[22:53:00    INFO]  - starting ANNZ::loadReaders() ... 
[22:53:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[23:31:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:31:14    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:31:14    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:31:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:43:26    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:43:26    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:43:26    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:26    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[23:55:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:55:36    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:55:36    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:55:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:55:40    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:55:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:55:43    INFO]  - will validate that the bias-correction actually improved the result ...
[23:55:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:55:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[23:55:52    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_9/plots/
[23:56:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_9/plots output/PAUS_advanced15/regres/train/ANNZ_9/plots_biasCor_before
[23:56:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:56:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[23:56:14    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_9/plots/
[23:56:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_9/plots output/PAUS_advanced15/regres/train/ANNZ_9/plots_biasCor_after
[23:56:30    INFO]  - Got original [KS-test,N_poiss]: [0.129343 , 116.608] , after the bias-correction: [0.0433197 , 109.199] --> will KEEP the correction !

(23:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:56 INFO) 
[23:56:37    INFO]  -----------------------------------------------------
[23:56:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:56:37    INFO]  -----------------------------------------------------------------------------------------------------------
[23:56:38    INFO]  - starting ANNZ::Init()  ... 
[23:56:40    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_10/saveOpt.txt ...
[23:56:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:56:58    INFO] ----------------------------------------------------------------------------------------------------
[23:56:58    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=280:BoostType=AdaBoost:VarTransform=N
[23:56:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:56:58    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:56:58    INFO]      cuts (train):        ,
[23:56:58    INFO]      cuts (valid):       
[23:56:58    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[23:56:58    INFO] ----------------------------------------------------------------------------------------------------
[23:56:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:57:10    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[23:57:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[23:57:12    INFO]  - Will gen. input-parameter errors ...
[23:57:13    INFO]  - starting ANNZ::loadReaders() ... 
[23:57:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[23:58:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:58:00    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:58:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:58:00    INFO]  -----------------------------------------------------------------------------------------------------------
[23:58:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:58:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:58:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:58:17    INFO]  -----------------------------------------------------------------------------------------------------------
[23:58:17    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[23:58:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:58:32    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:58:32    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:58:32    INFO]  -----------------------------------------------------------------------------------------------------------
[23:58:33    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:58:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:58:34    INFO]  - will try to derive a bias correction ... 
[23:58:34    INFO]  - will validate that training produced an XML file for later ... 
[23:58:34    INFO]  - starting ANNZ::loadReaders() ... 
[23:58:34    INFO]  - will validate that the training was not a complete failure ... 
[23:58:35    INFO]  - training seems to have been successful! will move on ...
[23:58:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:58:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:58:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:58:40    INFO] ----------------------------------------------------------------------------------------------------
[23:58:40    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:58:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:58:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:58:40    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[23:58:40    INFO] ----------------------------------------------------------------------------------------------------
[23:58:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:58:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[23:58:47    INFO]  - Will gen. input-parameter errors ...
[23:58:48    INFO]  - starting ANNZ::loadReaders() ... 
[23:58:52    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[00:00:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:00:03    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:00:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:00:03    INFO]  -----------------------------------------------------------------------------------------------------------
[00:00:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:00:29    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:00:29    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:00:29    INFO]  -----------------------------------------------------------------------------------------------------------
[00:00:29    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[00:00:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:00:54    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:00:54    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:00:54    INFO]  -----------------------------------------------------------------------------------------------------------
[00:00:54    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:00:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:00:55    INFO]  - will validate that the bias-correction actually improved the result ...
[00:00:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:00:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
Warning in <Fit>: Fit data is empty 
[00:01:00    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_10/plots/
[00:01:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_10/plots output/PAUS_advanced15/regres/train/ANNZ_10/plots_biasCor_before
[00:01:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:01:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
Warning in <Fit>: Fit data is empty 
[00:01:17    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_10/plots/
[00:01:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_10/plots output/PAUS_advanced15/regres/train/ANNZ_10/plots_biasCor_after
[00:01:29    INFO]  - Got original [KS-test,N_poiss]: [0.0434985 , 124.37] , after the bias-correction: [0.0349273 , 98.0392] --> will KEEP the correction !

(00:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:01 INFO) 
[00:01:34    INFO]  -----------------------------------------------------
[00:01:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:01:34    INFO]  -----------------------------------------------------------------------------------------------------------
[00:01:36    INFO]  - starting ANNZ::Init()  ... 
[00:01:37    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_11/saveOpt.txt ...
[00:01:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:01:55    INFO] ----------------------------------------------------------------------------------------------------
[00:01:55    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=410:BoostType=AdaBoost:VarTransform=N
[00:01:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:01:55    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[00:01:55    INFO]      cuts (train):        ,
[00:01:55    INFO]      cuts (valid):       
[00:01:55    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[00:01:55    INFO] ----------------------------------------------------------------------------------------------------
[00:01:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:02:15    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[00:02:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[00:02:17    INFO]  - Will gen. input-parameter errors ...
[00:02:19    INFO]  - starting ANNZ::loadReaders() ... 
[00:02:23    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[00:03:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:25    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:03:25    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:03:25    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:48    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:03:48    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:03:48    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:48    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[00:04:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:04:08    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:04:08    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:04:08    INFO]  -----------------------------------------------------------------------------------------------------------
[00:04:09    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:04:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:04:10    INFO]  - will try to derive a bias correction ... 
[00:04:10    INFO]  - will validate that training produced an XML file for later ... 
[00:04:10    INFO]  - starting ANNZ::loadReaders() ... 
[00:04:10    INFO]  - will validate that the training was not a complete failure ... 
[00:04:10    INFO]  - training seems to have been successful! will move on ...
[00:04:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:04:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:04:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:04:15    INFO] ----------------------------------------------------------------------------------------------------
[00:04:15    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:04:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:04:15    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[00:04:15    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[00:04:15    INFO] ----------------------------------------------------------------------------------------------------
[00:04:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:04:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[00:04:21    INFO]  - Will gen. input-parameter errors ...
[00:04:23    INFO]  - starting ANNZ::loadReaders() ... 
[00:04:26    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[00:05:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:05:43    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:05:43    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:05:43    INFO]  -----------------------------------------------------------------------------------------------------------
[00:06:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:06:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:06:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:06:11    INFO]  -----------------------------------------------------------------------------------------------------------
[00:06:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[00:06:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:06:42    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:06:42    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:06:42    INFO]  -----------------------------------------------------------------------------------------------------------
[00:06:43    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:06:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:06:44    INFO]  - will validate that the bias-correction actually improved the result ...
[00:06:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:06:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
Warning in <Fit>: Fit data is empty 
[00:06:51    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_11/plots/
[00:07:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_11/plots output/PAUS_advanced15/regres/train/ANNZ_11/plots_biasCor_before
[00:07:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:07:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[00:07:11    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_11/plots/
[00:07:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_11/plots output/PAUS_advanced15/regres/train/ANNZ_11/plots_biasCor_after
[00:07:22    INFO]  - Got original [KS-test,N_poiss]: [0.0434985 , 124.346] , after the bias-correction: [0.0352628 , 98.3074] --> will KEEP the correction !

(00:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:07 INFO) 
[00:07:26    INFO]  -----------------------------------------------------
[00:07:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:07:26    INFO]  -----------------------------------------------------------------------------------------------------------
[00:07:27    INFO]  - starting ANNZ::Init()  ... 
[00:07:28    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_12/saveOpt.txt ...
[00:07:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:07:43    INFO] ----------------------------------------------------------------------------------------------------
[00:07:43    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=300:BoostType=Bagging:VarTransform=N,P
[00:07:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:07:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[00:07:43    INFO]      cuts (train):        ,
[00:07:43    INFO]      cuts (valid):       
[00:07:43    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[00:07:43    INFO] ----------------------------------------------------------------------------------------------------
[00:07:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:08:07    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[00:08:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[00:08:11    INFO]  - Will gen. input-parameter errors ...
[00:08:13    INFO]  - starting ANNZ::loadReaders() ... 
[00:08:22    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[00:10:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:10:24    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:10:24    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:10:24    INFO]  -----------------------------------------------------------------------------------------------------------
[00:11:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:11:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:11:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:11:06    INFO]  -----------------------------------------------------------------------------------------------------------
[00:11:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[00:11:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:11:50    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:11:50    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:11:50    INFO]  -----------------------------------------------------------------------------------------------------------
[00:11:50    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:11:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:11:52    INFO]  - will try to derive a bias correction ... 
[00:11:52    INFO]  - will validate that training produced an XML file for later ... 
[00:11:52    INFO]  - starting ANNZ::loadReaders() ... 
[00:11:55    INFO]  - will validate that the training was not a complete failure ... 
[00:11:55    INFO]  - training seems to have been successful! will move on ...
[00:11:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:11:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:12:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:12:02    INFO] ----------------------------------------------------------------------------------------------------
[00:12:02    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:12:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:12:02    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[00:12:02    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[00:12:02    INFO] ----------------------------------------------------------------------------------------------------
[00:12:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:12:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[00:12:16    INFO]  - Will gen. input-parameter errors ...
[00:12:18    INFO]  - starting ANNZ::loadReaders() ... 
[00:12:28    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[00:14:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:14:38    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:14:38    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:14:38    INFO]  -----------------------------------------------------------------------------------------------------------
[00:15:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:15:23    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:15:23    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:15:23    INFO]  -----------------------------------------------------------------------------------------------------------
[00:15:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[00:16:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:16:07    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:16:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:16:07    INFO]  -----------------------------------------------------------------------------------------------------------
[00:16:07    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:16:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:16:09    INFO]  - will validate that the bias-correction actually improved the result ...
[00:16:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:16:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[00:16:16    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_12/plots/
[00:16:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_12/plots output/PAUS_advanced15/regres/train/ANNZ_12/plots_biasCor_before
[00:16:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:16:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[00:16:35    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_12/plots/
[00:16:49        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_12/plots output/PAUS_advanced15/regres/train/ANNZ_12/plots_biasCor_after
[00:16:49    INFO]  - Got original [KS-test,N_poiss]: [0.0426923 , 90.4962] , after the bias-correction: [0.0291263 , 69.6069] --> will KEEP the correction !

(00:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:16 INFO) 
[00:16:55    INFO]  -----------------------------------------------------
[00:16:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:16:55    INFO]  -----------------------------------------------------------------------------------------------------------
[00:16:57    INFO]  - starting ANNZ::Init()  ... 
[00:16:58    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_13/saveOpt.txt ...
[00:17:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:17:14    INFO] ----------------------------------------------------------------------------------------------------
[00:17:14    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P
[00:17:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:17:14    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[00:17:14    INFO]      cuts (train):        ,
[00:17:14    INFO]      cuts (valid):       
[00:17:14    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[00:17:14    INFO] ----------------------------------------------------------------------------------------------------
[00:17:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:17:54    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[00:17:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[00:17:58    INFO]  - Will gen. input-parameter errors ...
[00:18:00    INFO]  - starting ANNZ::loadReaders() ... 
[00:18:22    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[00:27:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:27:11    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:27:11    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:27:11    INFO]  -----------------------------------------------------------------------------------------------------------
[00:30:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:30:16    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:30:16    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:30:16    INFO]  -----------------------------------------------------------------------------------------------------------
[00:30:16    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[00:33:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:33:07    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:33:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:33:07    INFO]  -----------------------------------------------------------------------------------------------------------
[00:33:10    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:33:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:33:12    INFO]  - will try to derive a bias correction ... 
[00:33:12    INFO]  - will validate that training produced an XML file for later ... 
[00:33:12    INFO]  - starting ANNZ::loadReaders() ... 
[00:33:15    INFO]  - will validate that the training was not a complete failure ... 
[00:33:15    INFO]  - training seems to have been successful! will move on ...
[00:33:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:33:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:33:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:33:22    INFO] ----------------------------------------------------------------------------------------------------
[00:33:22    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:33:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:33:22    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[00:33:22    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[00:33:22    INFO] ----------------------------------------------------------------------------------------------------
[00:33:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:33:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[00:33:36    INFO]  - Will gen. input-parameter errors ...
[00:33:38    INFO]  - starting ANNZ::loadReaders() ... 
[00:33:58    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[00:41:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:41:58    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:41:58    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:41:58    INFO]  -----------------------------------------------------------------------------------------------------------
[00:44:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:44:51    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:44:51    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:44:51    INFO]  -----------------------------------------------------------------------------------------------------------
[00:44:51    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[00:47:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:47:31    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:47:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:47:31    INFO]  -----------------------------------------------------------------------------------------------------------
[00:47:33    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:47:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:47:35    INFO]  - will validate that the bias-correction actually improved the result ...
[00:47:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:47:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[00:47:41    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_13/plots/
[00:47:54        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_13/plots output/PAUS_advanced15/regres/train/ANNZ_13/plots_biasCor_before
[00:47:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:47:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[00:48:00    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_13/plots/
[00:48:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_13/plots output/PAUS_advanced15/regres/train/ANNZ_13/plots_biasCor_after
[00:48:13    INFO]  - Got original [KS-test,N_poiss]: [0.0625155 , 85.3338] , after the bias-correction: [0.0324279 , 72.8203] --> will KEEP the correction !

(00:48 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:48 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:48 INFO) 
[00:48:19    INFO]  -----------------------------------------------------
[00:48:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:48:19    INFO]  -----------------------------------------------------------------------------------------------------------
[00:48:20    INFO]  - starting ANNZ::Init()  ... 
[00:48:21    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_14/saveOpt.txt ...
[00:48:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:48:37    INFO] ----------------------------------------------------------------------------------------------------
[00:48:37    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=280:BoostType=AdaBoostR2:VarTransform=P
[00:48:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:48:37    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[00:48:37    INFO]      cuts (train):        ,
[00:48:37    INFO]      cuts (valid):       
[00:48:37    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[00:48:37    INFO] ----------------------------------------------------------------------------------------------------
[00:48:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:49:06    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[00:49:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[00:49:08    INFO]  - Will gen. input-parameter errors ...
[00:49:10    INFO]  - starting ANNZ::loadReaders() ... 
[00:49:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[00:53:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:53:52    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:53:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:53:52    INFO]  -----------------------------------------------------------------------------------------------------------
[00:55:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:55:28    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:55:28    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:55:28    INFO]  -----------------------------------------------------------------------------------------------------------
[00:55:28    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[00:56:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:56:56    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:56:56    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:56:56    INFO]  -----------------------------------------------------------------------------------------------------------
[00:56:59    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:57:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:57:01    INFO]  - will try to derive a bias correction ... 
[00:57:01    INFO]  - will validate that training produced an XML file for later ... 
[00:57:01    INFO]  - starting ANNZ::loadReaders() ... 
[00:57:03    INFO]  - will validate that the training was not a complete failure ... 
[00:57:03    INFO]  - training seems to have been successful! will move on ...
[00:57:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:57:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:57:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:57:09    INFO] ----------------------------------------------------------------------------------------------------
[00:57:09    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:57:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:57:09    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[00:57:09    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[00:57:09    INFO] ----------------------------------------------------------------------------------------------------
[00:57:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:57:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[00:57:22    INFO]  - Will gen. input-parameter errors ...
[00:57:24    INFO]  - starting ANNZ::loadReaders() ... 
[00:57:35    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:01:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:01:51    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:01:51    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:01:51    INFO]  -----------------------------------------------------------------------------------------------------------
[01:03:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:03:16    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:03:16    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:03:16    INFO]  -----------------------------------------------------------------------------------------------------------
[01:03:16    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:04:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:04:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:04:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:04:47    INFO]  -----------------------------------------------------------------------------------------------------------
[01:04:50    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:04:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:04:52    INFO]  - will validate that the bias-correction actually improved the result ...
[01:04:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:04:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[01:04:59    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_14/plots/
[01:05:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_14/plots output/PAUS_advanced15/regres/train/ANNZ_14/plots_biasCor_before
[01:05:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:05:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[01:05:17    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_14/plots/
[01:05:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_14/plots output/PAUS_advanced15/regres/train/ANNZ_14/plots_biasCor_after
[01:05:29    INFO]  - Got original [KS-test,N_poiss]: [0.0746224 , 79.1909] , after the bias-correction: [0.0290367 , 77.8114] --> will KEEP the correction !

(01:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:05 INFO) 
[01:05:35    INFO]  -----------------------------------------------------
[01:05:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:05:35    INFO]  -----------------------------------------------------------------------------------------------------------
[01:05:36    INFO]  - starting ANNZ::Init()  ... 
[01:05:38    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_15/saveOpt.txt ...
[01:05:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:05:54    INFO] ----------------------------------------------------------------------------------------------------
[01:05:54    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=360:BoostType=Bagging:VarTransform=N,P
[01:05:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:05:54    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[01:05:54    INFO]      cuts (train):        ,
[01:05:54    INFO]      cuts (valid):       
[01:05:54    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:05:54    INFO] ----------------------------------------------------------------------------------------------------
[01:05:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:06:23    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[01:06:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[01:06:26    INFO]  - Will gen. input-parameter errors ...
[01:06:28    INFO]  - starting ANNZ::loadReaders() ... 
[01:06:35    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:08:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:08:57    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:08:57    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:08:57    INFO]  -----------------------------------------------------------------------------------------------------------
[01:09:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:09:46    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:09:46    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:09:46    INFO]  -----------------------------------------------------------------------------------------------------------
[01:09:46    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:10:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:10:30    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:10:30    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:10:30    INFO]  -----------------------------------------------------------------------------------------------------------
[01:10:30    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:10:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:10:32    INFO]  - will try to derive a bias correction ... 
[01:10:32    INFO]  - will validate that training produced an XML file for later ... 
[01:10:32    INFO]  - starting ANNZ::loadReaders() ... 
[01:10:35    INFO]  - will validate that the training was not a complete failure ... 
[01:10:36    INFO]  - training seems to have been successful! will move on ...
[01:10:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:10:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:10:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:10:42    INFO] ----------------------------------------------------------------------------------------------------
[01:10:42    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:10:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:10:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:10:42    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:10:42    INFO] ----------------------------------------------------------------------------------------------------
[01:10:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:10:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[01:10:56    INFO]  - Will gen. input-parameter errors ...
[01:10:58    INFO]  - starting ANNZ::loadReaders() ... 
[01:11:08    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:13:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:13:41    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:13:41    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:13:41    INFO]  -----------------------------------------------------------------------------------------------------------
[01:14:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:14:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:14:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:14:33    INFO]  -----------------------------------------------------------------------------------------------------------
[01:14:33    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:15:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:15:25    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:15:25    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:15:25    INFO]  -----------------------------------------------------------------------------------------------------------
[01:15:25    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:15:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:15:27    INFO]  - will validate that the bias-correction actually improved the result ...
[01:15:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:15:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[01:15:34    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_15/plots/
[01:15:46        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_15/plots output/PAUS_advanced15/regres/train/ANNZ_15/plots_biasCor_before
[01:15:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:15:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[01:15:52    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_15/plots/
[01:16:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_15/plots output/PAUS_advanced15/regres/train/ANNZ_15/plots_biasCor_after
[01:16:05    INFO]  - Got original [KS-test,N_poiss]: [0.0437217 , 90.5779] , after the bias-correction: [0.0296472 , 71.7527] --> will KEEP the correction !

(01:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:16 INFO) 
[01:16:11    INFO]  -----------------------------------------------------
[01:16:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:16:11    INFO]  -----------------------------------------------------------------------------------------------------------
[01:16:12    INFO]  - starting ANNZ::Init()  ... 
[01:16:14    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_16/saveOpt.txt ...
[01:16:30    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:16:30    INFO] ----------------------------------------------------------------------------------------------------
[01:16:30    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=280:BoostType=AdaBoostR2:VarTransform=N
[01:16:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:16:30    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[01:16:30    INFO]      cuts (train):        ,
[01:16:30    INFO]      cuts (valid):       
[01:16:30    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:16:30    INFO] ----------------------------------------------------------------------------------------------------
[01:16:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:16:55    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[01:16:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[01:16:57    INFO]  - Will gen. input-parameter errors ...
[01:16:59    INFO]  - starting ANNZ::loadReaders() ... 
[01:17:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:20:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:20:34    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:20:34    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:20:34    INFO]  -----------------------------------------------------------------------------------------------------------
[01:21:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:21:47    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:21:47    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:21:47    INFO]  -----------------------------------------------------------------------------------------------------------
[01:21:47    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:23:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:23:00    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:23:00    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:23:00    INFO]  -----------------------------------------------------------------------------------------------------------
[01:23:03    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:23:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:23:05    INFO]  - will try to derive a bias correction ... 
[01:23:05    INFO]  - will validate that training produced an XML file for later ... 
[01:23:05    INFO]  - starting ANNZ::loadReaders() ... 
[01:23:07    INFO]  - will validate that the training was not a complete failure ... 
[01:23:07    INFO]  - training seems to have been successful! will move on ...
[01:23:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:23:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:23:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:23:13    INFO] ----------------------------------------------------------------------------------------------------
[01:23:13    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:23:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:23:13    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:23:13    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:23:13    INFO] ----------------------------------------------------------------------------------------------------
[01:23:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:23:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[01:23:25    INFO]  - Will gen. input-parameter errors ...
[01:23:27    INFO]  - starting ANNZ::loadReaders() ... 
[01:23:38    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:27:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:27:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:27:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:27:04    INFO]  -----------------------------------------------------------------------------------------------------------
[01:28:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:28:15    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:28:15    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:28:15    INFO]  -----------------------------------------------------------------------------------------------------------
[01:28:15    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:29:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:29:27    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:29:27    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:29:27    INFO]  -----------------------------------------------------------------------------------------------------------
[01:29:27    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:29:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:29:28    INFO]  - will validate that the bias-correction actually improved the result ...
[01:29:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:29:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[01:29:36    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_16/plots/
[01:29:48        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_16/plots output/PAUS_advanced15/regres/train/ANNZ_16/plots_biasCor_before
[01:29:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:29:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[01:29:53    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_16/plots/
[01:30:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_16/plots output/PAUS_advanced15/regres/train/ANNZ_16/plots_biasCor_after
[01:30:04    INFO]  - Got original [KS-test,N_poiss]: [0.127344 , 111.518] , after the bias-correction: [0.0419936 , 109.085] --> will KEEP the correction !

(01:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:30 INFO) 
[01:30:08    INFO]  -----------------------------------------------------
[01:30:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:30:08    INFO]  -----------------------------------------------------------------------------------------------------------
[01:30:09    INFO]  - starting ANNZ::Init()  ... 
[01:30:10    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_17/saveOpt.txt ...
[01:30:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:30:25    INFO] ----------------------------------------------------------------------------------------------------
[01:30:25    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=350:BoostType=AdaBoost:VarTransform=N,P
[01:30:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:30:25    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[01:30:25    INFO]      cuts (train):        ,
[01:30:25    INFO]      cuts (valid):       
[01:30:25    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:30:25    INFO] ----------------------------------------------------------------------------------------------------
[01:30:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:30:48    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[01:30:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[01:30:51    INFO]  - Will gen. input-parameter errors ...
[01:30:53    INFO]  - starting ANNZ::loadReaders() ... 
[01:31:00    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:33:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:33:07    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:33:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:33:07    INFO]  -----------------------------------------------------------------------------------------------------------
[01:33:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:33:48    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:33:48    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:33:48    INFO]  -----------------------------------------------------------------------------------------------------------
[01:33:48    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:34:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:34:31    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:34:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:34:31    INFO]  -----------------------------------------------------------------------------------------------------------
[01:34:31    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:34:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:34:33    INFO]  - will try to derive a bias correction ... 
[01:34:33    INFO]  - will validate that training produced an XML file for later ... 
[01:34:33    INFO]  - starting ANNZ::loadReaders() ... 
[01:34:34    INFO]  - will validate that the training was not a complete failure ... 
[01:34:35    INFO]  - training seems to have been successful! will move on ...
[01:34:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:34:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:34:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:34:41    INFO] ----------------------------------------------------------------------------------------------------
[01:34:41    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:34:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:34:41    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:34:41    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:34:41    INFO] ----------------------------------------------------------------------------------------------------
[01:34:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:34:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[01:34:49    INFO]  - Will gen. input-parameter errors ...
[01:34:51    INFO]  - starting ANNZ::loadReaders() ... 
[01:34:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:37:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:37:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:37:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:37:04    INFO]  -----------------------------------------------------------------------------------------------------------
[01:37:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:37:44    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:37:44    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:37:44    INFO]  -----------------------------------------------------------------------------------------------------------
[01:37:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:38:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:38:31    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:38:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:38:31    INFO]  -----------------------------------------------------------------------------------------------------------
[01:38:32    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:38:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:38:33    INFO]  - will validate that the bias-correction actually improved the result ...
[01:38:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:38:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[01:38:40    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_17/plots/
[01:38:54        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_17/plots output/PAUS_advanced15/regres/train/ANNZ_17/plots_biasCor_before
[01:38:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:38:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[01:39:00    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_17/plots/
[01:39:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_17/plots output/PAUS_advanced15/regres/train/ANNZ_17/plots_biasCor_after
[01:39:14    INFO]  - Got original [KS-test,N_poiss]: [0.0490572 , 104.908] , after the bias-correction: [0.027512 , 97.7006] --> will KEEP the correction !

(01:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:39 INFO) 
[01:39:19    INFO]  -----------------------------------------------------
[01:39:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:39:19    INFO]  -----------------------------------------------------------------------------------------------------------
[01:39:21    INFO]  - starting ANNZ::Init()  ... 
[01:39:22    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_18/saveOpt.txt ...
[01:39:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:39:39    INFO] ----------------------------------------------------------------------------------------------------
[01:39:39    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N
[01:39:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:39:39    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[01:39:39    INFO]      cuts (train):        ,
[01:39:39    INFO]      cuts (valid):       
[01:39:39    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:39:39    INFO] ----------------------------------------------------------------------------------------------------
[01:39:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:40:13    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[01:40:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[01:40:16    INFO]  - Will gen. input-parameter errors ...
[01:40:18    INFO]  - starting ANNZ::loadReaders() ... 
[01:40:25    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:42:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:42:07    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:42:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:42:07    INFO]  -----------------------------------------------------------------------------------------------------------
[01:42:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:42:41    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:42:41    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:42:41    INFO]  -----------------------------------------------------------------------------------------------------------
[01:42:41    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:43:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:43:17    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:43:17    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:43:17    INFO]  -----------------------------------------------------------------------------------------------------------
[01:43:17    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:43:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:43:19    INFO]  - will try to derive a bias correction ... 
[01:43:19    INFO]  - will validate that training produced an XML file for later ... 
[01:43:19    INFO]  - starting ANNZ::loadReaders() ... 
[01:43:23    INFO]  - will validate that the training was not a complete failure ... 
[01:43:23    INFO]  - training seems to have been successful! will move on ...
[01:43:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:43:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:43:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:43:29    INFO] ----------------------------------------------------------------------------------------------------
[01:43:29    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:43:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:43:29    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:43:29    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:43:29    INFO] ----------------------------------------------------------------------------------------------------
[01:43:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:43:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[01:43:40    INFO]  - Will gen. input-parameter errors ...
[01:43:42    INFO]  - starting ANNZ::loadReaders() ... 
[01:43:49    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:45:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:45:45    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:45:45    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:45:45    INFO]  -----------------------------------------------------------------------------------------------------------
[01:46:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:46:26    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:46:26    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:46:26    INFO]  -----------------------------------------------------------------------------------------------------------
[01:46:26    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:47:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:47:06    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:47:06    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:47:06    INFO]  -----------------------------------------------------------------------------------------------------------
[01:47:06    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:47:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:47:08    INFO]  - will validate that the bias-correction actually improved the result ...
[01:47:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:47:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
Warning in <Fit>: Fit data is empty 
[01:47:14    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_18/plots/
[01:47:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_18/plots output/PAUS_advanced15/regres/train/ANNZ_18/plots_biasCor_before
[01:47:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:47:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[01:47:30    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_18/plots/
[01:47:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_18/plots output/PAUS_advanced15/regres/train/ANNZ_18/plots_biasCor_after
[01:47:42    INFO]  - Got original [KS-test,N_poiss]: [0.061457 , 104.779] , after the bias-correction: [0.0331779 , 68.7609] --> will KEEP the correction !

(01:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:47 INFO) 
[01:47:48    INFO]  -----------------------------------------------------
[01:47:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:47:48    INFO]  -----------------------------------------------------------------------------------------------------------
[01:47:50    INFO]  - starting ANNZ::Init()  ... 
[01:47:51    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_19/saveOpt.txt ...
[01:48:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:48:10    INFO] ----------------------------------------------------------------------------------------------------
[01:48:10    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=290:BoostType=Bagging:VarTransform=N,P
[01:48:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:48:10    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[01:48:10    INFO]      cuts (train):        ,
[01:48:10    INFO]      cuts (valid):       
[01:48:10    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:48:10    INFO] ----------------------------------------------------------------------------------------------------
[01:48:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:48:37    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[01:48:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[01:48:41    INFO]  - Will gen. input-parameter errors ...
[01:48:44    INFO]  - starting ANNZ::loadReaders() ... 
[01:48:51    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:50:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:50:50    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:50:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:50:50    INFO]  -----------------------------------------------------------------------------------------------------------
[01:51:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:51:30    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:51:30    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:51:30    INFO]  -----------------------------------------------------------------------------------------------------------
[01:51:30    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:52:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:52:12    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:52:12    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:52:12    INFO]  -----------------------------------------------------------------------------------------------------------
[01:52:13    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:52:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:52:15    INFO]  - will try to derive a bias correction ... 
[01:52:15    INFO]  - will validate that training produced an XML file for later ... 
[01:52:15    INFO]  - starting ANNZ::loadReaders() ... 
[01:52:17    INFO]  - will validate that the training was not a complete failure ... 
[01:52:17    INFO]  - training seems to have been successful! will move on ...
[01:52:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:52:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:52:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:52:24    INFO] ----------------------------------------------------------------------------------------------------
[01:52:24    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:52:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:52:24    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:52:24    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:52:24    INFO] ----------------------------------------------------------------------------------------------------
[01:52:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:52:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[01:52:38    INFO]  - Will gen. input-parameter errors ...
[01:52:40    INFO]  - starting ANNZ::loadReaders() ... 
[01:52:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:54:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:54:56    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:54:56    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:54:56    INFO]  -----------------------------------------------------------------------------------------------------------
[01:55:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:55:41    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:55:41    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:55:41    INFO]  -----------------------------------------------------------------------------------------------------------
[01:55:41    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:56:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:56:25    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:56:25    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:56:25    INFO]  -----------------------------------------------------------------------------------------------------------
[01:56:25    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:56:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:56:27    INFO]  - will validate that the bias-correction actually improved the result ...
[01:56:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:56:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[01:56:35    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_19/plots/
[01:56:47        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_19/plots output/PAUS_advanced15/regres/train/ANNZ_19/plots_biasCor_before
[01:56:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:56:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[01:56:53    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_19/plots/
[01:57:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_19/plots output/PAUS_advanced15/regres/train/ANNZ_19/plots_biasCor_after
[01:57:06    INFO]  - Got original [KS-test,N_poiss]: [0.0430483 , 90.6953] , after the bias-correction: [0.0299706 , 71.5222] --> will KEEP the correction !

(01:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:57 INFO) 
[01:57:11    INFO]  -----------------------------------------------------
[01:57:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:57:11    INFO]  -----------------------------------------------------------------------------------------------------------
[01:57:12    INFO]  - starting ANNZ::Init()  ... 
[01:57:13    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_20/saveOpt.txt ...
[01:57:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:57:28    INFO] ----------------------------------------------------------------------------------------------------
[01:57:28    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N
[01:57:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:57:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[01:57:28    INFO]      cuts (train):        ,
[01:57:28    INFO]      cuts (valid):       
[01:57:28    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:57:28    INFO] ----------------------------------------------------------------------------------------------------
[01:57:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:57:44    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[01:57:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[01:57:46    INFO]  - Will gen. input-parameter errors ...
[01:57:47    INFO]  - starting ANNZ::loadReaders() ... 
[01:57:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[01:58:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:58:50    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:58:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:58:50    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:59:14    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:59:14    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:59:14    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[01:59:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:59:35    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:59:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:59:35    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:35    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:59:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:59:36    INFO]  - will try to derive a bias correction ... 
[01:59:36    INFO]  - will validate that training produced an XML file for later ... 
[01:59:36    INFO]  - starting ANNZ::loadReaders() ... 
[01:59:37    INFO]  - will validate that the training was not a complete failure ... 
[01:59:37    INFO]  - training seems to have been successful! will move on ...
[01:59:37    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:59:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:59:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:59:43    INFO] ----------------------------------------------------------------------------------------------------
[01:59:43    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:59:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:59:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:59:43    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[01:59:43    INFO] ----------------------------------------------------------------------------------------------------
[01:59:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:59:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[01:59:52    INFO]  - Will gen. input-parameter errors ...
[01:59:54    INFO]  - starting ANNZ::loadReaders() ... 
[01:59:57    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:01:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:01:14    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:01:14    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:01:14    INFO]  -----------------------------------------------------------------------------------------------------------
[02:01:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:01:41    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:01:41    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:01:41    INFO]  -----------------------------------------------------------------------------------------------------------
[02:01:41    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:02:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:02:12    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:02:12    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:02:12    INFO]  -----------------------------------------------------------------------------------------------------------
[02:02:12    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:02:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:02:14    INFO]  - will validate that the bias-correction actually improved the result ...
[02:02:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:02:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
Warning in <Fit>: Fit data is empty 
[02:02:20    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_20/plots/
[02:02:32        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_20/plots output/PAUS_advanced15/regres/train/ANNZ_20/plots_biasCor_before
[02:02:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:02:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
Warning in <Fit>: Fit data is empty 
[02:02:38    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_20/plots/
[02:02:49        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_20/plots output/PAUS_advanced15/regres/train/ANNZ_20/plots_biasCor_after
[02:02:49    INFO]  - Got original [KS-test,N_poiss]: [0.0434985 , 124.359] , after the bias-correction: [0.0349958 , 100.591] --> will KEEP the correction !

(02:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:02 INFO) 
[02:02:55    INFO]  -----------------------------------------------------
[02:02:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:02:55    INFO]  -----------------------------------------------------------------------------------------------------------
[02:02:56    INFO]  - starting ANNZ::Init()  ... 
[02:02:58    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_21/saveOpt.txt ...
[02:03:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:03:16    INFO] ----------------------------------------------------------------------------------------------------
[02:03:16    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=260:BoostType=AdaBoost:VarTransform=P
[02:03:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:03:16    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:03:16    INFO]      cuts (train):        ,
[02:03:16    INFO]      cuts (valid):       
[02:03:16    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[02:03:16    INFO] ----------------------------------------------------------------------------------------------------
[02:03:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:03:33    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[02:03:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[02:03:36    INFO]  - Will gen. input-parameter errors ...
[02:03:37    INFO]  - starting ANNZ::loadReaders() ... 
[02:03:42    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:05:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:05:07    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:05:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:05:07    INFO]  -----------------------------------------------------------------------------------------------------------
[02:05:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:05:36    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:05:36    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:05:36    INFO]  -----------------------------------------------------------------------------------------------------------
[02:05:36    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:06:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:06:09    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:06:09    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:06:09    INFO]  -----------------------------------------------------------------------------------------------------------
[02:06:10    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:06:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:06:11    INFO]  - will try to derive a bias correction ... 
[02:06:11    INFO]  - will validate that training produced an XML file for later ... 
[02:06:11    INFO]  - starting ANNZ::loadReaders() ... 
[02:06:12    INFO]  - will validate that the training was not a complete failure ... 
[02:06:12    INFO]  - training seems to have been successful! will move on ...
[02:06:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:06:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:06:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:06:18    INFO] ----------------------------------------------------------------------------------------------------
[02:06:18    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:06:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:06:18    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[02:06:18    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[02:06:18    INFO] ----------------------------------------------------------------------------------------------------
[02:06:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:06:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[02:06:26    INFO]  - Will gen. input-parameter errors ...
[02:06:28    INFO]  - starting ANNZ::loadReaders() ... 
[02:06:33    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:08:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:08:26    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:08:26    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:08:26    INFO]  -----------------------------------------------------------------------------------------------------------
[02:09:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:09:07    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:09:07    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:09:07    INFO]  -----------------------------------------------------------------------------------------------------------
[02:09:07    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:09:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:09:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:09:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:09:47    INFO]  -----------------------------------------------------------------------------------------------------------
[02:09:47    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:09:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:09:49    INFO]  - will validate that the bias-correction actually improved the result ...
[02:09:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:09:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[02:09:56    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_21/plots/
[02:10:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_21/plots output/PAUS_advanced15/regres/train/ANNZ_21/plots_biasCor_before
[02:10:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:10:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[02:10:13    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_21/plots/
[02:10:24        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_21/plots output/PAUS_advanced15/regres/train/ANNZ_21/plots_biasCor_after
[02:10:24    INFO]  - Got original [KS-test,N_poiss]: [0.0646325 , 86.8574] , after the bias-correction: [0.0310237 , 66.6192] --> will KEEP the correction !

(02:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:10 INFO) 
[02:10:30    INFO]  -----------------------------------------------------
[02:10:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:10:30    INFO]  -----------------------------------------------------------------------------------------------------------
[02:10:31    INFO]  - starting ANNZ::Init()  ... 
[02:10:33    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_22/saveOpt.txt ...
[02:10:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:10:52    INFO] ----------------------------------------------------------------------------------------------------
[02:10:52    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=320:BoostType=Bagging:VarTransform=N,P
[02:10:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:10:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:10:52    INFO]      cuts (train):        ,
[02:10:52    INFO]      cuts (valid):       
[02:10:52    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[02:10:52    INFO] ----------------------------------------------------------------------------------------------------
[02:10:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:11:22    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[02:11:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[02:11:25    INFO]  - Will gen. input-parameter errors ...
[02:11:27    INFO]  - starting ANNZ::loadReaders() ... 
[02:11:34    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:13:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:13:42    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:13:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:13:42    INFO]  -----------------------------------------------------------------------------------------------------------
[02:14:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:14:26    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:14:26    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:14:26    INFO]  -----------------------------------------------------------------------------------------------------------
[02:14:26    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:15:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:15:09    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:15:09    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:15:09    INFO]  -----------------------------------------------------------------------------------------------------------
[02:15:09    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:15:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:15:11    INFO]  - will try to derive a bias correction ... 
[02:15:11    INFO]  - will validate that training produced an XML file for later ... 
[02:15:11    INFO]  - starting ANNZ::loadReaders() ... 
[02:15:14    INFO]  - will validate that the training was not a complete failure ... 
[02:15:14    INFO]  - training seems to have been successful! will move on ...
[02:15:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:15:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:15:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:15:20    INFO] ----------------------------------------------------------------------------------------------------
[02:15:20    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:15:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:15:20    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[02:15:20    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[02:15:20    INFO] ----------------------------------------------------------------------------------------------------
[02:15:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:15:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[02:15:34    INFO]  - Will gen. input-parameter errors ...
[02:15:36    INFO]  - starting ANNZ::loadReaders() ... 
[02:15:45    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:18:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:18:01    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:18:01    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:18:01    INFO]  -----------------------------------------------------------------------------------------------------------
[02:18:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:18:44    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:18:44    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:18:44    INFO]  -----------------------------------------------------------------------------------------------------------
[02:18:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:19:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:19:29    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:19:29    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:19:29    INFO]  -----------------------------------------------------------------------------------------------------------
[02:19:30    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:19:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:19:31    INFO]  - will validate that the bias-correction actually improved the result ...
[02:19:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:19:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[02:19:39    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_22/plots/
[02:19:54        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_22/plots output/PAUS_advanced15/regres/train/ANNZ_22/plots_biasCor_before
[02:19:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:19:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[02:19:59    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_22/plots/
[02:20:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_22/plots output/PAUS_advanced15/regres/train/ANNZ_22/plots_biasCor_after
[02:20:12    INFO]  - Got original [KS-test,N_poiss]: [0.0426138 , 90.1247] , after the bias-correction: [0.0295075 , 72.0497] --> will KEEP the correction !

(02:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=910:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:20 INFO) 
[02:20:18    INFO]  -----------------------------------------------------
[02:20:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:20:18    INFO]  -----------------------------------------------------------------------------------------------------------
[02:20:20    INFO]  - starting ANNZ::Init()  ... 
[02:20:21    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_23/saveOpt.txt ...
[02:20:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:20:40    INFO] ----------------------------------------------------------------------------------------------------
[02:20:40    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=910:BoostType=AdaBoost:VarTransform=N
[02:20:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:20:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:20:40    INFO]      cuts (train):        ,
[02:20:40    INFO]      cuts (valid):       
[02:20:40    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[02:20:40    INFO] ----------------------------------------------------------------------------------------------------
[02:20:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:21:18    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[02:21:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[02:21:22    INFO]  - Will gen. input-parameter errors ...
[02:21:24    INFO]  - starting ANNZ::loadReaders() ... 
[02:21:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:24:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:24:09    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:24:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:24:09    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:25:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:25:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:25:02    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:25:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:25:41    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:25:41    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:25:41    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:41    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:25:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:25:43    INFO]  - will try to derive a bias correction ... 
[02:25:43    INFO]  - will validate that training produced an XML file for later ... 
[02:25:43    INFO]  - starting ANNZ::loadReaders() ... 
[02:25:44    INFO]  - will validate that the training was not a complete failure ... 
[02:25:44    INFO]  - training seems to have been successful! will move on ...
[02:25:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:25:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:25:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:25:50    INFO] ----------------------------------------------------------------------------------------------------
[02:25:50    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:25:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:25:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[02:25:50    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[02:25:50    INFO] ----------------------------------------------------------------------------------------------------
[02:25:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:26:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[02:26:00    INFO]  - Will gen. input-parameter errors ...
[02:26:02    INFO]  - starting ANNZ::loadReaders() ... 
[02:26:11    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:27:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:27:55    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:27:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:27:55    INFO]  -----------------------------------------------------------------------------------------------------------
[02:28:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:28:29    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:28:29    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:28:29    INFO]  -----------------------------------------------------------------------------------------------------------
[02:28:29    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:29:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:29:01    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:29:01    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:29:01    INFO]  -----------------------------------------------------------------------------------------------------------
[02:29:01    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:29:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:29:02    INFO]  - will validate that the bias-correction actually improved the result ...
[02:29:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:29:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
Warning in <Fit>: Fit data is empty 
[02:29:08    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_23/plots/
[02:29:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_23/plots output/PAUS_advanced15/regres/train/ANNZ_23/plots_biasCor_before
[02:29:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:29:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
Warning in <Fit>: Fit data is empty 
[02:29:23    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_23/plots/
[02:29:34        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_23/plots output/PAUS_advanced15/regres/train/ANNZ_23/plots_biasCor_after
[02:29:34    INFO]  - Got original [KS-test,N_poiss]: [0.0434985 , 124.387] , after the bias-correction: [0.0352896 , 100.881] --> will KEEP the correction !

(02:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:29 INFO) 
[02:29:40    INFO]  -----------------------------------------------------
[02:29:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:29:40    INFO]  -----------------------------------------------------------------------------------------------------------
[02:29:42    INFO]  - starting ANNZ::Init()  ... 
[02:29:43    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/train/ANNZ_24/saveOpt.txt ...
[02:30:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:30:02    INFO] ----------------------------------------------------------------------------------------------------
[02:30:02    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N,P
[02:30:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:30:02    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:30:02    INFO]      cuts (train):        ,
[02:30:02    INFO]      cuts (valid):       
[02:30:02    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[02:30:02    INFO] ----------------------------------------------------------------------------------------------------
[02:30:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:30:44    INFO]  - Saving MLM information in ./output/PAUS_advanced15/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[02:30:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[02:30:48    INFO]  - Will gen. input-parameter errors ...
[02:30:50    INFO]  - starting ANNZ::loadReaders() ... 
[02:30:57    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:33:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:33:46    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:33:46    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:33:46    INFO]  -----------------------------------------------------------------------------------------------------------
[02:34:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:34:45    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:34:45    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:34:45    INFO]  -----------------------------------------------------------------------------------------------------------
[02:34:45    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:35:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:35:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:35:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:35:44    INFO]  -----------------------------------------------------------------------------------------------------------
[02:35:44    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:35:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:35:46    INFO]  - will try to derive a bias correction ... 
[02:35:46    INFO]  - will validate that training produced an XML file for later ... 
[02:35:46    INFO]  - starting ANNZ::loadReaders() ... 
[02:35:48    INFO]  - will validate that the training was not a complete failure ... 
[02:35:48    INFO]  - training seems to have been successful! will move on ...
[02:35:48    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:35:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:35:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:35:54    INFO] ----------------------------------------------------------------------------------------------------
[02:35:54    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:35:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:35:54    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[02:35:54    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[02:35:54    INFO] ----------------------------------------------------------------------------------------------------
[02:35:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:36:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[02:36:02    INFO]  - Will gen. input-parameter errors ...
[02:36:03    INFO]  - starting ANNZ::loadReaders() ... 
[02:36:09    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_train*.root
[02:38:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:38:25    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:38:25    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:38:25    INFO]  -----------------------------------------------------------------------------------------------------------
[02:39:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:39:14    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:39:14    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:39:14    INFO]  -----------------------------------------------------------------------------------------------------------
[02:39:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced15/rootIn/ANNZ_tree_valid*.root
[02:39:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:39:58    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:39:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:39:58    INFO]  -----------------------------------------------------------------------------------------------------------
[02:39:59    INFO]  - Saving file ./output/PAUS_advanced15/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:40:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:40:00    INFO]  - will validate that the bias-correction actually improved the result ...
[02:40:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:40:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[02:40:05    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_24/plots/
[02:40:16        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_24/plots output/PAUS_advanced15/regres/train/ANNZ_24/plots_biasCor_before
[02:40:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:40:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[02:40:21    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/train/ANNZ_24/plots/
[02:40:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced15/regres/train/ANNZ_24/plots output/PAUS_advanced15/regres/train/ANNZ_24/plots_biasCor_after
[02:40:33    INFO]  - Got original [KS-test,N_poiss]: [0.0499878 , 104.498] , after the bias-correction: [0.0270123 , 94.1935] --> will KEEP the correction !

(02:40 INFO) [40;37;1m - 19/02/19 02:40:39 - finished running ANNZ ![0m
(08:19 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:19 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:19 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:19 INFO) [40;37;1m - 19/02/19 08:19:26 - starting ANNZ[0m
(08:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(08:19 INFO) 
[08:19:27    INFO]  -----------------------------------------------------
[08:19:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:19:27    INFO]  -----------------------------------------------------------------------------------------------------------
[08:19:28    INFO]  - starting ANNZ::Init()  ... 
[08:19:28    INFO]  - Will generate 1 PDFs ... 
[08:19:35    INFO] --------------------------------------------------------
[08:19:35    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[08:19:35    INFO]  - All REJECTED MLMs: 
[08:19:35    INFO] ----------------------------------------------------------------------------------------------------------------
[08:19:38    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/optim/saveOpt.txt ...
[08:20:21    INFO]  - starting ANNZ::Optim() ... 
[08:20:21    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[08:20:22    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[08:20:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:20:36    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced15/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[08:20:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:20:48    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced15/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[08:20:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:21:00    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/PAUS_advanced15/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[08:21:00    INFO]  - Saving file ./output/PAUS_advanced15/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[08:21:01    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[08:21:01    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced15/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[08:21:01    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[08:21:01    INFO]  - ending makeTreeRegClsAllMLM() ... 
[08:21:01    INFO]  - starting ANNZ::optimReg() ... 
[08:21:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:21:05    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced15/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[08:21:05    INFO]  - starting ANNZ::fillColosureV() ... 
[08:21:06    INFO]  ---------------------------------------------------------------------------------- 
[08:21:06    INFO]  - Got the following average properties: 
[08:21:06    INFO]  --------------------------------------- 
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00220656 	 0.0235403 	 0.0897729
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00416246 	 0.0282259 	 0.043561
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00510185 	 0.032584 	 0.0794491
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00421319 	 0.0360995 	 0.051075
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00469912 	 0.0452771 	 0.0742917
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.00499174 	 0.0314371 	 0.093499
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0047529 	 0.0312379 	 0.0947539
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00220258 	 0.0235877 	 0.0881626
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00402098 	 0.0357606 	 0.0534669
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00422783 	 0.0360389 	 0.0509436
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00463709 	 0.0452754 	 0.0742808
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00466404 	 0.0453935 	 0.0736743
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00223498 	 0.023319 	 0.088807
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.00408105 	 0.0279905 	 0.0447389
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00393905 	 0.0328868 	 0.0407685
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00231165 	 0.0234043 	 0.0883317
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00402098 	 0.0357606 	 0.0534669
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00505456 	 0.0316748 	 0.0911761
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.00489514 	 0.0323913 	 0.0808982
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00211453 	 0.023424 	 0.0872165
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00468866 	 0.0453896 	 0.073956
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.0053885 	 0.0421394 	 0.0957711
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00225402 	 0.0233899 	 0.0899251
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.0047549 	 0.0451984 	 0.0755964
[08:21:06    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00474709 	 0.0311694 	 0.095445
[08:21:06    INFO]  ------------------------------------------------------------------------------------------------- 
[08:21:06    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[08:21:06    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[08:21:06    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[08:21:06    INFO]  - Found 2 "best" methods (min-threshold was 1) from the bottom 10% of the [sig68] dist.
[08:21:06    INFO]  - The "best" MLM is: ANNZ_12
[08:21:06    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[08:21:06    INFO]  - initial PDF weights: ANNZ_19:0.167 ANNZ_12:0.152 ANNZ_0:0.136 ANNZ_7:0.121 ANNZ_22:0.106 ANNZ_15:0.091 ANNZ_13:0.076 ANNZ_1:0.061 ANNZ_24:0.045 ANNZ_6:0.030 ANNZ_18:0.015 
[08:21:06    INFO]  - will loop on the input trees ...
[08:21:07    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.59091e-01
[08:21:07    INFO]  - nTry: 1 - min-param best/prev/now: 2.59091e-01 / 2.59091e-01 / 2.59363e-01
[08:21:07    INFO]  - nTry: 2 - min-param best/prev/now: 2.59091e-01 / 2.59091e-01 / 2.59330e-01
[08:21:07    INFO]  - nTry: 3 - min-param best/prev/now: 2.59091e-01 / 2.59091e-01 / 2.59386e-01
[08:21:07    INFO]  - nTry: 4 - min-param best/prev/now: 2.59091e-01 / 2.59091e-01 / 2.59478e-01
[08:21:07    INFO]  - nTry: 5 - min-param best/prev/now: 2.59091e-01 / 2.59091e-01 / 2.59419e-01
[08:21:07    INFO]  - nTry: 6 - min-param best/prev/now: 2.59091e-01 / 2.59091e-01 / 2.59441e-01
[08:21:07    INFO]  - nTry: 7 - min-param best/prev/now: 2.59091e-01 / 2.59091e-01 / 2.59442e-01
[08:21:07    INFO]  - nTry: 8 - min-param best/prev/now: 2.59091e-01 / 2.59442e-01 / 2.59509e-01
[08:21:07    INFO]  - NEW:  9 - min-param best/prev/now: 2.59091e-01 / 2.59442e-01 / 2.58407e-01
[08:21:07    INFO]  - nTry: 10 - min-param best/prev/now: 2.58407e-01 / 2.58407e-01 / 2.58567e-01
[08:21:08    INFO]  - nTry: 20 - min-param best/prev/now: 2.57446e-01 / 2.57446e-01 / 2.57551e-01
[08:21:09    INFO]  - nTry: 30 - min-param best/prev/now: 2.57446e-01 / 2.57745e-01 / 2.57967e-01
[08:21:09    INFO]  - nTry: 40 - min-param best/prev/now: 2.57446e-01 / 2.57745e-01 / 2.58689e-01
[08:21:10    INFO]  - nTry: 50 - min-param best/prev/now: 2.57446e-01 / 2.58689e-01 / 2.58980e-01
[08:21:11    INFO]  - nTry: 60 - min-param best/prev/now: 2.57446e-01 / 2.59232e-01 / 2.59108e-01
[08:21:12    INFO]  - nTry: 70 - min-param best/prev/now: 2.57446e-01 / 2.58741e-01 / 2.58755e-01
[08:21:12    INFO]  - nTry: 80 - min-param best/prev/now: 2.57446e-01 / 2.58444e-01 / 2.58523e-01
[08:21:13    INFO]  - nTry: 90 - min-param best/prev/now: 2.57446e-01 / 2.58651e-01 / 2.58745e-01
[08:21:14    INFO]  - nTry: 100 - min-param best/prev/now: 2.57446e-01 / 2.58704e-01 / 2.58790e-01
[08:21:15    INFO]  - nTry: 120 - min-param best/prev/now: 2.57446e-01 / 2.58717e-01 / 2.58662e-01
[08:21:17    INFO]  - nTry: 140 - min-param best/prev/now: 2.57446e-01 / 2.58552e-01 / 2.58615e-01
[08:21:17    INFO]  - nTry: 150 - min-param best/prev/now: 2.57446e-01 / 2.58772e-01 / 2.58787e-01
[08:21:18    INFO]  - nTry: 160 - min-param best/prev/now: 2.57446e-01 / 2.58922e-01 / 2.58986e-01
[08:21:20    INFO]  - nTry: 180 - min-param best/prev/now: 2.57446e-01 / 2.59058e-01 / 2.59062e-01
[08:21:21    INFO]  - nTry: 200 - min-param best/prev/now: 2.57446e-01 / 2.59110e-01 / 2.59060e-01
[08:21:23    INFO]  - nTry: 220 - min-param best/prev/now: 2.57446e-01 / 2.59089e-01 / 2.59106e-01
[08:21:24    INFO]  - nTry: 240 - min-param best/prev/now: 2.57446e-01 / 2.59025e-01 / 2.59030e-01
[08:21:25    INFO]  - nTry: 250 - min-param best/prev/now: 2.57446e-01 / 2.59025e-01 / 2.59100e-01
[08:21:25    INFO]  - nTry: 260 - min-param best/prev/now: 2.57446e-01 / 2.59114e-01 / 2.59077e-01
[08:21:26    INFO]  - finished PDF optimization! - final minimization parameter: 2.57446e-01 , PDF weights: ANNZ_7:0.157 ANNZ_12:0.140 ANNZ_1:0.132 ANNZ_13:0.102 ANNZ_19:0.099 ANNZ_0:0.087 ANNZ_24:0.083 ANNZ_15:0.071 ANNZ_22:0.065 ANNZ_6:0.039 ANNZ_18:0.026 
[08:21:26    INFO]  - will derive the bias correction for the pdf ... 
[08:21:27    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.086616, ANNZ_1:0.132068, ANNZ_2:0.000000, ANNZ_3:0.000000, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.039033, ANNZ_7:0.157304, ANNZ_8:0.000000, ANNZ_9:0.000000, ANNZ_10:0.000000, ANNZ_11:0.000000, ANNZ_12:0.139547, ANNZ_13:0.101848, ANNZ_14:0.000000, ANNZ_15:0.070901, ANNZ_16:0.000000, ANNZ_17:0.000000, ANNZ_18:0.025837, ANNZ_19:0.098633, ANNZ_20:0.000000, ANNZ_21:0.000000, ANNZ_22:0.064880, ANNZ_23:0.000000, ANNZ_24:0.083333, 
[08:21:27    INFO]  - Saving optimization results in ./output/PAUS_advanced15/regres/optim/saveOptimOpt.txt ...
[08:21:29    INFO]  - Saving bias-correction results in ./output/PAUS_advanced15/regres/optim/saveOptimObj.root ...
[08:21:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:21:31    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced15/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[08:21:34    INFO]  - starting ANNZ::doEvalReg() ... 
[08:21:34    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[08:21:34    INFO]  - Reading bias-correction results from ./output/PAUS_advanced15/regres/optim/saveOptimObj.root ...
[08:21:34    INFO]  - Getting optimization results from ./output/PAUS_advanced15/regres/optim/saveOptimOpt.txt ...
[08:21:34    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[08:21:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:21:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[08:21:35    INFO]  -----------------------------------------------------------------------------------------------------------
[08:21:35    INFO]  - starting storeTreeToAscii() ... 
[08:21:35    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[08:21:35    INFO]  - Will parse  ANNZ_tree_randomReg(3366)... Now in ./output/PAUS_advanced15/regres/optim/eval/ANNZ_randomReg_0000.csv
[08:21:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:21:35    INFO]  -- ANNZ_randomReg .................................. 3366  nObj
[08:21:35    INFO]  -----------------------------------------------------------------------------------------------------------
[08:21:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:21:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[08:21:35    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[08:21:44    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/optim/eval/plots/

(08:21 INFO) [40;37;1m - 19/02/19 08:21:49 - finished running ANNZ ![0m
(08:43 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:43 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:43 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:43 INFO) [40;37;1m - 19/02/19 08:43:13 - starting ANNZ[0m
(08:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced15[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data8c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(08:43 INFO) 
[08:43:13    INFO]  -----------------------------------------------------
[08:43:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:43:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:43:14    INFO]  - starting ANNZ::Init()  ... 
[08:43:14    INFO]  - Will generate 1 PDFs ... 
[08:43:22    INFO] --------------------------------------------------------
[08:43:22    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[08:43:22    INFO]  - All REJECTED MLMs: 
[08:43:22    INFO] ----------------------------------------------------------------------------------------------------------------
[08:43:24    INFO]  - Saving run information in ./output/PAUS_advanced15/regres/eval_nFile0/saveOpt.txt ...
[08:44:09    INFO]  - starting inputToFullTree(ANNz_data8c.csv) ... 
[08:44:10    INFO]  - Found 3367 lines in file PAUS/ANNz_data8c.csv -> total so far = 3367 ... 
[08:44:10    INFO]  - Now reading-in PAUS/ANNz_data8c.csv ... 
[08:44:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:44:10    INFO]  -- ANNZ_tree_eval .................................. 3367  nLine
[08:44:10    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[08:44:10    INFO]  -----------------------------------------------------------------------------------------------------------
[08:44:10    INFO]  - starting ANNZ::Eval() ... 
[08:44:10    INFO]  - starting ANNZ::doEvalReg() ... 
[08:44:10    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[08:44:10    INFO]  - Reading bias-correction results from ./output/PAUS_advanced15/regres/optim/saveOptimObj.root ...
[08:44:10    INFO]  - Getting optimization results from ./output/PAUS_advanced15/regres/optim/saveOptimOpt.txt ...
[08:44:10    INFO]  - creating MLM trees from input ...
[08:44:10    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,ANNZ_1,ANNZ_6,ANNZ_7,ANNZ_12,ANNZ_13,ANNZ_15,ANNZ_18,ANNZ_19,ANNZ_22,ANNZ_24,
[08:44:10    INFO]  - starting ANNZ::loadReaders() ... 
[08:54:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:54:30    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[08:54:30    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:30    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[08:54:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:54:31    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 3367  nObj
[08:54:31    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:31    INFO]  - starting storeTreeToAscii() ... 
[08:54:31    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[08:54:31    INFO]  - Will parse  ANNZ_tree_randomReg(3367)... Now in ./output/PAUS_advanced15/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[08:54:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:54:32    INFO]  -- ANNZ_randomReg .................................. 3367  nObj
[08:54:32    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:33    INFO]  - detected the target,zb in the evaluated sample - Will create performance plots ...
[08:54:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:54:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[08:54:33    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[08:54:40    INFO]  - Writing to plotting directory output/PAUS_advanced15/regres/eval_nFile0/plots/

(08:54 INFO) [40;37;1m - 19/02/19 08:54:46 - finished running ANNZ ![0m
