(21:33 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:33 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:33 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:33 INFO) [40;37;1m - 12/02/19 21:33:50 - starting ANNZ[0m
(21:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:33 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data8a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data8b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:33 INFO) 
[21:33:50    INFO]  -----------------------------------------------------
[21:33:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:33:50    INFO]  -----------------------------------------------------------------------------------------------------------
[21:33:53    INFO]  - starting inputToSplitTree() ... 
[21:33:53    INFO]  - Found 13465 lines in file PAUS/ANNz_data8a.csv -> total so far = 13465 ... 
[21:33:54    INFO]  - Found 3366 lines in file PAUS/ANNz_data8b.csv -> total so far = 3366 ... 
[21:33:54    INFO]  - Now reading-in PAUS/ANNz_data8a.csv ... 
[21:33:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:33:55    INFO]  -- ANNZ_tree .......................................... 0  index
[21:33:55    INFO]  -- ANNZ_tree ...................................... 13465  nLine
[21:33:55    INFO]  -- ANNZ_tree ...................................... 13465  nLineFile
[21:33:55    INFO]  -- ANNZ_tree ...................................... 13465  nObj
[21:33:55    INFO]  -- ANNZ_tree .......................................... 0  nTest
[21:33:55    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[21:33:55    INFO]  -----------------------------------------------------------------------------------------------------------
[21:33:56    INFO]  - Now reading-in PAUS/ANNz_data8b.csv ... 
[21:33:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:33:56    INFO]  -- ANNZ_tree .......................................... 0  index
[21:33:56    INFO]  -- ANNZ_tree ...................................... 16831  nLine
[21:33:56    INFO]  -- ANNZ_tree ....................................... 3366  nLineFile
[21:33:56    INFO]  -- ANNZ_tree ....................................... 3366  nObj
[21:33:56    INFO]  -- ANNZ_tree ....................................... 3366  nTest
[21:33:56    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[21:33:56    INFO]  -----------------------------------------------------------------------------------------------------------
[21:33:57    INFO]  - Writing to plotting directory output/PAUS_advanced11/rootIn/plots/
[21:33:58    INFO]  - Writing to plotting directory output/PAUS_advanced11/rootIn/plots/

(21:34 INFO) [40;37;1m - 12/02/19 21:34:00 - finished running ANNZ ![0m
(21:34 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:34 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:34 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:34 INFO) [40;37;1m - 12/02/19 21:34:36 - starting ANNZ[0m
(21:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=670:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:34 INFO) 
[21:34:37    INFO]  -----------------------------------------------------
[21:34:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:34:37    INFO]  -----------------------------------------------------------------------------------------------------------
[21:34:38    INFO]  - starting ANNZ::Init()  ... 
[21:34:39    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_0/saveOpt.txt ...
[21:34:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:34:53    INFO] ----------------------------------------------------------------------------------------------------
[21:34:53    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=670:BoostType=AdaBoost:VarTransform=N,P
[21:34:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:34:53    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:34:53    INFO]      cuts (train):        ,
[21:34:53    INFO]      cuts (valid):       
[21:34:53    INFO]    - weights:            1
[21:34:53    INFO] ----------------------------------------------------------------------------------------------------
[21:34:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:35:36    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[21:35:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[21:35:38    INFO]  - Will gen. input-parameter errors ...
[21:35:40    INFO]  - starting ANNZ::loadReaders() ... 
[21:35:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[21:41:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:41:07    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:41:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:41:07    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:43:07    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:43:07    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:43:07    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:07    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[21:44:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:44:50    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:44:50    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:44:50    INFO]  -----------------------------------------------------------------------------------------------------------
[21:44:50    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:44:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:44:51    INFO]  - will try to derive a bias correction ... 
[21:44:51    INFO]  - will validate that training produced an XML file for later ... 
[21:44:51    INFO]  - starting ANNZ::loadReaders() ... 
[21:44:53    INFO]  - will validate that the training was not a complete failure ... 
[21:44:53    INFO]  - training seems to have been successful! will move on ...
[21:44:53    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:44:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:44:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:44:59    INFO] ----------------------------------------------------------------------------------------------------
[21:44:59    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:44:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:44:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:44:59    INFO]    - weights:            1
[21:44:59    INFO] ----------------------------------------------------------------------------------------------------
[21:44:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:45:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[21:45:09    INFO]  - Will gen. input-parameter errors ...
[21:45:11    INFO]  - starting ANNZ::loadReaders() ... 
[21:45:20    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[21:49:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:49:38    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:49:38    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:49:38    INFO]  -----------------------------------------------------------------------------------------------------------
[21:51:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:51:04    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:51:04    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:51:04    INFO]  -----------------------------------------------------------------------------------------------------------
[21:51:04    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[21:52:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:52:41    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:52:41    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:52:41    INFO]  -----------------------------------------------------------------------------------------------------------
[21:52:41    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:52:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:52:42    INFO]  - will validate that the bias-correction actually improved the result ...
[21:52:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:52:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[21:52:47    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_0/plots/
[21:52:58        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_0/plots output/PAUS_advanced11/regres/train/ANNZ_0/plots_biasCor_before
[21:52:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:52:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[21:53:02    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_0/plots/
[21:53:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_0/plots output/PAUS_advanced11/regres/train/ANNZ_0/plots_biasCor_after
[21:53:12    INFO]  - Got original [KS-test,N_poiss]: [0.114801 , 6.27064] , after the bias-correction: [0.0610102 , 4.92244] --> will KEEP the correction !

(21:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:53 INFO) 
[21:53:16    INFO]  -----------------------------------------------------
[21:53:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:53:16    INFO]  -----------------------------------------------------------------------------------------------------------
[21:53:17    INFO]  - starting ANNZ::Init()  ... 
[21:53:18    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_1/saveOpt.txt ...
[21:53:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:53:33    INFO] ----------------------------------------------------------------------------------------------------
[21:53:33    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=270:BoostType=AdaBoost:VarTransform=P
[21:53:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:53:33    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:53:33    INFO]      cuts (train):        ,
[21:53:33    INFO]      cuts (valid):       
[21:53:33    INFO]    - weights:            1
[21:53:33    INFO] ----------------------------------------------------------------------------------------------------
[21:53:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:53:54    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[21:53:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[21:53:56    INFO]  - Will gen. input-parameter errors ...
[21:53:57    INFO]  - starting ANNZ::loadReaders() ... 
[21:54:01    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[21:55:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:55:30    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:55:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:55:30    INFO]  -----------------------------------------------------------------------------------------------------------
[21:55:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:55:54    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:55:54    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:55:54    INFO]  -----------------------------------------------------------------------------------------------------------
[21:55:54    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[21:56:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:56:17    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:56:17    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:56:17    INFO]  -----------------------------------------------------------------------------------------------------------
[21:56:17    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:56:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:56:18    INFO]  - will try to derive a bias correction ... 
[21:56:18    INFO]  - will validate that training produced an XML file for later ... 
[21:56:18    INFO]  - starting ANNZ::loadReaders() ... 
[21:56:19    INFO]  - will validate that the training was not a complete failure ... 
[21:56:19    INFO]  - training seems to have been successful! will move on ...
[21:56:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:56:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:56:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:56:24    INFO] ----------------------------------------------------------------------------------------------------
[21:56:24    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:56:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:56:24    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:56:24    INFO]    - weights:            1
[21:56:24    INFO] ----------------------------------------------------------------------------------------------------
[21:56:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:56:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[21:56:33    INFO]  - Will gen. input-parameter errors ...
[21:56:34    INFO]  - starting ANNZ::loadReaders() ... 
[21:56:38    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[21:58:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:58:14    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:58:14    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:58:14    INFO]  -----------------------------------------------------------------------------------------------------------
[21:58:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:58:53    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:58:53    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:58:53    INFO]  -----------------------------------------------------------------------------------------------------------
[21:58:53    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[21:59:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:59:23    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:59:23    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:59:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:59:24    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:59:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:59:24    INFO]  - will validate that the bias-correction actually improved the result ...
[21:59:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:59:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[21:59:29    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_1/plots/
[21:59:38        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_1/plots output/PAUS_advanced11/regres/train/ANNZ_1/plots_biasCor_before
[21:59:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:59:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[21:59:43    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_1/plots/
[21:59:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_1/plots output/PAUS_advanced11/regres/train/ANNZ_1/plots_biasCor_after
[21:59:53    INFO]  - Got original [KS-test,N_poiss]: [0.0900742 , 5.72961] , after the bias-correction: [0.0620302 , 4.64547] --> will KEEP the correction !

(21:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:59 INFO) 
[21:59:57    INFO]  -----------------------------------------------------
[21:59:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:59:57    INFO]  -----------------------------------------------------------------------------------------------------------
[21:59:58    INFO]  - starting ANNZ::Init()  ... 
[21:59:59    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_2/saveOpt.txt ...
[22:00:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:00:18    INFO] ----------------------------------------------------------------------------------------------------
[22:00:18    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N,P
[22:00:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:00:18    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:00:18    INFO]      cuts (train):        ,
[22:00:18    INFO]      cuts (valid):       
[22:00:18    INFO]    - weights:            1
[22:00:18    INFO] ----------------------------------------------------------------------------------------------------
[22:00:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:00:59    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[22:01:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[22:01:02    INFO]  - Will gen. input-parameter errors ...
[22:01:03    INFO]  - starting ANNZ::loadReaders() ... 
[22:01:09    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:04:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:04:45    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:04:45    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:04:45    INFO]  -----------------------------------------------------------------------------------------------------------
[22:06:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:06:04    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:06:04    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:06:04    INFO]  -----------------------------------------------------------------------------------------------------------
[22:06:04    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:07:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:07:08    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:07:08    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:07:08    INFO]  -----------------------------------------------------------------------------------------------------------
[22:07:08    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:07:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:07:09    INFO]  - will try to derive a bias correction ... 
[22:07:09    INFO]  - will validate that training produced an XML file for later ... 
[22:07:09    INFO]  - starting ANNZ::loadReaders() ... 
[22:07:10    INFO]  - will validate that the training was not a complete failure ... 
[22:07:10    INFO]  - training seems to have been successful! will move on ...
[22:07:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:07:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:07:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:07:16    INFO] ----------------------------------------------------------------------------------------------------
[22:07:16    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:07:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:07:16    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:07:16    INFO]    - weights:            1
[22:07:16    INFO] ----------------------------------------------------------------------------------------------------
[22:07:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:07:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[22:07:25    INFO]  - Will gen. input-parameter errors ...
[22:07:27    INFO]  - starting ANNZ::loadReaders() ... 
[22:07:32    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:10:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:10:44    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:10:44    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:10:44    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:11:43    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:11:43    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:11:43    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:43    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:12:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:12:52    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:12:52    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:12:52    INFO]  -----------------------------------------------------------------------------------------------------------
[22:12:52    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:12:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:12:54    INFO]  - will validate that the bias-correction actually improved the result ...
[22:12:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:12:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[22:12:59    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_2/plots/
[22:13:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_2/plots output/PAUS_advanced11/regres/train/ANNZ_2/plots_biasCor_before
[22:13:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:13:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[22:13:17    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_2/plots/
[22:13:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_2/plots output/PAUS_advanced11/regres/train/ANNZ_2/plots_biasCor_after
[22:13:33    INFO]  - Got original [KS-test,N_poiss]: [0.114801 , 6.26947] , after the bias-correction: [0.0610102 , 4.93019] --> will KEEP the correction !

(22:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:13 INFO) 
[22:13:37    INFO]  -----------------------------------------------------
[22:13:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:13:37    INFO]  -----------------------------------------------------------------------------------------------------------
[22:13:39    INFO]  - starting ANNZ::Init()  ... 
[22:13:40    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_3/saveOpt.txt ...
[22:13:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:13:55    INFO] ----------------------------------------------------------------------------------------------------
[22:13:55    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N
[22:13:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:13:55    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:13:55    INFO]      cuts (train):        ,
[22:13:55    INFO]      cuts (valid):       
[22:13:55    INFO]    - weights:            1
[22:13:55    INFO] ----------------------------------------------------------------------------------------------------
[22:13:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:14:57    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[22:15:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[22:15:02    INFO]  - Will gen. input-parameter errors ...
[22:15:05    INFO]  - starting ANNZ::loadReaders() ... 
[22:15:18    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:19:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:19:37    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:19:37    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:19:37    INFO]  -----------------------------------------------------------------------------------------------------------
[22:21:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:21:07    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:21:07    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:21:07    INFO]  -----------------------------------------------------------------------------------------------------------
[22:21:07    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:22:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:22:46    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:22:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:22:46    INFO]  -----------------------------------------------------------------------------------------------------------
[22:22:47    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:22:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:22:49    INFO]  - will try to derive a bias correction ... 
[22:22:49    INFO]  - will validate that training produced an XML file for later ... 
[22:22:49    INFO]  - starting ANNZ::loadReaders() ... 
[22:22:54    INFO]  - will validate that the training was not a complete failure ... 
[22:22:55    INFO]  - training seems to have been successful! will move on ...
[22:22:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:23:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:23:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:23:01    INFO] ----------------------------------------------------------------------------------------------------
[22:23:01    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:23:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:23:01    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:23:01    INFO]    - weights:            1
[22:23:01    INFO] ----------------------------------------------------------------------------------------------------
[22:23:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:23:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[22:23:14    INFO]  - Will gen. input-parameter errors ...
[22:23:17    INFO]  - starting ANNZ::loadReaders() ... 
[22:23:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:29:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:29:34    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:29:34    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:29:34    INFO]  -----------------------------------------------------------------------------------------------------------
[22:31:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:31:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:31:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:31:33    INFO]  -----------------------------------------------------------------------------------------------------------
[22:31:33    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:33:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:33:53    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:33:53    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:33:53    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:53    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:33:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:33:56    INFO]  - will validate that the bias-correction actually improved the result ...
[22:33:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:33:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[22:34:03    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_3/plots/
[22:34:16        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_3/plots output/PAUS_advanced11/regres/train/ANNZ_3/plots_biasCor_before
[22:34:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:34:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[22:34:21    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_3/plots/
[22:34:31        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_3/plots output/PAUS_advanced11/regres/train/ANNZ_3/plots_biasCor_after
[22:34:31    INFO]  - Got original [KS-test,N_poiss]: [0.0883165 , 5.82029] , after the bias-correction: [0.06923 , 4.93152] --> will KEEP the correction !

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:35    INFO]  -----------------------------------------------------
[22:34:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:35    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:36    INFO]  - starting ANNZ::Init()  ... 
[22:34:37    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_4/saveOpt.txt ...
[22:34:57    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:34:58    INFO] ----------------------------------------------------------------------------------------------------
[22:34:58    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N
[22:34:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:34:58    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:34:58    INFO]      cuts (train):        ,
[22:34:58    INFO]      cuts (valid):       
[22:34:58    INFO]    - weights:            1
[22:34:58    INFO] ----------------------------------------------------------------------------------------------------
[22:34:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:35:28    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[22:35:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[22:35:31    INFO]  - Will gen. input-parameter errors ...
[22:35:32    INFO]  - starting ANNZ::loadReaders() ... 
[22:35:37    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:37:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:37:00    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:37:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:37:00    INFO]  -----------------------------------------------------------------------------------------------------------
[22:37:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:37:30    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:37:30    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:37:30    INFO]  -----------------------------------------------------------------------------------------------------------
[22:37:30    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:37:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:37:58    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:37:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:37:58    INFO]  -----------------------------------------------------------------------------------------------------------
[22:37:58    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:38:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:38:00    INFO]  - will try to derive a bias correction ... 
[22:38:00    INFO]  - will validate that training produced an XML file for later ... 
[22:38:00    INFO]  - starting ANNZ::loadReaders() ... 
[22:38:01    INFO]  - will validate that the training was not a complete failure ... 
[22:38:01    INFO]  - training seems to have been successful! will move on ...
[22:38:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:38:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:38:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:38:06    INFO] ----------------------------------------------------------------------------------------------------
[22:38:06    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:38:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:38:06    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:38:06    INFO]    - weights:            1
[22:38:06    INFO] ----------------------------------------------------------------------------------------------------
[22:38:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:38:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[22:38:16    INFO]  - Will gen. input-parameter errors ...
[22:38:18    INFO]  - starting ANNZ::loadReaders() ... 
[22:38:22    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:40:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:40:02    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:40:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:40:02    INFO]  -----------------------------------------------------------------------------------------------------------
[22:40:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:40:39    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:40:39    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:40:39    INFO]  -----------------------------------------------------------------------------------------------------------
[22:40:39    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:41:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:41:13    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:41:13    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:41:13    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:13    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:41:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:41:14    INFO]  - will validate that the bias-correction actually improved the result ...
[22:41:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:41:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[22:41:19    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_4/plots/
[22:41:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_4/plots output/PAUS_advanced11/regres/train/ANNZ_4/plots_biasCor_before
[22:41:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:41:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[22:41:32    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_4/plots/
[22:41:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_4/plots output/PAUS_advanced11/regres/train/ANNZ_4/plots_biasCor_after
[22:41:42    INFO]  - Got original [KS-test,N_poiss]: [0.0912513 , 5.74603] , after the bias-correction: [0.0609121 , 4.89629] --> will KEEP the correction !

(22:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:41 INFO) 
[22:41:46    INFO]  -----------------------------------------------------
[22:41:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:41:46    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:47    INFO]  - starting ANNZ::Init()  ... 
[22:41:48    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_5/saveOpt.txt ...
[22:42:03    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:42:03    INFO] ----------------------------------------------------------------------------------------------------
[22:42:03    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N
[22:42:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:42:03    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:42:03    INFO]      cuts (train):        ,
[22:42:03    INFO]      cuts (valid):       
[22:42:03    INFO]    - weights:            1
[22:42:03    INFO] ----------------------------------------------------------------------------------------------------
[22:42:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:42:43    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[22:42:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[22:42:47    INFO]  - Will gen. input-parameter errors ...
[22:42:49    INFO]  - starting ANNZ::loadReaders() ... 
[22:43:00    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:46:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:46:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:46:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:46:04    INFO]  -----------------------------------------------------------------------------------------------------------
[22:46:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:46:56    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:46:56    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:46:56    INFO]  -----------------------------------------------------------------------------------------------------------
[22:46:56    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:47:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:47:42    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:47:42    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:47:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:47:42    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:47:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:47:44    INFO]  - will try to derive a bias correction ... 
[22:47:44    INFO]  - will validate that training produced an XML file for later ... 
[22:47:44    INFO]  - starting ANNZ::loadReaders() ... 
[22:47:48    INFO]  - will validate that the training was not a complete failure ... 
[22:47:48    INFO]  - training seems to have been successful! will move on ...
[22:47:48    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:47:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:47:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:47:53    INFO] ----------------------------------------------------------------------------------------------------
[22:47:53    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:47:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:47:53    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:47:53    INFO]    - weights:            1
[22:47:53    INFO] ----------------------------------------------------------------------------------------------------
[22:47:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:48:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[22:48:04    INFO]  - Will gen. input-parameter errors ...
[22:48:06    INFO]  - starting ANNZ::loadReaders() ... 
[22:48:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:51:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:51:11    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:51:11    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:51:11    INFO]  -----------------------------------------------------------------------------------------------------------
[22:52:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:52:08    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:52:08    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:52:08    INFO]  -----------------------------------------------------------------------------------------------------------
[22:52:08    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:53:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:53:06    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:53:06    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:53:06    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:06    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:53:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:53:08    INFO]  - will validate that the bias-correction actually improved the result ...
[22:53:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:53:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[22:53:16    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_5/plots/
[22:53:31        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_5/plots output/PAUS_advanced11/regres/train/ANNZ_5/plots_biasCor_before
[22:53:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:53:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[22:53:36    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_5/plots/
[22:53:46        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_5/plots output/PAUS_advanced11/regres/train/ANNZ_5/plots_biasCor_after
[22:53:46    INFO]  - Got original [KS-test,N_poiss]: [0.0886136 , 5.78275] , after the bias-correction: [0.0701955 , 5.02544] --> will KEEP the correction !

(22:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:53 INFO) 
[22:53:50    INFO]  -----------------------------------------------------
[22:53:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:53:50    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:51    INFO]  - starting ANNZ::Init()  ... 
[22:53:52    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_6/saveOpt.txt ...
[22:54:11    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:54:12    INFO] ----------------------------------------------------------------------------------------------------
[22:54:12    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=450:BoostType=AdaBoost:VarTransform=N
[22:54:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:54:12    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:54:12    INFO]      cuts (train):        ,
[22:54:12    INFO]      cuts (valid):       
[22:54:12    INFO]    - weights:            1
[22:54:12    INFO] ----------------------------------------------------------------------------------------------------
[22:54:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:54:49    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[22:54:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[22:54:52    INFO]  - Will gen. input-parameter errors ...
[22:54:53    INFO]  - starting ANNZ::loadReaders() ... 
[22:54:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[22:56:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:56:42    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:56:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:56:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:57:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:57:19    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:57:19    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:57:19    INFO]  -----------------------------------------------------------------------------------------------------------
[22:57:19    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[22:57:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:57:53    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:57:53    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:57:53    INFO]  -----------------------------------------------------------------------------------------------------------
[22:57:53    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:57:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:57:54    INFO]  - will try to derive a bias correction ... 
[22:57:54    INFO]  - will validate that training produced an XML file for later ... 
[22:57:54    INFO]  - starting ANNZ::loadReaders() ... 
[22:57:56    INFO]  - will validate that the training was not a complete failure ... 
[22:57:56    INFO]  - training seems to have been successful! will move on ...
[22:57:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:57:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:58:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:58:01    INFO] ----------------------------------------------------------------------------------------------------
[22:58:01    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:58:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:58:01    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:58:01    INFO]    - weights:            1
[22:58:01    INFO] ----------------------------------------------------------------------------------------------------
[22:58:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:58:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[22:58:11    INFO]  - Will gen. input-parameter errors ...
[22:58:13    INFO]  - starting ANNZ::loadReaders() ... 
[22:58:19    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[23:00:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:00:14    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:00:14    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:00:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:00:51    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:00:51    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:00:51    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:51    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[23:01:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:01:27    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:01:27    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:01:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:27    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:01:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:01:28    INFO]  - will validate that the bias-correction actually improved the result ...
[23:01:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:01:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
Warning in <Fit>: Fit data is empty 
[23:01:33    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_6/plots/
[23:01:43        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_6/plots output/PAUS_advanced11/regres/train/ANNZ_6/plots_biasCor_before
[23:01:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:01:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
Warning in <Fit>: Fit data is empty 
[23:01:47    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_6/plots/
[23:01:56        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_6/plots output/PAUS_advanced11/regres/train/ANNZ_6/plots_biasCor_after
[23:01:56    INFO]  - Got original [KS-test,N_poiss]: [0.0913255 , 5.74873] , after the bias-correction: [0.0609121 , 4.88723] --> will KEEP the correction !

(23:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:02 INFO) 
[23:02:00    INFO]  -----------------------------------------------------
[23:02:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:02:00    INFO]  -----------------------------------------------------------------------------------------------------------
[23:02:01    INFO]  - starting ANNZ::Init()  ... 
[23:02:03    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_7/saveOpt.txt ...
[23:02:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:02:17    INFO] ----------------------------------------------------------------------------------------------------
[23:02:17    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=460:BoostType=AdaBoostR2:VarTransform=N
[23:02:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:02:17    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:02:17    INFO]      cuts (train):        ,
[23:02:17    INFO]      cuts (valid):       
[23:02:17    INFO]    - weights:            1
[23:02:17    INFO] ----------------------------------------------------------------------------------------------------
[23:02:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:03:06    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[23:03:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[23:03:10    INFO]  - Will gen. input-parameter errors ...
[23:03:11    INFO]  - starting ANNZ::loadReaders() ... 
[23:03:25    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[23:12:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:12:34    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:12:34    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:12:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:15:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:15:38    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:15:38    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:15:38    INFO]  -----------------------------------------------------------------------------------------------------------
[23:15:38    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[23:18:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:18:50    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:18:50    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:18:50    INFO]  -----------------------------------------------------------------------------------------------------------
[23:18:50    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:18:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:18:52    INFO]  - will try to derive a bias correction ... 
[23:18:52    INFO]  - will validate that training produced an XML file for later ... 
[23:18:52    INFO]  - starting ANNZ::loadReaders() ... 
[23:18:54    INFO]  - will validate that the training was not a complete failure ... 
[23:18:54    INFO]  - training seems to have been successful! will move on ...
[23:18:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:18:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:18:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:19:00    INFO] ----------------------------------------------------------------------------------------------------
[23:19:00    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:19:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:19:00    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:19:00    INFO]    - weights:            1
[23:19:00    INFO] ----------------------------------------------------------------------------------------------------
[23:19:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:19:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[23:19:09    INFO]  - Will gen. input-parameter errors ...
[23:19:11    INFO]  - starting ANNZ::loadReaders() ... 
[23:19:24    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[23:27:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:27:57    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:27:57    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:27:57    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:55    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:30:55    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:30:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:55    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[23:33:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:33:48    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:33:48    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:33:48    INFO]  -----------------------------------------------------------------------------------------------------------
[23:33:49    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:33:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:33:50    INFO]  - will validate that the bias-correction actually improved the result ...
[23:33:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:33:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[23:33:55    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_7/plots/
[23:34:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_7/plots output/PAUS_advanced11/regres/train/ANNZ_7/plots_biasCor_before
[23:34:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:34:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[23:34:10    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_7/plots/
[23:34:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_7/plots output/PAUS_advanced11/regres/train/ANNZ_7/plots_biasCor_after
[23:34:22    INFO]  - Got original [KS-test,N_poiss]: [0.11837 , 7.1582] , after the bias-correction: [0.0635115 , 4.82082] --> will KEEP the correction !

(23:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:34 INFO) 
[23:34:26    INFO]  -----------------------------------------------------
[23:34:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:34:26    INFO]  -----------------------------------------------------------------------------------------------------------
[23:34:27    INFO]  - starting ANNZ::Init()  ... 
[23:34:28    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_8/saveOpt.txt ...
[23:34:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:34:42    INFO] ----------------------------------------------------------------------------------------------------
[23:34:42    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=310:BoostType=Bagging:VarTransform=N
[23:34:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:34:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:34:42    INFO]      cuts (train):        ,
[23:34:42    INFO]      cuts (valid):       
[23:34:42    INFO]    - weights:            1
[23:34:42    INFO] ----------------------------------------------------------------------------------------------------
[23:34:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:35:14    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[23:35:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[23:35:17    INFO]  - Will gen. input-parameter errors ...
[23:35:19    INFO]  - starting ANNZ::loadReaders() ... 
[23:35:27    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[23:37:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:37:27    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:37:27    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:37:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:04    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:38:04    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:38:04    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:04    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[23:38:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:41    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:38:41    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:38:41    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:42    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:38:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:38:43    INFO]  - will try to derive a bias correction ... 
[23:38:43    INFO]  - will validate that training produced an XML file for later ... 
[23:38:43    INFO]  - starting ANNZ::loadReaders() ... 
[23:38:46    INFO]  - will validate that the training was not a complete failure ... 
[23:38:46    INFO]  - training seems to have been successful! will move on ...
[23:38:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:38:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:38:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:38:52    INFO] ----------------------------------------------------------------------------------------------------
[23:38:52    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:38:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:38:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:38:52    INFO]    - weights:            1
[23:38:52    INFO] ----------------------------------------------------------------------------------------------------
[23:38:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:39:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[23:39:03    INFO]  - Will gen. input-parameter errors ...
[23:39:05    INFO]  - starting ANNZ::loadReaders() ... 
[23:39:14    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[23:41:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:41:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:41:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:41:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:41:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:41:56    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:41:56    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:41:56    INFO]  -----------------------------------------------------------------------------------------------------------
[23:41:57    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[23:42:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:42:34    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:42:34    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:42:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:42:34    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:42:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:42:36    INFO]  - will validate that the bias-correction actually improved the result ...
[23:42:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:42:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[23:42:40    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_8/plots/
[23:42:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_8/plots output/PAUS_advanced11/regres/train/ANNZ_8/plots_biasCor_before
[23:42:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:42:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[23:42:54    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_8/plots/
[23:43:03        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_8/plots output/PAUS_advanced11/regres/train/ANNZ_8/plots_biasCor_after
[23:43:03    INFO]  - Got original [KS-test,N_poiss]: [0.0889849 , 5.81594] , after the bias-correction: [0.0687101 , 4.83372] --> will KEEP the correction !

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:07    INFO]  -----------------------------------------------------
[23:43:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:07    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:08    INFO]  - starting ANNZ::Init()  ... 
[23:43:10    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_9/saveOpt.txt ...
[23:43:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:43:25    INFO] ----------------------------------------------------------------------------------------------------
[23:43:25    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=330:BoostType=AdaBoostR2:VarTransform=N
[23:43:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:43:25    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:43:25    INFO]      cuts (train):        ,
[23:43:25    INFO]      cuts (valid):       
[23:43:25    INFO]    - weights:            1
[23:43:25    INFO] ----------------------------------------------------------------------------------------------------
[23:43:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:44:00    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[23:44:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[23:44:03    INFO]  - Will gen. input-parameter errors ...
[23:44:04    INFO]  - starting ANNZ::loadReaders() ... 
[23:44:12    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[23:49:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:49:15    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:49:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:49:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:51:08    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:51:08    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:51:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:08    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[23:52:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:52:45    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:52:45    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:52:45    INFO]  -----------------------------------------------------------------------------------------------------------
[23:52:45    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:52:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:52:46    INFO]  - will try to derive a bias correction ... 
[23:52:46    INFO]  - will validate that training produced an XML file for later ... 
[23:52:46    INFO]  - starting ANNZ::loadReaders() ... 
[23:52:48    INFO]  - will validate that the training was not a complete failure ... 
[23:52:48    INFO]  - training seems to have been successful! will move on ...
[23:52:48    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:52:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:52:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:52:53    INFO] ----------------------------------------------------------------------------------------------------
[23:52:53    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:52:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:52:53    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:52:53    INFO]    - weights:            1
[23:52:53    INFO] ----------------------------------------------------------------------------------------------------
[23:52:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:53:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[23:53:02    INFO]  - Will gen. input-parameter errors ...
[23:53:03    INFO]  - starting ANNZ::loadReaders() ... 
[23:53:12    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[23:57:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:57:42    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:57:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:57:42    INFO]  -----------------------------------------------------------------------------------------------------------
[23:59:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:59:24    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:59:24    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:59:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:59:24    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[00:01:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:01:08    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:01:08    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:01:08    INFO]  -----------------------------------------------------------------------------------------------------------
[00:01:08    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:01:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:01:09    INFO]  - will validate that the bias-correction actually improved the result ...
[00:01:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:01:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[00:01:14    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_9/plots/
[00:01:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_9/plots output/PAUS_advanced11/regres/train/ANNZ_9/plots_biasCor_before
[00:01:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:01:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[00:01:27    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_9/plots/
[00:01:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_9/plots output/PAUS_advanced11/regres/train/ANNZ_9/plots_biasCor_after
[00:01:36    INFO]  - Got original [KS-test,N_poiss]: [0.117924 , 7.15195] , after the bias-correction: [0.0640066 , 4.95953] --> will KEEP the correction !

(00:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:01 INFO) 
[00:01:40    INFO]  -----------------------------------------------------
[00:01:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:01:40    INFO]  -----------------------------------------------------------------------------------------------------------
[00:01:41    INFO]  - starting ANNZ::Init()  ... 
[00:01:42    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_10/saveOpt.txt ...
[00:01:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:01:56    INFO] ----------------------------------------------------------------------------------------------------
[00:01:56    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[00:01:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:01:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[00:01:56    INFO]      cuts (train):        ,
[00:01:56    INFO]      cuts (valid):       
[00:01:56    INFO]    - weights:            1
[00:01:56    INFO] ----------------------------------------------------------------------------------------------------
[00:01:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:02:15    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[00:02:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[00:02:17    INFO]  - Will gen. input-parameter errors ...
[00:02:18    INFO]  - starting ANNZ::loadReaders() ... 
[00:02:22    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[00:03:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:54    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:03:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:03:54    INFO]  -----------------------------------------------------------------------------------------------------------
[00:04:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:04:28    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:04:28    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:04:28    INFO]  -----------------------------------------------------------------------------------------------------------
[00:04:28    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[00:04:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:04:59    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:04:59    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:04:59    INFO]  -----------------------------------------------------------------------------------------------------------
[00:05:00    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:05:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:05:00    INFO]  - will try to derive a bias correction ... 
[00:05:00    INFO]  - will validate that training produced an XML file for later ... 
[00:05:00    INFO]  - starting ANNZ::loadReaders() ... 
[00:05:01    INFO]  - will validate that the training was not a complete failure ... 
[00:05:01    INFO]  - training seems to have been successful! will move on ...
[00:05:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:05:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:05:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:05:06    INFO] ----------------------------------------------------------------------------------------------------
[00:05:06    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:05:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:05:06    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[00:05:06    INFO]    - weights:            1
[00:05:06    INFO] ----------------------------------------------------------------------------------------------------
[00:05:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:05:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[00:05:14    INFO]  - Will gen. input-parameter errors ...
[00:05:16    INFO]  - starting ANNZ::loadReaders() ... 
[00:05:19    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[00:07:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:07:02    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:07:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:07:02    INFO]  -----------------------------------------------------------------------------------------------------------
[00:07:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:07:38    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:07:38    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:07:38    INFO]  -----------------------------------------------------------------------------------------------------------
[00:07:38    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[00:08:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:08:13    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:08:13    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:08:13    INFO]  -----------------------------------------------------------------------------------------------------------
[00:08:13    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:08:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:08:14    INFO]  - will validate that the bias-correction actually improved the result ...
[00:08:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:08:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
Warning in <Fit>: Fit data is empty 
[00:08:19    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_10/plots/
[00:08:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_10/plots output/PAUS_advanced11/regres/train/ANNZ_10/plots_biasCor_before
[00:08:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:08:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[00:08:32    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_10/plots/
[00:08:41        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_10/plots output/PAUS_advanced11/regres/train/ANNZ_10/plots_biasCor_after
[00:08:41    INFO]  - Got original [KS-test,N_poiss]: [0.111975 , 6.16903] , after the bias-correction: [0.0598958 , 4.82796] --> will KEEP the correction !

(00:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:08 INFO) 
[00:08:44    INFO]  -----------------------------------------------------
[00:08:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:08:44    INFO]  -----------------------------------------------------------------------------------------------------------
[00:08:45    INFO]  - starting ANNZ::Init()  ... 
[00:08:46    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_11/saveOpt.txt ...
[00:09:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:09:01    INFO] ----------------------------------------------------------------------------------------------------
[00:09:01    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P
[00:09:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:09:01    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[00:09:01    INFO]      cuts (train):        ,
[00:09:01    INFO]      cuts (valid):       
[00:09:01    INFO]    - weights:            1
[00:09:01    INFO] ----------------------------------------------------------------------------------------------------
[00:09:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:11:12    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[00:11:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[00:11:18    INFO]  - Will gen. input-parameter errors ...
[00:11:21    INFO]  - starting ANNZ::loadReaders() ... 
[00:12:07    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[00:55:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:55:09    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:55:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:55:09    INFO]  -----------------------------------------------------------------------------------------------------------
[01:10:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:10:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:10:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:10:02    INFO]  -----------------------------------------------------------------------------------------------------------
[01:10:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[01:24:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:24:21    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:24:21    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:24:21    INFO]  -----------------------------------------------------------------------------------------------------------
[01:24:22    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:24:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:24:24    INFO]  - will try to derive a bias correction ... 
[01:24:24    INFO]  - will validate that training produced an XML file for later ... 
[01:24:24    INFO]  - starting ANNZ::loadReaders() ... 
[01:24:31    INFO]  - will validate that the training was not a complete failure ... 
[01:24:31    INFO]  - training seems to have been successful! will move on ...
[01:24:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:24:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:24:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:24:38    INFO] ----------------------------------------------------------------------------------------------------
[01:24:38    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:24:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:24:38    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:24:38    INFO]    - weights:            1
[01:24:38    INFO] ----------------------------------------------------------------------------------------------------
[01:24:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:24:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[01:24:50    INFO]  - Will gen. input-parameter errors ...
[01:24:52    INFO]  - starting ANNZ::loadReaders() ... 
[01:25:39    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[02:08:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:08:40    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:08:40    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:08:40    INFO]  -----------------------------------------------------------------------------------------------------------
[02:23:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:23:29    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:23:29    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:23:29    INFO]  -----------------------------------------------------------------------------------------------------------
[02:23:29    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[02:38:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:38:40    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:38:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:38:40    INFO]  -----------------------------------------------------------------------------------------------------------
[02:38:41    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:38:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:38:43    INFO]  - will validate that the bias-correction actually improved the result ...
[02:38:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:38:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[02:38:48    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_11/plots/
[02:38:58        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_11/plots output/PAUS_advanced11/regres/train/ANNZ_11/plots_biasCor_before
[02:38:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:38:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[02:39:02    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_11/plots/
[02:39:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_11/plots output/PAUS_advanced11/regres/train/ANNZ_11/plots_biasCor_after
[02:39:11    INFO]  - Got original [KS-test,N_poiss]: [0.0996654 , 6.54405] , after the bias-correction: [0.0595011 , 4.51864] --> will KEEP the correction !

(02:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:39 INFO) 
[02:39:16    INFO]  -----------------------------------------------------
[02:39:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:39:16    INFO]  -----------------------------------------------------------------------------------------------------------
[02:39:17    INFO]  - starting ANNZ::Init()  ... 
[02:39:18    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_12/saveOpt.txt ...
[02:39:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:39:33    INFO] ----------------------------------------------------------------------------------------------------
[02:39:33    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P
[02:39:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:39:33    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:39:33    INFO]      cuts (train):        ,
[02:39:33    INFO]      cuts (valid):       
[02:39:33    INFO]    - weights:            1
[02:39:33    INFO] ----------------------------------------------------------------------------------------------------
[02:39:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:41:42    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[02:41:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[02:41:48    INFO]  - Will gen. input-parameter errors ...
[02:41:50    INFO]  - starting ANNZ::loadReaders() ... 
[02:42:38    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[03:26:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:26:59    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:26:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[03:26:59    INFO]  -----------------------------------------------------------------------------------------------------------
[03:42:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:42:10    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:42:10    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[03:42:10    INFO]  -----------------------------------------------------------------------------------------------------------
[03:42:10    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[03:57:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:57:09    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:57:09    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[03:57:09    INFO]  -----------------------------------------------------------------------------------------------------------
[03:57:09    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:57:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:57:12    INFO]  - will try to derive a bias correction ... 
[03:57:12    INFO]  - will validate that training produced an XML file for later ... 
[03:57:12    INFO]  - starting ANNZ::loadReaders() ... 
[03:57:20    INFO]  - will validate that the training was not a complete failure ... 
[03:57:20    INFO]  - training seems to have been successful! will move on ...
[03:57:20    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:57:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:57:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:57:27    INFO] ----------------------------------------------------------------------------------------------------
[03:57:27    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:57:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:57:27    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[03:57:27    INFO]    - weights:            1
[03:57:27    INFO] ----------------------------------------------------------------------------------------------------
[03:57:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:57:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[03:57:39    INFO]  - Will gen. input-parameter errors ...
[03:57:41    INFO]  - starting ANNZ::loadReaders() ... 
[03:58:30    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[04:41:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:41:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:41:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[04:41:04    INFO]  -----------------------------------------------------------------------------------------------------------
[04:55:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:55:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:55:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[04:55:06    INFO]  -----------------------------------------------------------------------------------------------------------
[04:55:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[05:09:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:09:07    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:09:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:09:07    INFO]  -----------------------------------------------------------------------------------------------------------
[05:09:08    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:09:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:09:10    INFO]  - will validate that the bias-correction actually improved the result ...
[05:09:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:09:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[05:09:15    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_12/plots/
[05:09:24        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_12/plots output/PAUS_advanced11/regres/train/ANNZ_12/plots_biasCor_before
[05:09:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:09:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[05:09:28    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_12/plots/
[05:09:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_12/plots output/PAUS_advanced11/regres/train/ANNZ_12/plots_biasCor_after
[05:09:37    INFO]  - Got original [KS-test,N_poiss]: [0.0996654 , 6.54405] , after the bias-correction: [0.0595011 , 4.51864] --> will KEEP the correction !

(05:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:09 INFO) 
[05:09:42    INFO]  -----------------------------------------------------
[05:09:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:09:42    INFO]  -----------------------------------------------------------------------------------------------------------
[05:09:43    INFO]  - starting ANNZ::Init()  ... 
[05:09:45    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_13/saveOpt.txt ...
[05:09:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:09:59    INFO] ----------------------------------------------------------------------------------------------------
[05:09:59    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[05:09:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:09:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:09:59    INFO]      cuts (train):        ,
[05:09:59    INFO]      cuts (valid):       
[05:09:59    INFO]    - weights:            1
[05:09:59    INFO] ----------------------------------------------------------------------------------------------------
[05:09:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:10:40    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[05:10:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[05:10:44    INFO]  - Will gen. input-parameter errors ...
[05:10:46    INFO]  - starting ANNZ::loadReaders() ... 
[05:10:56    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[05:13:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:13:48    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:13:48    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:13:48    INFO]  -----------------------------------------------------------------------------------------------------------
[05:14:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:14:42    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:14:42    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:14:42    INFO]  -----------------------------------------------------------------------------------------------------------
[05:14:42    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[05:15:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:15:27    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:15:27    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:15:27    INFO]  -----------------------------------------------------------------------------------------------------------
[05:15:27    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:15:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:15:29    INFO]  - will try to derive a bias correction ... 
[05:15:29    INFO]  - will validate that training produced an XML file for later ... 
[05:15:29    INFO]  - starting ANNZ::loadReaders() ... 
[05:15:33    INFO]  - will validate that the training was not a complete failure ... 
[05:15:33    INFO]  - training seems to have been successful! will move on ...
[05:15:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:15:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:15:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:15:39    INFO] ----------------------------------------------------------------------------------------------------
[05:15:39    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:15:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:15:39    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[05:15:39    INFO]    - weights:            1
[05:15:39    INFO] ----------------------------------------------------------------------------------------------------
[05:15:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:15:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[05:15:50    INFO]  - Will gen. input-parameter errors ...
[05:15:52    INFO]  - starting ANNZ::loadReaders() ... 
[05:16:04    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[05:19:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:19:10    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:19:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:19:10    INFO]  -----------------------------------------------------------------------------------------------------------
[05:20:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:20:14    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:20:14    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:20:14    INFO]  -----------------------------------------------------------------------------------------------------------
[05:20:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[05:21:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:21:17    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:21:17    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:21:17    INFO]  -----------------------------------------------------------------------------------------------------------
[05:21:17    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:21:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:21:19    INFO]  - will validate that the bias-correction actually improved the result ...
[05:21:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:21:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[05:21:24    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_13/plots/
[05:21:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_13/plots output/PAUS_advanced11/regres/train/ANNZ_13/plots_biasCor_before
[05:21:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:21:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[05:21:37    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_13/plots/
[05:21:45        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_13/plots output/PAUS_advanced11/regres/train/ANNZ_13/plots_biasCor_after
[05:21:45    INFO]  - Got original [KS-test,N_poiss]: [0.0886878 , 5.81919] , after the bias-correction: [0.0690815 , 5.05217] --> will KEEP the correction !

(05:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=730:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:21 INFO) 
[05:21:50    INFO]  -----------------------------------------------------
[05:21:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:21:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:21:51    INFO]  - starting ANNZ::Init()  ... 
[05:21:52    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_14/saveOpt.txt ...
[05:22:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:22:06    INFO] ----------------------------------------------------------------------------------------------------
[05:22:06    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=730:BoostType=AdaBoost:VarTransform=N,P
[05:22:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:22:06    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:22:06    INFO]      cuts (train):        ,
[05:22:06    INFO]      cuts (valid):       
[05:22:06    INFO]    - weights:            1
[05:22:06    INFO] ----------------------------------------------------------------------------------------------------
[05:22:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:22:55    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[05:22:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[05:22:58    INFO]  - Will gen. input-parameter errors ...
[05:23:00    INFO]  - starting ANNZ::loadReaders() ... 
[05:23:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[05:28:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:28:01    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:28:01    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:28:01    INFO]  -----------------------------------------------------------------------------------------------------------
[05:29:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:29:40    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:29:40    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:29:40    INFO]  -----------------------------------------------------------------------------------------------------------
[05:29:40    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[05:31:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:31:07    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:31:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:31:07    INFO]  -----------------------------------------------------------------------------------------------------------
[05:31:08    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:31:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:31:09    INFO]  - will try to derive a bias correction ... 
[05:31:09    INFO]  - will validate that training produced an XML file for later ... 
[05:31:09    INFO]  - starting ANNZ::loadReaders() ... 
[05:31:12    INFO]  - will validate that the training was not a complete failure ... 
[05:31:12    INFO]  - training seems to have been successful! will move on ...
[05:31:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:31:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:31:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:31:19    INFO] ----------------------------------------------------------------------------------------------------
[05:31:19    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:31:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:31:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[05:31:19    INFO]    - weights:            1
[05:31:19    INFO] ----------------------------------------------------------------------------------------------------
[05:31:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:31:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[05:31:29    INFO]  - Will gen. input-parameter errors ...
[05:31:31    INFO]  - starting ANNZ::loadReaders() ... 
[05:31:38    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[05:34:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:34:46    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:34:46    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:34:46    INFO]  -----------------------------------------------------------------------------------------------------------
[05:35:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:35:58    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:35:58    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:35:58    INFO]  -----------------------------------------------------------------------------------------------------------
[05:35:58    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[05:36:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:36:58    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:36:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:36:58    INFO]  -----------------------------------------------------------------------------------------------------------
[05:36:58    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:36:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:36:59    INFO]  - will validate that the bias-correction actually improved the result ...
[05:36:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:36:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[05:37:03    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_14/plots/
[05:37:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_14/plots output/PAUS_advanced11/regres/train/ANNZ_14/plots_biasCor_before
[05:37:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:37:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[05:37:16    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_14/plots/
[05:37:25        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_14/plots output/PAUS_advanced11/regres/train/ANNZ_14/plots_biasCor_after
[05:37:25    INFO]  - Got original [KS-test,N_poiss]: [0.114801 , 6.26535] , after the bias-correction: [0.0610102 , 4.91031] --> will KEEP the correction !

(05:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:37 INFO) 
[05:37:29    INFO]  -----------------------------------------------------
[05:37:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:37:29    INFO]  -----------------------------------------------------------------------------------------------------------
[05:37:30    INFO]  - starting ANNZ::Init()  ... 
[05:37:32    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_15/saveOpt.txt ...
[05:37:47    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:37:47    INFO] ----------------------------------------------------------------------------------------------------
[05:37:47    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=260:BoostType=Bagging:VarTransform=N
[05:37:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:37:47    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:37:47    INFO]      cuts (train):        ,
[05:37:47    INFO]      cuts (valid):       
[05:37:47    INFO]    - weights:            1
[05:37:47    INFO] ----------------------------------------------------------------------------------------------------
[05:37:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:38:17    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[05:38:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[05:38:21    INFO]  - Will gen. input-parameter errors ...
[05:38:23    INFO]  - starting ANNZ::loadReaders() ... 
[05:38:28    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[05:39:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:39:53    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:39:53    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:39:53    INFO]  -----------------------------------------------------------------------------------------------------------
[05:40:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:40:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:40:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:40:21    INFO]  -----------------------------------------------------------------------------------------------------------
[05:40:21    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[05:40:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:40:49    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:40:49    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:40:49    INFO]  -----------------------------------------------------------------------------------------------------------
[05:40:49    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:40:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:40:50    INFO]  - will try to derive a bias correction ... 
[05:40:50    INFO]  - will validate that training produced an XML file for later ... 
[05:40:50    INFO]  - starting ANNZ::loadReaders() ... 
[05:40:52    INFO]  - will validate that the training was not a complete failure ... 
[05:40:53    INFO]  - training seems to have been successful! will move on ...
[05:40:53    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:40:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:40:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:40:58    INFO] ----------------------------------------------------------------------------------------------------
[05:40:58    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:40:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:40:58    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[05:40:58    INFO]    - weights:            1
[05:40:58    INFO] ----------------------------------------------------------------------------------------------------
[05:40:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:41:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[05:41:07    INFO]  - Will gen. input-parameter errors ...
[05:41:08    INFO]  - starting ANNZ::loadReaders() ... 
[05:41:14    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[05:42:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:42:42    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:42:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:42:42    INFO]  -----------------------------------------------------------------------------------------------------------
[05:43:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:43:13    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:43:13    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:43:13    INFO]  -----------------------------------------------------------------------------------------------------------
[05:43:13    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[05:43:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:43:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:43:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:43:44    INFO]  -----------------------------------------------------------------------------------------------------------
[05:43:44    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:43:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:43:45    INFO]  - will validate that the bias-correction actually improved the result ...
[05:43:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:43:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[05:43:50    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_15/plots/
[05:43:59        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_15/plots output/PAUS_advanced11/regres/train/ANNZ_15/plots_biasCor_before
[05:43:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:43:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[05:44:03    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_15/plots/
[05:44:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_15/plots output/PAUS_advanced11/regres/train/ANNZ_15/plots_biasCor_after
[05:44:12    INFO]  - Got original [KS-test,N_poiss]: [0.0889106 , 5.86795] , after the bias-correction: [0.0693785 , 4.98184] --> will KEEP the correction !

(05:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:44 INFO) 
[05:44:16    INFO]  -----------------------------------------------------
[05:44:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:44:16    INFO]  -----------------------------------------------------------------------------------------------------------
[05:44:17    INFO]  - starting ANNZ::Init()  ... 
[05:44:18    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_16/saveOpt.txt ...
[05:44:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:44:32    INFO] ----------------------------------------------------------------------------------------------------
[05:44:32    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=510:BoostType=AdaBoostR2:VarTransform=N
[05:44:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:44:32    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:44:32    INFO]      cuts (train):        ,
[05:44:32    INFO]      cuts (valid):       
[05:44:32    INFO]    - weights:            1
[05:44:32    INFO] ----------------------------------------------------------------------------------------------------
[05:44:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:45:19    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[05:45:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[05:45:22    INFO]  - Will gen. input-parameter errors ...
[05:45:24    INFO]  - starting ANNZ::loadReaders() ... 
[05:45:37    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[05:55:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:55:09    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:55:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:55:09    INFO]  -----------------------------------------------------------------------------------------------------------
[05:58:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:58:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:58:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:58:17    INFO]  -----------------------------------------------------------------------------------------------------------
[05:58:17    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[06:01:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:01:21    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:01:21    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:01:21    INFO]  -----------------------------------------------------------------------------------------------------------
[06:01:24    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:01:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:01:25    INFO]  - will try to derive a bias correction ... 
[06:01:25    INFO]  - will validate that training produced an XML file for later ... 
[06:01:25    INFO]  - starting ANNZ::loadReaders() ... 
[06:01:27    INFO]  - will validate that the training was not a complete failure ... 
[06:01:28    INFO]  - training seems to have been successful! will move on ...
[06:01:28    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[06:01:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:01:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:01:33    INFO] ----------------------------------------------------------------------------------------------------
[06:01:33    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[06:01:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:01:33    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[06:01:33    INFO]    - weights:            1
[06:01:33    INFO] ----------------------------------------------------------------------------------------------------
[06:01:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:01:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[06:01:42    INFO]  - Will gen. input-parameter errors ...
[06:01:44    INFO]  - starting ANNZ::loadReaders() ... 
[06:02:00    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[06:13:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:13:44    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:13:44    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:13:44    INFO]  -----------------------------------------------------------------------------------------------------------
[06:17:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:17:53    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:17:53    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:17:53    INFO]  -----------------------------------------------------------------------------------------------------------
[06:17:53    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[06:21:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:21:57    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:21:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:21:57    INFO]  -----------------------------------------------------------------------------------------------------------
[06:22:00    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:22:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:22:02    INFO]  - will validate that the bias-correction actually improved the result ...
[06:22:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:22:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[06:22:06    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_16/plots/
[06:22:15        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_16/plots output/PAUS_advanced11/regres/train/ANNZ_16/plots_biasCor_before
[06:22:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:22:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[06:22:19    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_16/plots/
[06:22:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_16/plots output/PAUS_advanced11/regres/train/ANNZ_16/plots_biasCor_after
[06:22:28    INFO]  - Got original [KS-test,N_poiss]: [0.118518 , 7.16897] , after the bias-correction: [0.0644769 , 4.96325] --> will KEEP the correction !

(06:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(06:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(06:22 INFO) 
[06:22:32    INFO]  -----------------------------------------------------
[06:22:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[06:22:32    INFO]  -----------------------------------------------------------------------------------------------------------
[06:22:33    INFO]  - starting ANNZ::Init()  ... 
[06:22:34    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_17/saveOpt.txt ...
[06:22:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[06:22:49    INFO] ----------------------------------------------------------------------------------------------------
[06:22:49    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P
[06:22:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:22:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[06:22:49    INFO]      cuts (train):        ,
[06:22:49    INFO]      cuts (valid):       
[06:22:49    INFO]    - weights:            1
[06:22:49    INFO] ----------------------------------------------------------------------------------------------------
[06:22:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:23:28    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[06:23:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[06:23:31    INFO]  - Will gen. input-parameter errors ...
[06:23:33    INFO]  - starting ANNZ::loadReaders() ... 
[06:23:46    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[06:31:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:31:01    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:31:01    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:31:01    INFO]  -----------------------------------------------------------------------------------------------------------
[06:33:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:33:31    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:33:31    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:33:31    INFO]  -----------------------------------------------------------------------------------------------------------
[06:33:31    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[06:35:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:35:58    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:35:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:35:58    INFO]  -----------------------------------------------------------------------------------------------------------
[06:36:01    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:36:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:36:02    INFO]  - will try to derive a bias correction ... 
[06:36:02    INFO]  - will validate that training produced an XML file for later ... 
[06:36:02    INFO]  - starting ANNZ::loadReaders() ... 
[06:36:05    INFO]  - will validate that the training was not a complete failure ... 
[06:36:05    INFO]  - training seems to have been successful! will move on ...
[06:36:05    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[06:36:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:36:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:36:10    INFO] ----------------------------------------------------------------------------------------------------
[06:36:10    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[06:36:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:36:10    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[06:36:10    INFO]    - weights:            1
[06:36:10    INFO] ----------------------------------------------------------------------------------------------------
[06:36:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:36:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[06:36:19    INFO]  - Will gen. input-parameter errors ...
[06:36:21    INFO]  - starting ANNZ::loadReaders() ... 
[06:36:32    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[06:43:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:43:59    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:43:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:43:59    INFO]  -----------------------------------------------------------------------------------------------------------
[06:46:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:46:37    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:46:37    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:46:37    INFO]  -----------------------------------------------------------------------------------------------------------
[06:46:37    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[06:49:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:49:04    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:49:04    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:49:04    INFO]  -----------------------------------------------------------------------------------------------------------
[06:49:04    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:49:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:49:05    INFO]  - will validate that the bias-correction actually improved the result ...
[06:49:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:49:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[06:49:10    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_17/plots/
[06:49:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_17/plots output/PAUS_advanced11/regres/train/ANNZ_17/plots_biasCor_before
[06:49:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:49:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[06:49:23    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_17/plots/
[06:49:32        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_17/plots output/PAUS_advanced11/regres/train/ANNZ_17/plots_biasCor_after
[06:49:32    INFO]  - Got original [KS-test,N_poiss]: [0.0994426 , 6.47493] , after the bias-correction: [0.0564561 , 4.41704] --> will KEEP the correction !

(06:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(06:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(06:49 INFO) 
[06:49:36    INFO]  -----------------------------------------------------
[06:49:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[06:49:36    INFO]  -----------------------------------------------------------------------------------------------------------
[06:49:37    INFO]  - starting ANNZ::Init()  ... 
[06:49:38    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_18/saveOpt.txt ...
[06:49:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[06:49:55    INFO] ----------------------------------------------------------------------------------------------------
[06:49:55    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N
[06:49:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:49:55    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[06:49:55    INFO]      cuts (train):        ,
[06:49:55    INFO]      cuts (valid):       
[06:49:55    INFO]    - weights:            1
[06:49:55    INFO] ----------------------------------------------------------------------------------------------------
[06:49:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:50:49    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[06:50:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[06:50:54    INFO]  - Will gen. input-parameter errors ...
[06:50:57    INFO]  - starting ANNZ::loadReaders() ... 
[06:51:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[06:54:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:54:54    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:54:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:54:54    INFO]  -----------------------------------------------------------------------------------------------------------
[06:56:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:56:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:56:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:56:02    INFO]  -----------------------------------------------------------------------------------------------------------
[06:56:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[06:57:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:57:14    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:57:14    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:57:14    INFO]  -----------------------------------------------------------------------------------------------------------
[06:57:15    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:57:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:57:17    INFO]  - will try to derive a bias correction ... 
[06:57:17    INFO]  - will validate that training produced an XML file for later ... 
[06:57:17    INFO]  - starting ANNZ::loadReaders() ... 
[06:57:21    INFO]  - will validate that the training was not a complete failure ... 
[06:57:21    INFO]  - training seems to have been successful! will move on ...
[06:57:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[06:57:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:57:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:57:28    INFO] ----------------------------------------------------------------------------------------------------
[06:57:28    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[06:57:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:57:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[06:57:28    INFO]    - weights:            1
[06:57:28    INFO] ----------------------------------------------------------------------------------------------------
[06:57:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:57:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[06:57:38    INFO]  - Will gen. input-parameter errors ...
[06:57:40    INFO]  - starting ANNZ::loadReaders() ... 
[06:57:54    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:01:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:01:58    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:01:58    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:01:58    INFO]  -----------------------------------------------------------------------------------------------------------
[07:03:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:03:09    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:03:09    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:03:09    INFO]  -----------------------------------------------------------------------------------------------------------
[07:03:09    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:04:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:04:35    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:04:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:04:35    INFO]  -----------------------------------------------------------------------------------------------------------
[07:04:35    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:04:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:04:37    INFO]  - will validate that the bias-correction actually improved the result ...
[07:04:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:04:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[07:04:43    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_18/plots/
[07:04:55        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_18/plots output/PAUS_advanced11/regres/train/ANNZ_18/plots_biasCor_before
[07:04:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:04:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[07:04:59    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_18/plots/
[07:05:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_18/plots output/PAUS_advanced11/regres/train/ANNZ_18/plots_biasCor_after
[07:05:08    INFO]  - Got original [KS-test,N_poiss]: [0.088168 , 5.80923] , after the bias-correction: [0.0686359 , 4.91143] --> will KEEP the correction !

(07:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:05 INFO) 
[07:05:12    INFO]  -----------------------------------------------------
[07:05:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:05:12    INFO]  -----------------------------------------------------------------------------------------------------------
[07:05:13    INFO]  - starting ANNZ::Init()  ... 
[07:05:15    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_19/saveOpt.txt ...
[07:05:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:05:29    INFO] ----------------------------------------------------------------------------------------------------
[07:05:29    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[07:05:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:05:29    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:05:29    INFO]      cuts (train):        ,
[07:05:29    INFO]      cuts (valid):       
[07:05:29    INFO]    - weights:            1
[07:05:29    INFO] ----------------------------------------------------------------------------------------------------
[07:05:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:06:04    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[07:06:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[07:06:08    INFO]  - Will gen. input-parameter errors ...
[07:06:10    INFO]  - starting ANNZ::loadReaders() ... 
[07:06:20    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:09:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:09:35    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:09:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:09:35    INFO]  -----------------------------------------------------------------------------------------------------------
[07:10:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:10:54    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:10:54    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:10:54    INFO]  -----------------------------------------------------------------------------------------------------------
[07:10:54    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:12:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:12:12    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:12:12    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:12:12    INFO]  -----------------------------------------------------------------------------------------------------------
[07:12:12    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:12:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:12:14    INFO]  - will try to derive a bias correction ... 
[07:12:14    INFO]  - will validate that training produced an XML file for later ... 
[07:12:14    INFO]  - starting ANNZ::loadReaders() ... 
[07:12:17    INFO]  - will validate that the training was not a complete failure ... 
[07:12:17    INFO]  - training seems to have been successful! will move on ...
[07:12:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:12:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:12:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:12:22    INFO] ----------------------------------------------------------------------------------------------------
[07:12:22    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:12:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:12:22    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:12:22    INFO]    - weights:            1
[07:12:22    INFO] ----------------------------------------------------------------------------------------------------
[07:12:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:12:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[07:12:33    INFO]  - Will gen. input-parameter errors ...
[07:12:35    INFO]  - starting ANNZ::loadReaders() ... 
[07:12:44    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:16:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:16:25    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:16:25    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:16:25    INFO]  -----------------------------------------------------------------------------------------------------------
[07:17:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:17:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:17:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:17:35    INFO]  -----------------------------------------------------------------------------------------------------------
[07:17:35    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:18:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:18:54    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:18:54    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:18:54    INFO]  -----------------------------------------------------------------------------------------------------------
[07:18:55    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:18:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:18:56    INFO]  - will validate that the bias-correction actually improved the result ...
[07:18:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:18:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[07:19:01    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_19/plots/
[07:19:10        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_19/plots output/PAUS_advanced11/regres/train/ANNZ_19/plots_biasCor_before
[07:19:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:19:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[07:19:14    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_19/plots/
[07:19:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_19/plots output/PAUS_advanced11/regres/train/ANNZ_19/plots_biasCor_after
[07:19:23    INFO]  - Got original [KS-test,N_poiss]: [0.0917711 , 6.07676] , after the bias-correction: [0.059737 , 4.68775] --> will KEEP the correction !

(07:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:19 INFO) 
[07:19:27    INFO]  -----------------------------------------------------
[07:19:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:19:27    INFO]  -----------------------------------------------------------------------------------------------------------
[07:19:28    INFO]  - starting ANNZ::Init()  ... 
[07:19:29    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_20/saveOpt.txt ...
[07:19:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:19:44    INFO] ----------------------------------------------------------------------------------------------------
[07:19:44    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N,P
[07:19:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:19:44    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:19:44    INFO]      cuts (train):        ,
[07:19:44    INFO]      cuts (valid):       
[07:19:44    INFO]    - weights:            1
[07:19:44    INFO] ----------------------------------------------------------------------------------------------------
[07:19:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:20:10    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[07:20:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[07:20:13    INFO]  - Will gen. input-parameter errors ...
[07:20:15    INFO]  - starting ANNZ::loadReaders() ... 
[07:20:20    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:22:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:22:26    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:22:26    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:22:26    INFO]  -----------------------------------------------------------------------------------------------------------
[07:23:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:23:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:23:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:23:11    INFO]  -----------------------------------------------------------------------------------------------------------
[07:23:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:23:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:23:58    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:23:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:23:58    INFO]  -----------------------------------------------------------------------------------------------------------
[07:23:58    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:23:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:23:59    INFO]  - will try to derive a bias correction ... 
[07:23:59    INFO]  - will validate that training produced an XML file for later ... 
[07:23:59    INFO]  - starting ANNZ::loadReaders() ... 
[07:24:00    INFO]  - will validate that the training was not a complete failure ... 
[07:24:01    INFO]  - training seems to have been successful! will move on ...
[07:24:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:24:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:24:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:24:05    INFO] ----------------------------------------------------------------------------------------------------
[07:24:05    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:24:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:24:05    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:24:05    INFO]    - weights:            1
[07:24:05    INFO] ----------------------------------------------------------------------------------------------------
[07:24:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:24:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[07:24:14    INFO]  - Will gen. input-parameter errors ...
[07:24:15    INFO]  - starting ANNZ::loadReaders() ... 
[07:24:20    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:26:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:26:13    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:26:13    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:26:13    INFO]  -----------------------------------------------------------------------------------------------------------
[07:26:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:26:55    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:26:55    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:26:55    INFO]  -----------------------------------------------------------------------------------------------------------
[07:26:55    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:27:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:27:36    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:27:36    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:27:36    INFO]  -----------------------------------------------------------------------------------------------------------
[07:27:36    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:27:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:27:37    INFO]  - will validate that the bias-correction actually improved the result ...
[07:27:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:27:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[07:27:41    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_20/plots/
[07:27:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_20/plots output/PAUS_advanced11/regres/train/ANNZ_20/plots_biasCor_before
[07:27:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:27:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[07:27:54    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_20/plots/
[07:28:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_20/plots output/PAUS_advanced11/regres/train/ANNZ_20/plots_biasCor_after
[07:28:05    INFO]  - Got original [KS-test,N_poiss]: [0.114578 , 6.25772] , after the bias-correction: [0.060713 , 4.90644] --> will KEEP the correction !

(07:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:28 INFO) 
[07:28:09    INFO]  -----------------------------------------------------
[07:28:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:28:09    INFO]  -----------------------------------------------------------------------------------------------------------
[07:28:11    INFO]  - starting ANNZ::Init()  ... 
[07:28:13    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_21/saveOpt.txt ...
[07:28:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:28:29    INFO] ----------------------------------------------------------------------------------------------------
[07:28:29    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N,P
[07:28:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:28:29    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:28:29    INFO]      cuts (train):        ,
[07:28:29    INFO]      cuts (valid):       
[07:28:29    INFO]    - weights:            1
[07:28:29    INFO] ----------------------------------------------------------------------------------------------------
[07:28:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:28:58    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[07:29:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[07:29:01    INFO]  - Will gen. input-parameter errors ...
[07:29:02    INFO]  - starting ANNZ::loadReaders() ... 
[07:29:07    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:31:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:31:54    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:31:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:31:54    INFO]  -----------------------------------------------------------------------------------------------------------
[07:32:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:32:49    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:32:49    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:32:49    INFO]  -----------------------------------------------------------------------------------------------------------
[07:32:49    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:33:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:33:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:33:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:33:47    INFO]  -----------------------------------------------------------------------------------------------------------
[07:33:47    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:33:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:33:48    INFO]  - will try to derive a bias correction ... 
[07:33:48    INFO]  - will validate that training produced an XML file for later ... 
[07:33:48    INFO]  - starting ANNZ::loadReaders() ... 
[07:33:49    INFO]  - will validate that the training was not a complete failure ... 
[07:33:49    INFO]  - training seems to have been successful! will move on ...
[07:33:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:33:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:33:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:33:54    INFO] ----------------------------------------------------------------------------------------------------
[07:33:54    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:33:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:33:54    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:33:54    INFO]    - weights:            1
[07:33:54    INFO] ----------------------------------------------------------------------------------------------------
[07:33:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:34:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[07:34:02    INFO]  - Will gen. input-parameter errors ...
[07:34:04    INFO]  - starting ANNZ::loadReaders() ... 
[07:34:09    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:36:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:36:33    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:36:33    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:36:33    INFO]  -----------------------------------------------------------------------------------------------------------
[07:37:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:37:20    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:37:20    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:37:20    INFO]  -----------------------------------------------------------------------------------------------------------
[07:37:20    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:38:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:38:05    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:38:05    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:38:05    INFO]  -----------------------------------------------------------------------------------------------------------
[07:38:05    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:38:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:38:06    INFO]  - will validate that the bias-correction actually improved the result ...
[07:38:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:38:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[07:38:11    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_21/plots/
[07:38:20        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_21/plots output/PAUS_advanced11/regres/train/ANNZ_21/plots_biasCor_before
[07:38:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:38:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[07:38:24    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_21/plots/
[07:38:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_21/plots output/PAUS_advanced11/regres/train/ANNZ_21/plots_biasCor_after
[07:38:33    INFO]  - Got original [KS-test,N_poiss]: [0.114726 , 6.26694] , after the bias-correction: [0.0609359 , 4.89596] --> will KEEP the correction !

(07:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:38 INFO) 
[07:38:36    INFO]  -----------------------------------------------------
[07:38:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:38:36    INFO]  -----------------------------------------------------------------------------------------------------------
[07:38:37    INFO]  - starting ANNZ::Init()  ... 
[07:38:38    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_22/saveOpt.txt ...
[07:38:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:38:53    INFO] ----------------------------------------------------------------------------------------------------
[07:38:53    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[07:38:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:38:53    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:38:53    INFO]      cuts (train):        ,
[07:38:53    INFO]      cuts (valid):       
[07:38:53    INFO]    - weights:            1
[07:38:53    INFO] ----------------------------------------------------------------------------------------------------
[07:38:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:39:10    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[07:39:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[07:39:12    INFO]  - Will gen. input-parameter errors ...
[07:39:13    INFO]  - starting ANNZ::loadReaders() ... 
[07:39:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:40:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:40:51    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:40:51    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:40:51    INFO]  -----------------------------------------------------------------------------------------------------------
[07:41:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:41:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:41:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:41:21    INFO]  -----------------------------------------------------------------------------------------------------------
[07:41:21    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:41:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:41:50    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:41:50    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:41:50    INFO]  -----------------------------------------------------------------------------------------------------------
[07:41:50    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:41:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:41:51    INFO]  - will try to derive a bias correction ... 
[07:41:51    INFO]  - will validate that training produced an XML file for later ... 
[07:41:51    INFO]  - starting ANNZ::loadReaders() ... 
[07:41:51    INFO]  - will validate that the training was not a complete failure ... 
[07:41:52    INFO]  - training seems to have been successful! will move on ...
[07:41:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:41:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:41:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:41:56    INFO] ----------------------------------------------------------------------------------------------------
[07:41:56    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:41:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:41:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:41:56    INFO]    - weights:            1
[07:41:56    INFO] ----------------------------------------------------------------------------------------------------
[07:41:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:42:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[07:42:03    INFO]  - Will gen. input-parameter errors ...
[07:42:05    INFO]  - starting ANNZ::loadReaders() ... 
[07:42:08    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:43:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:43:43    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:43:43    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:43:43    INFO]  -----------------------------------------------------------------------------------------------------------
[07:44:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:44:16    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:44:16    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:44:16    INFO]  -----------------------------------------------------------------------------------------------------------
[07:44:16    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:44:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:44:49    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:44:49    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:44:49    INFO]  -----------------------------------------------------------------------------------------------------------
[07:44:49    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:44:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:44:50    INFO]  - will validate that the bias-correction actually improved the result ...
[07:44:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:44:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
Warning in <Fit>: Fit data is empty 
[07:44:54    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_22/plots/
[07:45:03        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_22/plots output/PAUS_advanced11/regres/train/ANNZ_22/plots_biasCor_before
[07:45:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:45:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[07:45:07    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_22/plots/
[07:45:15        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_22/plots output/PAUS_advanced11/regres/train/ANNZ_22/plots_biasCor_after
[07:45:15    INFO]  - Got original [KS-test,N_poiss]: [0.111975 , 6.16903] , after the bias-correction: [0.0598958 , 4.82796] --> will KEEP the correction !

(07:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:45 INFO) 
[07:45:19    INFO]  -----------------------------------------------------
[07:45:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:45:19    INFO]  -----------------------------------------------------------------------------------------------------------
[07:45:20    INFO]  - starting ANNZ::Init()  ... 
[07:45:21    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_23/saveOpt.txt ...
[07:45:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:45:35    INFO] ----------------------------------------------------------------------------------------------------
[07:45:35    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=300:BoostType=AdaBoost:VarTransform=N
[07:45:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:45:35    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:45:35    INFO]      cuts (train):        ,
[07:45:35    INFO]      cuts (valid):       
[07:45:35    INFO]    - weights:            1
[07:45:35    INFO] ----------------------------------------------------------------------------------------------------
[07:45:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:45:54    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[07:45:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[07:45:56    INFO]  - Will gen. input-parameter errors ...
[07:45:57    INFO]  - starting ANNZ::loadReaders() ... 
[07:46:00    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:46:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:46:59    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:46:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:46:59    INFO]  -----------------------------------------------------------------------------------------------------------
[07:47:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:47:19    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:47:19    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:47:19    INFO]  -----------------------------------------------------------------------------------------------------------
[07:47:19    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:47:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:47:39    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:47:39    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:47:39    INFO]  -----------------------------------------------------------------------------------------------------------
[07:47:39    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:47:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:47:40    INFO]  - will try to derive a bias correction ... 
[07:47:40    INFO]  - will validate that training produced an XML file for later ... 
[07:47:40    INFO]  - starting ANNZ::loadReaders() ... 
[07:47:41    INFO]  - will validate that the training was not a complete failure ... 
[07:47:41    INFO]  - training seems to have been successful! will move on ...
[07:47:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:47:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:47:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:47:46    INFO] ----------------------------------------------------------------------------------------------------
[07:47:46    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:47:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:47:46    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:47:46    INFO]    - weights:            1
[07:47:46    INFO] ----------------------------------------------------------------------------------------------------
[07:47:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:47:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[07:47:54    INFO]  - Will gen. input-parameter errors ...
[07:47:56    INFO]  - starting ANNZ::loadReaders() ... 
[07:47:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:49:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:49:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:49:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:49:08    INFO]  -----------------------------------------------------------------------------------------------------------
[07:49:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:49:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:49:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:49:32    INFO]  -----------------------------------------------------------------------------------------------------------
[07:49:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:49:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:49:56    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:49:56    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:49:56    INFO]  -----------------------------------------------------------------------------------------------------------
[07:49:56    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:49:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:49:57    INFO]  - will validate that the bias-correction actually improved the result ...
[07:49:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:49:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
Warning in <Fit>: Fit data is empty 
[07:50:01    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_23/plots/
[07:50:10        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_23/plots output/PAUS_advanced11/regres/train/ANNZ_23/plots_biasCor_before
[07:50:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:50:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
Warning in <Fit>: Fit data is empty 
[07:50:14    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_23/plots/
[07:50:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_23/plots output/PAUS_advanced11/regres/train/ANNZ_23/plots_biasCor_after
[07:50:22    INFO]  - Got original [KS-test,N_poiss]: [0.0912513 , 5.74342] , after the bias-correction: [0.0608379 , 4.90315] --> will KEEP the correction !

(07:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:50 INFO) 
[07:50:26    INFO]  -----------------------------------------------------
[07:50:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:50:26    INFO]  -----------------------------------------------------------------------------------------------------------
[07:50:27    INFO]  - starting ANNZ::Init()  ... 
[07:50:28    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/train/ANNZ_24/saveOpt.txt ...
[07:50:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:50:42    INFO] ----------------------------------------------------------------------------------------------------
[07:50:42    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=290:BoostType=AdaBoost:VarTransform=N
[07:50:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:50:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:50:42    INFO]      cuts (train):        ,
[07:50:42    INFO]      cuts (valid):       
[07:50:42    INFO]    - weights:            1
[07:50:42    INFO] ----------------------------------------------------------------------------------------------------
[07:50:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:51:00    INFO]  - Saving MLM information in ./output/PAUS_advanced11/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[07:51:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[07:51:02    INFO]  - Will gen. input-parameter errors ...
[07:51:04    INFO]  - starting ANNZ::loadReaders() ... 
[07:51:07    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:52:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:52:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:52:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:52:04    INFO]  -----------------------------------------------------------------------------------------------------------
[07:52:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:52:24    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:52:24    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:52:24    INFO]  -----------------------------------------------------------------------------------------------------------
[07:52:24    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:52:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:52:44    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:52:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:52:44    INFO]  -----------------------------------------------------------------------------------------------------------
[07:52:44    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:52:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:52:45    INFO]  - will try to derive a bias correction ... 
[07:52:45    INFO]  - will validate that training produced an XML file for later ... 
[07:52:45    INFO]  - starting ANNZ::loadReaders() ... 
[07:52:46    INFO]  - will validate that the training was not a complete failure ... 
[07:52:46    INFO]  - training seems to have been successful! will move on ...
[07:52:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:52:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:52:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:52:50    INFO] ----------------------------------------------------------------------------------------------------
[07:52:50    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:52:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:52:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:52:50    INFO]    - weights:            1
[07:52:50    INFO] ----------------------------------------------------------------------------------------------------
[07:52:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:52:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[07:52:59    INFO]  - Will gen. input-parameter errors ...
[07:53:00    INFO]  - starting ANNZ::loadReaders() ... 
[07:53:04    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_train*.root
[07:54:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:54:13    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:54:13    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:54:13    INFO]  -----------------------------------------------------------------------------------------------------------
[07:54:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:54:36    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:54:36    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:54:36    INFO]  -----------------------------------------------------------------------------------------------------------
[07:54:36    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced11/rootIn/ANNZ_tree_valid*.root
[07:55:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:55:00    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:55:00    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:55:00    INFO]  -----------------------------------------------------------------------------------------------------------
[07:55:00    INFO]  - Saving file ./output/PAUS_advanced11/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:55:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:55:01    INFO]  - will validate that the bias-correction actually improved the result ...
[07:55:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:55:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
Warning in <Fit>: Fit data is empty 
[07:55:05    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_24/plots/
[07:55:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_24/plots output/PAUS_advanced11/regres/train/ANNZ_24/plots_biasCor_before
[07:55:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:55:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
Warning in <Fit>: Fit data is empty 
[07:55:17    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/train/ANNZ_24/plots/
[07:55:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced11/regres/train/ANNZ_24/plots output/PAUS_advanced11/regres/train/ANNZ_24/plots_biasCor_after
[07:55:26    INFO]  - Got original [KS-test,N_poiss]: [0.0912513 , 5.74698] , after the bias-correction: [0.0608379 , 4.9065] --> will KEEP the correction !

(07:55 INFO) [40;37;1m - 13/02/19 07:55:29 - finished running ANNZ ![0m
(09:54 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:54 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:54 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:54 INFO) [40;37;1m - 13/02/19 09:54:03 - starting ANNZ[0m
(09:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mmax_frac68_PDF[0m[31m=[0m'[32m0.1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mmax_bias_PDF[0m[31m=[0m'[32m0.01[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.044[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:54 INFO) 
[09:54:03    INFO]  -----------------------------------------------------
[09:54:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:54:03    INFO]  -----------------------------------------------------------------------------------------------------------
[09:54:04    INFO]  - starting ANNZ::Init()  ... 
[09:54:04    INFO]  - Will generate 1 PDFs ... 
[09:54:15    INFO] --------------------------------------------------------
[09:54:15    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[09:54:15    INFO]  - All REJECTED MLMs: 
[09:54:15    INFO] ----------------------------------------------------------------------------------------------------------------
[09:54:18    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/optim/saveOpt.txt ...
[09:55:19    INFO]  - starting ANNZ::Optim() ... 
[09:55:19    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[09:55:20    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[09:55:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:55:42    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced11/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[09:55:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:00    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced11/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[09:56:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:17    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/PAUS_advanced11/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[09:56:18    INFO]  - Saving file ./output/PAUS_advanced11/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[09:56:19    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[09:56:19    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced11/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[09:56:19    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[09:56:19    INFO]  - ending makeTreeRegClsAllMLM() ... 
[09:56:19    INFO]  - starting ANNZ::optimReg() ... 
[09:56:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:26    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced11/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[09:56:26    INFO]  - starting ANNZ::fillColosureV() ... 
[09:56:27    INFO]  ---------------------------------------------------------------------------------- 
[09:56:27    INFO]  - Got the following average properties: 
[09:56:27    INFO]  --------------------------------------- 
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00662007 	 0.0852218 	 0.0875299
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00584233 	 0.0800484 	 0.0938191
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00657791 	 0.0851804 	 0.0875227
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.0243896 	 0.073024 	 0.0796712
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00850947 	 0.087063 	 0.0830958
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0247038 	 0.0737063 	 0.0785003
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.00861638 	 0.0870305 	 0.0829182
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.0167709 	 0.0781544 	 0.0248062
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0245722 	 0.0728816 	 0.0811115
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.0166375 	 0.078452 	 0.0250953
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00672723 	 0.0853698 	 0.0869631
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.0146516 	 0.0751099 	 0.0241621
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.0146516 	 0.0751099 	 0.0241621
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0244427 	 0.0737623 	 0.078226
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00651053 	 0.0852942 	 0.0874735
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.0242996 	 0.0733623 	 0.0783988
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.0172704 	 0.0787533 	 0.0222619
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0142009 	 0.0752366 	 0.0254172
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.0242105 	 0.0725544 	 0.0815584
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.0135513 	 0.0704806 	 0.0889313
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00651464 	 0.0850748 	 0.0876196
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00657252 	 0.0851979 	 0.08718
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00672723 	 0.0853698 	 0.0869631
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00853009 	 0.0869798 	 0.0830627
[09:56:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00852947 	 0.0869798 	 0.0830627
[09:56:27    INFO]  ------------------------------------------------------------------------------------------------- 
[09:56:27    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[09:56:27    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[09:56:27    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 15% of the [sig68] dist, and 25% of the other(s) - iteration 2 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 17.5% of the [sig68] dist, and 27.5% of the other(s) - iteration 3 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 20% of the [sig68] dist, and 30% of the other(s) - iteration 4 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 22.5% of the [sig68] dist, and 32.5% of the other(s) - iteration 5 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 25% of the [sig68] dist, and 35% of the other(s) - iteration 6 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 27.5% of the [sig68] dist, and 37.5% of the other(s) - iteration 7 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 30% of the [sig68] dist, and 40% of the other(s) - iteration 8 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 32.5% of the [sig68] dist, and 42.5% of the other(s) - iteration 9 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 35% of the [sig68] dist, and 45% of the other(s) - iteration 10 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 37.5% of the [sig68] dist, and 47.5% of the other(s) - iteration 11 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 40% of the [sig68] dist, and 50% of the other(s) - iteration 12 ...
[09:56:27    INFO]  - Now trying to find best methods with a limit of 42.5% of the [sig68] dist, and 52.5% of the other(s) - iteration 13 ...
[09:56:27    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 42.5% of the [sig68] dist.
[09:56:27    INFO]  - The "best" MLM is: ANNZ_19
[09:56:27    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[09:56:27    INFO]  - ANNZ_0 has sigma68 = 0.0852218 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_1 has sigma68 = 0.0800484 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_2 has sigma68 = 0.0851804 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_3 has sigma68 = 0.073024 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_4 has sigma68 = 0.087063 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_5 has sigma68 = 0.0737063 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_6 has sigma68 = 0.0870305 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_7 has sigma68 = 0.0781544 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_8 has sigma68 = 0.0728816 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_9 has sigma68 = 0.078452 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_10 has sigma68 = 0.0853698 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_11 has sigma68 = 0.0751099 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_12 has sigma68 = 0.0751099 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_13 has sigma68 = 0.0737623 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_14 has sigma68 = 0.0852942 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_15 has sigma68 = 0.0733623 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_16 has sigma68 = 0.0787533 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_17 has sigma68 = 0.0752366 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_18 has sigma68 = 0.0725544 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_19 has sigma68 = 0.0704806 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_20 has sigma68 = 0.0850748 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_21 has sigma68 = 0.0851979 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_22 has sigma68 = 0.0853698 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_23 has sigma68 = 0.0869798 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27    INFO]  - ANNZ_24 has sigma68 = 0.0869798 which is above threshold (0.044) -> it will be rejected from the PDF ...
[09:56:27   ERROR]  - ... ------------------------------------------------------------ 
[09:56:27   ERROR]  - MESSAGE -  - found only 0 accepted MLMs, but requested minAcptMLMsForPDFs = 5 ... 
[09:56:27   ERROR]  - FROM    - FILE: ../src/ANNZ_loopReg.cpp , LINE: 916 , (Jan 22 2019 21:40:46) 
[09:56:27   ERROR]  - ..... ABORTING !!! 
[09:56:27   ERROR]  ------------------------------------------------------------ ... - 
(09:56 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(09:56 CRITICAL) [41;37;1mWill terminate !!!![0m
(09:59 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:59 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:59 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:59 INFO) [40;37;1m - 13/02/19 09:59:09 - starting ANNZ[0m
(09:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mmax_frac68_PDF[0m[31m=[0m'[32m0.1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mmax_bias_PDF[0m[31m=[0m'[32m0.01[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.077[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:59 INFO) 
[09:59:09    INFO]  -----------------------------------------------------
[09:59:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:59:09    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:10    INFO]  - starting ANNZ::Init()  ... 
[09:59:10    INFO]  - Will generate 1 PDFs ... 
[09:59:22    INFO] --------------------------------------------------------
[09:59:22    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[09:59:22    INFO]  - All REJECTED MLMs: 
[09:59:22    INFO] ----------------------------------------------------------------------------------------------------------------
[09:59:25    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/optim/saveOpt.txt ...
[10:00:20    INFO]  - starting ANNZ::Optim() ... 
[10:00:20    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[10:00:21    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced11/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[10:00:21    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[10:00:21    INFO]  - ending makeTreeRegClsAllMLM() ... 
[10:00:21    INFO]  - starting ANNZ::optimReg() ... 
[10:00:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:00:25    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced11/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[10:00:26    INFO]  - starting ANNZ::fillColosureV() ... 
[10:00:27    INFO]  ---------------------------------------------------------------------------------- 
[10:00:27    INFO]  - Got the following average properties: 
[10:00:27    INFO]  --------------------------------------- 
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00662007 	 0.0852218 	 0.0875299
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00584233 	 0.0800484 	 0.0938191
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00657791 	 0.0851804 	 0.0875227
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.0243896 	 0.073024 	 0.0796712
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00850947 	 0.087063 	 0.0830958
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0247038 	 0.0737063 	 0.0785003
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.00861638 	 0.0870305 	 0.0829182
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.0167709 	 0.0781544 	 0.0248062
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0245722 	 0.0728816 	 0.0811115
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.0166375 	 0.078452 	 0.0250953
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00672723 	 0.0853698 	 0.0869631
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.0146516 	 0.0751099 	 0.0241621
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.0146516 	 0.0751099 	 0.0241621
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0244427 	 0.0737623 	 0.078226
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00651053 	 0.0852942 	 0.0874735
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.0242996 	 0.0733623 	 0.0783988
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.0172704 	 0.0787533 	 0.0222619
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0142009 	 0.0752366 	 0.0254172
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.0242105 	 0.0725544 	 0.0815584
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.0135513 	 0.0704806 	 0.0889313
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00651464 	 0.0850748 	 0.0876196
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00657252 	 0.0851979 	 0.08718
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00672723 	 0.0853698 	 0.0869631
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00853009 	 0.0869798 	 0.0830627
[10:00:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00852947 	 0.0869798 	 0.0830627
[10:00:27    INFO]  ------------------------------------------------------------------------------------------------- 
[10:00:27    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[10:00:27    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[10:00:27    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 15% of the [sig68] dist, and 25% of the other(s) - iteration 2 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 17.5% of the [sig68] dist, and 27.5% of the other(s) - iteration 3 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 20% of the [sig68] dist, and 30% of the other(s) - iteration 4 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 22.5% of the [sig68] dist, and 32.5% of the other(s) - iteration 5 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 25% of the [sig68] dist, and 35% of the other(s) - iteration 6 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 27.5% of the [sig68] dist, and 37.5% of the other(s) - iteration 7 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 30% of the [sig68] dist, and 40% of the other(s) - iteration 8 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 32.5% of the [sig68] dist, and 42.5% of the other(s) - iteration 9 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 35% of the [sig68] dist, and 45% of the other(s) - iteration 10 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 37.5% of the [sig68] dist, and 47.5% of the other(s) - iteration 11 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 40% of the [sig68] dist, and 50% of the other(s) - iteration 12 ...
[10:00:27    INFO]  - Now trying to find best methods with a limit of 42.5% of the [sig68] dist, and 52.5% of the other(s) - iteration 13 ...
[10:00:27    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 42.5% of the [sig68] dist.
[10:00:27    INFO]  - The "best" MLM is: ANNZ_19
[10:00:27    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[10:00:27    INFO]  - ANNZ_0 has sigma68 = 0.0852218 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_1 has sigma68 = 0.0800484 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_2 has sigma68 = 0.0851804 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_3 has bias = 0.0243896 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_4 has sigma68 = 0.087063 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_5 has bias = 0.0247038 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_6 has sigma68 = 0.0870305 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_7 has sigma68 = 0.0781544 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_8 has bias = 0.0245722 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_9 has sigma68 = 0.078452 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_10 has sigma68 = 0.0853698 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_11 has bias = 0.0146516 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_12 has bias = 0.0146516 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_13 has bias = 0.0244427 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_14 has sigma68 = 0.0852942 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_15 has bias = 0.0242996 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_16 has sigma68 = 0.0787533 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_17 has bias = 0.0142009 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_18 has bias = 0.0242105 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_19 has bias = 0.0135513 which is above threshold (0.01) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_20 has sigma68 = 0.0850748 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_21 has sigma68 = 0.0851979 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_22 has sigma68 = 0.0853698 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_23 has sigma68 = 0.0869798 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27    INFO]  - ANNZ_24 has sigma68 = 0.0869798 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:00:27   ERROR]  - ... ------------------------------------------------------------ 
[10:00:27   ERROR]  - MESSAGE -  - found only 0 accepted MLMs, but requested minAcptMLMsForPDFs = 5 ... 
[10:00:27   ERROR]  - FROM    - FILE: ../src/ANNZ_loopReg.cpp , LINE: 916 , (Jan 22 2019 21:40:46) 
[10:00:27   ERROR]  - ..... ABORTING !!! 
[10:00:27   ERROR]  ------------------------------------------------------------ ... - 
(10:00 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(10:00 CRITICAL) [41;37;1mWill terminate !!!![0m
(10:01 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(10:01 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(10:01 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(10:01 INFO) [40;37;1m - 13/02/19 10:01:59 - starting ANNZ[0m
(10:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.077[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(10:01 INFO) 
[10:01:59    INFO]  -----------------------------------------------------
[10:01:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:01:59    INFO]  -----------------------------------------------------------------------------------------------------------
[10:02:00    INFO]  - starting ANNZ::Init()  ... 
[10:02:00    INFO]  - Will generate 1 PDFs ... 
[10:02:11    INFO] --------------------------------------------------------
[10:02:11    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[10:02:11    INFO]  - All REJECTED MLMs: 
[10:02:11    INFO] ----------------------------------------------------------------------------------------------------------------
[10:02:13    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/optim/saveOpt.txt ...
[10:03:06    INFO]  - starting ANNZ::Optim() ... 
[10:03:06    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[10:03:06    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced11/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[10:03:06    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[10:03:07    INFO]  - ending makeTreeRegClsAllMLM() ... 
[10:03:07    INFO]  - starting ANNZ::optimReg() ... 
[10:03:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:03:11    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced11/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[10:03:11    INFO]  - starting ANNZ::fillColosureV() ... 
[10:03:12    INFO]  ---------------------------------------------------------------------------------- 
[10:03:12    INFO]  - Got the following average properties: 
[10:03:12    INFO]  --------------------------------------- 
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00662007 	 0.0852218 	 0.0875299
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00584233 	 0.0800484 	 0.0938191
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00657791 	 0.0851804 	 0.0875227
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.0243896 	 0.073024 	 0.0796712
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00850947 	 0.087063 	 0.0830958
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0247038 	 0.0737063 	 0.0785003
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.00861638 	 0.0870305 	 0.0829182
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.0167709 	 0.0781544 	 0.0248062
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0245722 	 0.0728816 	 0.0811115
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.0166375 	 0.078452 	 0.0250953
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00672723 	 0.0853698 	 0.0869631
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.0146516 	 0.0751099 	 0.0241621
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.0146516 	 0.0751099 	 0.0241621
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0244427 	 0.0737623 	 0.078226
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00651053 	 0.0852942 	 0.0874735
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.0242996 	 0.0733623 	 0.0783988
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.0172704 	 0.0787533 	 0.0222619
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0142009 	 0.0752366 	 0.0254172
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.0242105 	 0.0725544 	 0.0815584
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.0135513 	 0.0704806 	 0.0889313
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00651464 	 0.0850748 	 0.0876196
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00657252 	 0.0851979 	 0.08718
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00672723 	 0.0853698 	 0.0869631
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00853009 	 0.0869798 	 0.0830627
[10:03:12    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00852947 	 0.0869798 	 0.0830627
[10:03:12    INFO]  ------------------------------------------------------------------------------------------------- 
[10:03:12    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[10:03:12    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[10:03:12    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 15% of the [sig68] dist, and 25% of the other(s) - iteration 2 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 17.5% of the [sig68] dist, and 27.5% of the other(s) - iteration 3 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 20% of the [sig68] dist, and 30% of the other(s) - iteration 4 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 22.5% of the [sig68] dist, and 32.5% of the other(s) - iteration 5 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 25% of the [sig68] dist, and 35% of the other(s) - iteration 6 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 27.5% of the [sig68] dist, and 37.5% of the other(s) - iteration 7 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 30% of the [sig68] dist, and 40% of the other(s) - iteration 8 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 32.5% of the [sig68] dist, and 42.5% of the other(s) - iteration 9 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 35% of the [sig68] dist, and 45% of the other(s) - iteration 10 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 37.5% of the [sig68] dist, and 47.5% of the other(s) - iteration 11 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 40% of the [sig68] dist, and 50% of the other(s) - iteration 12 ...
[10:03:12    INFO]  - Now trying to find best methods with a limit of 42.5% of the [sig68] dist, and 52.5% of the other(s) - iteration 13 ...
[10:03:12    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 42.5% of the [sig68] dist.
[10:03:12    INFO]  - The "best" MLM is: ANNZ_19
[10:03:12    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[10:03:12    INFO]  - ANNZ_0 has sigma68 = 0.0852218 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_1 has sigma68 = 0.0800484 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_2 has sigma68 = 0.0851804 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_4 has sigma68 = 0.087063 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_6 has sigma68 = 0.0870305 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_7 has sigma68 = 0.0781544 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_9 has sigma68 = 0.078452 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_10 has sigma68 = 0.0853698 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_14 has sigma68 = 0.0852942 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_16 has sigma68 = 0.0787533 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_20 has sigma68 = 0.0850748 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_21 has sigma68 = 0.0851979 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_22 has sigma68 = 0.0853698 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_23 has sigma68 = 0.0869798 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - ANNZ_24 has sigma68 = 0.0869798 which is above threshold (0.077) -> it will be rejected from the PDF ...
[10:03:12    INFO]  - initial PDF weights: ANNZ_19:0.222 ANNZ_11:0.194 ANNZ_12:0.167 ANNZ_18:0.139 ANNZ_15:0.111 ANNZ_3:0.083 ANNZ_8:0.056 ANNZ_13:0.028 
[10:03:12    INFO]  - will loop on the input trees ...
[10:03:13    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.99675e-01
[10:03:13    INFO]  - nTry: 1 - min-param best/prev/now: 2.99675e-01 / 2.99675e-01 / 3.00412e-01
[10:03:13    INFO]  - nTry: 2 - min-param best/prev/now: 2.99675e-01 / 2.99675e-01 / 3.00238e-01
[10:03:13    INFO]  - nTry: 3 - min-param best/prev/now: 2.99675e-01 / 3.00238e-01 / 3.00178e-01
[10:03:13    INFO]  - nTry: 4 - min-param best/prev/now: 2.99675e-01 / 3.00178e-01 / 3.00569e-01
[10:03:13    INFO]  - nTry: 5 - min-param best/prev/now: 2.99675e-01 / 3.00178e-01 / 3.00695e-01
[10:03:13    INFO]  - nTry: 6 - min-param best/prev/now: 2.99675e-01 / 3.00178e-01 / 3.00869e-01
[10:03:13    INFO]  - nTry: 7 - min-param best/prev/now: 2.99675e-01 / 3.00869e-01 / 3.00484e-01
[10:03:13    INFO]  - nTry: 8 - min-param best/prev/now: 2.99675e-01 / 3.00484e-01 / 3.00492e-01
[10:03:13    INFO]  - nTry: 9 - min-param best/prev/now: 2.99675e-01 / 3.00484e-01 / 3.00463e-01
[10:03:13    INFO]  - nTry: 10 - min-param best/prev/now: 2.99675e-01 / 3.00463e-01 / 3.00668e-01
[10:03:14    INFO]  - nTry: 20 - min-param best/prev/now: 2.99675e-01 / 3.00463e-01 / 3.00991e-01
[10:03:15    INFO]  - nTry: 30 - min-param best/prev/now: 2.99675e-01 / 3.01067e-01 / 3.01136e-01
[10:03:15    INFO]  - nTry: 40 - min-param best/prev/now: 2.99675e-01 / 3.01710e-01 / 3.01830e-01
[10:03:16    INFO]  - nTry: 50 - min-param best/prev/now: 2.99675e-01 / 3.01710e-01 / 3.02710e-01
[10:03:17    INFO]  - nTry: 60 - min-param best/prev/now: 2.99675e-01 / 3.03086e-01 / 3.03122e-01
[10:03:17    INFO]  - nTry: 70 - min-param best/prev/now: 2.99675e-01 / 3.03280e-01 / 3.03328e-01
[10:03:18    INFO]  - nTry: 80 - min-param best/prev/now: 2.99675e-01 / 3.03280e-01 / 3.03311e-01
[10:03:19    INFO]  - nTry: 90 - min-param best/prev/now: 2.99675e-01 / 3.03461e-01 / 3.03493e-01
[10:03:19    INFO]  - nTry: 100 - min-param best/prev/now: 2.99675e-01 / 3.03539e-01 / 3.03694e-01
[10:03:21    INFO]  - nTry: 120 - min-param best/prev/now: 2.99675e-01 / 3.03828e-01 / 3.03884e-01
[10:03:22    INFO]  - nTry: 140 - min-param best/prev/now: 2.99675e-01 / 3.03844e-01 / 3.03842e-01
[10:03:23    INFO]  - nTry: 150 - min-param best/prev/now: 2.99675e-01 / 3.03842e-01 / 3.03885e-01
[10:03:24    INFO]  - nTry: 160 - min-param best/prev/now: 2.99675e-01 / 3.03930e-01 / 3.03943e-01
[10:03:25    INFO]  - nTry: 180 - min-param best/prev/now: 2.99675e-01 / 3.03916e-01 / 3.03914e-01
[10:03:26    INFO]  - nTry: 200 - min-param best/prev/now: 2.99675e-01 / 3.03931e-01 / 3.03939e-01
[10:03:28    INFO]  - nTry: 220 - min-param best/prev/now: 2.99675e-01 / 3.04045e-01 / 3.04088e-01
[10:03:29    INFO]  - nTry: 240 - min-param best/prev/now: 2.99675e-01 / 3.04146e-01 / 3.04163e-01
[10:03:30    INFO]  - nTry: 250 - min-param best/prev/now: 2.99675e-01 / 3.04214e-01 / 3.04237e-01
[10:03:30    INFO]  - finished PDF optimization! - final minimization parameter: 2.99675e-01 , PDF weights: ANNZ_19:0.222 ANNZ_11:0.194 ANNZ_12:0.167 ANNZ_18:0.139 ANNZ_15:0.111 ANNZ_3:0.083 ANNZ_8:0.056 ANNZ_13:0.028 
[10:03:30    INFO]  - will derive the bias correction for the pdf ... 
[10:03:30    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.000000, ANNZ_1:0.000000, ANNZ_2:0.000000, ANNZ_3:0.083333, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.000000, ANNZ_7:0.000000, ANNZ_8:0.055556, ANNZ_9:0.000000, ANNZ_10:0.000000, ANNZ_11:0.194444, ANNZ_12:0.166667, ANNZ_13:0.027778, ANNZ_14:0.000000, ANNZ_15:0.111111, ANNZ_16:0.000000, ANNZ_17:0.000000, ANNZ_18:0.138889, ANNZ_19:0.222222, ANNZ_20:0.000000, ANNZ_21:0.000000, ANNZ_22:0.000000, ANNZ_23:0.000000, ANNZ_24:0.000000, 
[10:03:30    INFO]  - Saving optimization results in ./output/PAUS_advanced11/regres/optim/saveOptimOpt.txt ...
[10:03:32    INFO]  - Saving bias-correction results in ./output/PAUS_advanced11/regres/optim/saveOptimObj.root ...
[10:03:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:03:36    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced11/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[10:03:39    INFO]  - starting ANNZ::doEvalReg() ... 
[10:03:39    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[10:03:39    INFO]  - Reading bias-correction results from ./output/PAUS_advanced11/regres/optim/saveOptimObj.root ...
[10:03:39    INFO]  - Getting optimization results from ./output/PAUS_advanced11/regres/optim/saveOptimOpt.txt ...
[10:03:39    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[10:03:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:03:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:03:40    INFO]  -----------------------------------------------------------------------------------------------------------
[10:03:40    INFO]  - starting storeTreeToAscii() ... 
[10:03:40    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[10:03:40    INFO]  - Will parse  ANNZ_tree_randomReg(3366)... Now in ./output/PAUS_advanced11/regres/optim/eval/ANNZ_randomReg_0000.csv
[10:03:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:03:41    INFO]  -- ANNZ_randomReg .................................. 3366  nObj
[10:03:41    INFO]  -----------------------------------------------------------------------------------------------------------
[10:03:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:03:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[10:03:41    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[10:03:50    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/optim/eval/plots/

(10:03 INFO) [40;37;1m - 13/02/19 10:03:56 - finished running ANNZ ![0m
(10:05 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(10:05 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(10:05 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(10:05 INFO) [40;37;1m - 13/02/19 10:05:25 - starting ANNZ[0m
(10:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced11[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data8c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.077[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(10:05 INFO) 
[10:05:25    INFO]  -----------------------------------------------------
[10:05:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:05:25    INFO]  -----------------------------------------------------------------------------------------------------------
[10:05:27    INFO]  - starting ANNZ::Init()  ... 
[10:05:27    INFO]  - Will generate 1 PDFs ... 
[10:05:39    INFO] --------------------------------------------------------
[10:05:39    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[10:05:39    INFO]  - All REJECTED MLMs: 
[10:05:39    INFO] ----------------------------------------------------------------------------------------------------------------
[10:05:41    INFO]  - Saving run information in ./output/PAUS_advanced11/regres/eval_nFile0/saveOpt.txt ...
[10:06:34    INFO]  - starting inputToFullTree(ANNz_data8c.csv) ... 
[10:06:35    INFO]  - Found 3367 lines in file PAUS/ANNz_data8c.csv -> total so far = 3367 ... 
[10:06:35    INFO]  - Now reading-in PAUS/ANNz_data8c.csv ... 
[10:06:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:06:35    INFO]  -- ANNZ_tree_eval .................................. 3367  nLine
[10:06:35    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[10:06:35    INFO]  -----------------------------------------------------------------------------------------------------------
[10:06:35    INFO]  - starting ANNZ::Eval() ... 
[10:06:35    INFO]  - starting ANNZ::doEvalReg() ... 
[10:06:35    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[10:06:35    INFO]  - Reading bias-correction results from ./output/PAUS_advanced11/regres/optim/saveOptimObj.root ...
[10:06:35    INFO]  - Getting optimization results from ./output/PAUS_advanced11/regres/optim/saveOptimOpt.txt ...
[10:06:35    INFO]  - creating MLM trees from input ...
[10:06:35    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_3,ANNZ_8,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_15,ANNZ_18,ANNZ_19,
[10:06:35    INFO]  - starting ANNZ::loadReaders() ... 
[10:33:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:33:22    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[10:33:22    INFO]  -----------------------------------------------------------------------------------------------------------
[10:33:23    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[10:33:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:33:24    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 3367  nObj
[10:33:24    INFO]  -----------------------------------------------------------------------------------------------------------
[10:33:24    INFO]  - starting storeTreeToAscii() ... 
[10:33:24    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[10:33:24    INFO]  - Will parse  ANNZ_tree_randomReg(3367)... Now in ./output/PAUS_advanced11/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[10:33:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:33:24    INFO]  -- ANNZ_randomReg .................................. 3367  nObj
[10:33:24    INFO]  -----------------------------------------------------------------------------------------------------------
[10:33:28    INFO]  - detected the target,zb in the evaluated sample - Will create performance plots ...
[10:33:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:33:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[10:33:28    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[10:33:37    INFO]  - Writing to plotting directory output/PAUS_advanced11/regres/eval_nFile0/plots/

(10:33 INFO) [40;37;1m - 13/02/19 10:33:42 - finished running ANNZ ![0m
