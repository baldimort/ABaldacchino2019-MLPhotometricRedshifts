(08:48 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:48 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:48 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:48 INFO) [40;37;1m - 19/02/19 08:48:40 - starting ANNZ[0m
(08:48 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:48 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data9a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data9b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:48 INFO) 
[08:48:40    INFO]  -----------------------------------------------------
[08:48:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:48:40    INFO]  -----------------------------------------------------------------------------------------------------------
[08:48:42    INFO]  - starting inputToSplitTree() ... 
[08:48:43    INFO]  - Found 13465 lines in file PAUS/ANNz_data9a.csv -> total so far = 13465 ... 
[08:48:43    INFO]  - Found 3366 lines in file PAUS/ANNz_data9b.csv -> total so far = 3366 ... 
[08:48:43    INFO]  - Now reading-in PAUS/ANNz_data9a.csv ... 
[08:48:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:48:44    INFO]  -- ANNZ_tree .......................................... 0  index
[08:48:44    INFO]  -- ANNZ_tree ...................................... 13465  nLine
[08:48:44    INFO]  -- ANNZ_tree ...................................... 13465  nLineFile
[08:48:44    INFO]  -- ANNZ_tree ...................................... 13465  nObj
[08:48:44    INFO]  -- ANNZ_tree .......................................... 0  nTest
[08:48:44    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[08:48:44    INFO]  -----------------------------------------------------------------------------------------------------------
[08:48:45    INFO]  - Now reading-in PAUS/ANNz_data9b.csv ... 
[08:48:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:48:45    INFO]  -- ANNZ_tree .......................................... 0  index
[08:48:45    INFO]  -- ANNZ_tree ...................................... 16831  nLine
[08:48:45    INFO]  -- ANNZ_tree ....................................... 3366  nLineFile
[08:48:45    INFO]  -- ANNZ_tree ....................................... 3366  nObj
[08:48:45    INFO]  -- ANNZ_tree ....................................... 3366  nTest
[08:48:45    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[08:48:45    INFO]  -----------------------------------------------------------------------------------------------------------
[08:48:46    INFO]  - Writing to plotting directory output/PAUS_advanced16/rootIn/plots/
[08:48:47    INFO]  - Writing to plotting directory output/PAUS_advanced16/rootIn/plots/

(08:48 INFO) [40;37;1m - 19/02/19 08:48:49 - finished running ANNZ ![0m
(08:49 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:49 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:49 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:49 INFO) [40;37;1m - 19/02/19 08:49:07 - starting ANNZ[0m
(08:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=970:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:49 INFO) 
[08:49:08    INFO]  -----------------------------------------------------
[08:49:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:49:08    INFO]  -----------------------------------------------------------------------------------------------------------
[08:49:09    INFO]  - starting ANNZ::Init()  ... 
[08:49:10    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_0/saveOpt.txt ...
[08:49:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:49:26    INFO] ----------------------------------------------------------------------------------------------------
[08:49:26    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=970:BoostType=Bagging:VarTransform=P
[08:49:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:49:26    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[08:49:26    INFO]      cuts (train):        ,
[08:49:26    INFO]      cuts (valid):       
[08:49:26    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[08:49:26    INFO] ----------------------------------------------------------------------------------------------------
[08:49:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.229402
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(08:50 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(08:50 CRITICAL) [41;37;1mWill terminate !!!![0m
(09:19 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:19 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:19 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:19 INFO) [40;37;1m - 19/02/19 09:19:41 - starting ANNZ[0m
(09:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:19 INFO) 
[09:19:41    INFO]  -----------------------------------------------------
[09:19:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:19:41    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:42    INFO]  - starting ANNZ::Init()  ... 
[09:19:43    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_0/saveOpt.txt ...
[09:20:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:20:01    INFO] ----------------------------------------------------------------------------------------------------
[09:20:01    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=290:BoostType=Bagging:VarTransform=N,P
[09:20:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:20:01    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:20:01    INFO]      cuts (train):        ,
[09:20:01    INFO]      cuts (valid):       
[09:20:01    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[09:20:01    INFO] ----------------------------------------------------------------------------------------------------
[09:20:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:20:29    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[09:20:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[09:20:32    INFO]  - Will gen. input-parameter errors ...
[09:20:34    INFO]  - starting ANNZ::loadReaders() ... 
[09:20:40    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[09:23:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:23:28    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:23:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:23:28    INFO]  -----------------------------------------------------------------------------------------------------------
[09:24:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:24:23    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:24:23    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:24:23    INFO]  -----------------------------------------------------------------------------------------------------------
[09:24:24    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[09:25:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:25:22    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:25:22    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:25:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:22    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:25:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:25:24    INFO]  - will try to derive a bias correction ... 
[09:25:24    INFO]  - will validate that training produced an XML file for later ... 
[09:25:24    INFO]  - starting ANNZ::loadReaders() ... 
[09:25:26    INFO]  - will validate that the training was not a complete failure ... 
[09:25:27    INFO]  - training seems to have been successful! will move on ...
[09:25:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:25:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:25:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:25:32    INFO] ----------------------------------------------------------------------------------------------------
[09:25:32    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:25:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:25:32    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[09:25:32    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[09:25:32    INFO] ----------------------------------------------------------------------------------------------------
[09:25:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:25:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[09:25:41    INFO]  - Will gen. input-parameter errors ...
[09:25:43    INFO]  - starting ANNZ::loadReaders() ... 
[09:25:52    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[09:28:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:28:37    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:28:37    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:28:37    INFO]  -----------------------------------------------------------------------------------------------------------
[09:29:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:29:34    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:29:34    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:29:34    INFO]  -----------------------------------------------------------------------------------------------------------
[09:29:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[09:30:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:30:31    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:30:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:30:31    INFO]  -----------------------------------------------------------------------------------------------------------
[09:30:32    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:30:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:30:33    INFO]  - will validate that the bias-correction actually improved the result ...
[09:30:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:30:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[09:30:40    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_0/plots/
[09:30:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_0/plots output/PAUS_advanced16/regres/train/ANNZ_0/plots_biasCor_before
[09:30:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:30:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[09:30:55    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_0/plots/
[09:31:07        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_0/plots output/PAUS_advanced16/regres/train/ANNZ_0/plots_biasCor_after
[09:31:07    INFO]  - Got original [KS-test,N_poiss]: [0.0783762 , 82.5125] , after the bias-correction: [0.0485933 , 65.0741] --> will KEEP the correction !

(09:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:31 INFO) 
[09:31:13    INFO]  -----------------------------------------------------
[09:31:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:31:13    INFO]  -----------------------------------------------------------------------------------------------------------
[09:31:14    INFO]  - starting ANNZ::Init()  ... 
[09:31:16    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_1/saveOpt.txt ...
[09:31:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:31:34    INFO] ----------------------------------------------------------------------------------------------------
[09:31:34    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=470:BoostType=AdaBoost:VarTransform=N,P
[09:31:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:31:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:31:34    INFO]      cuts (train):        ,
[09:31:34    INFO]      cuts (valid):       
[09:31:34    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[09:31:34    INFO] ----------------------------------------------------------------------------------------------------
[09:31:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:32:05    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[09:32:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[09:32:08    INFO]  - Will gen. input-parameter errors ...
[09:32:10    INFO]  - starting ANNZ::loadReaders() ... 
[09:32:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[09:36:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:36:09    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:36:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:36:09    INFO]  -----------------------------------------------------------------------------------------------------------
[09:37:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:37:26    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:37:26    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:37:26    INFO]  -----------------------------------------------------------------------------------------------------------
[09:37:26    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[09:38:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:38:45    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:38:45    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:38:45    INFO]  -----------------------------------------------------------------------------------------------------------
[09:38:48    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:38:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:38:49    INFO]  - will try to derive a bias correction ... 
[09:38:49    INFO]  - will validate that training produced an XML file for later ... 
[09:38:49    INFO]  - starting ANNZ::loadReaders() ... 
[09:38:51    INFO]  - will validate that the training was not a complete failure ... 
[09:38:51    INFO]  - training seems to have been successful! will move on ...
[09:38:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:38:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:38:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:38:57    INFO] ----------------------------------------------------------------------------------------------------
[09:38:57    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:38:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:38:57    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[09:38:57    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[09:38:57    INFO] ----------------------------------------------------------------------------------------------------
[09:38:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:39:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[09:39:06    INFO]  - Will gen. input-parameter errors ...
[09:39:08    INFO]  - starting ANNZ::loadReaders() ... 
[09:39:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[09:42:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:42:18    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:42:18    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:42:18    INFO]  -----------------------------------------------------------------------------------------------------------
[09:43:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:43:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:43:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:43:21    INFO]  -----------------------------------------------------------------------------------------------------------
[09:43:21    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[09:44:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:44:22    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:44:22    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:44:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:44:22    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:44:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:44:23    INFO]  - will validate that the bias-correction actually improved the result ...
[09:44:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:44:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[09:44:30    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_1/plots/
[09:44:44        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_1/plots output/PAUS_advanced16/regres/train/ANNZ_1/plots_biasCor_before
[09:44:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:44:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[09:44:49    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_1/plots/
[09:45:00        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_1/plots output/PAUS_advanced16/regres/train/ANNZ_1/plots_biasCor_after
[09:45:00    INFO]  - Got original [KS-test,N_poiss]: [0.0583557 , 79.5955] , after the bias-correction: [0.051829 , 65.9105] --> will KEEP the correction !

(09:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:45 INFO) 
[09:45:04    INFO]  -----------------------------------------------------
[09:45:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:45:04    INFO]  -----------------------------------------------------------------------------------------------------------
[09:45:05    INFO]  - starting ANNZ::Init()  ... 
[09:45:07    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_2/saveOpt.txt ...
[09:45:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:45:25    INFO] ----------------------------------------------------------------------------------------------------
[09:45:25    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=440:BoostType=AdaBoost:VarTransform=N
[09:45:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:45:25    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:45:25    INFO]      cuts (train):        ,
[09:45:25    INFO]      cuts (valid):       
[09:45:25    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[09:45:25    INFO] ----------------------------------------------------------------------------------------------------
[09:45:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:45:45    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[09:45:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[09:45:47    INFO]  - Will gen. input-parameter errors ...
[09:45:49    INFO]  - starting ANNZ::loadReaders() ... 
[09:45:51    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[09:46:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:46:53    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:46:53    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:46:53    INFO]  -----------------------------------------------------------------------------------------------------------
[09:47:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:47:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:47:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:47:17    INFO]  -----------------------------------------------------------------------------------------------------------
[09:47:17    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[09:47:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:47:39    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:47:39    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:47:39    INFO]  -----------------------------------------------------------------------------------------------------------
[09:47:40    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:47:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:47:41    INFO]  - will try to derive a bias correction ... 
[09:47:41    INFO]  - will validate that training produced an XML file for later ... 
[09:47:41    INFO]  - starting ANNZ::loadReaders() ... 
[09:47:41    INFO]  - will validate that the training was not a complete failure ... 
[09:47:41    INFO]  - training seems to have been successful! will move on ...
[09:47:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:47:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:47:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:47:47    INFO] ----------------------------------------------------------------------------------------------------
[09:47:47    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:47:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:47:47    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[09:47:47    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[09:47:47    INFO] ----------------------------------------------------------------------------------------------------
[09:47:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:47:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[09:47:56    INFO]  - Will gen. input-parameter errors ...
[09:47:58    INFO]  - starting ANNZ::loadReaders() ... 
[09:48:02    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[09:49:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:49:28    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:49:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:49:28    INFO]  -----------------------------------------------------------------------------------------------------------
[09:50:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:50:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:50:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:50:02    INFO]  -----------------------------------------------------------------------------------------------------------
[09:50:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[09:50:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:50:33    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:50:33    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:50:33    INFO]  -----------------------------------------------------------------------------------------------------------
[09:50:33    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:50:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:50:35    INFO]  - will validate that the bias-correction actually improved the result ...
[09:50:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:50:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[09:50:42    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_2/plots/
[09:50:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_2/plots output/PAUS_advanced16/regres/train/ANNZ_2/plots_biasCor_before
[09:50:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:50:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[09:50:57    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_2/plots/
[09:51:10        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_2/plots output/PAUS_advanced16/regres/train/ANNZ_2/plots_biasCor_after
[09:51:10    INFO]  - Got original [KS-test,N_poiss]: [0.0508557 , 141.244] , after the bias-correction: [0.053842 , 117.572] --> will KEEP the correction !

(09:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:51 INFO) 
[09:51:15    INFO]  -----------------------------------------------------
[09:51:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:51:15    INFO]  -----------------------------------------------------------------------------------------------------------
[09:51:17    INFO]  - starting ANNZ::Init()  ... 
[09:51:18    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_3/saveOpt.txt ...
[09:51:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:51:37    INFO] ----------------------------------------------------------------------------------------------------
[09:51:37    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=300:BoostType=AdaBoost:VarTransform=N,P
[09:51:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:51:37    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:51:37    INFO]      cuts (train):        ,
[09:51:37    INFO]      cuts (valid):       
[09:51:37    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[09:51:37    INFO] ----------------------------------------------------------------------------------------------------
[09:51:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:51:57    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[09:51:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[09:51:59    INFO]  - Will gen. input-parameter errors ...
[09:52:01    INFO]  - starting ANNZ::loadReaders() ... 
[09:52:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[09:54:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:54:21    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:54:21    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:54:21    INFO]  -----------------------------------------------------------------------------------------------------------
[09:55:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:55:12    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:55:12    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:55:12    INFO]  -----------------------------------------------------------------------------------------------------------
[09:55:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[09:56:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:56:01    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:56:01    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:56:01    INFO]  -----------------------------------------------------------------------------------------------------------
[09:56:01    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:56:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:56:03    INFO]  - will try to derive a bias correction ... 
[09:56:03    INFO]  - will validate that training produced an XML file for later ... 
[09:56:03    INFO]  - starting ANNZ::loadReaders() ... 
[09:56:04    INFO]  - will validate that the training was not a complete failure ... 
[09:56:04    INFO]  - training seems to have been successful! will move on ...
[09:56:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:56:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:09    INFO] ----------------------------------------------------------------------------------------------------
[09:56:09    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:56:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:56:09    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[09:56:09    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[09:56:09    INFO] ----------------------------------------------------------------------------------------------------
[09:56:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:56:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[09:56:17    INFO]  - Will gen. input-parameter errors ...
[09:56:19    INFO]  - starting ANNZ::loadReaders() ... 
[09:56:24    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[09:58:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:58:43    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:58:43    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:58:43    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:59:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:59:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:59:32    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:00:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:00:20    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:00:20    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:00:20    INFO]  -----------------------------------------------------------------------------------------------------------
[10:00:20    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:00:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:00:21    INFO]  - will validate that the bias-correction actually improved the result ...
[10:00:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:00:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[10:00:26    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_3/plots/
[10:00:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_3/plots output/PAUS_advanced16/regres/train/ANNZ_3/plots_biasCor_before
[10:00:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:00:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[10:00:40    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_3/plots/
[10:00:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_3/plots output/PAUS_advanced16/regres/train/ANNZ_3/plots_biasCor_after
[10:00:51    INFO]  - Got original [KS-test,N_poiss]: [0.0575845 , 78.4399] , after the bias-correction: [0.05061 , 66.1263] --> will KEEP the correction !

(10:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:00 INFO) 
[10:00:55    INFO]  -----------------------------------------------------
[10:00:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:00:55    INFO]  -----------------------------------------------------------------------------------------------------------
[10:00:56    INFO]  - starting ANNZ::Init()  ... 
[10:00:57    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_4/saveOpt.txt ...
[10:01:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:01:12    INFO] ----------------------------------------------------------------------------------------------------
[10:01:12    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=480:BoostType=Bagging:VarTransform=N
[10:01:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:01:12    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:01:12    INFO]      cuts (train):        ,
[10:01:12    INFO]      cuts (valid):       
[10:01:12    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:01:12    INFO] ----------------------------------------------------------------------------------------------------
[10:01:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:01:47    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[10:01:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[10:01:51    INFO]  - Will gen. input-parameter errors ...
[10:01:53    INFO]  - starting ANNZ::loadReaders() ... 
[10:02:02    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:04:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:04:24    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:04:24    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:04:24    INFO]  -----------------------------------------------------------------------------------------------------------
[10:05:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:05:14    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:05:14    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:05:14    INFO]  -----------------------------------------------------------------------------------------------------------
[10:05:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:06:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:06:02    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:06:02    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:06:02    INFO]  -----------------------------------------------------------------------------------------------------------
[10:06:02    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:06:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:06:04    INFO]  - will try to derive a bias correction ... 
[10:06:04    INFO]  - will validate that training produced an XML file for later ... 
[10:06:04    INFO]  - starting ANNZ::loadReaders() ... 
[10:06:07    INFO]  - will validate that the training was not a complete failure ... 
[10:06:07    INFO]  - training seems to have been successful! will move on ...
[10:06:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:06:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:06:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:06:12    INFO] ----------------------------------------------------------------------------------------------------
[10:06:12    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:06:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:06:12    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:06:12    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:06:12    INFO] ----------------------------------------------------------------------------------------------------
[10:06:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:06:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[10:06:21    INFO]  - Will gen. input-parameter errors ...
[10:06:23    INFO]  - starting ANNZ::loadReaders() ... 
[10:06:32    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:09:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:09:07    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:09:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:09:07    INFO]  -----------------------------------------------------------------------------------------------------------
[10:10:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:10:01    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:10:01    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:10:01    INFO]  -----------------------------------------------------------------------------------------------------------
[10:10:01    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:10:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:10:53    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:10:53    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:10:53    INFO]  -----------------------------------------------------------------------------------------------------------
[10:10:53    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:10:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:10:55    INFO]  - will validate that the bias-correction actually improved the result ...
[10:10:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:10:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[10:11:01    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_4/plots/
[10:11:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_4/plots output/PAUS_advanced16/regres/train/ANNZ_4/plots_biasCor_before
[10:11:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:11:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[10:11:16    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_4/plots/
[10:11:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_4/plots output/PAUS_advanced16/regres/train/ANNZ_4/plots_biasCor_after
[10:11:26    INFO]  - Got original [KS-test,N_poiss]: [0.0637074 , 96.249] , after the bias-correction: [0.0552489 , 81.7543] --> will KEEP the correction !

(10:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:11 INFO) 
[10:11:30    INFO]  -----------------------------------------------------
[10:11:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:11:30    INFO]  -----------------------------------------------------------------------------------------------------------
[10:11:32    INFO]  - starting ANNZ::Init()  ... 
[10:11:33    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_5/saveOpt.txt ...
[10:11:47    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:11:48    INFO] ----------------------------------------------------------------------------------------------------
[10:11:48    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=300:BoostType=Bagging:VarTransform=N
[10:11:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:11:48    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:11:48    INFO]      cuts (train):        ,
[10:11:48    INFO]      cuts (valid):       
[10:11:48    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:11:48    INFO] ----------------------------------------------------------------------------------------------------
[10:11:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:12:10    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[10:12:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[10:12:12    INFO]  - Will gen. input-parameter errors ...
[10:12:14    INFO]  - starting ANNZ::loadReaders() ... 
[10:12:20    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:13:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:13:46    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:13:46    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:13:46    INFO]  -----------------------------------------------------------------------------------------------------------
[10:14:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:14:16    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:14:16    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:14:16    INFO]  -----------------------------------------------------------------------------------------------------------
[10:14:16    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:14:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:14:47    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:14:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:14:47    INFO]  -----------------------------------------------------------------------------------------------------------
[10:14:47    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:14:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:14:48    INFO]  - will try to derive a bias correction ... 
[10:14:48    INFO]  - will validate that training produced an XML file for later ... 
[10:14:48    INFO]  - starting ANNZ::loadReaders() ... 
[10:14:50    INFO]  - will validate that the training was not a complete failure ... 
[10:14:50    INFO]  - training seems to have been successful! will move on ...
[10:14:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:14:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:14:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:14:56    INFO] ----------------------------------------------------------------------------------------------------
[10:14:56    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:14:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:14:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:14:56    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:14:56    INFO] ----------------------------------------------------------------------------------------------------
[10:14:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:15:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[10:15:03    INFO]  - Will gen. input-parameter errors ...
[10:15:05    INFO]  - starting ANNZ::loadReaders() ... 
[10:15:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:16:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:16:40    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:16:40    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:16:40    INFO]  -----------------------------------------------------------------------------------------------------------
[10:17:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:17:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:17:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:17:11    INFO]  -----------------------------------------------------------------------------------------------------------
[10:17:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:17:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:17:42    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:17:42    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:17:42    INFO]  -----------------------------------------------------------------------------------------------------------
[10:17:42    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:17:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:17:43    INFO]  - will validate that the bias-correction actually improved the result ...
[10:17:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:17:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[10:17:48    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_5/plots/
[10:17:59        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_5/plots output/PAUS_advanced16/regres/train/ANNZ_5/plots_biasCor_before
[10:17:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:17:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[10:18:04    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_5/plots/
[10:18:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_5/plots output/PAUS_advanced16/regres/train/ANNZ_5/plots_biasCor_after
[10:18:14    INFO]  - Got original [KS-test,N_poiss]: [0.0641454 , 95.3784] , after the bias-correction: [0.0571066 , 84.0703] --> will KEEP the correction !

(10:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:18 INFO) 
[10:18:18    INFO]  -----------------------------------------------------
[10:18:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:18:18    INFO]  -----------------------------------------------------------------------------------------------------------
[10:18:19    INFO]  - starting ANNZ::Init()  ... 
[10:18:21    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_6/saveOpt.txt ...
[10:18:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:18:35    INFO] ----------------------------------------------------------------------------------------------------
[10:18:35    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N,P
[10:18:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:18:35    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:18:35    INFO]      cuts (train):        ,
[10:18:35    INFO]      cuts (valid):       
[10:18:35    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:18:35    INFO] ----------------------------------------------------------------------------------------------------
[10:18:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:19:01    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[10:19:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[10:19:03    INFO]  - Will gen. input-parameter errors ...
[10:19:04    INFO]  - starting ANNZ::loadReaders() ... 
[10:19:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:21:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:21:47    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:21:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:21:47    INFO]  -----------------------------------------------------------------------------------------------------------
[10:22:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:22:43    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:22:43    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:22:43    INFO]  -----------------------------------------------------------------------------------------------------------
[10:22:43    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:23:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:23:38    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:23:38    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:23:38    INFO]  -----------------------------------------------------------------------------------------------------------
[10:23:38    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:23:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:23:39    INFO]  - will try to derive a bias correction ... 
[10:23:39    INFO]  - will validate that training produced an XML file for later ... 
[10:23:39    INFO]  - starting ANNZ::loadReaders() ... 
[10:23:40    INFO]  - will validate that the training was not a complete failure ... 
[10:23:40    INFO]  - training seems to have been successful! will move on ...
[10:23:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:23:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:23:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:23:45    INFO] ----------------------------------------------------------------------------------------------------
[10:23:45    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:23:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:23:45    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:23:45    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:23:45    INFO] ----------------------------------------------------------------------------------------------------
[10:23:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:23:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[10:23:51    INFO]  - Will gen. input-parameter errors ...
[10:23:53    INFO]  - starting ANNZ::loadReaders() ... 
[10:23:58    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:26:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:26:18    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:26:18    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:26:18    INFO]  -----------------------------------------------------------------------------------------------------------
[10:27:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:27:08    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:27:08    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:27:08    INFO]  -----------------------------------------------------------------------------------------------------------
[10:27:08    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:27:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:27:58    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:27:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:27:58    INFO]  -----------------------------------------------------------------------------------------------------------
[10:27:58    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:27:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:27:59    INFO]  - will validate that the bias-correction actually improved the result ...
[10:27:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:27:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[10:28:04    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_6/plots/
[10:28:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_6/plots output/PAUS_advanced16/regres/train/ANNZ_6/plots_biasCor_before
[10:28:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:28:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[10:28:19    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_6/plots/
[10:28:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_6/plots output/PAUS_advanced16/regres/train/ANNZ_6/plots_biasCor_after
[10:28:29    INFO]  - Got original [KS-test,N_poiss]: [0.0577047 , 78.7094] , after the bias-correction: [0.0512488 , 66.7016] --> will KEEP the correction !

(10:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:28 INFO) 
[10:28:33    INFO]  -----------------------------------------------------
[10:28:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:28:33    INFO]  -----------------------------------------------------------------------------------------------------------
[10:28:34    INFO]  - starting ANNZ::Init()  ... 
[10:28:36    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_7/saveOpt.txt ...
[10:28:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:28:50    INFO] ----------------------------------------------------------------------------------------------------
[10:28:50    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[10:28:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:28:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:28:50    INFO]      cuts (train):        ,
[10:28:50    INFO]      cuts (valid):       
[10:28:50    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:28:50    INFO] ----------------------------------------------------------------------------------------------------
[10:28:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:29:18    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[10:29:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[10:29:21    INFO]  - Will gen. input-parameter errors ...
[10:29:23    INFO]  - starting ANNZ::loadReaders() ... 
[10:29:30    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:32:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:32:22    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:32:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:32:22    INFO]  -----------------------------------------------------------------------------------------------------------
[10:33:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:33:25    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:33:25    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:33:25    INFO]  -----------------------------------------------------------------------------------------------------------
[10:33:25    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:34:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:34:26    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:34:26    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:34:26    INFO]  -----------------------------------------------------------------------------------------------------------
[10:34:26    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:34:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:34:28    INFO]  - will try to derive a bias correction ... 
[10:34:28    INFO]  - will validate that training produced an XML file for later ... 
[10:34:28    INFO]  - starting ANNZ::loadReaders() ... 
[10:34:30    INFO]  - will validate that the training was not a complete failure ... 
[10:34:30    INFO]  - training seems to have been successful! will move on ...
[10:34:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:34:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:34:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:34:36    INFO] ----------------------------------------------------------------------------------------------------
[10:34:36    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:34:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:34:36    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:34:36    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:34:36    INFO] ----------------------------------------------------------------------------------------------------
[10:34:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:34:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[10:34:46    INFO]  - Will gen. input-parameter errors ...
[10:34:48    INFO]  - starting ANNZ::loadReaders() ... 
[10:34:57    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:38:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:38:04    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:38:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:38:04    INFO]  -----------------------------------------------------------------------------------------------------------
[10:39:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:39:09    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:39:09    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:39:09    INFO]  -----------------------------------------------------------------------------------------------------------
[10:39:09    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:40:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:40:14    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:40:14    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:40:14    INFO]  -----------------------------------------------------------------------------------------------------------
[10:40:14    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:40:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:40:15    INFO]  - will validate that the bias-correction actually improved the result ...
[10:40:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:40:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[10:40:21    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_7/plots/
[10:40:32        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_7/plots output/PAUS_advanced16/regres/train/ANNZ_7/plots_biasCor_before
[10:40:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:40:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[10:40:37    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_7/plots/
[10:40:48        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_7/plots output/PAUS_advanced16/regres/train/ANNZ_7/plots_biasCor_after
[10:40:48    INFO]  - Got original [KS-test,N_poiss]: [0.0783249 , 81.8971] , after the bias-correction: [0.0440819 , 65.915] --> will KEEP the correction !

(10:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:40 INFO) 
[10:40:53    INFO]  -----------------------------------------------------
[10:40:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:40:53    INFO]  -----------------------------------------------------------------------------------------------------------
[10:40:54    INFO]  - starting ANNZ::Init()  ... 
[10:40:55    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_8/saveOpt.txt ...
[10:41:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:41:12    INFO] ----------------------------------------------------------------------------------------------------
[10:41:12    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=1030:BoostType=AdaBoost:VarTransform=N
[10:41:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:41:12    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:41:12    INFO]      cuts (train):        ,
[10:41:12    INFO]      cuts (valid):       
[10:41:12    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:41:12    INFO] ----------------------------------------------------------------------------------------------------
[10:41:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:41:50    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[10:41:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[10:41:53    INFO]  - Will gen. input-parameter errors ...
[10:41:55    INFO]  - starting ANNZ::loadReaders() ... 
[10:42:02    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:44:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:44:31    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:44:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:44:31    INFO]  -----------------------------------------------------------------------------------------------------------
[10:45:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:45:20    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:45:20    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:45:20    INFO]  -----------------------------------------------------------------------------------------------------------
[10:45:20    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:46:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:46:11    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:46:11    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:46:11    INFO]  -----------------------------------------------------------------------------------------------------------
[10:46:11    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:46:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:46:12    INFO]  - will try to derive a bias correction ... 
[10:46:12    INFO]  - will validate that training produced an XML file for later ... 
[10:46:12    INFO]  - starting ANNZ::loadReaders() ... 
[10:46:14    INFO]  - will validate that the training was not a complete failure ... 
[10:46:14    INFO]  - training seems to have been successful! will move on ...
[10:46:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:46:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:46:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:46:20    INFO] ----------------------------------------------------------------------------------------------------
[10:46:20    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:46:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:46:20    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:46:20    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:46:20    INFO] ----------------------------------------------------------------------------------------------------
[10:46:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:46:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[10:46:29    INFO]  - Will gen. input-parameter errors ...
[10:46:31    INFO]  - starting ANNZ::loadReaders() ... 
[10:46:37    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:48:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:48:29    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:48:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:48:29    INFO]  -----------------------------------------------------------------------------------------------------------
[10:49:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:49:07    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:49:07    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:49:07    INFO]  -----------------------------------------------------------------------------------------------------------
[10:49:07    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:49:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:49:45    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:49:45    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:49:45    INFO]  -----------------------------------------------------------------------------------------------------------
[10:49:46    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:49:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:49:47    INFO]  - will validate that the bias-correction actually improved the result ...
[10:49:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:49:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[10:49:53    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_8/plots/
[10:50:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_8/plots output/PAUS_advanced16/regres/train/ANNZ_8/plots_biasCor_before
[10:50:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:50:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[10:50:08    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_8/plots/
[10:50:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_8/plots output/PAUS_advanced16/regres/train/ANNZ_8/plots_biasCor_after
[10:50:19    INFO]  - Got original [KS-test,N_poiss]: [0.0508405 , 141.227] , after the bias-correction: [0.053939 , 118.308] --> will KEEP the correction !

(10:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:50 INFO) 
[10:50:23    INFO]  -----------------------------------------------------
[10:50:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:50:23    INFO]  -----------------------------------------------------------------------------------------------------------
[10:50:24    INFO]  - starting ANNZ::Init()  ... 
[10:50:26    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_9/saveOpt.txt ...
[10:50:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:50:41    INFO] ----------------------------------------------------------------------------------------------------
[10:50:41    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[10:50:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:50:41    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:50:41    INFO]      cuts (train):        ,
[10:50:41    INFO]      cuts (valid):       
[10:50:41    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:50:41    INFO] ----------------------------------------------------------------------------------------------------
[10:50:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:51:16    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[10:51:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[10:51:21    INFO]  - Will gen. input-parameter errors ...
[10:51:23    INFO]  - starting ANNZ::loadReaders() ... 
[10:51:35    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:54:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:54:03    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:54:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:54:03    INFO]  -----------------------------------------------------------------------------------------------------------
[10:54:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:54:52    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:54:52    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:54:52    INFO]  -----------------------------------------------------------------------------------------------------------
[10:54:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[10:55:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:55:41    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:55:41    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:55:41    INFO]  -----------------------------------------------------------------------------------------------------------
[10:55:42    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:55:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:55:44    INFO]  - will try to derive a bias correction ... 
[10:55:44    INFO]  - will validate that training produced an XML file for later ... 
[10:55:44    INFO]  - starting ANNZ::loadReaders() ... 
[10:55:47    INFO]  - will validate that the training was not a complete failure ... 
[10:55:47    INFO]  - training seems to have been successful! will move on ...
[10:55:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:55:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:55:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:55:54    INFO] ----------------------------------------------------------------------------------------------------
[10:55:54    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:55:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:55:54    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:55:54    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[10:55:54    INFO] ----------------------------------------------------------------------------------------------------
[10:55:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:56:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[10:56:03    INFO]  - Will gen. input-parameter errors ...
[10:56:05    INFO]  - starting ANNZ::loadReaders() ... 
[10:56:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[10:59:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:59:01    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:59:01    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:59:01    INFO]  -----------------------------------------------------------------------------------------------------------
[11:00:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:00:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:00:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:00:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:00:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:01:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:01:00    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:01:00    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:01:00    INFO]  -----------------------------------------------------------------------------------------------------------
[11:01:01    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:01:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:01:02    INFO]  - will validate that the bias-correction actually improved the result ...
[11:01:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:01:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[11:01:08    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_9/plots/
[11:01:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_9/plots output/PAUS_advanced16/regres/train/ANNZ_9/plots_biasCor_before
[11:01:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:01:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[11:01:26    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_9/plots/
[11:01:38        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_9/plots output/PAUS_advanced16/regres/train/ANNZ_9/plots_biasCor_after
[11:01:38    INFO]  - Got original [KS-test,N_poiss]: [0.0640241 , 95.469] , after the bias-correction: [0.0569581 , 83.9463] --> will KEEP the correction !

(11:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:01 INFO) 
[11:01:45    INFO]  -----------------------------------------------------
[11:01:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:01:45    INFO]  -----------------------------------------------------------------------------------------------------------
[11:01:47    INFO]  - starting ANNZ::Init()  ... 
[11:01:48    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_10/saveOpt.txt ...
[11:02:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:02:05    INFO] ----------------------------------------------------------------------------------------------------
[11:02:05    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N
[11:02:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:02:05    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:02:05    INFO]      cuts (train):        ,
[11:02:05    INFO]      cuts (valid):       
[11:02:05    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:02:05    INFO] ----------------------------------------------------------------------------------------------------
[11:02:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:02:39    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[11:02:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[11:02:43    INFO]  - Will gen. input-parameter errors ...
[11:02:45    INFO]  - starting ANNZ::loadReaders() ... 
[11:02:52    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:05:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:05:00    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:05:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:05:00    INFO]  -----------------------------------------------------------------------------------------------------------
[11:05:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:05:43    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:05:43    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:05:43    INFO]  -----------------------------------------------------------------------------------------------------------
[11:05:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:06:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:06:25    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:06:25    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:06:25    INFO]  -----------------------------------------------------------------------------------------------------------
[11:06:26    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:06:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:06:28    INFO]  - will try to derive a bias correction ... 
[11:06:28    INFO]  - will validate that training produced an XML file for later ... 
[11:06:28    INFO]  - starting ANNZ::loadReaders() ... 
[11:06:31    INFO]  - will validate that the training was not a complete failure ... 
[11:06:31    INFO]  - training seems to have been successful! will move on ...
[11:06:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:06:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:06:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:06:38    INFO] ----------------------------------------------------------------------------------------------------
[11:06:38    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:06:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:06:38    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[11:06:38    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:06:38    INFO] ----------------------------------------------------------------------------------------------------
[11:06:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:06:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[11:06:50    INFO]  - Will gen. input-parameter errors ...
[11:06:52    INFO]  - starting ANNZ::loadReaders() ... 
[11:07:03    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:09:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:09:26    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:09:26    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:09:26    INFO]  -----------------------------------------------------------------------------------------------------------
[11:10:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:10:15    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:10:15    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:10:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:10:16    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:11:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:11:05    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:11:05    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:11:05    INFO]  -----------------------------------------------------------------------------------------------------------
[11:11:05    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:11:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:11:07    INFO]  - will validate that the bias-correction actually improved the result ...
[11:11:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:11:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[11:11:15    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_10/plots/
[11:11:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_10/plots output/PAUS_advanced16/regres/train/ANNZ_10/plots_biasCor_before
[11:11:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:11:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[11:11:30    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_10/plots/
[11:11:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_10/plots output/PAUS_advanced16/regres/train/ANNZ_10/plots_biasCor_after
[11:11:42    INFO]  - Got original [KS-test,N_poiss]: [0.0639233 , 96.0394] , after the bias-correction: [0.0565952 , 83.4847] --> will KEEP the correction !

(11:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:11 INFO) 
[11:11:48    INFO]  -----------------------------------------------------
[11:11:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:11:48    INFO]  -----------------------------------------------------------------------------------------------------------
[11:11:50    INFO]  - starting ANNZ::Init()  ... 
[11:11:51    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_11/saveOpt.txt ...
[11:12:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:12:09    INFO] ----------------------------------------------------------------------------------------------------
[11:12:09    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=440:BoostType=Bagging:VarTransform=P
[11:12:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:12:09    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:12:09    INFO]      cuts (train):        ,
[11:12:09    INFO]      cuts (valid):       
[11:12:09    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:12:09    INFO] ----------------------------------------------------------------------------------------------------
[11:12:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:12:52    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[11:12:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[11:12:57    INFO]  - Will gen. input-parameter errors ...
[11:12:59    INFO]  - starting ANNZ::loadReaders() ... 
[11:13:11    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:17:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:17:36    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:17:36    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:17:36    INFO]  -----------------------------------------------------------------------------------------------------------
[11:19:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:19:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:19:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:19:06    INFO]  -----------------------------------------------------------------------------------------------------------
[11:19:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:20:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:20:31    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:20:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:20:31    INFO]  -----------------------------------------------------------------------------------------------------------
[11:20:35    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:20:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:20:37    INFO]  - will try to derive a bias correction ... 
[11:20:37    INFO]  - will validate that training produced an XML file for later ... 
[11:20:37    INFO]  - starting ANNZ::loadReaders() ... 
[11:20:40    INFO]  - will validate that the training was not a complete failure ... 
[11:20:40    INFO]  - training seems to have been successful! will move on ...
[11:20:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:20:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:20:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:20:47    INFO] ----------------------------------------------------------------------------------------------------
[11:20:47    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:20:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:20:47    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[11:20:47    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:20:47    INFO] ----------------------------------------------------------------------------------------------------
[11:20:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:20:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[11:20:58    INFO]  - Will gen. input-parameter errors ...
[11:21:00    INFO]  - starting ANNZ::loadReaders() ... 
[11:21:18    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:25:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:25:58    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:25:58    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:25:58    INFO]  -----------------------------------------------------------------------------------------------------------
[11:27:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:27:46    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:27:46    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:27:46    INFO]  -----------------------------------------------------------------------------------------------------------
[11:27:46    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:29:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:29:14    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:29:14    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:29:14    INFO]  -----------------------------------------------------------------------------------------------------------
[11:29:16    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:29:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:29:18    INFO]  - will validate that the bias-correction actually improved the result ...
[11:29:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:29:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[11:29:25    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_11/plots/
[11:29:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_11/plots output/PAUS_advanced16/regres/train/ANNZ_11/plots_biasCor_before
[11:29:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:29:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[11:29:42    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_11/plots/
[11:29:52        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_11/plots output/PAUS_advanced16/regres/train/ANNZ_11/plots_biasCor_after
[11:29:52    INFO]  - Got original [KS-test,N_poiss]: [0.0659439 , 72.049] , after the bias-correction: [0.0553173 , 78.7516] --> will KEEP the correction !

(11:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:29 INFO) 
[11:29:59    INFO]  -----------------------------------------------------
[11:29:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:29:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:30:00    INFO]  - starting ANNZ::Init()  ... 
[11:30:02    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_12/saveOpt.txt ...
[11:30:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:30:19    INFO] ----------------------------------------------------------------------------------------------------
[11:30:19    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=270:BoostType=Bagging:VarTransform=N
[11:30:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:30:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:30:19    INFO]      cuts (train):        ,
[11:30:19    INFO]      cuts (valid):       
[11:30:19    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:30:19    INFO] ----------------------------------------------------------------------------------------------------
[11:30:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:30:39    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[11:30:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[11:30:43    INFO]  - Will gen. input-parameter errors ...
[11:30:45    INFO]  - starting ANNZ::loadReaders() ... 
[11:30:51    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:32:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:32:15    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:32:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:32:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:32:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:32:45    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:32:45    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:32:45    INFO]  -----------------------------------------------------------------------------------------------------------
[11:32:45    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:33:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:33:15    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:33:15    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:33:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:33:15    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:33:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:33:17    INFO]  - will try to derive a bias correction ... 
[11:33:17    INFO]  - will validate that training produced an XML file for later ... 
[11:33:17    INFO]  - starting ANNZ::loadReaders() ... 
[11:33:19    INFO]  - will validate that the training was not a complete failure ... 
[11:33:19    INFO]  - training seems to have been successful! will move on ...
[11:33:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:33:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:33:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:33:25    INFO] ----------------------------------------------------------------------------------------------------
[11:33:25    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:33:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:33:25    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[11:33:25    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:33:25    INFO] ----------------------------------------------------------------------------------------------------
[11:33:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:33:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[11:33:35    INFO]  - Will gen. input-parameter errors ...
[11:33:37    INFO]  - starting ANNZ::loadReaders() ... 
[11:33:44    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:35:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:35:08    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:35:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:35:08    INFO]  -----------------------------------------------------------------------------------------------------------
[11:35:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:35:38    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:35:38    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:35:38    INFO]  -----------------------------------------------------------------------------------------------------------
[11:35:38    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:36:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:36:08    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:36:08    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:36:08    INFO]  -----------------------------------------------------------------------------------------------------------
[11:36:08    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:36:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:36:09    INFO]  - will validate that the bias-correction actually improved the result ...
[11:36:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:36:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[11:36:17    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_12/plots/
[11:36:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_12/plots output/PAUS_advanced16/regres/train/ANNZ_12/plots_biasCor_before
[11:36:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:36:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[11:36:32    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_12/plots/
[11:36:44        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_12/plots output/PAUS_advanced16/regres/train/ANNZ_12/plots_biasCor_after
[11:36:44    INFO]  - Got original [KS-test,N_poiss]: [0.0649381 , 96.5349] , after the bias-correction: [0.0560569 , 83.9484] --> will KEEP the correction !

(11:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:36 INFO) 
[11:36:50    INFO]  -----------------------------------------------------
[11:36:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:36:50    INFO]  -----------------------------------------------------------------------------------------------------------
[11:36:51    INFO]  - starting ANNZ::Init()  ... 
[11:36:53    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_13/saveOpt.txt ...
[11:37:11    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:37:11    INFO] ----------------------------------------------------------------------------------------------------
[11:37:11    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N,P
[11:37:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:37:11    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:37:11    INFO]      cuts (train):        ,
[11:37:11    INFO]      cuts (valid):       
[11:37:11    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:37:11    INFO] ----------------------------------------------------------------------------------------------------
[11:37:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:37:36    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[11:37:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[11:37:38    INFO]  - Will gen. input-parameter errors ...
[11:37:40    INFO]  - starting ANNZ::loadReaders() ... 
[11:37:45    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:40:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:40:41    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:40:41    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:40:41    INFO]  -----------------------------------------------------------------------------------------------------------
[11:41:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:41:38    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:41:38    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:41:38    INFO]  -----------------------------------------------------------------------------------------------------------
[11:41:38    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:42:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:42:40    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:42:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:42:40    INFO]  -----------------------------------------------------------------------------------------------------------
[11:42:40    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:42:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:42:42    INFO]  - will try to derive a bias correction ... 
[11:42:42    INFO]  - will validate that training produced an XML file for later ... 
[11:42:42    INFO]  - starting ANNZ::loadReaders() ... 
[11:42:43    INFO]  - will validate that the training was not a complete failure ... 
[11:42:43    INFO]  - training seems to have been successful! will move on ...
[11:42:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:42:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:42:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:42:49    INFO] ----------------------------------------------------------------------------------------------------
[11:42:49    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:42:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:42:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[11:42:49    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:42:49    INFO] ----------------------------------------------------------------------------------------------------
[11:42:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:42:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[11:42:57    INFO]  - Will gen. input-parameter errors ...
[11:42:59    INFO]  - starting ANNZ::loadReaders() ... 
[11:43:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:45:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:45:41    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:45:41    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:45:41    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:46:42    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:46:42    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:46:42    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:42    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:47:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:47:46    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:47:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:47:46    INFO]  -----------------------------------------------------------------------------------------------------------
[11:47:47    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:47:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:47:48    INFO]  - will validate that the bias-correction actually improved the result ...
[11:47:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:47:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[11:47:54    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_13/plots/
[11:48:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_13/plots output/PAUS_advanced16/regres/train/ANNZ_13/plots_biasCor_before
[11:48:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:48:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[11:48:11    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_13/plots/
[11:48:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_13/plots output/PAUS_advanced16/regres/train/ANNZ_13/plots_biasCor_after
[11:48:22    INFO]  - Got original [KS-test,N_poiss]: [0.0576835 , 78.6797] , after the bias-correction: [0.0508414 , 66.2702] --> will KEEP the correction !

(11:48 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:48 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:48 INFO) 
[11:48:27    INFO]  -----------------------------------------------------
[11:48:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:48:27    INFO]  -----------------------------------------------------------------------------------------------------------
[11:48:29    INFO]  - starting ANNZ::Init()  ... 
[11:48:30    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_14/saveOpt.txt ...
[11:48:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:48:48    INFO] ----------------------------------------------------------------------------------------------------
[11:48:48    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N
[11:48:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:48:48    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:48:48    INFO]      cuts (train):        ,
[11:48:48    INFO]      cuts (valid):       
[11:48:48    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:48:48    INFO] ----------------------------------------------------------------------------------------------------
[11:48:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:49:09    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[11:49:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[11:49:11    INFO]  - Will gen. input-parameter errors ...
[11:49:13    INFO]  - starting ANNZ::loadReaders() ... 
[11:49:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:50:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:50:28    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:50:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:50:28    INFO]  -----------------------------------------------------------------------------------------------------------
[11:50:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:50:54    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:50:54    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:50:54    INFO]  -----------------------------------------------------------------------------------------------------------
[11:50:54    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:51:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:51:20    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:51:20    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:51:20    INFO]  -----------------------------------------------------------------------------------------------------------
[11:51:21    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:51:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:51:22    INFO]  - will try to derive a bias correction ... 
[11:51:22    INFO]  - will validate that training produced an XML file for later ... 
[11:51:22    INFO]  - starting ANNZ::loadReaders() ... 
[11:51:23    INFO]  - will validate that the training was not a complete failure ... 
[11:51:23    INFO]  - training seems to have been successful! will move on ...
[11:51:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:51:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:51:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:51:29    INFO] ----------------------------------------------------------------------------------------------------
[11:51:29    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:51:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:51:29    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[11:51:29    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:51:29    INFO] ----------------------------------------------------------------------------------------------------
[11:51:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:51:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[11:51:38    INFO]  - Will gen. input-parameter errors ...
[11:51:40    INFO]  - starting ANNZ::loadReaders() ... 
[11:51:44    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[11:53:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:53:14    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:53:14    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:53:14    INFO]  -----------------------------------------------------------------------------------------------------------
[11:53:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:53:45    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:53:45    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:53:45    INFO]  -----------------------------------------------------------------------------------------------------------
[11:53:46    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[11:54:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:54:20    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:54:20    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:54:20    INFO]  -----------------------------------------------------------------------------------------------------------
[11:54:20    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:54:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:54:21    INFO]  - will validate that the bias-correction actually improved the result ...
[11:54:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:54:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[11:54:28    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_14/plots/
[11:54:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_14/plots output/PAUS_advanced16/regres/train/ANNZ_14/plots_biasCor_before
[11:54:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:54:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[11:54:45    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_14/plots/
[11:54:56        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_14/plots output/PAUS_advanced16/regres/train/ANNZ_14/plots_biasCor_after
[11:54:56    INFO]  - Got original [KS-test,N_poiss]: [0.0509378 , 141.363] , after the bias-correction: [0.0523186 , 116.627] --> will KEEP the correction !

(11:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:55 INFO) 
[11:55:00    INFO]  -----------------------------------------------------
[11:55:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:55:00    INFO]  -----------------------------------------------------------------------------------------------------------
[11:55:02    INFO]  - starting ANNZ::Init()  ... 
[11:55:03    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_15/saveOpt.txt ...
[11:55:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:55:18    INFO] ----------------------------------------------------------------------------------------------------
[11:55:18    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=450:BoostType=Bagging:VarTransform=N,P
[11:55:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:55:18    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:55:18    INFO]      cuts (train):        ,
[11:55:18    INFO]      cuts (valid):       
[11:55:18    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[11:55:18    INFO] ----------------------------------------------------------------------------------------------------
[11:55:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:55:57    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[11:56:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[11:56:00    INFO]  - Will gen. input-parameter errors ...
[11:56:02    INFO]  - starting ANNZ::loadReaders() ... 
[11:56:12    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[12:00:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:00:00    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:00:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:00:00    INFO]  -----------------------------------------------------------------------------------------------------------
[12:01:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:01:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:01:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:01:21    INFO]  -----------------------------------------------------------------------------------------------------------
[12:01:21    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[12:02:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:02:38    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:02:38    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:02:38    INFO]  -----------------------------------------------------------------------------------------------------------
[12:02:38    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:02:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:02:40    INFO]  - will try to derive a bias correction ... 
[12:02:40    INFO]  - will validate that training produced an XML file for later ... 
[12:02:40    INFO]  - starting ANNZ::loadReaders() ... 
[12:02:43    INFO]  - will validate that the training was not a complete failure ... 
[12:02:43    INFO]  - training seems to have been successful! will move on ...
[12:02:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:02:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:02:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:02:49    INFO] ----------------------------------------------------------------------------------------------------
[12:02:49    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:02:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:02:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[12:02:49    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[12:02:49    INFO] ----------------------------------------------------------------------------------------------------
[12:02:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:02:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[12:02:59    INFO]  - Will gen. input-parameter errors ...
[12:03:01    INFO]  - starting ANNZ::loadReaders() ... 
[12:03:11    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[12:07:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:07:10    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:07:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:07:10    INFO]  -----------------------------------------------------------------------------------------------------------
[12:08:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:08:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:08:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:08:35    INFO]  -----------------------------------------------------------------------------------------------------------
[12:08:35    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[12:09:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:09:55    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:09:55    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:09:55    INFO]  -----------------------------------------------------------------------------------------------------------
[12:09:55    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:09:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:09:57    INFO]  - will validate that the bias-correction actually improved the result ...
[12:09:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:09:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[12:10:03    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_15/plots/
[12:10:13        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_15/plots output/PAUS_advanced16/regres/train/ANNZ_15/plots_biasCor_before
[12:10:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:10:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[12:10:18    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_15/plots/
[12:10:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_15/plots output/PAUS_advanced16/regres/train/ANNZ_15/plots_biasCor_after
[12:10:28    INFO]  - Got original [KS-test,N_poiss]: [0.0765885 , 81.2701] , after the bias-correction: [0.0449727 , 64.4223] --> will KEEP the correction !

(12:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:10 INFO) 
[12:10:33    INFO]  -----------------------------------------------------
[12:10:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:10:33    INFO]  -----------------------------------------------------------------------------------------------------------
[12:10:34    INFO]  - starting ANNZ::Init()  ... 
[12:10:35    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_16/saveOpt.txt ...
[12:10:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:10:50    INFO] ----------------------------------------------------------------------------------------------------
[12:10:50    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=250:BoostType=Bagging:VarTransform=N
[12:10:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:10:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[12:10:50    INFO]      cuts (train):        ,
[12:10:50    INFO]      cuts (valid):       
[12:10:50    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[12:10:50    INFO] ----------------------------------------------------------------------------------------------------
[12:10:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:11:09    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[12:11:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[12:11:11    INFO]  - Will gen. input-parameter errors ...
[12:11:13    INFO]  - starting ANNZ::loadReaders() ... 
[12:11:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[12:12:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:12:29    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:12:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:12:29    INFO]  -----------------------------------------------------------------------------------------------------------
[12:12:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:12:54    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:12:54    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:12:54    INFO]  -----------------------------------------------------------------------------------------------------------
[12:12:54    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[12:13:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:13:20    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:13:20    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:13:20    INFO]  -----------------------------------------------------------------------------------------------------------
[12:13:20    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:13:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:13:21    INFO]  - will try to derive a bias correction ... 
[12:13:21    INFO]  - will validate that training produced an XML file for later ... 
[12:13:21    INFO]  - starting ANNZ::loadReaders() ... 
[12:13:23    INFO]  - will validate that the training was not a complete failure ... 
[12:13:23    INFO]  - training seems to have been successful! will move on ...
[12:13:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:13:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:13:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:13:28    INFO] ----------------------------------------------------------------------------------------------------
[12:13:28    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:13:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:13:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[12:13:28    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[12:13:28    INFO] ----------------------------------------------------------------------------------------------------
[12:13:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:13:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[12:13:36    INFO]  - Will gen. input-parameter errors ...
[12:13:37    INFO]  - starting ANNZ::loadReaders() ... 
[12:13:42    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[12:14:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:14:56    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:14:56    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:14:56    INFO]  -----------------------------------------------------------------------------------------------------------
[12:15:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:15:22    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:15:22    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:15:22    INFO]  -----------------------------------------------------------------------------------------------------------
[12:15:22    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[12:15:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:15:47    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:15:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:15:47    INFO]  -----------------------------------------------------------------------------------------------------------
[12:15:47    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:15:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:15:48    INFO]  - will validate that the bias-correction actually improved the result ...
[12:15:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:15:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[12:15:53    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_16/plots/
[12:16:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_16/plots output/PAUS_advanced16/regres/train/ANNZ_16/plots_biasCor_before
[12:16:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:16:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[12:16:08    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_16/plots/
[12:16:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_16/plots output/PAUS_advanced16/regres/train/ANNZ_16/plots_biasCor_after
[12:16:19    INFO]  - Got original [KS-test,N_poiss]: [0.0647585 , 96.0842] , after the bias-correction: [0.0557833 , 83.2048] --> will KEEP the correction !

(12:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:16 INFO) 
[12:16:23    INFO]  -----------------------------------------------------
[12:16:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:16:23    INFO]  -----------------------------------------------------------------------------------------------------------
[12:16:24    INFO]  - starting ANNZ::Init()  ... 
[12:16:25    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_17/saveOpt.txt ...
[12:16:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:16:40    INFO] ----------------------------------------------------------------------------------------------------
[12:16:40    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=510:BoostType=Bagging:VarTransform=P
[12:16:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:16:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[12:16:40    INFO]      cuts (train):        ,
[12:16:40    INFO]      cuts (valid):       
[12:16:40    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[12:16:40    INFO] ----------------------------------------------------------------------------------------------------
[12:16:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:17:22    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[12:17:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[12:17:26    INFO]  - Will gen. input-parameter errors ...
[12:17:28    INFO]  - starting ANNZ::loadReaders() ... 
[12:17:39    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[12:21:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:21:42    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:21:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:21:42    INFO]  -----------------------------------------------------------------------------------------------------------
[12:23:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:23:05    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:23:05    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:23:05    INFO]  -----------------------------------------------------------------------------------------------------------
[12:23:05    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[12:24:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:24:25    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:24:25    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:24:25    INFO]  -----------------------------------------------------------------------------------------------------------
[12:24:28    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:24:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:24:30    INFO]  - will try to derive a bias correction ... 
[12:24:30    INFO]  - will validate that training produced an XML file for later ... 
[12:24:30    INFO]  - starting ANNZ::loadReaders() ... 
[12:24:33    INFO]  - will validate that the training was not a complete failure ... 
[12:24:33    INFO]  - training seems to have been successful! will move on ...
[12:24:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:24:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:24:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:24:39    INFO] ----------------------------------------------------------------------------------------------------
[12:24:39    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:24:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:24:39    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[12:24:39    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[12:24:39    INFO] ----------------------------------------------------------------------------------------------------
[12:24:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:24:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[12:24:52    INFO]  - Will gen. input-parameter errors ...
[12:24:54    INFO]  - starting ANNZ::loadReaders() ... 
[12:25:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[12:29:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:29:32    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:29:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:29:32    INFO]  -----------------------------------------------------------------------------------------------------------
[12:31:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:31:01    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:31:01    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:31:01    INFO]  -----------------------------------------------------------------------------------------------------------
[12:31:01    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[12:32:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:32:32    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:32:32    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:32:32    INFO]  -----------------------------------------------------------------------------------------------------------
[12:32:35    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:32:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:32:37    INFO]  - will validate that the bias-correction actually improved the result ...
[12:32:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:32:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[12:32:42    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_17/plots/
[12:32:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_17/plots output/PAUS_advanced16/regres/train/ANNZ_17/plots_biasCor_before
[12:32:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:32:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[12:32:58    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_17/plots/
[12:33:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_17/plots output/PAUS_advanced16/regres/train/ANNZ_17/plots_biasCor_after
[12:33:08    INFO]  - Got original [KS-test,N_poiss]: [0.0660136 , 71.6081] , after the bias-correction: [0.0536213 , 74.6048] --> will KEEP the correction !

(12:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:33 INFO) 
[12:33:13    INFO]  -----------------------------------------------------
[12:33:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:33:13    INFO]  -----------------------------------------------------------------------------------------------------------
[12:33:14    INFO]  - starting ANNZ::Init()  ... 
[12:33:16    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_18/saveOpt.txt ...
[12:33:31    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:33:31    INFO] ----------------------------------------------------------------------------------------------------
[12:33:31    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=380:BoostType=Bagging:VarTransform=N,P
[12:33:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:33:31    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[12:33:31    INFO]      cuts (train):        ,
[12:33:31    INFO]      cuts (valid):       
[12:33:31    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[12:33:31    INFO] ----------------------------------------------------------------------------------------------------
[12:33:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:34:02    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[12:34:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[12:34:06    INFO]  - Will gen. input-parameter errors ...
[12:34:08    INFO]  - starting ANNZ::loadReaders() ... 
[12:34:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[12:37:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:37:26    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:37:26    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:37:26    INFO]  -----------------------------------------------------------------------------------------------------------
[12:38:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:38:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:38:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:38:32    INFO]  -----------------------------------------------------------------------------------------------------------
[12:38:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[12:39:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:39:36    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:39:36    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:39:36    INFO]  -----------------------------------------------------------------------------------------------------------
[12:39:37    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:39:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:39:38    INFO]  - will try to derive a bias correction ... 
[12:39:38    INFO]  - will validate that training produced an XML file for later ... 
[12:39:38    INFO]  - starting ANNZ::loadReaders() ... 
[12:39:41    INFO]  - will validate that the training was not a complete failure ... 
[12:39:41    INFO]  - training seems to have been successful! will move on ...
[12:39:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:39:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:39:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:39:47    INFO] ----------------------------------------------------------------------------------------------------
[12:39:47    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:39:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:39:47    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[12:39:47    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[12:39:47    INFO] ----------------------------------------------------------------------------------------------------
[12:39:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:39:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[12:39:56    INFO]  - Will gen. input-parameter errors ...
[12:39:58    INFO]  - starting ANNZ::loadReaders() ... 
[12:40:06    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[12:43:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:43:25    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:43:25    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:43:25    INFO]  -----------------------------------------------------------------------------------------------------------
[12:44:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:44:34    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:44:34    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:44:34    INFO]  -----------------------------------------------------------------------------------------------------------
[12:44:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[12:45:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:45:40    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:45:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:45:40    INFO]  -----------------------------------------------------------------------------------------------------------
[12:45:40    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:45:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:45:41    INFO]  - will validate that the bias-correction actually improved the result ...
[12:45:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:45:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[12:45:47    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_18/plots/
[12:45:57        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_18/plots output/PAUS_advanced16/regres/train/ANNZ_18/plots_biasCor_before
[12:45:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:45:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[12:46:02    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_18/plots/
[12:46:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_18/plots output/PAUS_advanced16/regres/train/ANNZ_18/plots_biasCor_after
[12:46:12    INFO]  - Got original [KS-test,N_poiss]: [0.0775387 , 82.0467] , after the bias-correction: [0.0443788 , 62.9774] --> will KEEP the correction !

(12:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:46 INFO) 
[12:46:17    INFO]  -----------------------------------------------------
[12:46:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:46:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:46:18    INFO]  - starting ANNZ::Init()  ... 
[12:46:19    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_19/saveOpt.txt ...
[12:46:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:46:34    INFO] ----------------------------------------------------------------------------------------------------
[12:46:34    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=1050:BoostType=AdaBoostR2:VarTransform=N,P
[12:46:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:46:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[12:46:34    INFO]      cuts (train):        ,
[12:46:34    INFO]      cuts (valid):       
[12:46:34    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[12:46:34    INFO] ----------------------------------------------------------------------------------------------------
[12:46:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:48:51    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[12:48:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[12:48:58    INFO]  - Will gen. input-parameter errors ...
[12:49:01    INFO]  - starting ANNZ::loadReaders() ... 
[12:49:55    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[13:35:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:35:02    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:35:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:35:02    INFO]  -----------------------------------------------------------------------------------------------------------
[13:55:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:55:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:55:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[13:55:32    INFO]  -----------------------------------------------------------------------------------------------------------
[13:55:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[14:16:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:16:01    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:16:01    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[14:16:01    INFO]  -----------------------------------------------------------------------------------------------------------
[14:16:02    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:16:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:16:06    INFO]  - will try to derive a bias correction ... 
[14:16:06    INFO]  - will validate that training produced an XML file for later ... 
[14:16:06    INFO]  - starting ANNZ::loadReaders() ... 
[14:16:16    INFO]  - will validate that the training was not a complete failure ... 
[14:16:16    INFO]  - training seems to have been successful! will move on ...
[14:16:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:16:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:16:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:16:24    INFO] ----------------------------------------------------------------------------------------------------
[14:16:24    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:16:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:16:24    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[14:16:24    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[14:16:24    INFO] ----------------------------------------------------------------------------------------------------
[14:16:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:16:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[14:16:36    INFO]  - Will gen. input-parameter errors ...
[14:16:40    INFO]  - starting ANNZ::loadReaders() ... 
[14:17:43    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[15:13:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:13:47    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:13:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:13:47    INFO]  -----------------------------------------------------------------------------------------------------------
[15:34:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:34:50    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:34:50    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[15:34:50    INFO]  -----------------------------------------------------------------------------------------------------------
[15:34:50    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[15:54:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:54:40    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:54:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[15:54:40    INFO]  -----------------------------------------------------------------------------------------------------------
[15:54:43    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:54:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:54:48    INFO]  - will validate that the bias-correction actually improved the result ...
[15:54:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:54:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[15:54:56    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_19/plots/
[15:55:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_19/plots output/PAUS_advanced16/regres/train/ANNZ_19/plots_biasCor_before
[15:55:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:55:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[15:55:16    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_19/plots/
[15:55:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_19/plots output/PAUS_advanced16/regres/train/ANNZ_19/plots_biasCor_after
[15:55:29    INFO]  - Got original [KS-test,N_poiss]: [0.123091 , 100.464] , after the bias-correction: [0.0529623 , 79.848] --> will KEEP the correction !

(15:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:55 INFO) 
[15:55:39    INFO]  -----------------------------------------------------
[15:55:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:55:39    INFO]  -----------------------------------------------------------------------------------------------------------
[15:55:41    INFO]  - starting ANNZ::Init()  ... 
[15:55:43    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_20/saveOpt.txt ...
[15:56:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:56:04    INFO] ----------------------------------------------------------------------------------------------------
[15:56:04    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=850:BoostType=AdaBoost:VarTransform=N,P
[15:56:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:56:04    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[15:56:04    INFO]      cuts (train):        ,
[15:56:04    INFO]      cuts (valid):       
[15:56:04    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[15:56:04    INFO] ----------------------------------------------------------------------------------------------------
[15:56:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:57:21    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[15:57:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[15:57:25    INFO]  - Will gen. input-parameter errors ...
[15:57:27    INFO]  - starting ANNZ::loadReaders() ... 
[15:57:45    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[16:09:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:09:08    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:09:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:09:08    INFO]  -----------------------------------------------------------------------------------------------------------
[16:12:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:12:34    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:12:34    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:12:34    INFO]  -----------------------------------------------------------------------------------------------------------
[16:12:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[16:15:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:15:56    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:15:56    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:15:56    INFO]  -----------------------------------------------------------------------------------------------------------
[16:15:59    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:16:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:16:01    INFO]  - will try to derive a bias correction ... 
[16:16:01    INFO]  - will validate that training produced an XML file for later ... 
[16:16:01    INFO]  - starting ANNZ::loadReaders() ... 
[16:16:03    INFO]  - will validate that the training was not a complete failure ... 
[16:16:04    INFO]  - training seems to have been successful! will move on ...
[16:16:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:16:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:16:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:16:10    INFO] ----------------------------------------------------------------------------------------------------
[16:16:10    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:16:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:16:10    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[16:16:10    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[16:16:10    INFO] ----------------------------------------------------------------------------------------------------
[16:16:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:16:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[16:16:19    INFO]  - Will gen. input-parameter errors ...
[16:16:21    INFO]  - starting ANNZ::loadReaders() ... 
[16:16:39    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[16:25:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:25:29    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:25:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:25:29    INFO]  -----------------------------------------------------------------------------------------------------------
[16:28:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:28:22    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:28:22    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:28:22    INFO]  -----------------------------------------------------------------------------------------------------------
[16:28:22    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[16:31:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:31:26    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:31:26    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:31:26    INFO]  -----------------------------------------------------------------------------------------------------------
[16:31:29    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:31:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:31:30    INFO]  - will validate that the bias-correction actually improved the result ...
[16:31:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:31:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
Warning in <Fit>: Fit data is empty 
[16:31:36    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_20/plots/
[16:31:47        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_20/plots output/PAUS_advanced16/regres/train/ANNZ_20/plots_biasCor_before
[16:31:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:31:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[16:31:53    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_20/plots/
[16:32:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_20/plots output/PAUS_advanced16/regres/train/ANNZ_20/plots_biasCor_after
[16:32:06    INFO]  - Got original [KS-test,N_poiss]: [0.0585101 , 79.8835] , after the bias-correction: [0.0523297 , 68.919] --> will KEEP the correction !

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:12    INFO]  -----------------------------------------------------
[16:32:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:14    INFO]  - starting ANNZ::Init()  ... 
[16:32:15    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_21/saveOpt.txt ...
[16:32:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:32:35    INFO] ----------------------------------------------------------------------------------------------------
[16:32:35    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=350:BoostType=AdaBoost:VarTransform=N,P
[16:32:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:32:35    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:32:35    INFO]      cuts (train):        ,
[16:32:35    INFO]      cuts (valid):       
[16:32:35    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[16:32:35    INFO] ----------------------------------------------------------------------------------------------------
[16:32:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:33:03    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[16:33:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[16:33:06    INFO]  - Will gen. input-parameter errors ...
[16:33:08    INFO]  - starting ANNZ::loadReaders() ... 
[16:33:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[16:35:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:35:53    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:35:53    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:35:53    INFO]  -----------------------------------------------------------------------------------------------------------
[16:36:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:36:51    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:36:51    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:36:51    INFO]  -----------------------------------------------------------------------------------------------------------
[16:36:51    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[16:37:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:37:44    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:37:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:37:44    INFO]  -----------------------------------------------------------------------------------------------------------
[16:37:44    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:37:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:37:45    INFO]  - will try to derive a bias correction ... 
[16:37:45    INFO]  - will validate that training produced an XML file for later ... 
[16:37:45    INFO]  - starting ANNZ::loadReaders() ... 
[16:37:46    INFO]  - will validate that the training was not a complete failure ... 
[16:37:46    INFO]  - training seems to have been successful! will move on ...
[16:37:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:37:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:37:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:37:53    INFO] ----------------------------------------------------------------------------------------------------
[16:37:53    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:37:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:37:53    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[16:37:53    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[16:37:53    INFO] ----------------------------------------------------------------------------------------------------
[16:37:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:38:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[16:38:02    INFO]  - Will gen. input-parameter errors ...
[16:38:04    INFO]  - starting ANNZ::loadReaders() ... 
[16:38:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[16:40:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:40:50    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:40:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:40:50    INFO]  -----------------------------------------------------------------------------------------------------------
[16:41:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:41:51    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:41:51    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:41:51    INFO]  -----------------------------------------------------------------------------------------------------------
[16:41:51    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[16:42:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:46    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:42:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:42:46    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:46    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:42:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:42:48    INFO]  - will validate that the bias-correction actually improved the result ...
[16:42:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:42:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[16:42:53    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_21/plots/
[16:43:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_21/plots output/PAUS_advanced16/regres/train/ANNZ_21/plots_biasCor_before
[16:43:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:43:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[16:43:10    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_21/plots/
[16:43:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_21/plots output/PAUS_advanced16/regres/train/ANNZ_21/plots_biasCor_after
[16:43:22    INFO]  - Got original [KS-test,N_poiss]: [0.0576835 , 78.6423] , after the bias-correction: [0.0506334 , 66.4184] --> will KEEP the correction !

(16:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=910:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:43 INFO) 
[16:43:27    INFO]  -----------------------------------------------------
[16:43:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:43:27    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:29    INFO]  - starting ANNZ::Init()  ... 
[16:43:31    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_22/saveOpt.txt ...
[16:43:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:43:50    INFO] ----------------------------------------------------------------------------------------------------
[16:43:50    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=910:BoostType=AdaBoost:VarTransform=N,P
[16:43:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:43:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:43:50    INFO]      cuts (train):        ,
[16:43:50    INFO]      cuts (valid):       
[16:43:50    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[16:43:50    INFO] ----------------------------------------------------------------------------------------------------
[16:43:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:45:12    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[16:45:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[16:45:16    INFO]  - Will gen. input-parameter errors ...
[16:45:19    INFO]  - starting ANNZ::loadReaders() ... 
[16:45:33    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[16:59:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:59:00    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:59:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:59:00    INFO]  -----------------------------------------------------------------------------------------------------------
[17:04:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:04:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:04:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:04:11    INFO]  -----------------------------------------------------------------------------------------------------------
[17:04:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[17:09:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:09:07    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:09:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:09:07    INFO]  -----------------------------------------------------------------------------------------------------------
[17:09:10    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:09:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:09:13    INFO]  - will try to derive a bias correction ... 
[17:09:13    INFO]  - will validate that training produced an XML file for later ... 
[17:09:13    INFO]  - starting ANNZ::loadReaders() ... 
[17:09:16    INFO]  - will validate that the training was not a complete failure ... 
[17:09:16    INFO]  - training seems to have been successful! will move on ...
[17:09:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:09:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:09:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:09:23    INFO] ----------------------------------------------------------------------------------------------------
[17:09:23    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:09:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:09:23    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[17:09:23    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[17:09:23    INFO] ----------------------------------------------------------------------------------------------------
[17:09:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:09:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[17:09:35    INFO]  - Will gen. input-parameter errors ...
[17:09:37    INFO]  - starting ANNZ::loadReaders() ... 
[17:09:58    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[17:22:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:22:07    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:22:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:22:07    INFO]  -----------------------------------------------------------------------------------------------------------
[17:26:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:26:31    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:26:31    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:26:31    INFO]  -----------------------------------------------------------------------------------------------------------
[17:26:31    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[17:30:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:30:56    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:30:56    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:30:56    INFO]  -----------------------------------------------------------------------------------------------------------
[17:31:00    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:31:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:31:02    INFO]  - will validate that the bias-correction actually improved the result ...
[17:31:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:31:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
Warning in <Fit>: Fit data is empty 
[17:31:10    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_22/plots/
[17:31:24        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_22/plots output/PAUS_advanced16/regres/train/ANNZ_22/plots_biasCor_before
[17:31:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:31:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[17:31:31    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_22/plots/
[17:31:45        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_22/plots output/PAUS_advanced16/regres/train/ANNZ_22/plots_biasCor_after
[17:31:46    INFO]  - Got original [KS-test,N_poiss]: [0.0585101 , 79.8382] , after the bias-correction: [0.0523306 , 68.5484] --> will KEEP the correction !

(17:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:31 INFO) 
[17:31:52    INFO]  -----------------------------------------------------
[17:31:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:31:52    INFO]  -----------------------------------------------------------------------------------------------------------
[17:31:54    INFO]  - starting ANNZ::Init()  ... 
[17:31:57    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_23/saveOpt.txt ...
[17:32:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:32:18    INFO] ----------------------------------------------------------------------------------------------------
[17:32:18    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=530:BoostType=AdaBoostR2:VarTransform=N,P
[17:32:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:32:18    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[17:32:18    INFO]      cuts (train):        ,
[17:32:18    INFO]      cuts (valid):       
[17:32:18    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[17:32:18    INFO] ----------------------------------------------------------------------------------------------------
[17:32:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:33:36    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[17:33:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[17:33:42    INFO]  - Will gen. input-parameter errors ...
[17:33:44    INFO]  - starting ANNZ::loadReaders() ... 
[17:34:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[17:55:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:55:00    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:55:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:55:00    INFO]  -----------------------------------------------------------------------------------------------------------
[18:02:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:02:23    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:02:23    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:02:23    INFO]  -----------------------------------------------------------------------------------------------------------
[18:02:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[18:09:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:19    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:09:19    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:09:19    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:19    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:09:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:09:23    INFO]  - will try to derive a bias correction ... 
[18:09:23    INFO]  - will validate that training produced an XML file for later ... 
[18:09:23    INFO]  - starting ANNZ::loadReaders() ... 
[18:09:28    INFO]  - will validate that the training was not a complete failure ... 
[18:09:29    INFO]  - training seems to have been successful! will move on ...
[18:09:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:09:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:09:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:09:37    INFO] ----------------------------------------------------------------------------------------------------
[18:09:37    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:09:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:09:37    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:09:37    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:09:37    INFO] ----------------------------------------------------------------------------------------------------
[18:09:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:09:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[18:09:53    INFO]  - Will gen. input-parameter errors ...
[18:09:57    INFO]  - starting ANNZ::loadReaders() ... 
[18:10:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[18:30:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:30:57    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:30:57    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:30:57    INFO]  -----------------------------------------------------------------------------------------------------------
[18:38:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:38:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:38:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:38:11    INFO]  -----------------------------------------------------------------------------------------------------------
[18:38:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[18:45:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:45:35    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:45:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:45:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:45:39    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:45:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:45:42    INFO]  - will validate that the bias-correction actually improved the result ...
[18:45:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:45:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[18:45:51    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_23/plots/
[18:46:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_23/plots output/PAUS_advanced16/regres/train/ANNZ_23/plots_biasCor_before
[18:46:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:46:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[18:46:13    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_23/plots/
[18:46:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_23/plots output/PAUS_advanced16/regres/train/ANNZ_23/plots_biasCor_after
[18:46:28    INFO]  - Got original [KS-test,N_poiss]: [0.123007 , 98.3385] , after the bias-correction: [0.0531049 , 80.9277] --> will KEEP the correction !

(18:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mband25_flux/band25_flux_error + band26_flux/band26_flux_error + band27_flux/band27_flux_error + band28_flux/band28_flux_error + band29_flux/band29_flux_error + band30_flux/band30_flux_error + band31_flux/band31_flux_error + band32_flux/band32_flux_error + band33_flux/band33_flux_error + band34_flux/band34_flux_error + band35_flux/band35_flux_error + band36_flux/band36_flux_error + band37_flux/band37_flux_error + band38_flux/band38_flux_error[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:46 INFO) 
[18:46:36    INFO]  -----------------------------------------------------
[18:46:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:46:36    INFO]  -----------------------------------------------------------------------------------------------------------
[18:46:38    INFO]  - starting ANNZ::Init()  ... 
[18:46:40    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/train/ANNZ_24/saveOpt.txt ...
[18:47:03    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:47:03    INFO] ----------------------------------------------------------------------------------------------------
[18:47:03    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N
[18:47:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:47:03    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:47:03    INFO]      cuts (train):        ,
[18:47:03    INFO]      cuts (valid):       
[18:47:03    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:47:03    INFO] ----------------------------------------------------------------------------------------------------
[18:47:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:47:48    INFO]  - Saving MLM information in ./output/PAUS_advanced16/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[18:47:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[18:47:54    INFO]  - Will gen. input-parameter errors ...
[18:47:58    INFO]  - starting ANNZ::loadReaders() ... 
[18:48:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[18:51:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:51:21    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:51:21    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:51:21    INFO]  -----------------------------------------------------------------------------------------------------------
[18:52:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:52:27    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:52:27    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:52:27    INFO]  -----------------------------------------------------------------------------------------------------------
[18:52:27    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[18:53:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:53:27    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:53:27    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:53:27    INFO]  -----------------------------------------------------------------------------------------------------------
[18:53:28    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:53:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:53:30    INFO]  - will try to derive a bias correction ... 
[18:53:30    INFO]  - will validate that training produced an XML file for later ... 
[18:53:30    INFO]  - starting ANNZ::loadReaders() ... 
[18:53:34    INFO]  - will validate that the training was not a complete failure ... 
[18:53:34    INFO]  - training seems to have been successful! will move on ...
[18:53:34    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:53:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:53:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:53:41    INFO] ----------------------------------------------------------------------------------------------------
[18:53:41    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:53:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:53:41    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:53:41    INFO]    - weights:            band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error
[18:53:41    INFO] ----------------------------------------------------------------------------------------------------
[18:53:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:53:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[18:53:59    INFO]  - Will gen. input-parameter errors ...
[18:54:03    INFO]  - starting ANNZ::loadReaders() ... 
[18:54:21    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_train*.root
[18:58:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:58:14    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:58:14    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:58:14    INFO]  -----------------------------------------------------------------------------------------------------------
[18:59:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:59:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:59:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:59:32    INFO]  -----------------------------------------------------------------------------------------------------------
[18:59:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced16/rootIn/ANNZ_tree_valid*.root
[19:01:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:01:07    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:01:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[19:01:07    INFO]  -----------------------------------------------------------------------------------------------------------
[19:01:09    INFO]  - Saving file ./output/PAUS_advanced16/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:01:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:01:12    INFO]  - will validate that the bias-correction actually improved the result ...
[19:01:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:01:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[19:01:21    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_24/plots/
[19:01:35        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_24/plots output/PAUS_advanced16/regres/train/ANNZ_24/plots_biasCor_before
[19:01:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:01:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[19:01:42    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/train/ANNZ_24/plots/
[19:01:56        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced16/regres/train/ANNZ_24/plots output/PAUS_advanced16/regres/train/ANNZ_24/plots_biasCor_after
[19:01:56    INFO]  - Got original [KS-test,N_poiss]: [0.0640241 , 95.7707] , after the bias-correction: [0.0572046 , 80.6843] --> will KEEP the correction !

(19:02 INFO) [40;37;1m - 19/02/19 19:02:03 - finished running ANNZ ![0m
(19:14 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(19:14 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(19:14 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(19:14 INFO) [40;37;1m - 19/02/19 19:14:51 - starting ANNZ[0m
(19:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(19:14 INFO) 
[19:14:52    INFO]  -----------------------------------------------------
[19:14:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:14:52    INFO]  -----------------------------------------------------------------------------------------------------------
[19:14:53    INFO]  - starting ANNZ::Init()  ... 
[19:14:53    INFO]  - Will generate 1 PDFs ... 
[19:15:02    INFO] --------------------------------------------------------
[19:15:02    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[19:15:02    INFO]  - All REJECTED MLMs: 
[19:15:02    INFO] ----------------------------------------------------------------------------------------------------------------
[19:15:06    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/optim/saveOpt.txt ...
[19:16:31    INFO]  - starting ANNZ::Optim() ... 
[19:16:31    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[19:16:32    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[19:16:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:16:58    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced16/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[19:17:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:17:22    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced16/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[19:17:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:17:45    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/PAUS_advanced16/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[19:17:45    INFO]  - Saving file ./output/PAUS_advanced16/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[19:17:46    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[19:17:46    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced16/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[19:17:46    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[19:17:47    INFO]  - ending makeTreeRegClsAllMLM() ... 
[19:17:47    INFO]  - starting ANNZ::optimReg() ... 
[19:17:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:17:54    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced16/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[19:17:55    INFO]  - starting ANNZ::fillColosureV() ... 
[19:17:56    INFO]  ---------------------------------------------------------------------------------- 
[19:17:56    INFO]  - Got the following average properties: 
[19:17:56    INFO]  --------------------------------------- 
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00629164 	 0.0434377 	 0.105044
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00536118 	 0.0516987 	 0.111219
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00395262 	 0.0608932 	 0.0921938
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00531451 	 0.0511526 	 0.111802
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00997355 	 0.0530322 	 0.0897187
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0098478 	 0.0529161 	 0.086955
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.00532235 	 0.051094 	 0.112051
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00651675 	 0.0438189 	 0.10522
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00411873 	 0.0608562 	 0.0922605
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00969975 	 0.0536021 	 0.0849904
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.0097271 	 0.0529435 	 0.0891247
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00633183 	 0.039827 	 0.111654
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00999716 	 0.0527119 	 0.0908779
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.00533008 	 0.0512055 	 0.111794
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00414722 	 0.0611063 	 0.0916962
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00658848 	 0.0439879 	 0.103416
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.010039 	 0.0529248 	 0.0878489
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00609996 	 0.039927 	 0.112086
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.00667154 	 0.0440112 	 0.103841
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.0072049 	 0.0558919 	 0.0494965
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00549426 	 0.0514243 	 0.111607
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00530654 	 0.0511692 	 0.111808
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00541934 	 0.0513905 	 0.111345
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00706475 	 0.0561874 	 0.0499628
[19:17:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00965012 	 0.0531585 	 0.0877376
[19:17:56    INFO]  ------------------------------------------------------------------------------------------------- 
[19:17:56    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[19:17:56    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[19:17:56    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[19:17:56    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[19:17:56    INFO]  - Now trying to find best methods with a limit of 15% of the [sig68] dist, and 25% of the other(s) - iteration 2 ...
[19:17:56    INFO]  - Now trying to find best methods with a limit of 17.5% of the [sig68] dist, and 27.5% of the other(s) - iteration 3 ...
[19:17:56    INFO]  - Now trying to find best methods with a limit of 20% of the [sig68] dist, and 30% of the other(s) - iteration 4 ...
[19:17:56    INFO]  - Now trying to find best methods with a limit of 22.5% of the [sig68] dist, and 32.5% of the other(s) - iteration 5 ...
[19:17:56    INFO]  - Now trying to find best methods with a limit of 25% of the [sig68] dist, and 35% of the other(s) - iteration 6 ...
[19:17:56    INFO]  - Now trying to find best methods with a limit of 27.5% of the [sig68] dist, and 37.5% of the other(s) - iteration 7 ...
[19:17:56    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 27.5% of the [sig68] dist.
[19:17:56    INFO]  - The "best" MLM is: ANNZ_6
[19:17:56    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[19:17:56    INFO]  - initial PDF weights: ANNZ_17:0.133 ANNZ_11:0.124 ANNZ_0:0.114 ANNZ_21:0.105 ANNZ_6:0.095 ANNZ_3:0.086 ANNZ_13:0.076 ANNZ_1:0.067 ANNZ_22:0.057 ANNZ_7:0.048 ANNZ_20:0.038 ANNZ_15:0.029 ANNZ_18:0.019 ANNZ_5:0.010 
[19:17:56    INFO]  - will loop on the input trees ...
[19:17:56    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.88558e-01
[19:17:57    INFO]  - nTry: 1 - min-param best/prev/now: 2.88558e-01 / 2.88558e-01 / 2.88696e-01
[19:17:57    INFO]  - nTry: 2 - min-param best/prev/now: 2.88558e-01 / 2.88558e-01 / 2.88805e-01
[19:17:57    INFO]  - nTry: 3 - min-param best/prev/now: 2.88558e-01 / 2.88558e-01 / 2.88675e-01
[19:17:57    INFO]  - nTry: 4 - min-param best/prev/now: 2.88558e-01 / 2.88558e-01 / 2.88741e-01
[19:17:57    INFO]  - nTry: 5 - min-param best/prev/now: 2.88558e-01 / 2.88558e-01 / 2.88807e-01
[19:17:57    INFO]  - nTry: 6 - min-param best/prev/now: 2.88558e-01 / 2.88558e-01 / 2.88828e-01
[19:17:57    INFO]  - NEW:  7 - min-param best/prev/now: 2.88558e-01 / 2.88558e-01 / 2.88275e-01
[19:17:57    INFO]  - nTry: 8 - min-param best/prev/now: 2.88275e-01 / 2.88275e-01 / 2.88314e-01
[19:17:57    INFO]  - nTry: 9 - min-param best/prev/now: 2.88275e-01 / 2.88275e-01 / 2.88405e-01
[19:17:57    INFO]  - nTry: 10 - min-param best/prev/now: 2.88275e-01 / 2.88275e-01 / 2.88459e-01
[19:17:58    INFO]  - nTry: 20 - min-param best/prev/now: 2.88275e-01 / 2.88459e-01 / 2.88784e-01
[19:17:59    INFO]  - nTry: 30 - min-param best/prev/now: 2.88275e-01 / 2.88758e-01 / 2.88631e-01
[19:18:00    INFO]  - nTry: 40 - min-param best/prev/now: 2.88275e-01 / 2.88493e-01 / 2.88544e-01
[19:18:01    INFO]  - nTry: 50 - min-param best/prev/now: 2.88275e-01 / 2.88621e-01 / 2.88644e-01
[19:18:01    INFO]  - nTry: 60 - min-param best/prev/now: 2.88275e-01 / 2.88557e-01 / 2.88595e-01
[19:18:02    INFO]  - nTry: 70 - min-param best/prev/now: 2.88275e-01 / 2.88557e-01 / 2.88707e-01
[19:18:03    INFO]  - nTry: 80 - min-param best/prev/now: 2.88275e-01 / 2.88770e-01 / 2.88808e-01
[19:18:04    INFO]  - nTry: 90 - min-param best/prev/now: 2.88275e-01 / 2.88840e-01 / 2.88854e-01
[19:18:05    INFO]  - nTry: 100 - min-param best/prev/now: 2.88275e-01 / 2.88840e-01 / 2.88970e-01
[19:18:07    INFO]  - nTry: 120 - min-param best/prev/now: 2.88275e-01 / 2.89016e-01 / 2.89048e-01
[19:18:08    INFO]  - nTry: 140 - min-param best/prev/now: 2.88275e-01 / 2.88926e-01 / 2.88935e-01
[19:18:09    INFO]  - nTry: 150 - min-param best/prev/now: 2.88275e-01 / 2.88900e-01 / 2.88896e-01
[19:18:10    INFO]  - nTry: 160 - min-param best/prev/now: 2.88275e-01 / 2.88920e-01 / 2.88948e-01
[19:18:12    INFO]  - nTry: 180 - min-param best/prev/now: 2.88275e-01 / 2.88982e-01 / 2.88991e-01
[19:18:13    INFO]  - nTry: 200 - min-param best/prev/now: 2.88275e-01 / 2.88994e-01 / 2.88997e-01
[19:18:15    INFO]  - nTry: 220 - min-param best/prev/now: 2.88275e-01 / 2.89038e-01 / 2.89039e-01
[19:18:17    INFO]  - nTry: 240 - min-param best/prev/now: 2.88275e-01 / 2.89052e-01 / 2.89052e-01
[19:18:18    INFO]  - nTry: 250 - min-param best/prev/now: 2.88275e-01 / 2.89052e-01 / 2.89095e-01
[19:18:18    INFO]  - finished PDF optimization! - final minimization parameter: 2.88275e-01 , PDF weights: ANNZ_21:0.136 ANNZ_0:0.115 ANNZ_17:0.111 ANNZ_11:0.103 ANNZ_1:0.094 ANNZ_22:0.083 ANNZ_6:0.080 ANNZ_3:0.072 ANNZ_13:0.064 ANNZ_20:0.055 ANNZ_7:0.040 ANNZ_15:0.024 ANNZ_18:0.016 ANNZ_5:0.008 
[19:18:18    INFO]  - will derive the bias correction for the pdf ... 
[19:18:19    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.115409, ANNZ_1:0.093977, ANNZ_2:0.000000, ANNZ_3:0.071552, ANNZ_4:0.000000, ANNZ_5:0.007950, ANNZ_6:0.079502, ANNZ_7:0.039751, ANNZ_8:0.000000, ANNZ_9:0.000000, ANNZ_10:0.000000, ANNZ_11:0.103353, ANNZ_12:0.000000, ANNZ_13:0.063602, ANNZ_14:0.000000, ANNZ_15:0.023851, ANNZ_16:0.000000, ANNZ_17:0.111303, ANNZ_18:0.015900, ANNZ_19:0.000000, ANNZ_20:0.055057, ANNZ_21:0.136073, ANNZ_22:0.082719, ANNZ_23:0.000000, ANNZ_24:0.000000, 
[19:18:19    INFO]  - Saving optimization results in ./output/PAUS_advanced16/regres/optim/saveOptimOpt.txt ...
[19:18:23    INFO]  - Saving bias-correction results in ./output/PAUS_advanced16/regres/optim/saveOptimObj.root ...
[19:18:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:18:29    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced16/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[19:18:34    INFO]  - starting ANNZ::doEvalReg() ... 
[19:18:34    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[19:18:34    INFO]  - Reading bias-correction results from ./output/PAUS_advanced16/regres/optim/saveOptimObj.root ...
[19:18:34    INFO]  - Getting optimization results from ./output/PAUS_advanced16/regres/optim/saveOptimOpt.txt ...
[19:18:34    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[19:18:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:18:36    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[19:18:36    INFO]  -----------------------------------------------------------------------------------------------------------
[19:18:36    INFO]  - starting storeTreeToAscii() ... 
[19:18:36    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[19:18:36    INFO]  - Will parse  ANNZ_tree_randomReg(3366)... Now in ./output/PAUS_advanced16/regres/optim/eval/ANNZ_randomReg_0000.csv
[19:18:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:18:36    INFO]  -- ANNZ_randomReg .................................. 3366  nObj
[19:18:36    INFO]  -----------------------------------------------------------------------------------------------------------
[19:18:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:18:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[19:18:36    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[19:18:52    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/optim/eval/plots/

(19:19 INFO) [40;37;1m - 19/02/19 19:19:00 - finished running ANNZ ![0m
(19:19 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(19:19 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(19:19 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(19:19 INFO) [40;37;1m - 19/02/19 19:19:32 - starting ANNZ[0m
(19:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced16[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data9c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(19:19 INFO) 
[19:19:32    INFO]  -----------------------------------------------------
[19:19:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:19:32    INFO]  -----------------------------------------------------------------------------------------------------------
[19:19:34    INFO]  - starting ANNZ::Init()  ... 
[19:19:34    INFO]  - Will generate 1 PDFs ... 
[19:19:44    INFO] --------------------------------------------------------
[19:19:44    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[19:19:44    INFO]  - All REJECTED MLMs: 
[19:19:44    INFO] ----------------------------------------------------------------------------------------------------------------
[19:19:48    INFO]  - Saving run information in ./output/PAUS_advanced16/regres/eval_nFile0/saveOpt.txt ...
[19:21:04    INFO]  - starting inputToFullTree(ANNz_data9c.csv) ... 
[19:21:05    INFO]  - Found 3367 lines in file PAUS/ANNz_data9c.csv -> total so far = 3367 ... 
[19:21:05    INFO]  - Now reading-in PAUS/ANNz_data9c.csv ... 
[19:21:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:21:05    INFO]  -- ANNZ_tree_eval .................................. 3367  nLine
[19:21:05    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[19:21:05    INFO]  -----------------------------------------------------------------------------------------------------------
[19:21:05    INFO]  - starting ANNZ::Eval() ... 
[19:21:05    INFO]  - starting ANNZ::doEvalReg() ... 
[19:21:05    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[19:21:05    INFO]  - Reading bias-correction results from ./output/PAUS_advanced16/regres/optim/saveOptimObj.root ...
[19:21:05    INFO]  - Getting optimization results from ./output/PAUS_advanced16/regres/optim/saveOptimOpt.txt ...
[19:21:05    INFO]  - creating MLM trees from input ...
[19:21:05    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,ANNZ_1,ANNZ_3,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_11,ANNZ_13,ANNZ_15,ANNZ_17,ANNZ_18,ANNZ_20,ANNZ_21,ANNZ_22,
[19:21:05    INFO]  - starting ANNZ::loadReaders() ... 
[19:47:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:47:25    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[19:47:25    INFO]  -----------------------------------------------------------------------------------------------------------
[19:47:26    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[19:47:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:47:28    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 3367  nObj
[19:47:28    INFO]  -----------------------------------------------------------------------------------------------------------
[19:47:28    INFO]  - starting storeTreeToAscii() ... 
[19:47:28    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[19:47:28    INFO]  - Will parse  ANNZ_tree_randomReg(3367)... Now in ./output/PAUS_advanced16/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[19:47:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:47:29    INFO]  -- ANNZ_randomReg .................................. 3367  nObj
[19:47:29    INFO]  -----------------------------------------------------------------------------------------------------------
[19:47:33    INFO]  - detected the target,zb in the evaluated sample - Will create performance plots ...
[19:47:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:47:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[19:47:33    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[19:47:48    INFO]  - Writing to plotting directory output/PAUS_advanced16/regres/eval_nFile0/plots/

(19:47 INFO) [40;37;1m - 19/02/19 19:47:56 - finished running ANNZ ![0m
