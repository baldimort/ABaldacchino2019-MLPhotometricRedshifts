(11:39 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:39 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:39 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:39 INFO) [40;37;1m - 21/02/19 11:39:50 - starting ANNZ[0m
(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data9a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data9b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:50    INFO]  -----------------------------------------------------
[11:39:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:50    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:52    INFO]  - starting inputToSplitTree() ... 
[11:39:52    INFO]  - Found 13465 lines in file PAUS/ANNz_data9a.csv -> total so far = 13465 ... 
[11:39:53    INFO]  - Found 3366 lines in file PAUS/ANNz_data9b.csv -> total so far = 3366 ... 
[11:39:53    INFO]  - Now reading-in PAUS/ANNz_data9a.csv ... 
[11:39:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:39:54    INFO]  -- ANNZ_tree .......................................... 0  index
[11:39:54    INFO]  -- ANNZ_tree ...................................... 13465  nLine
[11:39:54    INFO]  -- ANNZ_tree ...................................... 13465  nLineFile
[11:39:54    INFO]  -- ANNZ_tree ...................................... 13465  nObj
[11:39:54    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:39:54    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[11:39:54    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:54    INFO]  - Now reading-in PAUS/ANNz_data9b.csv ... 
[11:39:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:39:55    INFO]  -- ANNZ_tree .......................................... 0  index
[11:39:55    INFO]  -- ANNZ_tree ...................................... 16831  nLine
[11:39:55    INFO]  -- ANNZ_tree ....................................... 3366  nLineFile
[11:39:55    INFO]  -- ANNZ_tree ....................................... 3366  nObj
[11:39:55    INFO]  -- ANNZ_tree ....................................... 3366  nTest
[11:39:55    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[11:39:55    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:55    INFO]  - Writing to plotting directory output/PAUS_advanced17/rootIn/plots/
[11:39:57    INFO]  - Writing to plotting directory output/PAUS_advanced17/rootIn/plots/

(11:39 INFO) [40;37;1m - 21/02/19 11:39:59 - finished running ANNZ ![0m
(11:40 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:40 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:40 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:40 INFO) [40;37;1m - 21/02/19 11:40:32 - starting ANNZ[0m
(11:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=32694:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:40 INFO) 
[11:40:32    INFO]  -----------------------------------------------------
[11:40:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:40:32    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:34    INFO]  - starting ANNZ::Init()  ... 
[11:40:35    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_0/saveOpt.txt ...
[11:40:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:40:49    INFO] ----------------------------------------------------------------------------------------------------
[11:40:49    INFO]  - will book (ANNZ_0) method(ANN) with options: :HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=32694:VarTransform=N,P
[11:40:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:40:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:40:49    INFO]      cuts (train):        ,
[11:40:49    INFO]      cuts (valid):       
[11:40:49    INFO]    - weights:            1
[11:40:49    INFO] ----------------------------------------------------------------------------------------------------
[11:40:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:56:09    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[12:56:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[12:56:13    INFO]  - Will gen. input-parameter errors ...
[12:56:15    INFO]  - starting ANNZ::loadReaders() ... 
[12:56:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[12:56:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:51    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:56:51    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:56:51    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:57:03    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:57:03    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:57:03    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:03    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[12:57:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:57:15    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:57:15    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:57:15    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:16    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:57:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:57:16    INFO]  - will try to derive a bias correction ... 
[12:57:16    INFO]  - will validate that training produced an XML file for later ... 
[12:57:16    INFO]  - starting ANNZ::loadReaders() ... 
[12:57:16    INFO]  - will validate that the training was not a complete failure ... 
[12:57:16    INFO]  - training seems to have been successful! will move on ...
[12:57:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:57:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:57:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:57:21    INFO] ----------------------------------------------------------------------------------------------------
[12:57:21    INFO]  - will book (ANNZ_0_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[12:57:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:57:21    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[12:57:21    INFO]    - weights:            1
[12:57:21    INFO] ----------------------------------------------------------------------------------------------------
[12:57:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:28:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[14:28:40    INFO]  - Will gen. input-parameter errors ...
[14:28:42    INFO]  - starting ANNZ::loadReaders() ... 
[14:28:44    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[14:29:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:29:54    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:29:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:29:54    INFO]  -----------------------------------------------------------------------------------------------------------
[14:30:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:30:18    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:30:18    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[14:30:18    INFO]  -----------------------------------------------------------------------------------------------------------
[14:30:18    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[14:30:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:30:42    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:30:42    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[14:30:42    INFO]  -----------------------------------------------------------------------------------------------------------
[14:30:42    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:30:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:30:43    INFO]  - will validate that the bias-correction actually improved the result ...
[14:30:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:30:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[14:30:47    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_0/plots/
[14:30:54        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_0/plots output/PAUS_advanced17/regres/train/ANNZ_0/plots_biasCor_before
[14:30:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:30:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[14:30:57    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_0/plots/
[14:31:03        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_0/plots output/PAUS_advanced17/regres/train/ANNZ_0/plots_biasCor_after
[14:31:03    INFO]  - Got original [KS-test,N_poiss]: [0.0706193 , 5.7458] , after the bias-correction: [0.069679 , 5.63183] --> will KEEP the correction !

(14:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=94629:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:31 INFO) 
[14:31:06    INFO]  -----------------------------------------------------
[14:31:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:31:06    INFO]  -----------------------------------------------------------------------------------------------------------
[14:31:08    INFO]  - starting ANNZ::Init()  ... 
[14:31:10    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_1/saveOpt.txt ...
[14:31:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:31:28    INFO] ----------------------------------------------------------------------------------------------------
[14:31:28    INFO]  - will book (ANNZ_1) method(ANN) with options: :HiddenLayers=N+1,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=94629:VarTransform=N,P
[14:31:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:31:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[14:31:28    INFO]      cuts (train):        ,
[14:31:28    INFO]      cuts (valid):       
[14:31:28    INFO]    - weights:            1
[14:31:28    INFO] ----------------------------------------------------------------------------------------------------
[14:31:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:38:33    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[15:38:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[15:38:38    INFO]  - Will gen. input-parameter errors ...
[15:38:39    INFO]  - starting ANNZ::loadReaders() ... 
[15:38:42    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[15:39:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:39:16    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:39:16    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:39:16    INFO]  -----------------------------------------------------------------------------------------------------------
[15:39:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:39:29    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:39:29    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[15:39:29    INFO]  -----------------------------------------------------------------------------------------------------------
[15:39:29    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[15:39:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:39:40    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:39:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[15:39:40    INFO]  -----------------------------------------------------------------------------------------------------------
[15:39:41    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:39:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:39:41    INFO]  - will try to derive a bias correction ... 
[15:39:41    INFO]  - will validate that training produced an XML file for later ... 
[15:39:41    INFO]  - starting ANNZ::loadReaders() ... 
[15:39:44    INFO]  - will validate that the training was not a complete failure ... 
[15:39:44    INFO]  - training seems to have been successful! will move on ...
[15:39:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:39:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:39:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:39:48    INFO] ----------------------------------------------------------------------------------------------------
[15:39:48    INFO]  - will book (ANNZ_1_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[15:39:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:39:48    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[15:39:48    INFO]    - weights:            1
[15:39:48    INFO] ----------------------------------------------------------------------------------------------------
[15:39:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:05:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[17:05:15    INFO]  - Will gen. input-parameter errors ...
[17:05:17    INFO]  - starting ANNZ::loadReaders() ... 
[17:05:21    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[17:06:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:06:29    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:06:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:06:29    INFO]  -----------------------------------------------------------------------------------------------------------
[17:06:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:06:53    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:06:53    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:06:53    INFO]  -----------------------------------------------------------------------------------------------------------
[17:06:53    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[17:07:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:07:16    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:07:16    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:07:16    INFO]  -----------------------------------------------------------------------------------------------------------
[17:07:16    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:07:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:07:17    INFO]  - will validate that the bias-correction actually improved the result ...
[17:07:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:07:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[17:07:21    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_1/plots/
[17:07:27        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_1/plots output/PAUS_advanced17/regres/train/ANNZ_1/plots_biasCor_before
[17:07:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:07:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[17:07:30    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_1/plots/
[17:07:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_1/plots output/PAUS_advanced17/regres/train/ANNZ_1/plots_biasCor_after
[17:07:36    INFO]  - Got original [KS-test,N_poiss]: [0.111172 , 8.02078] , after the bias-correction: [0.111629 , 8.03229] --> will KEEP the correction !

(17:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=49158:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:07 INFO) 
[17:07:39    INFO]  -----------------------------------------------------
[17:07:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:07:39    INFO]  -----------------------------------------------------------------------------------------------------------
[17:07:40    INFO]  - starting ANNZ::Init()  ... 
[17:07:41    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_2/saveOpt.txt ...
[17:07:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:07:57    INFO] ----------------------------------------------------------------------------------------------------
[17:07:57    INFO]  - will book (ANNZ_2) method(ANN) with options: :HiddenLayers=N+1,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=49158:VarTransform=N,P
[17:07:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:07:57    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[17:07:57    INFO]      cuts (train):        ,
[17:07:57    INFO]      cuts (valid):       
[17:07:57    INFO]    - weights:            1
[17:07:57    INFO] ----------------------------------------------------------------------------------------------------
[17:07:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 7 diag elements < tolerance of 2.2204e-16
(18:22 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:22 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:22 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:22 INFO) [40;37;1m - 21/02/19 18:22:43 - starting ANNZ[0m
(18:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=52955:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:22 INFO) 
[18:22:43    INFO]  -----------------------------------------------------
[18:22:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:22:43    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:45    INFO]  - starting ANNZ::Init()  ... 
[18:22:45    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[18:22:45    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=75694:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:22 INFO) 
[18:22:45    INFO]  -----------------------------------------------------
[18:22:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:22:45    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:46    INFO]  - starting ANNZ::Init()  ... 
[18:22:47    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[18:22:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=49426[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:22 INFO) 
[18:22:47    INFO]  -----------------------------------------------------
[18:22:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:22:47    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:48    INFO]  - starting ANNZ::Init()  ... 
[18:22:50    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_2/saveOpt.txt ...
[18:23:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:23:07    INFO] ----------------------------------------------------------------------------------------------------
[18:23:07    INFO]  - will book (ANNZ_2) method(ANN) with options: :HiddenLayers=N+2,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=49426
[18:23:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:23:07    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:23:07    INFO]      cuts (train):        ,
[18:23:07    INFO]      cuts (valid):       
[18:23:07    INFO]    - weights:            1
[18:23:07    INFO] ----------------------------------------------------------------------------------------------------
[18:23:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::DecomposeLUCrout>: matrix is singular
Error in <TDecompLU::InvertLU>: matrix is singular, 0 diag elements < tolerance of 2.2204e-16
(18:27 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:27 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:27 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:27 INFO) [40;37;1m - 21/02/19 18:27:31 - starting ANNZ[0m
(18:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=57921:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:27 INFO) 
[18:27:31    INFO]  -----------------------------------------------------
[18:27:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:27:31    INFO]  -----------------------------------------------------------------------------------------------------------
[18:27:33    INFO]  - starting ANNZ::Init()  ... 
[18:27:33    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[18:27:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=25035:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:27 INFO) 
[18:27:33    INFO]  -----------------------------------------------------
[18:27:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:27:33    INFO]  -----------------------------------------------------------------------------------------------------------
[18:27:34    INFO]  - starting ANNZ::Init()  ... 
[18:27:35    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[18:27:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=2965:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:27 INFO) 
[18:27:35    INFO]  -----------------------------------------------------
[18:27:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:27:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:27:36    INFO]  - starting ANNZ::Init()  ... 
[18:27:37    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_2/saveOpt.txt ...
[18:27:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:27:53    INFO] ----------------------------------------------------------------------------------------------------
[18:27:53    INFO]  - will book (ANNZ_2) method(ANN) with options: :HiddenLayers=N+2,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=2965:VarTransform=N
[18:27:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:27:53    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:27:53    INFO]      cuts (train):        ,
[18:27:53    INFO]      cuts (valid):       
[18:27:53    INFO]    - weights:            1
[18:27:53    INFO] ----------------------------------------------------------------------------------------------------
[18:27:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:45:22    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[18:45:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[18:45:24    INFO]  - Will gen. input-parameter errors ...
[18:45:25    INFO]  - starting ANNZ::loadReaders() ... 
[18:45:26    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[18:45:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:45:52    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:45:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:45:52    INFO]  -----------------------------------------------------------------------------------------------------------
[18:46:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:46:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:46:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:46:02    INFO]  -----------------------------------------------------------------------------------------------------------
[18:46:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[18:46:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:46:10    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:46:10    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:46:10    INFO]  -----------------------------------------------------------------------------------------------------------
[18:46:11    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:46:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:46:11    INFO]  - will try to derive a bias correction ... 
[18:46:11    INFO]  - will validate that training produced an XML file for later ... 
[18:46:11    INFO]  - starting ANNZ::loadReaders() ... 
[18:46:11    INFO]  - will validate that the training was not a complete failure ... 
[18:46:12    INFO]  - training seems to have been successful! will move on ...
[18:46:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:46:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:46:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:46:16    INFO] ----------------------------------------------------------------------------------------------------
[18:46:16    INFO]  - will book (ANNZ_2_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[18:46:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:46:16    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[18:46:16    INFO]    - weights:            1
[18:46:16    INFO] ----------------------------------------------------------------------------------------------------
[18:46:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:17:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[20:17:49    INFO]  - Will gen. input-parameter errors ...
[20:17:51    INFO]  - starting ANNZ::loadReaders() ... 
[20:17:53    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[20:19:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:19:00    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:19:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:19:00    INFO]  -----------------------------------------------------------------------------------------------------------
[20:19:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:19:23    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:19:23    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:19:23    INFO]  -----------------------------------------------------------------------------------------------------------
[20:19:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[20:19:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:19:46    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:19:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:19:46    INFO]  -----------------------------------------------------------------------------------------------------------
[20:19:46    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:19:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:19:47    INFO]  - will validate that the bias-correction actually improved the result ...
[20:19:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:19:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[20:19:52    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_2/plots/
[20:20:01        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_2/plots output/PAUS_advanced17/regres/train/ANNZ_2/plots_biasCor_before
[20:20:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:20:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[20:20:05    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_2/plots/
[20:20:12        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_2/plots output/PAUS_advanced17/regres/train/ANNZ_2/plots_biasCor_after
[20:20:12    INFO]  - Got original [KS-test,N_poiss]: [0.143023 , 10.0112] , after the bias-correction: [0.138306 , 9.72149] --> will KEEP the correction !

(20:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=34508:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:20 INFO) 
[20:20:16    INFO]  -----------------------------------------------------
[20:20:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:20:16    INFO]  -----------------------------------------------------------------------------------------------------------
[20:20:17    INFO]  - starting ANNZ::Init()  ... 
[20:20:19    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_3/saveOpt.txt ...
[20:20:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:20:40    INFO] ----------------------------------------------------------------------------------------------------
[20:20:40    INFO]  - will book (ANNZ_3) method(ANN) with options: :HiddenLayers=N,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=34508:VarTransform=N,P
[20:20:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:20:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:20:40    INFO]      cuts (train):        ,
[20:20:40    INFO]      cuts (valid):       
[20:20:40    INFO]    - weights:            1
[20:20:40    INFO] ----------------------------------------------------------------------------------------------------
[20:20:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:49:01    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[20:49:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[20:49:06    INFO]  - Will gen. input-parameter errors ...
[20:49:07    INFO]  - starting ANNZ::loadReaders() ... 
[20:49:08    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[20:49:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:49:51    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:49:51    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:49:51    INFO]  -----------------------------------------------------------------------------------------------------------
[20:50:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:50:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:50:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:50:06    INFO]  -----------------------------------------------------------------------------------------------------------
[20:50:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[20:50:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:50:20    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:50:20    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:50:20    INFO]  -----------------------------------------------------------------------------------------------------------
[20:50:20    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:50:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:50:21    INFO]  - will try to derive a bias correction ... 
[20:50:21    INFO]  - will validate that training produced an XML file for later ... 
[20:50:21    INFO]  - starting ANNZ::loadReaders() ... 
[20:50:21    INFO]  - will validate that the training was not a complete failure ... 
[20:50:21    INFO]  - training seems to have been successful! will move on ...
[20:50:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:50:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:50:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:50:26    INFO] ----------------------------------------------------------------------------------------------------
[20:50:26    INFO]  - will book (ANNZ_3_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[20:50:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:50:26    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[20:50:26    INFO]    - weights:            1
[20:50:26    INFO] ----------------------------------------------------------------------------------------------------
[20:50:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:32:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[22:32:57    INFO]  - Will gen. input-parameter errors ...
[22:32:59    INFO]  - starting ANNZ::loadReaders() ... 
[22:33:01    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[22:34:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:34:15    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:34:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:34:15    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:34:41    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:34:41    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:34:41    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:41    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[22:35:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:35:06    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:35:06    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:35:06    INFO]  -----------------------------------------------------------------------------------------------------------
[22:35:06    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:35:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:35:07    INFO]  - will validate that the bias-correction actually improved the result ...
[22:35:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:35:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[22:35:12    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_3/plots/
[22:35:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_3/plots output/PAUS_advanced17/regres/train/ANNZ_3/plots_biasCor_before
[22:35:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:35:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[22:35:23    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_3/plots/
[22:35:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_3/plots output/PAUS_advanced17/regres/train/ANNZ_3/plots_biasCor_after
[22:35:30    INFO]  - Got original [KS-test,N_poiss]: [0.108403 , 6.68535] , after the bias-correction: [0.111026 , 6.72121] --> will KEEP the correction !

(22:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=79275:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:35 INFO) 
[22:35:33    INFO]  -----------------------------------------------------
[22:35:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:35:33    INFO]  -----------------------------------------------------------------------------------------------------------
[22:35:34    INFO]  - starting ANNZ::Init()  ... 
[22:35:36    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_4/saveOpt.txt ...
[22:35:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:35:53    INFO] ----------------------------------------------------------------------------------------------------
[22:35:53    INFO]  - will book (ANNZ_4) method(ANN) with options: :HiddenLayers=N+2,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=79275:VarTransform=N,P
[22:35:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:35:53    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:35:53    INFO]      cuts (train):        ,
[22:35:53    INFO]      cuts (valid):       
[22:35:53    INFO]    - weights:            1
[22:35:53    INFO] ----------------------------------------------------------------------------------------------------
[22:35:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:54:51    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[01:54:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[01:54:56    INFO]  - Will gen. input-parameter errors ...
[01:54:58    INFO]  - starting ANNZ::loadReaders() ... 
[01:54:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[01:55:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:55:39    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:55:39    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:55:39    INFO]  -----------------------------------------------------------------------------------------------------------
[01:55:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:55:53    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:55:53    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:55:53    INFO]  -----------------------------------------------------------------------------------------------------------
[01:55:53    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[01:56:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:56:06    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:56:06    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:56:06    INFO]  -----------------------------------------------------------------------------------------------------------
[01:56:06    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:56:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:56:07    INFO]  - will try to derive a bias correction ... 
[01:56:07    INFO]  - will validate that training produced an XML file for later ... 
[01:56:07    INFO]  - starting ANNZ::loadReaders() ... 
[01:56:07    INFO]  - will validate that the training was not a complete failure ... 
[01:56:08    INFO]  - training seems to have been successful! will move on ...
[01:56:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:56:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:56:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:56:13    INFO] ----------------------------------------------------------------------------------------------------
[01:56:13    INFO]  - will book (ANNZ_4_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[01:56:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:56:13    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:56:13    INFO]    - weights:            1
[01:56:13    INFO] ----------------------------------------------------------------------------------------------------
[01:56:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:41:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[03:41:04    INFO]  - Will gen. input-parameter errors ...
[03:41:06    INFO]  - starting ANNZ::loadReaders() ... 
[03:41:08    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[03:42:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:42:22    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:42:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[03:42:22    INFO]  -----------------------------------------------------------------------------------------------------------
[03:42:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:42:48    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:42:48    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[03:42:48    INFO]  -----------------------------------------------------------------------------------------------------------
[03:42:48    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[03:43:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:43:14    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:43:14    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[03:43:14    INFO]  -----------------------------------------------------------------------------------------------------------
[03:43:14    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:43:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:43:15    INFO]  - will validate that the bias-correction actually improved the result ...
[03:43:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:43:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[03:43:19    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_4/plots/
[03:43:27        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_4/plots output/PAUS_advanced17/regres/train/ANNZ_4/plots_biasCor_before
[03:43:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:43:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[03:43:30    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_4/plots/
[03:43:38        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_4/plots output/PAUS_advanced17/regres/train/ANNZ_4/plots_biasCor_after
[03:43:38    INFO]  - Got original [KS-test,N_poiss]: [0.0798798 , 5.81199] , after the bias-correction: [0.0802997 , 5.77557] --> will KEEP the correction !

(03:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=75061:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:43 INFO) 
[03:43:41    INFO]  -----------------------------------------------------
[03:43:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:43:41    INFO]  -----------------------------------------------------------------------------------------------------------
[03:43:43    INFO]  - starting ANNZ::Init()  ... 
[03:43:44    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_5/saveOpt.txt ...
[03:44:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:44:02    INFO] ----------------------------------------------------------------------------------------------------
[03:44:02    INFO]  - will book (ANNZ_5) method(ANN) with options: :HiddenLayers=N+3,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=75061:VarTransform=N,P
[03:44:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:44:02    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[03:44:02    INFO]      cuts (train):        ,
[03:44:02    INFO]      cuts (valid):       
[03:44:02    INFO]    - weights:            1
[03:44:02    INFO] ----------------------------------------------------------------------------------------------------
[03:44:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:01:21    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[08:01:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[08:01:25    INFO]  - Will gen. input-parameter errors ...
[08:01:26    INFO]  - starting ANNZ::loadReaders() ... 
[08:01:27    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[08:02:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:02:08    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:02:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[08:02:08    INFO]  -----------------------------------------------------------------------------------------------------------
[08:02:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:02:22    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:02:22    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[08:02:22    INFO]  -----------------------------------------------------------------------------------------------------------
[08:02:22    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[08:02:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:02:35    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:02:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[08:02:35    INFO]  -----------------------------------------------------------------------------------------------------------
[08:02:36    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:02:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:02:37    INFO]  - will try to derive a bias correction ... 
[08:02:37    INFO]  - will validate that training produced an XML file for later ... 
[08:02:37    INFO]  - starting ANNZ::loadReaders() ... 
[08:02:37    INFO]  - will validate that the training was not a complete failure ... 
[08:02:37    INFO]  - training seems to have been successful! will move on ...
[08:02:37    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:02:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:02:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:02:42    INFO] ----------------------------------------------------------------------------------------------------
[08:02:42    INFO]  - will book (ANNZ_5_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[08:02:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:02:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[08:02:42    INFO]    - weights:            1
[08:02:42    INFO] ----------------------------------------------------------------------------------------------------
[08:02:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:36:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[09:36:44    INFO]  - Will gen. input-parameter errors ...
[09:36:46    INFO]  - starting ANNZ::loadReaders() ... 
[09:36:48    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[09:38:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:38:03    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:38:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:38:03    INFO]  -----------------------------------------------------------------------------------------------------------
[09:38:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:38:28    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:38:28    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:38:28    INFO]  -----------------------------------------------------------------------------------------------------------
[09:38:28    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[09:38:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:38:53    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:38:53    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:38:53    INFO]  -----------------------------------------------------------------------------------------------------------
[09:38:53    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:38:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:38:54    INFO]  - will validate that the bias-correction actually improved the result ...
[09:38:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:38:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[09:38:58    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_5/plots/
[09:39:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_5/plots output/PAUS_advanced17/regres/train/ANNZ_5/plots_biasCor_before
[09:39:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:39:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[09:39:08    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_5/plots/
[09:39:15        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_5/plots output/PAUS_advanced17/regres/train/ANNZ_5/plots_biasCor_after
[09:39:15    INFO]  - Got original [KS-test,N_poiss]: [0.0765592 , 5.70758] , after the bias-correction: [0.0770913 , 5.70452] --> will KEEP the correction !

(09:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=883:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:39 INFO) 
[09:39:19    INFO]  -----------------------------------------------------
[09:39:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:39:19    INFO]  -----------------------------------------------------------------------------------------------------------
[09:39:21    INFO]  - starting ANNZ::Init()  ... 
[09:39:22    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_6/saveOpt.txt ...
[09:39:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:39:42    INFO] ----------------------------------------------------------------------------------------------------
[09:39:42    INFO]  - will book (ANNZ_6) method(ANN) with options: :HiddenLayers=N+2,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=883:VarTransform=N,P
[09:39:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:39:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:39:42    INFO]      cuts (train):        ,
[09:39:42    INFO]      cuts (valid):       
[09:39:42    INFO]    - weights:            1
[09:39:42    INFO] ----------------------------------------------------------------------------------------------------
[09:39:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:08:43    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[14:08:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[14:08:45    INFO]  - Will gen. input-parameter errors ...
[14:08:47    INFO]  - starting ANNZ::loadReaders() ... 
[14:08:48    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[14:09:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:09:27    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:09:27    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:09:27    INFO]  -----------------------------------------------------------------------------------------------------------
[14:09:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:09:41    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:09:41    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[14:09:41    INFO]  -----------------------------------------------------------------------------------------------------------
[14:09:41    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[14:09:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:09:54    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:09:54    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[14:09:54    INFO]  -----------------------------------------------------------------------------------------------------------
[14:09:54    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:09:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:09:55    INFO]  - will try to derive a bias correction ... 
[14:09:55    INFO]  - will validate that training produced an XML file for later ... 
[14:09:55    INFO]  - starting ANNZ::loadReaders() ... 
[14:09:55    INFO]  - will validate that the training was not a complete failure ... 
[14:09:55    INFO]  - training seems to have been successful! will move on ...
[14:09:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:09:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:09:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:10:00    INFO] ----------------------------------------------------------------------------------------------------
[14:10:00    INFO]  - will book (ANNZ_6_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[14:10:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:10:00    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[14:10:00    INFO]    - weights:            1
[14:10:00    INFO] ----------------------------------------------------------------------------------------------------
[14:10:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:53:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[15:53:12    INFO]  - Will gen. input-parameter errors ...
[15:53:13    INFO]  - starting ANNZ::loadReaders() ... 
[15:53:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[15:54:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:54:29    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:54:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:54:29    INFO]  -----------------------------------------------------------------------------------------------------------
[15:54:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:54:55    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:54:55    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[15:54:55    INFO]  -----------------------------------------------------------------------------------------------------------
[15:54:55    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[15:55:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:55:20    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:55:20    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[15:55:20    INFO]  -----------------------------------------------------------------------------------------------------------
[15:55:20    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:55:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:55:21    INFO]  - will validate that the bias-correction actually improved the result ...
[15:55:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:55:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[15:55:26    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_6/plots/
[15:55:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_6/plots output/PAUS_advanced17/regres/train/ANNZ_6/plots_biasCor_before
[15:55:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:55:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[15:55:37    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_6/plots/
[15:55:44        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_6/plots output/PAUS_advanced17/regres/train/ANNZ_6/plots_biasCor_after
[15:55:44    INFO]  - Got original [KS-test,N_poiss]: [0.0747179 , 5.5562] , after the bias-correction: [0.0757222 , 5.56221] --> will KEEP the correction !

(15:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=88006:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:55 INFO) 
[15:55:48    INFO]  -----------------------------------------------------
[15:55:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:55:48    INFO]  -----------------------------------------------------------------------------------------------------------
[15:55:51    INFO]  - starting ANNZ::Init()  ... 
[15:55:52    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_7/saveOpt.txt ...
[15:56:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:56:14    INFO] ----------------------------------------------------------------------------------------------------
[15:56:14    INFO]  - will book (ANNZ_7) method(ANN) with options: :HiddenLayers=N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=88006:VarTransform=N,P
[15:56:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:56:14    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[15:56:14    INFO]      cuts (train):        ,
[15:56:14    INFO]      cuts (valid):       
[15:56:14    INFO]    - weights:            1
[15:56:14    INFO] ----------------------------------------------------------------------------------------------------
[15:56:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 10 diag elements < tolerance of 2.2204e-16
[17:19:52    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[17:19:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[17:19:55    INFO]  - Will gen. input-parameter errors ...
[17:19:56    INFO]  - starting ANNZ::loadReaders() ... 
[17:20:00    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[17:20:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:20:39    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:20:39    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:20:39    INFO]  -----------------------------------------------------------------------------------------------------------
[17:20:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:20:52    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:20:52    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:20:52    INFO]  -----------------------------------------------------------------------------------------------------------
[17:20:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[17:21:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:21:05    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:21:05    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:21:05    INFO]  -----------------------------------------------------------------------------------------------------------
[17:21:05    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:21:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:21:06    INFO]  - will try to derive a bias correction ... 
[17:21:06    INFO]  - will validate that training produced an XML file for later ... 
[17:21:06    INFO]  - starting ANNZ::loadReaders() ... 
[17:21:08    INFO]  - will validate that the training was not a complete failure ... 
[17:21:08    INFO]  - training seems to have been successful! will move on ...
[17:21:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:21:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:21:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:21:13    INFO] ----------------------------------------------------------------------------------------------------
[17:21:13    INFO]  - will book (ANNZ_7_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[17:21:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:21:13    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[17:21:13    INFO]    - weights:            1
[17:21:13    INFO] ----------------------------------------------------------------------------------------------------
[17:21:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 1 diag elements < tolerance of 2.2204e-16
[18:48:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[18:48:57    INFO]  - Will gen. input-parameter errors ...
[18:48:59    INFO]  - starting ANNZ::loadReaders() ... 
[18:49:04    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[18:50:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:50:15    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:50:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:50:15    INFO]  -----------------------------------------------------------------------------------------------------------
[18:50:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:50:40    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:50:40    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:50:40    INFO]  -----------------------------------------------------------------------------------------------------------
[18:50:40    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[18:51:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:51:04    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:51:04    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:51:04    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:05    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:51:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:51:06    INFO]  - will validate that the bias-correction actually improved the result ...
[18:51:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:51:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[18:51:10    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_7/plots/
[18:51:17        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_7/plots output/PAUS_advanced17/regres/train/ANNZ_7/plots_biasCor_before
[18:51:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:51:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[18:51:20    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_7/plots/
[18:51:27        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_7/plots output/PAUS_advanced17/regres/train/ANNZ_7/plots_biasCor_after
[18:51:27    INFO]  - Got original [KS-test,N_poiss]: [0.194546 , 12.342] , after the bias-correction: [0.165923 , 11.4147] --> will KEEP the correction !

(18:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=92834:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:51 INFO) 
[18:51:31    INFO]  -----------------------------------------------------
[18:51:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:51:31    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:32    INFO]  - starting ANNZ::Init()  ... 
[18:51:34    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_8/saveOpt.txt ...
[18:51:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:51:54    INFO] ----------------------------------------------------------------------------------------------------
[18:51:54    INFO]  - will book (ANNZ_8) method(ANN) with options: :HiddenLayers=N+2,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=92834:VarTransform=N
[18:51:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:51:54    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:51:54    INFO]      cuts (train):        ,
[18:51:54    INFO]      cuts (valid):       
[18:51:54    INFO]    - weights:            1
[18:51:54    INFO] ----------------------------------------------------------------------------------------------------
[18:51:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:41:17    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[22:41:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[22:41:21    INFO]  - Will gen. input-parameter errors ...
[22:41:23    INFO]  - starting ANNZ::loadReaders() ... 
[22:41:24    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[22:41:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:41:47    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:41:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:41:47    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:41:56    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:41:56    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:41:56    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:56    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[22:42:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:42:04    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:42:04    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:42:04    INFO]  -----------------------------------------------------------------------------------------------------------
[22:42:04    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:42:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:42:04    INFO]  - will try to derive a bias correction ... 
[22:42:04    INFO]  - will validate that training produced an XML file for later ... 
[22:42:04    INFO]  - starting ANNZ::loadReaders() ... 
[22:42:04    INFO]  - will validate that the training was not a complete failure ... 
[22:42:05    INFO]  - training seems to have been successful! will move on ...
[22:42:05    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:42:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:42:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:42:09    INFO] ----------------------------------------------------------------------------------------------------
[22:42:09    INFO]  - will book (ANNZ_8_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[22:42:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:42:09    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:42:09    INFO]    - weights:            1
[22:42:09    INFO] ----------------------------------------------------------------------------------------------------
[22:42:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:47:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[23:47:17    INFO]  - Will gen. input-parameter errors ...
[23:47:18    INFO]  - starting ANNZ::loadReaders() ... 
[23:47:20    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[23:48:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:48:15    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:48:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:48:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:48:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:48:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:48:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:48:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:48:35    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[23:48:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:48:53    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:48:53    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:48:53    INFO]  -----------------------------------------------------------------------------------------------------------
[23:48:54    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:48:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:48:54    INFO]  - will validate that the bias-correction actually improved the result ...
[23:48:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:48:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[23:48:58    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_8/plots/
[23:49:03        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_8/plots output/PAUS_advanced17/regres/train/ANNZ_8/plots_biasCor_before
[23:49:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:49:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[23:49:06    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_8/plots/
[23:49:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_8/plots output/PAUS_advanced17/regres/train/ANNZ_8/plots_biasCor_after
[23:49:11    INFO]  - Got original [KS-test,N_poiss]: [0.0814064 , 5.31453] , after the bias-correction: [0.0827355 , 5.34051] --> will KEEP the correction !

(23:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=25695[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:49 INFO) 
[23:49:14    INFO]  -----------------------------------------------------
[23:49:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:49:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:49:15    INFO]  - starting ANNZ::Init()  ... 
[23:49:16    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_9/saveOpt.txt ...
[23:49:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:49:32    INFO] ----------------------------------------------------------------------------------------------------
[23:49:32    INFO]  - will book (ANNZ_9) method(ANN) with options: :HiddenLayers=N+3,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=25695:VarTransform=N
[23:49:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:49:32    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:49:32    INFO]      cuts (train):        ,
[23:49:32    INFO]      cuts (valid):       
[23:49:32    INFO]    - weights:            1
[23:49:32    INFO] ----------------------------------------------------------------------------------------------------
[23:49:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:57:01    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[00:57:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[00:57:05    INFO]  - Will gen. input-parameter errors ...
[00:57:07    INFO]  - starting ANNZ::loadReaders() ... 
[00:57:07    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[00:57:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:57:29    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:57:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:57:29    INFO]  -----------------------------------------------------------------------------------------------------------
[00:57:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:57:37    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:57:37    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:57:37    INFO]  -----------------------------------------------------------------------------------------------------------
[00:57:37    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[00:57:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:57:44    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:57:44    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:57:44    INFO]  -----------------------------------------------------------------------------------------------------------
[00:57:44    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:57:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:57:45    INFO]  - will try to derive a bias correction ... 
[00:57:45    INFO]  - will validate that training produced an XML file for later ... 
[00:57:45    INFO]  - starting ANNZ::loadReaders() ... 
[00:57:45    INFO]  - will validate that the training was not a complete failure ... 
[00:57:45    INFO]  - training seems to have been successful! will move on ...
[00:57:45    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:57:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:57:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:57:49    INFO] ----------------------------------------------------------------------------------------------------
[00:57:49    INFO]  - will book (ANNZ_9_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[00:57:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:57:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[00:57:49    INFO]    - weights:            1
[00:57:49    INFO] ----------------------------------------------------------------------------------------------------
[00:57:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:58:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[01:58:13    INFO]  - Will gen. input-parameter errors ...
[01:58:14    INFO]  - starting ANNZ::loadReaders() ... 
[01:58:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[01:59:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:59:13    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:59:13    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:59:13    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:59:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:59:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:59:32    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[01:59:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:59:50    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:59:50    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:59:50    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:50    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:59:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:59:51    INFO]  - will validate that the bias-correction actually improved the result ...
[01:59:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:59:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[01:59:55    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_9/plots/
[02:00:00        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_9/plots output/PAUS_advanced17/regres/train/ANNZ_9/plots_biasCor_before
[02:00:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:00:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[02:00:03    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_9/plots/
[02:00:08        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_9/plots output/PAUS_advanced17/regres/train/ANNZ_9/plots_biasCor_after
[02:00:08    INFO]  - Got original [KS-test,N_poiss]: [0.0885423 , 5.84034] , after the bias-correction: [0.0868802 , 5.81029] --> will KEEP the correction !

(02:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+5,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=81270:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:00 INFO) 
[02:00:11    INFO]  -----------------------------------------------------
[02:00:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:00:11    INFO]  -----------------------------------------------------------------------------------------------------------
[02:00:12    INFO]  - starting ANNZ::Init()  ... 
[02:00:14    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_10/saveOpt.txt ...
[02:00:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:00:30    INFO] ----------------------------------------------------------------------------------------------------
[02:00:30    INFO]  - will book (ANNZ_10) method(ANN) with options: :HiddenLayers=N,N+5,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=81270:VarTransform=N,P
[02:00:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:00:30    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:00:30    INFO]      cuts (train):        ,
[02:00:30    INFO]      cuts (valid):       
[02:00:30    INFO]    - weights:            1
[02:00:30    INFO] ----------------------------------------------------------------------------------------------------
[02:00:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::DecomposeLUCrout>: matrix is singular
Error in <TDecompLU::InvertLU>: matrix is singular, 172 diag elements < tolerance of 2.2204e-16
Error in <TDecompLU::DecomposeLUCrout>: matrix is singular
Error in <TDecompLU::InvertLU>: matrix is singular, 142 diag elements < tolerance of 2.2204e-16
(16:46 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:46 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:46 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:46 INFO) [40;37;1m - 24/02/19 16:46:11 - starting ANNZ[0m
(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=54744:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:11    INFO]  -----------------------------------------------------
[16:46:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:11    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:12    INFO]  - starting ANNZ::Init()  ... 
[16:46:12    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[16:46:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=66286:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:12    INFO]  -----------------------------------------------------
[16:46:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:14    INFO]  - starting ANNZ::Init()  ... 
[16:46:14    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[16:46:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=20750:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:14    INFO]  -----------------------------------------------------
[16:46:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:14    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:16    INFO]  - starting ANNZ::Init()  ... 
[16:46:16    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced17/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[16:46:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=13593:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:16    INFO]  -----------------------------------------------------
[16:46:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:18    INFO]  - starting ANNZ::Init()  ... 
[16:46:18    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced17/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[16:46:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=86599:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:18    INFO]  -----------------------------------------------------
[16:46:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:18    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:20    INFO]  - starting ANNZ::Init()  ... 
[16:46:20    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced17/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[16:46:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=28319:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:20    INFO]  -----------------------------------------------------
[16:46:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:20    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:21    INFO]  - starting ANNZ::Init()  ... 
[16:46:21    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced17/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[16:46:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=61108:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:22    INFO]  -----------------------------------------------------
[16:46:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:22    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:23    INFO]  - starting ANNZ::Init()  ... 
[16:46:23    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced17/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[16:46:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=20902:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:23    INFO]  -----------------------------------------------------
[16:46:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:23    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:25    INFO]  - starting ANNZ::Init()  ... 
[16:46:25    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced17/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[16:46:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=60280[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:26    INFO]  -----------------------------------------------------
[16:46:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:26    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:27    INFO]  - starting ANNZ::Init()  ... 
[16:46:27    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced17/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[16:46:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=62214:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:27    INFO]  -----------------------------------------------------
[16:46:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:27    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:29    INFO]  - starting ANNZ::Init()  ... 
[16:46:29    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced17/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[16:46:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=74670:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:46 INFO) 
[16:46:29    INFO]  -----------------------------------------------------
[16:46:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:46:29    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:31    INFO]  - starting ANNZ::Init()  ... 
[16:46:32    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_10/saveOpt.txt ...
[16:46:52    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:46:52    INFO] ----------------------------------------------------------------------------------------------------
[16:46:52    INFO]  - will book (ANNZ_10) method(ANN) with options: :HiddenLayers=N+1,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=74670:VarTransform=N
[16:46:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:46:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:46:52    INFO]      cuts (train):        ,
[16:46:52    INFO]      cuts (valid):       
[16:46:52    INFO]    - weights:            1
[16:46:52    INFO] ----------------------------------------------------------------------------------------------------
[16:46:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:08:01    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[17:08:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[17:08:04    INFO]  - Will gen. input-parameter errors ...
[17:08:05    INFO]  - starting ANNZ::loadReaders() ... 
[17:08:06    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[17:08:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:08:26    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:08:26    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:08:26    INFO]  -----------------------------------------------------------------------------------------------------------
[17:08:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:08:34    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:08:34    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:08:34    INFO]  -----------------------------------------------------------------------------------------------------------
[17:08:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[17:08:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:08:40    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:08:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:08:40    INFO]  -----------------------------------------------------------------------------------------------------------
[17:08:41    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:08:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:08:41    INFO]  - will try to derive a bias correction ... 
[17:08:41    INFO]  - will validate that training produced an XML file for later ... 
[17:08:41    INFO]  - starting ANNZ::loadReaders() ... 
[17:08:41    INFO]  - will validate that the training was not a complete failure ... 
[17:08:41    INFO]  - training seems to have been successful! will move on ...
[17:08:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:08:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:08:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:08:46    INFO] ----------------------------------------------------------------------------------------------------
[17:08:46    INFO]  - will book (ANNZ_10_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[17:08:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:08:46    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[17:08:46    INFO]    - weights:            1
[17:08:46    INFO] ----------------------------------------------------------------------------------------------------
[17:08:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:12:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[18:12:21    INFO]  - Will gen. input-parameter errors ...
[18:12:23    INFO]  - starting ANNZ::loadReaders() ... 
[18:12:25    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[18:13:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:13:18    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:13:18    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:13:18    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:13:37    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:13:37    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:13:37    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:37    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[18:13:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:13:55    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:13:55    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:13:55    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:55    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:13:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:13:56    INFO]  - will validate that the bias-correction actually improved the result ...
[18:13:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:13:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[18:13:59    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_10/plots/
[18:14:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_10/plots output/PAUS_advanced17/regres/train/ANNZ_10/plots_biasCor_before
[18:14:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:14:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[18:14:08    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_10/plots/
[18:14:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_10/plots output/PAUS_advanced17/regres/train/ANNZ_10/plots_biasCor_after
[18:14:14    INFO]  - Got original [KS-test,N_poiss]: [0.177384 , 10.543] , after the bias-correction: [0.150823 , 9.91784] --> will KEEP the correction !

(18:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=79679[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:14 INFO) 
[18:14:17    INFO]  -----------------------------------------------------
[18:14:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:14:17    INFO]  -----------------------------------------------------------------------------------------------------------
[18:14:19    INFO]  - starting ANNZ::Init()  ... 
[18:14:20    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_11/saveOpt.txt ...
[18:14:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:14:40    INFO] ----------------------------------------------------------------------------------------------------
[18:14:40    INFO]  - will book (ANNZ_11) method(ANN) with options: :HiddenLayers=N+3,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=79679:VarTransform=N,P
[18:14:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:14:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:14:40    INFO]      cuts (train):        ,
[18:14:40    INFO]      cuts (valid):       
[18:14:40    INFO]    - weights:            1
[18:14:40    INFO] ----------------------------------------------------------------------------------------------------
[18:14:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:21:24    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[20:21:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[20:21:26    INFO]  - Will gen. input-parameter errors ...
[20:21:28    INFO]  - starting ANNZ::loadReaders() ... 
[20:21:28    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[20:22:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:22:04    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:22:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:22:04    INFO]  -----------------------------------------------------------------------------------------------------------
[20:22:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:22:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:22:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:22:17    INFO]  -----------------------------------------------------------------------------------------------------------
[20:22:17    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[20:22:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:22:29    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:22:29    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:22:29    INFO]  -----------------------------------------------------------------------------------------------------------
[20:22:30    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:22:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:22:31    INFO]  - will try to derive a bias correction ... 
[20:22:31    INFO]  - will validate that training produced an XML file for later ... 
[20:22:31    INFO]  - starting ANNZ::loadReaders() ... 
[20:22:31    INFO]  - will validate that the training was not a complete failure ... 
[20:22:31    INFO]  - training seems to have been successful! will move on ...
[20:22:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:22:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:22:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:22:35    INFO] ----------------------------------------------------------------------------------------------------
[20:22:35    INFO]  - will book (ANNZ_11_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[20:22:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:22:35    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[20:22:35    INFO]    - weights:            1
[20:22:35    INFO] ----------------------------------------------------------------------------------------------------
[20:22:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:38:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[21:38:31    INFO]  - Will gen. input-parameter errors ...
[21:38:33    INFO]  - starting ANNZ::loadReaders() ... 
[21:38:35    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[21:39:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:39:44    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:39:44    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:39:44    INFO]  -----------------------------------------------------------------------------------------------------------
[21:40:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:40:07    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:40:07    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:40:07    INFO]  -----------------------------------------------------------------------------------------------------------
[21:40:07    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[21:40:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:40:31    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:40:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:40:31    INFO]  -----------------------------------------------------------------------------------------------------------
[21:40:31    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:40:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:40:32    INFO]  - will validate that the bias-correction actually improved the result ...
[21:40:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:40:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[21:40:36    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_11/plots/
[21:40:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_11/plots output/PAUS_advanced17/regres/train/ANNZ_11/plots_biasCor_before
[21:40:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:40:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[21:40:45    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_11/plots/
[21:40:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_11/plots output/PAUS_advanced17/regres/train/ANNZ_11/plots_biasCor_after
[21:40:51    INFO]  - Got original [KS-test,N_poiss]: [0.0866742 , 5.99561] , after the bias-correction: [0.0921625 , 6.11275] --> will KEEP the correction !

(21:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=82835:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:40 INFO) 
[21:40:54    INFO]  -----------------------------------------------------
[21:40:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:40:54    INFO]  -----------------------------------------------------------------------------------------------------------
[21:40:55    INFO]  - starting ANNZ::Init()  ... 
[21:40:57    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_12/saveOpt.txt ...
[21:41:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:41:15    INFO] ----------------------------------------------------------------------------------------------------
[21:41:15    INFO]  - will book (ANNZ_12) method(ANN) with options: :HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=82835:VarTransform=N
[21:41:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:41:15    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:41:15    INFO]      cuts (train):        ,
[21:41:15    INFO]      cuts (valid):       
[21:41:15    INFO]    - weights:            1
[21:41:15    INFO] ----------------------------------------------------------------------------------------------------
[21:41:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 106 diag elements < tolerance of 2.2204e-16
(23:27 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:27 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:27 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:27 INFO) [40;37;1m - 24/02/19 23:27:14 - starting ANNZ[0m
(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=7466:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:14    INFO]  -----------------------------------------------------
[23:27:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:14    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:16    INFO]  - starting ANNZ::Init()  ... 
[23:27:16    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[23:27:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=20548:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:16    INFO]  -----------------------------------------------------
[23:27:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:18    INFO]  - starting ANNZ::Init()  ... 
[23:27:18    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[23:27:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=6051:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:18    INFO]  -----------------------------------------------------
[23:27:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:18    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:20    INFO]  - starting ANNZ::Init()  ... 
[23:27:20    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced17/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[23:27:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=51395:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:20    INFO]  -----------------------------------------------------
[23:27:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:22    INFO]  - starting ANNZ::Init()  ... 
[23:27:22    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced17/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[23:27:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=14391:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:22    INFO]  -----------------------------------------------------
[23:27:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:23    INFO]  - starting ANNZ::Init()  ... 
[23:27:23    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced17/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[23:27:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=61475:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:24    INFO]  -----------------------------------------------------
[23:27:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:25    INFO]  - starting ANNZ::Init()  ... 
[23:27:25    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced17/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[23:27:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=39626:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:25    INFO]  -----------------------------------------------------
[23:27:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:25    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:27    INFO]  - starting ANNZ::Init()  ... 
[23:27:27    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced17/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[23:27:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=61393[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:27    INFO]  -----------------------------------------------------
[23:27:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:29    INFO]  - starting ANNZ::Init()  ... 
[23:27:29    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced17/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[23:27:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=77761:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:29    INFO]  -----------------------------------------------------
[23:27:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:29    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:31    INFO]  - starting ANNZ::Init()  ... 
[23:27:31    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced17/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[23:27:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=10328:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:31    INFO]  -----------------------------------------------------
[23:27:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:33    INFO]  - starting ANNZ::Init()  ... 
[23:27:33    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced17/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[23:27:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=69101:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:33    INFO]  -----------------------------------------------------
[23:27:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:34    INFO]  - starting ANNZ::Init()  ... 
[23:27:34    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced17/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[23:27:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+6,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=57786:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:35    INFO]  -----------------------------------------------------
[23:27:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:36    INFO]  - starting ANNZ::Init()  ... 
[23:27:36    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced17/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[23:27:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=27807:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:27 INFO) 
[23:27:36    INFO]  -----------------------------------------------------
[23:27:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:27:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:38    INFO]  - starting ANNZ::Init()  ... 
[23:27:40    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_12/saveOpt.txt ...
[23:27:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:27:59    INFO] ----------------------------------------------------------------------------------------------------
[23:27:59    INFO]  - will book (ANNZ_12) method(ANN) with options: :HiddenLayers=N+3,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=27807:VarTransform=N,P
[23:27:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:27:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:27:59    INFO]      cuts (train):        ,
[23:27:59    INFO]      cuts (valid):       
[23:27:59    INFO]    - weights:            1
[23:27:59    INFO] ----------------------------------------------------------------------------------------------------
[23:27:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 1 diag elements < tolerance of 2.2204e-16
[03:05:45    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[03:05:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[03:05:49    INFO]  - Will gen. input-parameter errors ...
[03:05:50    INFO]  - starting ANNZ::loadReaders() ... 
[03:05:54    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[03:06:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:06:27    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:06:27    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[03:06:27    INFO]  -----------------------------------------------------------------------------------------------------------
[03:06:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:06:39    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:06:39    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[03:06:39    INFO]  -----------------------------------------------------------------------------------------------------------
[03:06:39    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[03:06:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:06:50    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:06:50    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[03:06:50    INFO]  -----------------------------------------------------------------------------------------------------------
[03:06:50    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:06:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:06:51    INFO]  - will try to derive a bias correction ... 
[03:06:51    INFO]  - will validate that training produced an XML file for later ... 
[03:06:51    INFO]  - starting ANNZ::loadReaders() ... 
[03:06:54    INFO]  - will validate that the training was not a complete failure ... 
[03:06:54    INFO]  - training seems to have been successful! will move on ...
[03:06:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:06:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:06:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:06:58    INFO] ----------------------------------------------------------------------------------------------------
[03:06:58    INFO]  - will book (ANNZ_12_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[03:06:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:06:58    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[03:06:58    INFO]    - weights:            1
[03:06:58    INFO] ----------------------------------------------------------------------------------------------------
[03:06:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:08:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[04:08:41    INFO]  - Will gen. input-parameter errors ...
[04:08:43    INFO]  - starting ANNZ::loadReaders() ... 
[04:08:47    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[04:09:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:09:52    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:09:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[04:09:52    INFO]  -----------------------------------------------------------------------------------------------------------
[04:10:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:10:15    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:10:15    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[04:10:15    INFO]  -----------------------------------------------------------------------------------------------------------
[04:10:15    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[04:10:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:10:36    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:10:36    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[04:10:36    INFO]  -----------------------------------------------------------------------------------------------------------
[04:10:37    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:10:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:10:37    INFO]  - will validate that the bias-correction actually improved the result ...
[04:10:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:10:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[04:10:41    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_12/plots/
[04:10:47        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_12/plots output/PAUS_advanced17/regres/train/ANNZ_12/plots_biasCor_before
[04:10:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:10:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[04:10:49    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_12/plots/
[04:10:55        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_12/plots output/PAUS_advanced17/regres/train/ANNZ_12/plots_biasCor_after
[04:10:55    INFO]  - Got original [KS-test,N_poiss]: [0.0962236 , 6.26002] , after the bias-correction: [0.0956313 , 6.20071] --> will KEEP the correction !

(04:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=79536:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:10 INFO) 
[04:10:58    INFO]  -----------------------------------------------------
[04:10:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:10:58    INFO]  -----------------------------------------------------------------------------------------------------------
[04:10:59    INFO]  - starting ANNZ::Init()  ... 
[04:11:01    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_13/saveOpt.txt ...
[04:11:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:11:19    INFO] ----------------------------------------------------------------------------------------------------
[04:11:19    INFO]  - will book (ANNZ_13) method(ANN) with options: :HiddenLayers=N+2,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=79536:VarTransform=N
[04:11:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:11:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[04:11:19    INFO]      cuts (train):        ,
[04:11:19    INFO]      cuts (valid):       
[04:11:19    INFO]    - weights:            1
[04:11:19    INFO] ----------------------------------------------------------------------------------------------------
[04:11:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 54 diag elements < tolerance of 2.2204e-16
[04:52:38    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[04:52:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[04:52:42    INFO]  - Will gen. input-parameter errors ...
[04:52:43    INFO]  - starting ANNZ::loadReaders() ... 
[04:52:46    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[04:53:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:53:09    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:53:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[04:53:09    INFO]  -----------------------------------------------------------------------------------------------------------
[04:53:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:53:16    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:53:16    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[04:53:16    INFO]  -----------------------------------------------------------------------------------------------------------
[04:53:16    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[04:53:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:53:24    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:53:24    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[04:53:24    INFO]  -----------------------------------------------------------------------------------------------------------
[04:53:24    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:53:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:53:25    INFO]  - will try to derive a bias correction ... 
[04:53:25    INFO]  - will validate that training produced an XML file for later ... 
[04:53:25    INFO]  - starting ANNZ::loadReaders() ... 
[04:53:27    INFO]  - will validate that the training was not a complete failure ... 
[04:53:27    INFO]  - training seems to have been successful! will move on ...
[04:53:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:53:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:53:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:53:32    INFO] ----------------------------------------------------------------------------------------------------
[04:53:32    INFO]  - will book (ANNZ_13_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[04:53:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:53:32    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[04:53:32    INFO]    - weights:            1
[04:53:32    INFO] ----------------------------------------------------------------------------------------------------
[04:53:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:49:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[05:49:49    INFO]  - Will gen. input-parameter errors ...
[05:49:50    INFO]  - starting ANNZ::loadReaders() ... 
[05:49:54    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[05:50:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:50:47    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:50:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:50:47    INFO]  -----------------------------------------------------------------------------------------------------------
[05:51:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:51:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:51:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:51:06    INFO]  -----------------------------------------------------------------------------------------------------------
[05:51:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[05:51:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:51:24    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:51:24    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:51:24    INFO]  -----------------------------------------------------------------------------------------------------------
[05:51:24    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:51:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:51:25    INFO]  - will validate that the bias-correction actually improved the result ...
[05:51:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:51:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[05:51:28    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_13/plots/
[05:51:34        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_13/plots output/PAUS_advanced17/regres/train/ANNZ_13/plots_biasCor_before
[05:51:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:51:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[05:51:36    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_13/plots/
[05:51:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_13/plots output/PAUS_advanced17/regres/train/ANNZ_13/plots_biasCor_after
[05:51:42    INFO]  - Got original [KS-test,N_poiss]: [0.316144 , 20.8031] , after the bias-correction: [0.168835 , 11.6312] --> will KEEP the correction !

(05:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=90787:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:51 INFO) 
[05:51:45    INFO]  -----------------------------------------------------
[05:51:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:51:45    INFO]  -----------------------------------------------------------------------------------------------------------
[05:51:46    INFO]  - starting ANNZ::Init()  ... 
[05:51:48    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_14/saveOpt.txt ...
[05:52:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:52:06    INFO] ----------------------------------------------------------------------------------------------------
[05:52:06    INFO]  - will book (ANNZ_14) method(ANN) with options: :HiddenLayers=N+2,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=90787:VarTransform=N,P
[05:52:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:52:06    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:52:06    INFO]      cuts (train):        ,
[05:52:06    INFO]      cuts (valid):       
[05:52:06    INFO]    - weights:            1
[05:52:06    INFO] ----------------------------------------------------------------------------------------------------
[05:52:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 12 diag elements < tolerance of 2.2204e-16
(10:12 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(10:12 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(10:12 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(10:12 INFO) [40;37;1m - 25/02/19 10:12:57 - starting ANNZ[0m
(10:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=30430:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:12 INFO) 
[10:12:57    INFO]  -----------------------------------------------------
[10:12:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:12:57    INFO]  -----------------------------------------------------------------------------------------------------------
[10:12:58    INFO]  - starting ANNZ::Init()  ... 
[10:12:58    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[10:12:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=69264:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:12 INFO) 
[10:12:58    INFO]  -----------------------------------------------------
[10:12:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:12:58    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:00    INFO]  - starting ANNZ::Init()  ... 
[10:13:00    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[10:13:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=14493:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:00    INFO]  -----------------------------------------------------
[10:13:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:00    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:02    INFO]  - starting ANNZ::Init()  ... 
[10:13:02    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced17/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[10:13:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=21436:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:02    INFO]  -----------------------------------------------------
[10:13:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:02    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:04    INFO]  - starting ANNZ::Init()  ... 
[10:13:04    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced17/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[10:13:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=83521:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:04    INFO]  -----------------------------------------------------
[10:13:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:04    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:05    INFO]  - starting ANNZ::Init()  ... 
[10:13:05    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced17/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[10:13:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=33514:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:05    INFO]  -----------------------------------------------------
[10:13:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:05    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:07    INFO]  - starting ANNZ::Init()  ... 
[10:13:07    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced17/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[10:13:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=37629:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:07    INFO]  -----------------------------------------------------
[10:13:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:07    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:08    INFO]  - starting ANNZ::Init()  ... 
[10:13:08    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced17/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[10:13:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=5455:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:09    INFO]  -----------------------------------------------------
[10:13:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:09    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:10    INFO]  - starting ANNZ::Init()  ... 
[10:13:11    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced17/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[10:13:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=51877:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:11    INFO]  -----------------------------------------------------
[10:13:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:11    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:12    INFO]  - starting ANNZ::Init()  ... 
[10:13:12    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced17/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[10:13:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=67314:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:12    INFO]  -----------------------------------------------------
[10:13:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:12    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:14    INFO]  - starting ANNZ::Init()  ... 
[10:13:14    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced17/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[10:13:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=10063:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:14    INFO]  -----------------------------------------------------
[10:13:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:14    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:15    INFO]  - starting ANNZ::Init()  ... 
[10:13:15    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced17/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[10:13:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=2544:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:16    INFO]  -----------------------------------------------------
[10:13:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:16    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:17    INFO]  - starting ANNZ::Init()  ... 
[10:13:17    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced17/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[10:13:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=88726[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:17    INFO]  -----------------------------------------------------
[10:13:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:17    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:19    INFO]  - starting ANNZ::Init()  ... 
[10:13:19    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced17/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[10:13:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=92823:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:19    INFO]  -----------------------------------------------------
[10:13:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:19    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:21    INFO]  - starting ANNZ::Init()  ... 
[10:13:21    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced17/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[10:13:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=38776[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:21    INFO]  -----------------------------------------------------
[10:13:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:21    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:23    INFO]  - starting ANNZ::Init()  ... 
[10:13:24    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_14/saveOpt.txt ...
[10:13:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:13:42    INFO] ----------------------------------------------------------------------------------------------------
[10:13:42    INFO]  - will book (ANNZ_14) method(ANN) with options: :HiddenLayers=N+3,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=38776:VarTransform=D
[10:13:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:13:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:13:42    INFO]      cuts (train):        ,
[10:13:42    INFO]      cuts (valid):       
[10:13:42    INFO]    - weights:            1
[10:13:42    INFO] ----------------------------------------------------------------------------------------------------
[10:13:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:45:10    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[07:45:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[07:45:14    INFO]  - Will gen. input-parameter errors ...
[07:45:16    INFO]  - starting ANNZ::loadReaders() ... 
[07:45:19    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[07:45:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:45:33    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:45:33    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:45:33    INFO]  -----------------------------------------------------------------------------------------------------------
[07:45:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:45:38    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:45:38    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:45:38    INFO]  -----------------------------------------------------------------------------------------------------------
[07:45:38    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[07:45:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:45:43    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:45:43    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:45:43    INFO]  -----------------------------------------------------------------------------------------------------------
[07:45:43    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:45:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:45:44    INFO]  - will try to derive a bias correction ... 
[07:45:44    INFO]  - will validate that training produced an XML file for later ... 
[07:45:44    INFO]  - starting ANNZ::loadReaders() ... 
[07:45:46    INFO]  - will validate that the training was not a complete failure ... 
[07:45:46    INFO]  - training seems to have been successful! will move on ...
[07:45:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:45:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:45:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:45:51    INFO] ----------------------------------------------------------------------------------------------------
[07:45:51    INFO]  - will book (ANNZ_14_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[07:45:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:45:51    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:45:51    INFO]    - weights:            1
[07:45:51    INFO] ----------------------------------------------------------------------------------------------------
[07:45:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:45:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[08:45:59    INFO]  - Will gen. input-parameter errors ...
[08:46:00    INFO]  - starting ANNZ::loadReaders() ... 
[08:46:04    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[08:46:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:46:50    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:46:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[08:46:50    INFO]  -----------------------------------------------------------------------------------------------------------
[08:47:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:47:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:47:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[08:47:06    INFO]  -----------------------------------------------------------------------------------------------------------
[08:47:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[08:47:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:47:21    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:47:21    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[08:47:21    INFO]  -----------------------------------------------------------------------------------------------------------
[08:47:21    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:47:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:47:22    INFO]  - will validate that the bias-correction actually improved the result ...
[08:47:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:47:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[08:47:26    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_14/plots/
[08:47:31        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_14/plots output/PAUS_advanced17/regres/train/ANNZ_14/plots_biasCor_before
[08:47:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:47:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[08:47:34    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_14/plots/
[08:47:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_14/plots output/PAUS_advanced17/regres/train/ANNZ_14/plots_biasCor_after
[08:47:39    INFO]  - Got original [KS-test,N_poiss]: [0.0571083 , 4.6013] , after the bias-correction: [0.0571696 , 4.6224] --> will KEEP the correction !

(08:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=25430:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:47 INFO) 
[08:47:42    INFO]  -----------------------------------------------------
[08:47:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:47:42    INFO]  -----------------------------------------------------------------------------------------------------------
[08:47:44    INFO]  - starting ANNZ::Init()  ... 
[08:47:46    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_15/saveOpt.txt ...
[08:48:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:48:05    INFO] ----------------------------------------------------------------------------------------------------
[08:48:05    INFO]  - will book (ANNZ_15) method(ANN) with options: :HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=25430:VarTransform=N
[08:48:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:48:05    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[08:48:05    INFO]      cuts (train):        ,
[08:48:05    INFO]      cuts (valid):       
[08:48:05    INFO]    - weights:            1
[08:48:05    INFO] ----------------------------------------------------------------------------------------------------
[08:48:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::DecomposeLUCrout>: matrix is singular
Error in <TDecompLU::InvertLU>: matrix is singular, 72 diag elements < tolerance of 2.2204e-16
(09:46 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:46 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:46 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:46 INFO) [40;37;1m - 26/02/19 09:46:18 - starting ANNZ[0m
(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=6008:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:18    INFO]  -----------------------------------------------------
[09:46:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:18    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:20    INFO]  - starting ANNZ::Init()  ... 
[09:46:20    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[09:46:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=70991:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:20    INFO]  -----------------------------------------------------
[09:46:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:20    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:22    INFO]  - starting ANNZ::Init()  ... 
[09:46:22    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[09:46:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=95283:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:22    INFO]  -----------------------------------------------------
[09:46:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:24    INFO]  - starting ANNZ::Init()  ... 
[09:46:24    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced17/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[09:46:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=75822:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:24    INFO]  -----------------------------------------------------
[09:46:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:24    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:25    INFO]  - starting ANNZ::Init()  ... 
[09:46:25    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced17/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[09:46:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=42530:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:26    INFO]  -----------------------------------------------------
[09:46:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:26    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:27    INFO]  - starting ANNZ::Init()  ... 
[09:46:27    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced17/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[09:46:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=50665:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:27    INFO]  -----------------------------------------------------
[09:46:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:27    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:29    INFO]  - starting ANNZ::Init()  ... 
[09:46:29    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced17/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[09:46:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=56272:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:29    INFO]  -----------------------------------------------------
[09:46:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:29    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:31    INFO]  - starting ANNZ::Init()  ... 
[09:46:31    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced17/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[09:46:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=225:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:31    INFO]  -----------------------------------------------------
[09:46:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:31    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:32    INFO]  - starting ANNZ::Init()  ... 
[09:46:33    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced17/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[09:46:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=38589:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:33    INFO]  -----------------------------------------------------
[09:46:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:33    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:35    INFO]  - starting ANNZ::Init()  ... 
[09:46:35    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced17/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[09:46:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=41606:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:35    INFO]  -----------------------------------------------------
[09:46:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:35    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:36    INFO]  - starting ANNZ::Init()  ... 
[09:46:36    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced17/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[09:46:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=5593:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:36    INFO]  -----------------------------------------------------
[09:46:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:36    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:38    INFO]  - starting ANNZ::Init()  ... 
[09:46:38    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced17/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[09:46:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=96079:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:38    INFO]  -----------------------------------------------------
[09:46:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:38    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:40    INFO]  - starting ANNZ::Init()  ... 
[09:46:40    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced17/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[09:46:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=25172:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:40    INFO]  -----------------------------------------------------
[09:46:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:40    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:41    INFO]  - starting ANNZ::Init()  ... 
[09:46:42    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced17/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[09:46:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=28465:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:42    INFO]  -----------------------------------------------------
[09:46:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:42    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:44    INFO]  - starting ANNZ::Init()  ... 
[09:46:44    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced17/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[09:46:44    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=16201:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:44    INFO]  -----------------------------------------------------
[09:46:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:44    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:46    INFO]  - starting ANNZ::Init()  ... 
[09:46:46    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced17/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[09:46:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=56728:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:46 INFO) 
[09:46:46    INFO]  -----------------------------------------------------
[09:46:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:46    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:48    INFO]  - starting ANNZ::Init()  ... 
[09:46:50    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_15/saveOpt.txt ...
[09:47:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:47:11    INFO] ----------------------------------------------------------------------------------------------------
[09:47:11    INFO]  - will book (ANNZ_15) method(ANN) with options: :HiddenLayers=N+2,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=56728:VarTransform=N,P
[09:47:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:47:11    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:47:11    INFO]      cuts (train):        ,
[09:47:11    INFO]      cuts (valid):       
[09:47:11    INFO]    - weights:            1
[09:47:11    INFO] ----------------------------------------------------------------------------------------------------
[09:47:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:56:10    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[10:56:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[10:56:12    INFO]  - Will gen. input-parameter errors ...
[10:56:14    INFO]  - starting ANNZ::loadReaders() ... 
[10:56:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[10:56:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:56:52    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:56:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:56:52    INFO]  -----------------------------------------------------------------------------------------------------------
[10:57:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:57:04    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:57:04    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:57:04    INFO]  -----------------------------------------------------------------------------------------------------------
[10:57:04    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[10:57:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:57:16    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:57:16    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:57:16    INFO]  -----------------------------------------------------------------------------------------------------------
[10:57:17    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:57:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:57:18    INFO]  - will try to derive a bias correction ... 
[10:57:18    INFO]  - will validate that training produced an XML file for later ... 
[10:57:18    INFO]  - starting ANNZ::loadReaders() ... 
[10:57:18    INFO]  - will validate that the training was not a complete failure ... 
[10:57:18    INFO]  - training seems to have been successful! will move on ...
[10:57:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:57:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:57:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:57:23    INFO] ----------------------------------------------------------------------------------------------------
[10:57:23    INFO]  - will book (ANNZ_15_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[10:57:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:57:23    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:57:23    INFO]    - weights:            1
[10:57:23    INFO] ----------------------------------------------------------------------------------------------------
[10:57:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:57:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[11:57:13    INFO]  - Will gen. input-parameter errors ...
[11:57:14    INFO]  - starting ANNZ::loadReaders() ... 
[11:57:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[11:58:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:58:22    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:58:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:58:22    INFO]  -----------------------------------------------------------------------------------------------------------
[11:58:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:58:45    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:58:45    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:58:45    INFO]  -----------------------------------------------------------------------------------------------------------
[11:58:45    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[11:59:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:59:08    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:59:08    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:59:08    INFO]  -----------------------------------------------------------------------------------------------------------
[11:59:08    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:59:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:59:08    INFO]  - will validate that the bias-correction actually improved the result ...
[11:59:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:59:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[11:59:12    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_15/plots/
[11:59:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_15/plots output/PAUS_advanced17/regres/train/ANNZ_15/plots_biasCor_before
[11:59:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:59:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[11:59:20    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_15/plots/
[11:59:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_15/plots output/PAUS_advanced17/regres/train/ANNZ_15/plots_biasCor_after
[11:59:26    INFO]  - Got original [KS-test,N_poiss]: [0.10766 , 7.88978] , after the bias-correction: [0.107426 , 7.92809] --> will KEEP the correction !

(11:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=33813:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:59 INFO) 
[11:59:29    INFO]  -----------------------------------------------------
[11:59:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:59:29    INFO]  -----------------------------------------------------------------------------------------------------------
[11:59:30    INFO]  - starting ANNZ::Init()  ... 
[11:59:32    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_16/saveOpt.txt ...
[11:59:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:59:51    INFO] ----------------------------------------------------------------------------------------------------
[11:59:51    INFO]  - will book (ANNZ_16) method(ANN) with options: :HiddenLayers=N+4,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=33813:VarTransform=N,P
[11:59:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:59:51    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:59:51    INFO]      cuts (train):        ,
[11:59:51    INFO]      cuts (valid):       
[11:59:51    INFO]    - weights:            1
[11:59:51    INFO] ----------------------------------------------------------------------------------------------------
[11:59:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:12:29    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[16:12:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[16:12:32    INFO]  - Will gen. input-parameter errors ...
[16:12:34    INFO]  - starting ANNZ::loadReaders() ... 
[16:12:35    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[16:13:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:13:12    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:13:12    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:13:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:13:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:13:25    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:13:25    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:13:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:13:25    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[16:13:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:13:37    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:13:37    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:13:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:13:37    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:13:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:13:38    INFO]  - will try to derive a bias correction ... 
[16:13:38    INFO]  - will validate that training produced an XML file for later ... 
[16:13:38    INFO]  - starting ANNZ::loadReaders() ... 
[16:13:38    INFO]  - will validate that the training was not a complete failure ... 
[16:13:38    INFO]  - training seems to have been successful! will move on ...
[16:13:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:13:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:13:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:13:43    INFO] ----------------------------------------------------------------------------------------------------
[16:13:43    INFO]  - will book (ANNZ_16_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[16:13:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:13:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[16:13:43    INFO]    - weights:            1
[16:13:43    INFO] ----------------------------------------------------------------------------------------------------
[16:13:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 2 diag elements < tolerance of 2.2204e-16
(16:31 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:31 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:31 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:31 INFO) [40;37;1m - 26/02/19 16:31:59 - starting ANNZ[0m
(16:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+8,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=10279:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:31 INFO) 
[16:32:00    INFO]  -----------------------------------------------------
[16:32:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:00    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:04    INFO]  - starting ANNZ::Init()  ... 
[16:32:04    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[16:32:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=97194:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:05    INFO]  -----------------------------------------------------
[16:32:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:05    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:06    INFO]  - starting ANNZ::Init()  ... 
[16:32:07    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[16:32:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+5,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=75290:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:07    INFO]  -----------------------------------------------------
[16:32:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:07    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:08    INFO]  - starting ANNZ::Init()  ... 
[16:32:08    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced17/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[16:32:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=48909:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:09    INFO]  -----------------------------------------------------
[16:32:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:09    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:10    INFO]  - starting ANNZ::Init()  ... 
[16:32:10    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced17/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[16:32:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=54022:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:10    INFO]  -----------------------------------------------------
[16:32:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:10    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:12    INFO]  - starting ANNZ::Init()  ... 
[16:32:12    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced17/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[16:32:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=16330:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:12    INFO]  -----------------------------------------------------
[16:32:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:14    INFO]  - starting ANNZ::Init()  ... 
[16:32:14    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced17/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[16:32:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=17584:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:14    INFO]  -----------------------------------------------------
[16:32:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:14    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:16    INFO]  - starting ANNZ::Init()  ... 
[16:32:16    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced17/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[16:32:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=802:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:16    INFO]  -----------------------------------------------------
[16:32:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:17    INFO]  - starting ANNZ::Init()  ... 
[16:32:18    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced17/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[16:32:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=43666:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:18    INFO]  -----------------------------------------------------
[16:32:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:18    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:20    INFO]  - starting ANNZ::Init()  ... 
[16:32:20    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced17/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[16:32:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=34378:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:20    INFO]  -----------------------------------------------------
[16:32:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:20    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:22    INFO]  - starting ANNZ::Init()  ... 
[16:32:22    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced17/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[16:32:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=41054:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:22    INFO]  -----------------------------------------------------
[16:32:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:22    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:24    INFO]  - starting ANNZ::Init()  ... 
[16:32:24    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced17/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[16:32:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=48629:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:24    INFO]  -----------------------------------------------------
[16:32:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:24    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:26    INFO]  - starting ANNZ::Init()  ... 
[16:32:26    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced17/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[16:32:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=49459:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:26    INFO]  -----------------------------------------------------
[16:32:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:26    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:28    INFO]  - starting ANNZ::Init()  ... 
[16:32:28    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced17/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[16:32:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=33253:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:28    INFO]  -----------------------------------------------------
[16:32:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:28    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:30    INFO]  - starting ANNZ::Init()  ... 
[16:32:30    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced17/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[16:32:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=26603:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:31    INFO]  -----------------------------------------------------
[16:32:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:31    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:32    INFO]  - starting ANNZ::Init()  ... 
[16:32:33    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced17/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[16:32:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=67396:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:33    INFO]  -----------------------------------------------------
[16:32:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:33    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:34    INFO]  - starting ANNZ::Init()  ... 
[16:32:34    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced17/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[16:32:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=32559:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:35    INFO]  -----------------------------------------------------
[16:32:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:35    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:36    INFO]  - starting ANNZ::Init()  ... 
[16:32:36    INFO]  - found trained "ANNZ_16" (./output/PAUS_advanced17/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[16:32:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=24463[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:36    INFO]  -----------------------------------------------------
[16:32:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:36    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:38    INFO]  - starting ANNZ::Init()  ... 
[16:32:40    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_17/saveOpt.txt ...
[16:33:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:33:00    INFO] ----------------------------------------------------------------------------------------------------
[16:33:00    INFO]  - will book (ANNZ_17) method(ANN) with options: :HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=24463:VarTransform=N
[16:33:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:33:00    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:33:00    INFO]      cuts (train):        ,
[16:33:00    INFO]      cuts (valid):       
[16:33:00    INFO]    - weights:            1
[16:33:00    INFO] ----------------------------------------------------------------------------------------------------
[16:33:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:28:36    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[17:28:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[17:28:39    INFO]  - Will gen. input-parameter errors ...
[17:28:41    INFO]  - starting ANNZ::loadReaders() ... 
[17:28:41    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[17:29:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:29:02    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:29:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:29:02    INFO]  -----------------------------------------------------------------------------------------------------------
[17:29:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:29:09    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:29:09    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:29:09    INFO]  -----------------------------------------------------------------------------------------------------------
[17:29:09    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[17:29:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:29:16    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:29:16    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:29:16    INFO]  -----------------------------------------------------------------------------------------------------------
[17:29:16    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:29:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:29:17    INFO]  - will try to derive a bias correction ... 
[17:29:17    INFO]  - will validate that training produced an XML file for later ... 
[17:29:17    INFO]  - starting ANNZ::loadReaders() ... 
[17:29:17    INFO]  - will validate that the training was not a complete failure ... 
[17:29:17    INFO]  - training seems to have been successful! will move on ...
[17:29:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:29:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:29:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:29:21    INFO] ----------------------------------------------------------------------------------------------------
[17:29:21    INFO]  - will book (ANNZ_17_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[17:29:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:29:21    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[17:29:21    INFO]    - weights:            1
[17:29:21    INFO] ----------------------------------------------------------------------------------------------------
[17:29:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:32:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[18:32:16    INFO]  - Will gen. input-parameter errors ...
[18:32:17    INFO]  - starting ANNZ::loadReaders() ... 
[18:32:19    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[18:33:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:33:12    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:33:12    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:33:12    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:33:30    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:33:30    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:33:30    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:30    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[18:33:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:33:48    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:33:48    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:33:48    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:48    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:33:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:33:49    INFO]  - will validate that the bias-correction actually improved the result ...
[18:33:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:33:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[18:33:53    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_17/plots/
[18:33:59        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_17/plots output/PAUS_advanced17/regres/train/ANNZ_17/plots_biasCor_before
[18:33:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:33:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[18:34:02    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_17/plots/
[18:34:07        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_17/plots output/PAUS_advanced17/regres/train/ANNZ_17/plots_biasCor_after
[18:34:07    INFO]  - Got original [KS-test,N_poiss]: [0.172732 , 10.3444] , after the bias-correction: [0.137111 , 9.52953] --> will KEEP the correction !

(18:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=55340:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:34 INFO) 
[18:34:10    INFO]  -----------------------------------------------------
[18:34:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:34:10    INFO]  -----------------------------------------------------------------------------------------------------------
[18:34:12    INFO]  - starting ANNZ::Init()  ... 
[18:34:14    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_18/saveOpt.txt ...
[18:34:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:34:34    INFO] ----------------------------------------------------------------------------------------------------
[18:34:34    INFO]  - will book (ANNZ_18) method(ANN) with options: :HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=55340:VarTransform=N
[18:34:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:34:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:34:34    INFO]      cuts (train):        ,
[18:34:34    INFO]      cuts (valid):       
[18:34:34    INFO]    - weights:            1
[18:34:34    INFO] ----------------------------------------------------------------------------------------------------
[18:34:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:21:43    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[19:21:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[19:21:47    INFO]  - Will gen. input-parameter errors ...
[19:21:49    INFO]  - starting ANNZ::loadReaders() ... 
[19:21:50    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[19:22:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:22:13    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:22:13    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:22:13    INFO]  -----------------------------------------------------------------------------------------------------------
[19:22:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:22:22    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:22:22    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[19:22:22    INFO]  -----------------------------------------------------------------------------------------------------------
[19:22:22    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[19:22:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:22:30    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:22:30    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[19:22:30    INFO]  -----------------------------------------------------------------------------------------------------------
[19:22:30    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:22:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:22:31    INFO]  - will try to derive a bias correction ... 
[19:22:31    INFO]  - will validate that training produced an XML file for later ... 
[19:22:31    INFO]  - starting ANNZ::loadReaders() ... 
[19:22:31    INFO]  - will validate that the training was not a complete failure ... 
[19:22:31    INFO]  - training seems to have been successful! will move on ...
[19:22:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:22:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:22:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:22:36    INFO] ----------------------------------------------------------------------------------------------------
[19:22:36    INFO]  - will book (ANNZ_18_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[19:22:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:22:36    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[19:22:36    INFO]    - weights:            1
[19:22:36    INFO] ----------------------------------------------------------------------------------------------------
[19:22:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:23:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[20:23:56    INFO]  - Will gen. input-parameter errors ...
[20:23:57    INFO]  - starting ANNZ::loadReaders() ... 
[20:23:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[20:24:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:24:55    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:24:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:24:55    INFO]  -----------------------------------------------------------------------------------------------------------
[20:25:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:25:14    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:25:14    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[20:25:14    INFO]  -----------------------------------------------------------------------------------------------------------
[20:25:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[20:25:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:25:33    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[20:25:33    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[20:25:33    INFO]  -----------------------------------------------------------------------------------------------------------
[20:25:33    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:25:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:25:34    INFO]  - will validate that the bias-correction actually improved the result ...
[20:25:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:25:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[20:25:37    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_18/plots/
[20:25:43        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_18/plots output/PAUS_advanced17/regres/train/ANNZ_18/plots_biasCor_before
[20:25:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:25:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[20:25:46    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_18/plots/
[20:25:52        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_18/plots output/PAUS_advanced17/regres/train/ANNZ_18/plots_biasCor_after
[20:25:52    INFO]  - Got original [KS-test,N_poiss]: [0.0981773 , 6.30199] , after the bias-correction: [0.0996635 , 6.21603] --> will KEEP the correction !

(20:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=12330:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:25 INFO) 
[20:25:55    INFO]  -----------------------------------------------------
[20:25:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:25:55    INFO]  -----------------------------------------------------------------------------------------------------------
[20:25:57    INFO]  - starting ANNZ::Init()  ... 
[20:25:58    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_19/saveOpt.txt ...
[20:26:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:26:18    INFO] ----------------------------------------------------------------------------------------------------
[20:26:18    INFO]  - will book (ANNZ_19) method(ANN) with options: :HiddenLayers=N,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=12330:VarTransform=N
[20:26:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:26:18    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:26:18    INFO]      cuts (train):        ,
[20:26:18    INFO]      cuts (valid):       
[20:26:18    INFO]    - weights:            1
[20:26:18    INFO] ----------------------------------------------------------------------------------------------------
[20:26:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 52 diag elements < tolerance of 2.2204e-16
(23:42 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:42 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:42 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:42 INFO) [40;37;1m - 26/02/19 23:42:58 - starting ANNZ[0m
(23:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=93134:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:42 INFO) 
[23:42:58    INFO]  -----------------------------------------------------
[23:42:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:42:58    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:00    INFO]  - starting ANNZ::Init()  ... 
[23:43:00    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced17/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[23:43:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=59185:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:00    INFO]  -----------------------------------------------------
[23:43:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:00    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:01    INFO]  - starting ANNZ::Init()  ... 
[23:43:02    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced17/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[23:43:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+4,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=85843:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:02    INFO]  -----------------------------------------------------
[23:43:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:04    INFO]  - starting ANNZ::Init()  ... 
[23:43:04    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced17/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[23:43:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=52893[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:04    INFO]  -----------------------------------------------------
[23:43:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:04    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:05    INFO]  - starting ANNZ::Init()  ... 
[23:43:05    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced17/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[23:43:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=76197:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:06    INFO]  -----------------------------------------------------
[23:43:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:06    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:07    INFO]  - starting ANNZ::Init()  ... 
[23:43:07    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced17/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[23:43:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=39545:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:07    INFO]  -----------------------------------------------------
[23:43:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:07    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:09    INFO]  - starting ANNZ::Init()  ... 
[23:43:09    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced17/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[23:43:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=68105:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:09    INFO]  -----------------------------------------------------
[23:43:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:09    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:10    INFO]  - starting ANNZ::Init()  ... 
[23:43:10    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced17/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[23:43:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=81230:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:11    INFO]  -----------------------------------------------------
[23:43:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:11    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:12    INFO]  - starting ANNZ::Init()  ... 
[23:43:13    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced17/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[23:43:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=54857:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:13    INFO]  -----------------------------------------------------
[23:43:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:13    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:14    INFO]  - starting ANNZ::Init()  ... 
[23:43:14    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced17/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[23:43:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=89575:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:15    INFO]  -----------------------------------------------------
[23:43:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:16    INFO]  - starting ANNZ::Init()  ... 
[23:43:16    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced17/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[23:43:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+8,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=56952:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:16    INFO]  -----------------------------------------------------
[23:43:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:18    INFO]  - starting ANNZ::Init()  ... 
[23:43:18    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced17/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[23:43:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=16282:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:18    INFO]  -----------------------------------------------------
[23:43:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:18    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:19    INFO]  - starting ANNZ::Init()  ... 
[23:43:19    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced17/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[23:43:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=85405:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:20    INFO]  -----------------------------------------------------
[23:43:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:21    INFO]  - starting ANNZ::Init()  ... 
[23:43:22    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced17/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[23:43:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=31334:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:22    INFO]  -----------------------------------------------------
[23:43:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:23    INFO]  - starting ANNZ::Init()  ... 
[23:43:24    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced17/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[23:43:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=71700:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:24    INFO]  -----------------------------------------------------
[23:43:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:26    INFO]  - starting ANNZ::Init()  ... 
[23:43:26    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced17/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[23:43:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=70845:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:26    INFO]  -----------------------------------------------------
[23:43:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:26    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:28    INFO]  - starting ANNZ::Init()  ... 
[23:43:28    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced17/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[23:43:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=40018:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:28    INFO]  -----------------------------------------------------
[23:43:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:29    INFO]  - starting ANNZ::Init()  ... 
[23:43:29    INFO]  - found trained "ANNZ_16" (./output/PAUS_advanced17/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[23:43:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=25111:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:30    INFO]  -----------------------------------------------------
[23:43:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:30    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:31    INFO]  - starting ANNZ::Init()  ... 
[23:43:31    INFO]  - found trained "ANNZ_17" (./output/PAUS_advanced17/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[23:43:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=49588:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:31    INFO]  -----------------------------------------------------
[23:43:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:33    INFO]  - starting ANNZ::Init()  ... 
[23:43:33    INFO]  - found trained "ANNZ_18" (./output/PAUS_advanced17/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[23:43:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=86526:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:43 INFO) 
[23:43:33    INFO]  -----------------------------------------------------
[23:43:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:43:33    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:35    INFO]  - starting ANNZ::Init()  ... 
[23:43:36    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/train/ANNZ_19/saveOpt.txt ...
[23:43:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:43:56    INFO] ----------------------------------------------------------------------------------------------------
[23:43:56    INFO]  - will book (ANNZ_19) method(ANN) with options: :HiddenLayers=N,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=86526:VarTransform=N
[23:43:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:43:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:43:56    INFO]      cuts (train):        ,
[23:43:56    INFO]      cuts (valid):       
[23:43:56    INFO]    - weights:            1
[23:43:56    INFO] ----------------------------------------------------------------------------------------------------
[23:43:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:09:25    INFO]  - Saving MLM information in ./output/PAUS_advanced17/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[00:09:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[00:09:29    INFO]  - Will gen. input-parameter errors ...
[00:09:31    INFO]  - starting ANNZ::loadReaders() ... 
[00:09:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[00:09:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:09:52    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:09:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:09:52    INFO]  -----------------------------------------------------------------------------------------------------------
[00:09:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:09:59    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:09:59    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[00:09:59    INFO]  -----------------------------------------------------------------------------------------------------------
[00:09:59    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[00:10:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:10:06    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:10:06    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[00:10:06    INFO]  -----------------------------------------------------------------------------------------------------------
[00:10:06    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:10:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:10:07    INFO]  - will try to derive a bias correction ... 
[00:10:07    INFO]  - will validate that training produced an XML file for later ... 
[00:10:07    INFO]  - starting ANNZ::loadReaders() ... 
[00:10:07    INFO]  - will validate that the training was not a complete failure ... 
[00:10:07    INFO]  - training seems to have been successful! will move on ...
[00:10:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:10:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:10:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:10:11    INFO] ----------------------------------------------------------------------------------------------------
[00:10:11    INFO]  - will book (ANNZ_19_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[00:10:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:10:11    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[00:10:11    INFO]    - weights:            1
[00:10:11    INFO] ----------------------------------------------------------------------------------------------------
[00:10:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 1 diag elements < tolerance of 2.2204e-16
[01:12:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[01:12:11    INFO]  - Will gen. input-parameter errors ...
[01:12:12    INFO]  - starting ANNZ::loadReaders() ... 
[01:12:14    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_train*.root
[01:13:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:13:05    INFO]  -- ANNZ_tree_train .................................... 5  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:13:05    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:13:05    INFO]  -----------------------------------------------------------------------------------------------------------
[01:13:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:13:23    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:13:23    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:13:23    INFO]  -----------------------------------------------------------------------------------------------------------
[01:13:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced17/rootIn/ANNZ_tree_valid*.root
[01:13:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:13:40    INFO]  -- ANNZ_tree_valid .................................... 3  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:13:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:13:40    INFO]  -----------------------------------------------------------------------------------------------------------
[01:13:40    INFO]  - Saving file ./output/PAUS_advanced17/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:13:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:13:41    INFO]  - will validate that the bias-correction actually improved the result ...
[01:13:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:13:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[01:13:44    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_19/plots/
[01:13:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_19/plots output/PAUS_advanced17/regres/train/ANNZ_19/plots_biasCor_before
[01:13:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:13:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[01:13:53    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/train/ANNZ_19/plots/
[01:13:58        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced17/regres/train/ANNZ_19/plots output/PAUS_advanced17/regres/train/ANNZ_19/plots_biasCor_after
[01:13:58    INFO]  - Got original [KS-test,N_poiss]: [0.1833 , 10.683] , after the bias-correction: [0.14763 , 9.64301] --> will KEEP the correction !

(01:14 INFO) [40;37;1m - 27/02/19 01:14:01 - finished running ANNZ ![0m
(09:38 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:38 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:38 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:38 INFO) [40;37;1m - 27/02/19 09:38:23 - starting ANNZ[0m
(09:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.04[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:38 INFO) 
[09:38:23    INFO]  -----------------------------------------------------
[09:38:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:38:23    INFO]  -----------------------------------------------------------------------------------------------------------
[09:38:24    INFO]  - starting ANNZ::Init()  ... 
[09:38:24    INFO]  - Will generate 1 PDFs ... 
[09:38:27    INFO] --------------------------------------------------------
[09:38:27    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:38:27    INFO]  - All REJECTED MLMs: 
[09:38:27    INFO] ----------------------------------------------------------------------------------------------------------------
[09:38:28    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/optim/saveOpt.txt ...
[09:38:56    INFO]  - starting ANNZ::Optim() ... 
[09:38:56    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[09:38:56    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[09:39:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:39:06    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced17/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[09:39:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:39:13    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced17/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[09:39:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:39:21    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/PAUS_advanced17/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[09:39:21    INFO]  - Saving file ./output/PAUS_advanced17/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[09:39:21    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[09:39:21    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced17/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[09:39:21    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[09:39:22    INFO]  - ending makeTreeRegClsAllMLM() ... 
[09:39:22    INFO]  - starting ANNZ::optimReg() ... 
[09:39:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:39:24    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced17/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[09:39:25    INFO]  - starting ANNZ::fillColosureV() ... 
[09:39:25    INFO]  ---------------------------------------------------------------------------------- 
[09:39:25    INFO]  - Got the following average properties: 
[09:39:25    INFO]  --------------------------------------- 
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_0 	 0.00940899 	 0.120555 	 0.0594471
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_1 	 0.0217086 	 0.156819 	 0.0364389
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_2 	 0.0286594 	 0.154621 	 0.0391692
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_3 	 0.0221126 	 0.148773 	 0.0389068
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_4 	 0.0181442 	 0.121684 	 0.0591686
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_5 	 0.0183826 	 0.119995 	 0.058427
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_6 	 0.00765686 	 0.115597 	 0.0634313
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_7 	 0.0404307 	 0.151735 	 0.0374536
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_8 	 0.0045921 	 0.111527 	 0.0687618
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_9 	 0.0141913 	 0.126374 	 0.0536383
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_10 	 0.0288513 	 0.157173 	 0.0391981
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_11 	 0.0242729 	 0.12595 	 0.0533813
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_12 	 0.0236032 	 0.139183 	 0.0433139
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_13 	 0.051528 	 0.147655 	 0.0351361
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_14 	 0.00534171 	 0.0905887 	 0.07466
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_15 	 0.0209782 	 0.155928 	 0.0369362
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_16 	 0.00710279 	 0.119403 	 0.0645016
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_17 	 0.0287904 	 0.155737 	 0.0392562
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_18 	 0.0228378 	 0.136813 	 0.0456865
[09:39:25    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_19 	 0.0333526 	 0.155415 	 0.0374697
[09:39:25    INFO]  ------------------------------------------------------------------------------------------------- 
[09:39:25    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[09:39:25    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[09:39:25    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[09:39:25    INFO]  - Found 2 "best" methods (min-threshold was 1) from the bottom 10% of the [sig68] dist.
[09:39:25    INFO]  - The "best" MLM is: ANNZ_14
[09:39:25    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[09:39:25    INFO]  - ANNZ_0 has sigma68 = 0.120555 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_1 has sigma68 = 0.156819 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_2 has sigma68 = 0.154621 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_3 has sigma68 = 0.148773 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_4 has sigma68 = 0.121684 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_5 has sigma68 = 0.119995 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_6 has sigma68 = 0.115597 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_7 has sigma68 = 0.151735 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_8 has sigma68 = 0.111527 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_9 has sigma68 = 0.126374 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_10 has sigma68 = 0.157173 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_11 has sigma68 = 0.12595 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_12 has sigma68 = 0.139183 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_13 has sigma68 = 0.147655 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_14 has sigma68 = 0.0905887 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_15 has sigma68 = 0.155928 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_16 has sigma68 = 0.119403 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_17 has sigma68 = 0.155737 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_18 has sigma68 = 0.136813 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25    INFO]  - ANNZ_19 has sigma68 = 0.155415 which is above threshold (0.04) -> it will be rejected from the PDF ...
[09:39:25   ERROR]  - ... ------------------------------------------------------------ 
[09:39:25   ERROR]  - MESSAGE -  - found only 0 accepted MLMs, but requested minAcptMLMsForPDFs = 5 ... 
[09:39:25   ERROR]  - FROM    - FILE: ../src/ANNZ_loopReg.cpp , LINE: 916 , (Jan 22 2019 21:40:46) 
[09:39:25   ERROR]  - ..... ABORTING !!! 
[09:39:25   ERROR]  ------------------------------------------------------------ ... - 
(09:39 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(09:39 CRITICAL) [41;37;1mWill terminate !!!![0m
(09:40 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:40 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:40 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:40 INFO) [40;37;1m - 27/02/19 09:40:46 - starting ANNZ[0m
(09:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.125[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:40 INFO) 
[09:40:46    INFO]  -----------------------------------------------------
[09:40:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:40:46    INFO]  -----------------------------------------------------------------------------------------------------------
[09:40:47    INFO]  - starting ANNZ::Init()  ... 
[09:40:47    INFO]  - Will generate 1 PDFs ... 
[09:40:50    INFO] --------------------------------------------------------
[09:40:50    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:40:50    INFO]  - All REJECTED MLMs: 
[09:40:50    INFO] ----------------------------------------------------------------------------------------------------------------
[09:40:51    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/optim/saveOpt.txt ...
[09:41:18    INFO]  - starting ANNZ::Optim() ... 
[09:41:18    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[09:41:18    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced17/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[09:41:18    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[09:41:19    INFO]  - ending makeTreeRegClsAllMLM() ... 
[09:41:19    INFO]  - starting ANNZ::optimReg() ... 
[09:41:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:41:21    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced17/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[09:41:22    INFO]  - starting ANNZ::fillColosureV() ... 
[09:41:22    INFO]  ---------------------------------------------------------------------------------- 
[09:41:22    INFO]  - Got the following average properties: 
[09:41:22    INFO]  --------------------------------------- 
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_0 	 0.00940899 	 0.120555 	 0.0594471
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_1 	 0.0217086 	 0.156819 	 0.0364389
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_2 	 0.0286594 	 0.154621 	 0.0391692
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_3 	 0.0221126 	 0.148773 	 0.0389068
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_4 	 0.0181442 	 0.121684 	 0.0591686
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_5 	 0.0183826 	 0.119995 	 0.058427
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_6 	 0.00765686 	 0.115597 	 0.0634313
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_7 	 0.0404307 	 0.151735 	 0.0374536
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_8 	 0.0045921 	 0.111527 	 0.0687618
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_9 	 0.0141913 	 0.126374 	 0.0536383
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_10 	 0.0288513 	 0.157173 	 0.0391981
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_11 	 0.0242729 	 0.12595 	 0.0533813
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_12 	 0.0236032 	 0.139183 	 0.0433139
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_13 	 0.051528 	 0.147655 	 0.0351361
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_14 	 0.00534171 	 0.0905887 	 0.07466
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_15 	 0.0209782 	 0.155928 	 0.0369362
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_16 	 0.00710279 	 0.119403 	 0.0645016
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_17 	 0.0287904 	 0.155737 	 0.0392562
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_18 	 0.0228378 	 0.136813 	 0.0456865
[09:41:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  ANN/ANNZ_19 	 0.0333526 	 0.155415 	 0.0374697
[09:41:22    INFO]  ------------------------------------------------------------------------------------------------- 
[09:41:22    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[09:41:22    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[09:41:22    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[09:41:22    INFO]  - Found 2 "best" methods (min-threshold was 1) from the bottom 10% of the [sig68] dist.
[09:41:22    INFO]  - The "best" MLM is: ANNZ_14
[09:41:22    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[09:41:22    INFO]  - ANNZ_1 has sigma68 = 0.156819 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_2 has sigma68 = 0.154621 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_3 has sigma68 = 0.148773 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_7 has sigma68 = 0.151735 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_9 has sigma68 = 0.126374 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_10 has sigma68 = 0.157173 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_11 has sigma68 = 0.12595 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_12 has sigma68 = 0.139183 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_13 has sigma68 = 0.147655 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_15 has sigma68 = 0.155928 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_17 has sigma68 = 0.155737 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_18 has sigma68 = 0.136813 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - ANNZ_19 has sigma68 = 0.155415 which is above threshold (0.125) -> it will be rejected from the PDF ...
[09:41:22    INFO]  - initial PDF weights: ANNZ_14:0.333 ANNZ_8:0.267 ANNZ_16:0.200 ANNZ_6:0.133 ANNZ_0:0.067 
[09:41:22    INFO]  - will loop on the input trees ...
[09:41:23    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.81525e-01
[09:41:23    INFO]  - nTry: 1 - min-param best/prev/now: 2.81525e-01 / 2.81525e-01 / 2.83551e-01
[09:41:23    INFO]  - nTry: 2 - min-param best/prev/now: 2.81525e-01 / 2.81525e-01 / 2.83078e-01
[09:41:23    INFO]  - NEW:  3 - min-param best/prev/now: 2.81525e-01 / 2.81525e-01 / 2.79988e-01
[09:41:23    INFO]  - nTry: 4 - min-param best/prev/now: 2.79988e-01 / 2.79988e-01 / 2.80977e-01
[09:41:23    INFO]  - nTry: 5 - min-param best/prev/now: 2.79988e-01 / 2.79988e-01 / 2.81372e-01
[09:41:23    INFO]  - nTry: 6 - min-param best/prev/now: 2.79988e-01 / 2.79988e-01 / 2.81716e-01
[09:41:23    INFO]  - nTry: 7 - min-param best/prev/now: 2.79988e-01 / 2.79988e-01 / 2.82032e-01
[09:41:23    INFO]  - nTry: 8 - min-param best/prev/now: 2.79988e-01 / 2.79988e-01 / 2.82302e-01
[09:41:23    INFO]  - nTry: 9 - min-param best/prev/now: 2.79988e-01 / 2.79988e-01 / 2.82587e-01
[09:41:23    INFO]  - nTry: 10 - min-param best/prev/now: 2.79988e-01 / 2.82587e-01 / 2.82724e-01
[09:41:24    INFO]  - nTry: 20 - min-param best/prev/now: 2.79988e-01 / 2.83966e-01 / 2.84029e-01
[09:41:24    INFO]  - nTry: 30 - min-param best/prev/now: 2.79988e-01 / 2.85371e-01 / 2.85449e-01
[09:41:25    INFO]  - nTry: 40 - min-param best/prev/now: 2.79988e-01 / 2.85371e-01 / 2.86177e-01
[09:41:25    INFO]  - nTry: 50 - min-param best/prev/now: 2.79988e-01 / 2.85371e-01 / 2.86692e-01
[09:41:26    INFO]  - nTry: 60 - min-param best/prev/now: 2.79988e-01 / 2.87349e-01 / 2.87429e-01
[09:41:26    INFO]  - nTry: 70 - min-param best/prev/now: 2.79988e-01 / 2.88162e-01 / 2.88573e-01
[09:41:27    INFO]  - nTry: 80 - min-param best/prev/now: 2.79988e-01 / 2.89032e-01 / 2.89087e-01
[09:41:27    INFO]  - nTry: 90 - min-param best/prev/now: 2.79988e-01 / 2.89362e-01 / 2.89534e-01
[09:41:28    INFO]  - nTry: 100 - min-param best/prev/now: 2.79988e-01 / 2.89597e-01 / 2.89783e-01
[09:41:29    INFO]  - nTry: 120 - min-param best/prev/now: 2.79988e-01 / 2.90427e-01 / 2.90547e-01
[09:41:30    INFO]  - nTry: 140 - min-param best/prev/now: 2.79988e-01 / 2.90437e-01 / 2.90511e-01
[09:41:30    INFO]  - nTry: 150 - min-param best/prev/now: 2.79988e-01 / 2.90573e-01 / 2.90760e-01
[09:41:30    INFO]  - nTry: 160 - min-param best/prev/now: 2.79988e-01 / 2.90636e-01 / 2.90642e-01
[09:41:31    INFO]  - nTry: 180 - min-param best/prev/now: 2.79988e-01 / 2.90580e-01 / 2.90579e-01
[09:41:32    INFO]  - nTry: 200 - min-param best/prev/now: 2.79988e-01 / 2.90264e-01 / 2.90267e-01
[09:41:33    INFO]  - nTry: 220 - min-param best/prev/now: 2.79988e-01 / 2.89995e-01 / 2.89932e-01
[09:41:34    INFO]  - nTry: 240 - min-param best/prev/now: 2.79988e-01 / 2.89490e-01 / 2.89476e-01
[09:41:35    INFO]  - nTry: 250 - min-param best/prev/now: 2.79988e-01 / 2.89347e-01 / 2.89333e-01
[09:41:35    INFO]  - finished PDF optimization! - final minimization parameter: 2.79988e-01 , PDF weights: ANNZ_14:0.313 ANNZ_8:0.250 ANNZ_16:0.188 ANNZ_6:0.125 ANNZ_0:0.124 
[09:41:35    INFO]  - will derive the bias correction for the pdf ... 
[09:41:35    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.123872, ANNZ_1:0.000000, ANNZ_2:0.000000, ANNZ_3:0.000000, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.125161, ANNZ_7:0.000000, ANNZ_8:0.250322, ANNZ_9:0.000000, ANNZ_10:0.000000, ANNZ_11:0.000000, ANNZ_12:0.000000, ANNZ_13:0.000000, ANNZ_14:0.312903, ANNZ_15:0.000000, ANNZ_16:0.187742, ANNZ_17:0.000000, ANNZ_18:0.000000, ANNZ_19:0.000000, 
[09:41:35    INFO]  - Saving optimization results in ./output/PAUS_advanced17/regres/optim/saveOptimOpt.txt ...
[09:41:36    INFO]  - Saving bias-correction results in ./output/PAUS_advanced17/regres/optim/saveOptimObj.root ...
[09:41:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:41:39    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced17/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[09:41:41    INFO]  - starting ANNZ::doEvalReg() ... 
[09:41:41    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:41:41    INFO]  - Reading bias-correction results from ./output/PAUS_advanced17/regres/optim/saveOptimObj.root ...
[09:41:41    INFO]  - Getting optimization results from ./output/PAUS_advanced17/regres/optim/saveOptimOpt.txt ...
[09:41:41    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[09:41:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:41:42    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:41:42    INFO]  -----------------------------------------------------------------------------------------------------------
[09:41:42    INFO]  - starting storeTreeToAscii() ... 
[09:41:42    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[09:41:42    INFO]  - Will parse  ANNZ_tree_randomReg(3366)... Now in ./output/PAUS_advanced17/regres/optim/eval/ANNZ_randomReg_0000.csv
[09:41:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:41:43    INFO]  -- ANNZ_randomReg .................................. 3366  nObj
[09:41:43    INFO]  -----------------------------------------------------------------------------------------------------------
[09:41:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:41:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[09:41:43    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[09:41:51    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/optim/eval/plots/

(09:41 INFO) [40;37;1m - 27/02/19 09:41:56 - finished running ANNZ ![0m
(09:46 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:46 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:46 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:46 INFO) [40;37;1m - 27/02/19 09:46:27 - starting ANNZ[0m
(09:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced17[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data9c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.125[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:46 INFO) 
[09:46:27    INFO]  -----------------------------------------------------
[09:46:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:46:27    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:29    INFO]  - starting ANNZ::Init()  ... 
[09:46:29    INFO]  - Will generate 1 PDFs ... 
[09:46:31    INFO] --------------------------------------------------------
[09:46:31    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:46:31    INFO]  - All REJECTED MLMs: 
[09:46:31    INFO] ----------------------------------------------------------------------------------------------------------------
[09:46:33    INFO]  - Saving run information in ./output/PAUS_advanced17/regres/eval_nFile0/saveOpt.txt ...
[09:47:00    INFO]  - starting inputToFullTree(ANNz_data9c.csv) ... 
[09:47:00    INFO]  - Found 3367 lines in file PAUS/ANNz_data9c.csv -> total so far = 3367 ... 
[09:47:00    INFO]  - Now reading-in PAUS/ANNz_data9c.csv ... 
[09:47:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:47:00    INFO]  -- ANNZ_tree_eval .................................. 3367  nLine
[09:47:00    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[09:47:00    INFO]  -----------------------------------------------------------------------------------------------------------
[09:47:01    INFO]  - starting ANNZ::Eval() ... 
[09:47:01    INFO]  - starting ANNZ::doEvalReg() ... 
[09:47:01    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:47:01    INFO]  - Reading bias-correction results from ./output/PAUS_advanced17/regres/optim/saveOptimObj.root ...
[09:47:01    INFO]  - Getting optimization results from ./output/PAUS_advanced17/regres/optim/saveOptimOpt.txt ...
[09:47:01    INFO]  - creating MLM trees from input ...
[09:47:01    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,ANNZ_6,ANNZ_8,ANNZ_14,ANNZ_16,
[09:47:01    INFO]  - starting ANNZ::loadReaders() ... 
[09:48:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:48:33    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[09:48:33    INFO]  -----------------------------------------------------------------------------------------------------------
[09:48:33    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[09:48:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:48:35    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 3367  nObj
[09:48:35    INFO]  -----------------------------------------------------------------------------------------------------------
[09:48:35    INFO]  - starting storeTreeToAscii() ... 
[09:48:35    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[09:48:35    INFO]  - Will parse  ANNZ_tree_randomReg(3367)... Now in ./output/PAUS_advanced17/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[09:48:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:48:35    INFO]  -- ANNZ_randomReg .................................. 3367  nObj
[09:48:35    INFO]  -----------------------------------------------------------------------------------------------------------
[09:48:36    INFO]  - detected the target,zb in the evaluated sample - Will create performance plots ...
[09:48:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:48:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[09:48:36    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[09:48:44    INFO]  - Writing to plotting directory output/PAUS_advanced17/regres/eval_nFile0/plots/

(09:48 INFO) [40;37;1m - 27/02/19 09:48:50 - finished running ANNZ ![0m
