(11:30 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:30 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:30 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:30 INFO) [40;37;1m - 17/02/19 11:30:55 - starting ANNZ[0m
(11:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:30 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data8a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data8b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:30 INFO) 
[11:30:56    INFO]  -----------------------------------------------------
[11:30:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:30:56    INFO]  -----------------------------------------------------------------------------------------------------------
[11:31:00    INFO]  - starting inputToSplitTree() ... 
[11:31:00    INFO]  - Found 13465 lines in file PAUS/ANNz_data8a.csv -> total so far = 13465 ... 
[11:31:00    INFO]  - Found 3366 lines in file PAUS/ANNz_data8b.csv -> total so far = 3366 ... 
[11:31:00    INFO]  - Now reading-in PAUS/ANNz_data8a.csv ... 
[11:31:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:31:02    INFO]  -- ANNZ_tree .......................................... 0  index
[11:31:02    INFO]  -- ANNZ_tree ...................................... 13465  nLine
[11:31:02    INFO]  -- ANNZ_tree ...................................... 13465  nLineFile
[11:31:02    INFO]  -- ANNZ_tree ...................................... 13465  nObj
[11:31:02    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:31:02    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[11:31:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:31:02    INFO]  - Now reading-in PAUS/ANNz_data8b.csv ... 
[11:31:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:31:02    INFO]  -- ANNZ_tree .......................................... 0  index
[11:31:02    INFO]  -- ANNZ_tree ...................................... 16831  nLine
[11:31:02    INFO]  -- ANNZ_tree ....................................... 3366  nLineFile
[11:31:02    INFO]  -- ANNZ_tree ....................................... 3366  nObj
[11:31:02    INFO]  -- ANNZ_tree ....................................... 3366  nTest
[11:31:02    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[11:31:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:31:03    INFO]  - Writing to plotting directory output/PAUS_advanced14/rootIn/plots/
[11:31:05    INFO]  - Writing to plotting directory output/PAUS_advanced14/rootIn/plots/

(11:31 INFO) [40;37;1m - 17/02/19 11:31:06 - finished running ANNZ ![0m
(11:31 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:31 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:31 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:31 INFO) [40;37;1m - 17/02/19 11:31:57 - starting ANNZ[0m
(11:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=79591:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:31 INFO) 
[11:31:57    INFO]  -----------------------------------------------------
[11:31:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:31:57    INFO]  -----------------------------------------------------------------------------------------------------------
[11:31:58    INFO]  - starting ANNZ::Init()  ... 
[11:31:59    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_0/saveOpt.txt ...
[11:32:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:32:14    INFO] ----------------------------------------------------------------------------------------------------
[11:32:14    INFO]  - will book (ANNZ_0) method(ANN) with options: :HiddenLayers=N+2,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=79591:VarTransform=N
[11:32:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:32:14    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:32:14    INFO]      cuts (train):        ,
[11:32:14    INFO]      cuts (valid):       
[11:32:14    INFO]    - weights:            1
[11:32:14    INFO] ----------------------------------------------------------------------------------------------------
[11:32:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:30:32    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[12:30:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[12:30:36    INFO]  - Will gen. errors by KNN method ...
[12:30:37    INFO]  - starting ANNZ::loadReaders() ... 
[12:30:38    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[12:30:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:30:42    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:30:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:30:42    INFO]  -----------------------------------------------------------------------------------------------------------
[12:30:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:30:43    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:30:43    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:30:43    INFO]  -----------------------------------------------------------------------------------------------------------
[12:30:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[12:30:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:30:46    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:30:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:30:46    INFO]  -----------------------------------------------------------------------------------------------------------
[12:30:46    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:30:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:30:47    INFO]  - will try to derive a bias correction ... 
[12:30:47    INFO]  - will validate that training produced an XML file for later ... 
[12:30:47    INFO]  - starting ANNZ::loadReaders() ... 
[12:30:47    INFO]  - will validate that the training was not a complete failure ... 
[12:30:47    INFO]  - training seems to have been successful! will move on ...
[12:30:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:30:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:30:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:30:51    INFO] ----------------------------------------------------------------------------------------------------
[12:30:51    INFO]  - will book (ANNZ_0_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[12:30:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:30:51    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[12:30:51    INFO]    - weights:            1
[12:30:51    INFO] ----------------------------------------------------------------------------------------------------
[12:30:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:29:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[13:29:00    INFO]  - Will gen. errors by KNN method ...
[13:29:01    INFO]  - starting ANNZ::loadReaders() ... 
[13:29:04    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[13:29:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:29:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:29:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:29:08    INFO]  -----------------------------------------------------------------------------------------------------------
[13:29:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:29:10    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:29:10    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[13:29:10    INFO]  -----------------------------------------------------------------------------------------------------------
[13:29:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[13:29:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:29:12    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:29:12    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[13:29:12    INFO]  -----------------------------------------------------------------------------------------------------------
[13:29:13    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:29:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:29:13    INFO]  - will validate that the bias-correction actually improved the result ...
[13:29:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:29:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[13:29:17    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_0/plots/
[13:29:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_0/plots output/PAUS_advanced14/regres/train/ANNZ_0/plots_biasCor_before
[13:29:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:29:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[13:29:26    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_0/plots/
[13:29:32        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_0/plots output/PAUS_advanced14/regres/train/ANNZ_0/plots_biasCor_after
[13:29:32    INFO]  - Got original [KS-test,N_poiss]: [0.027245 , 4.46678] , after the bias-correction: [0.0237579 , 4.39847] --> will KEEP the correction !

(13:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=60547:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:29 INFO) 
[13:29:34    INFO]  -----------------------------------------------------
[13:29:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:29:34    INFO]  -----------------------------------------------------------------------------------------------------------
[13:29:35    INFO]  - starting ANNZ::Init()  ... 
[13:29:36    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_1/saveOpt.txt ...
[13:29:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:29:52    INFO] ----------------------------------------------------------------------------------------------------
[13:29:52    INFO]  - will book (ANNZ_1) method(ANN) with options: :HiddenLayers=N,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=60547:VarTransform=N
[13:29:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:29:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[13:29:52    INFO]      cuts (train):        ,
[13:29:52    INFO]      cuts (valid):       
[13:29:52    INFO]    - weights:            1
[13:29:52    INFO] ----------------------------------------------------------------------------------------------------
[13:29:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:29:15    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[15:29:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[15:29:19    INFO]  - Will gen. errors by KNN method ...
[15:29:20    INFO]  - starting ANNZ::loadReaders() ... 
[15:29:21    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[15:29:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:29:25    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:29:25    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:29:25    INFO]  -----------------------------------------------------------------------------------------------------------
[15:29:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:29:26    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:29:26    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[15:29:26    INFO]  -----------------------------------------------------------------------------------------------------------
[15:29:27    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[15:29:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:29:29    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:29:29    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[15:29:29    INFO]  -----------------------------------------------------------------------------------------------------------
[15:29:29    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:29:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:29:30    INFO]  - will try to derive a bias correction ... 
[15:29:30    INFO]  - will validate that training produced an XML file for later ... 
[15:29:30    INFO]  - starting ANNZ::loadReaders() ... 
[15:29:30    INFO]  - will validate that the training was not a complete failure ... 
[15:29:30    INFO]  - training seems to have been successful! will move on ...
[15:29:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:29:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:29:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:29:34    INFO] ----------------------------------------------------------------------------------------------------
[15:29:34    INFO]  - will book (ANNZ_1_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[15:29:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:29:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[15:29:34    INFO]    - weights:            1
[15:29:34    INFO] ----------------------------------------------------------------------------------------------------
[15:29:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:28:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[16:28:28    INFO]  - Will gen. errors by KNN method ...
[16:28:29    INFO]  - starting ANNZ::loadReaders() ... 
[16:28:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[16:28:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:28:36    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:28:36    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:28:36    INFO]  -----------------------------------------------------------------------------------------------------------
[16:28:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:28:37    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:28:37    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:28:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:28:38    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[16:28:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:28:40    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:28:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:28:40    INFO]  -----------------------------------------------------------------------------------------------------------
[16:28:40    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:28:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:28:41    INFO]  - will validate that the bias-correction actually improved the result ...
[16:28:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:28:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[16:28:45    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_1/plots/
[16:28:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_1/plots output/PAUS_advanced14/regres/train/ANNZ_1/plots_biasCor_before
[16:28:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:28:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[16:28:53    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_1/plots/
[16:29:00        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_1/plots output/PAUS_advanced14/regres/train/ANNZ_1/plots_biasCor_after
[16:29:00    INFO]  - Got original [KS-test,N_poiss]: [0.0158668 , 3.51119] , after the bias-correction: [0.0158941 , 3.53028] --> will KEEP the correction !

(16:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=62898:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:29 INFO) 
[16:29:02    INFO]  -----------------------------------------------------
[16:29:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:29:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:03    INFO]  - starting ANNZ::Init()  ... 
[16:29:04    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_2/saveOpt.txt ...
[16:29:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:29:20    INFO] ----------------------------------------------------------------------------------------------------
[16:29:20    INFO]  - will book (ANNZ_2) method(ANN) with options: :HiddenLayers=N,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=62898:VarTransform=N,P
[16:29:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:29:20    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:29:20    INFO]      cuts (train):        ,
[16:29:20    INFO]      cuts (valid):       
[16:29:20    INFO]    - weights:            1
[16:29:20    INFO] ----------------------------------------------------------------------------------------------------
[16:29:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:54:40    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[16:54:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[16:54:44    INFO]  - Will gen. errors by KNN method ...
[16:54:46    INFO]  - starting ANNZ::loadReaders() ... 
[16:54:49    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[16:54:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:53    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:54:53    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:54:53    INFO]  -----------------------------------------------------------------------------------------------------------
[16:54:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:55    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:54:55    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:54:55    INFO]  -----------------------------------------------------------------------------------------------------------
[16:54:56    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[16:54:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:57    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:54:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:54:57    INFO]  -----------------------------------------------------------------------------------------------------------
[16:54:58    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:54:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:54:58    INFO]  - will try to derive a bias correction ... 
[16:54:58    INFO]  - will validate that training produced an XML file for later ... 
[16:54:58    INFO]  - starting ANNZ::loadReaders() ... 
[16:55:00    INFO]  - will validate that the training was not a complete failure ... 
[16:55:00    INFO]  - training seems to have been successful! will move on ...
[16:55:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:55:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:55:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:55:05    INFO] ----------------------------------------------------------------------------------------------------
[16:55:05    INFO]  - will book (ANNZ_2_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[16:55:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:55:05    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[16:55:05    INFO]    - weights:            1
[16:55:05    INFO] ----------------------------------------------------------------------------------------------------
[16:55:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:52:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[17:52:12    INFO]  - Will gen. errors by KNN method ...
[17:52:13    INFO]  - starting ANNZ::loadReaders() ... 
[17:52:17    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[17:52:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:52:22    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:52:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:52:22    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:52:24    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:52:24    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:52:24    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:25    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[17:52:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:52:26    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:52:26    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:52:26    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:27    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:52:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:52:28    INFO]  - will validate that the bias-correction actually improved the result ...
[17:52:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:52:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[17:52:31    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_2/plots/
[17:52:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_2/plots output/PAUS_advanced14/regres/train/ANNZ_2/plots_biasCor_before
[17:52:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:52:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[17:52:40    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_2/plots/
[17:52:46        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_2/plots output/PAUS_advanced14/regres/train/ANNZ_2/plots_biasCor_after
[17:52:46    INFO]  - Got original [KS-test,N_poiss]: [0.0266504 , 4.39264] , after the bias-correction: [0.0277664 , 4.38214] --> will KEEP the correction !

(17:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=20261:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:52 INFO) 
[17:52:48    INFO]  -----------------------------------------------------
[17:52:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:52:48    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:50    INFO]  - starting ANNZ::Init()  ... 
[17:52:51    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_3/saveOpt.txt ...
[17:53:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:53:07    INFO] ----------------------------------------------------------------------------------------------------
[17:53:07    INFO]  - will book (ANNZ_3) method(ANN) with options: :HiddenLayers=N+3,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=20261:VarTransform=N,P
[17:53:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:53:07    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[17:53:07    INFO]      cuts (train):        ,
[17:53:07    INFO]      cuts (valid):       
[17:53:07    INFO]    - weights:            1
[17:53:07    INFO] ----------------------------------------------------------------------------------------------------
[17:53:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
(08:33 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:33 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:33 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:33 INFO) [40;37;1m - 18/02/19 08:33:26 - starting ANNZ[0m
(08:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=21755:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:33 INFO) 
[08:33:26    INFO]  -----------------------------------------------------
[08:33:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:33:26    INFO]  -----------------------------------------------------------------------------------------------------------
[08:33:28    INFO]  - starting ANNZ::Init()  ... 
[08:33:28    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:33:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=27038[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:33 INFO) 
[08:33:28    INFO]  -----------------------------------------------------
[08:33:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:33:28    INFO]  -----------------------------------------------------------------------------------------------------------
[08:33:29    INFO]  - starting ANNZ::Init()  ... 
[08:33:29    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:33:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=92958:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:33 INFO) 
[08:33:29    INFO]  -----------------------------------------------------
[08:33:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:33:29    INFO]  -----------------------------------------------------------------------------------------------------------
[08:33:31    INFO]  - starting ANNZ::Init()  ... 
[08:33:31    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[08:33:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=76542:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:33 INFO) 
[08:33:31    INFO]  -----------------------------------------------------
[08:33:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:33:31    INFO]  -----------------------------------------------------------------------------------------------------------
[08:33:33    INFO]  - starting ANNZ::Init()  ... 
[08:33:34    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_3/saveOpt.txt ...
[08:33:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:33:51    INFO] ----------------------------------------------------------------------------------------------------
[08:33:51    INFO]  - will book (ANNZ_3) method(ANN) with options: :HiddenLayers=N+4,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=76542:VarTransform=N,P
[08:33:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:33:51    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[08:33:51    INFO]      cuts (train):        ,
[08:33:51    INFO]      cuts (valid):       
[08:33:51    INFO]    - weights:            1
[08:33:51    INFO] ----------------------------------------------------------------------------------------------------
[08:33:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:52:07    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[09:52:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[09:52:09    INFO]  - Will gen. errors by KNN method ...
[09:52:10    INFO]  - starting ANNZ::loadReaders() ... 
[09:52:14    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[09:52:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:52:19    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:52:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:52:19    INFO]  -----------------------------------------------------------------------------------------------------------
[09:52:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:52:20    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:52:20    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:52:20    INFO]  -----------------------------------------------------------------------------------------------------------
[09:52:21    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[09:52:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:52:22    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:52:22    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:52:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:52:23    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:52:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:52:24    INFO]  - will try to derive a bias correction ... 
[09:52:24    INFO]  - will validate that training produced an XML file for later ... 
[09:52:24    INFO]  - starting ANNZ::loadReaders() ... 
[09:52:27    INFO]  - will validate that the training was not a complete failure ... 
[09:52:27    INFO]  - training seems to have been successful! will move on ...
[09:52:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:52:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:52:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:52:31    INFO] ----------------------------------------------------------------------------------------------------
[09:52:31    INFO]  - will book (ANNZ_3_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[09:52:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:52:31    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[09:52:31    INFO]    - weights:            1
[09:52:31    INFO] ----------------------------------------------------------------------------------------------------
[09:52:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:49:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[10:49:52    INFO]  - Will gen. errors by KNN method ...
[10:49:53    INFO]  - starting ANNZ::loadReaders() ... 
[10:49:58    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[10:50:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:50:03    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:50:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:50:03    INFO]  -----------------------------------------------------------------------------------------------------------
[10:50:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:50:05    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:50:05    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:50:05    INFO]  -----------------------------------------------------------------------------------------------------------
[10:50:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[10:50:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:50:07    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:50:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:50:07    INFO]  -----------------------------------------------------------------------------------------------------------
[10:50:08    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:50:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:50:09    INFO]  - will validate that the bias-correction actually improved the result ...
[10:50:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:50:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[10:50:12    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_3/plots/
[10:50:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_3/plots output/PAUS_advanced14/regres/train/ANNZ_3/plots_biasCor_before
[10:50:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:50:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[10:50:21    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_3/plots/
[10:50:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_3/plots output/PAUS_advanced14/regres/train/ANNZ_3/plots_biasCor_after
[10:50:28    INFO]  - Got original [KS-test,N_poiss]: [0.0272064 , 4.21389] , after the bias-correction: [0.0261649 , 4.08727] --> will KEEP the correction !

(10:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=66311:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:50 INFO) 
[10:50:30    INFO]  -----------------------------------------------------
[10:50:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:50:30    INFO]  -----------------------------------------------------------------------------------------------------------
[10:50:32    INFO]  - starting ANNZ::Init()  ... 
[10:50:33    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_4/saveOpt.txt ...
[10:50:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:50:50    INFO] ----------------------------------------------------------------------------------------------------
[10:50:50    INFO]  - will book (ANNZ_4) method(ANN) with options: :HiddenLayers=N,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=66311:VarTransform=N
[10:50:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:50:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:50:50    INFO]      cuts (train):        ,
[10:50:50    INFO]      cuts (valid):       
[10:50:50    INFO]    - weights:            1
[10:50:50    INFO] ----------------------------------------------------------------------------------------------------
[10:50:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 13 diag elements < tolerance of 2.2204e-16
(12:14 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(12:14 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(12:14 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(12:14 INFO) [40;37;1m - 18/02/19 12:14:35 - starting ANNZ[0m
(12:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=51241:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:14 INFO) 
[12:14:35    INFO]  -----------------------------------------------------
[12:14:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:14:35    INFO]  -----------------------------------------------------------------------------------------------------------
[12:14:38    INFO]  - starting ANNZ::Init()  ... 
[12:14:39    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[12:14:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=53780:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:14 INFO) 
[12:14:39    INFO]  -----------------------------------------------------
[12:14:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:14:39    INFO]  -----------------------------------------------------------------------------------------------------------
[12:14:40    INFO]  - starting ANNZ::Init()  ... 
[12:14:40    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[12:14:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=68308:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:14 INFO) 
[12:14:40    INFO]  -----------------------------------------------------
[12:14:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:14:40    INFO]  -----------------------------------------------------------------------------------------------------------
[12:14:41    INFO]  - starting ANNZ::Init()  ... 
[12:14:41    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[12:14:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=93913:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:14 INFO) 
[12:14:42    INFO]  -----------------------------------------------------
[12:14:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:14:42    INFO]  -----------------------------------------------------------------------------------------------------------
[12:14:43    INFO]  - starting ANNZ::Init()  ... 
[12:14:43    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced14/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[12:14:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=43663:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:14 INFO) 
[12:14:43    INFO]  -----------------------------------------------------
[12:14:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:14:43    INFO]  -----------------------------------------------------------------------------------------------------------
[12:14:45    INFO]  - starting ANNZ::Init()  ... 
[12:14:46    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_4/saveOpt.txt ...
[12:14:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:14:59    INFO] ----------------------------------------------------------------------------------------------------
[12:14:59    INFO]  - will book (ANNZ_4) method(ANN) with options: :HiddenLayers=N+4,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=43663:VarTransform=N
[12:14:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:14:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[12:14:59    INFO]      cuts (train):        ,
[12:14:59    INFO]      cuts (valid):       
[12:14:59    INFO]    - weights:            1
[12:14:59    INFO] ----------------------------------------------------------------------------------------------------
[12:14:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:40:00    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[15:40:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[15:40:03    INFO]  - Will gen. errors by KNN method ...
[15:40:04    INFO]  - starting ANNZ::loadReaders() ... 
[15:40:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[15:40:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:40:10    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:40:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:40:10    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:40:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:40:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[15:40:11    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[15:40:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:40:13    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[15:40:13    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[15:40:13    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:14    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:40:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:40:14    INFO]  - will try to derive a bias correction ... 
[15:40:14    INFO]  - will validate that training produced an XML file for later ... 
[15:40:14    INFO]  - starting ANNZ::loadReaders() ... 
[15:40:14    INFO]  - will validate that the training was not a complete failure ... 
[15:40:15    INFO]  - training seems to have been successful! will move on ...
[15:40:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:40:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:40:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:40:19    INFO] ----------------------------------------------------------------------------------------------------
[15:40:19    INFO]  - will book (ANNZ_4_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[15:40:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:40:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[15:40:19    INFO]    - weights:            1
[15:40:19    INFO] ----------------------------------------------------------------------------------------------------
[15:40:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:42:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[16:42:22    INFO]  - Will gen. errors by KNN method ...
[16:42:23    INFO]  - starting ANNZ::loadReaders() ... 
[16:42:25    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[16:42:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:30    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:42:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:42:30    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:31    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:42:31    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:42:31    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[16:42:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:34    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:42:34    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:42:34    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:34    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:42:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:42:35    INFO]  - will validate that the bias-correction actually improved the result ...
[16:42:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:42:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[16:42:39    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_4/plots/
[16:42:45        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_4/plots output/PAUS_advanced14/regres/train/ANNZ_4/plots_biasCor_before
[16:42:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:42:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[16:42:48    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_4/plots/
[16:42:54        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_4/plots output/PAUS_advanced14/regres/train/ANNZ_4/plots_biasCor_after
[16:42:54    INFO]  - Got original [KS-test,N_poiss]: [0.0166339 , 3.36646] , after the bias-correction: [0.0161089 , 3.32121] --> will KEEP the correction !

(16:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=9701:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:42 INFO) 
[16:42:56    INFO]  -----------------------------------------------------
[16:42:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:42:56    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:58    INFO]  - starting ANNZ::Init()  ... 
[16:42:59    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_5/saveOpt.txt ...
[16:43:13    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:43:13    INFO] ----------------------------------------------------------------------------------------------------
[16:43:13    INFO]  - will book (ANNZ_5) method(ANN) with options: :HiddenLayers=N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=9701:VarTransform=N,P
[16:43:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:43:13    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:43:13    INFO]      cuts (train):        ,
[16:43:13    INFO]      cuts (valid):       
[16:43:13    INFO]    - weights:            1
[16:43:13    INFO] ----------------------------------------------------------------------------------------------------
[16:43:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:09:54    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[17:09:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[17:09:57    INFO]  - Will gen. errors by KNN method ...
[17:09:58    INFO]  - starting ANNZ::loadReaders() ... 
[17:10:01    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[17:10:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:10:06    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:10:06    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:10:06    INFO]  -----------------------------------------------------------------------------------------------------------
[17:10:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:10:07    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:10:07    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:10:07    INFO]  -----------------------------------------------------------------------------------------------------------
[17:10:08    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[17:10:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:10:10    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:10:10    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:10:10    INFO]  -----------------------------------------------------------------------------------------------------------
[17:10:10    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:10:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:10:11    INFO]  - will try to derive a bias correction ... 
[17:10:11    INFO]  - will validate that training produced an XML file for later ... 
[17:10:11    INFO]  - starting ANNZ::loadReaders() ... 
[17:10:13    INFO]  - will validate that the training was not a complete failure ... 
[17:10:13    INFO]  - training seems to have been successful! will move on ...
[17:10:13    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:10:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:10:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:10:17    INFO] ----------------------------------------------------------------------------------------------------
[17:10:17    INFO]  - will book (ANNZ_5_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[17:10:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:10:17    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[17:10:17    INFO]    - weights:            1
[17:10:17    INFO] ----------------------------------------------------------------------------------------------------
[17:10:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:12:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[18:12:39    INFO]  - Will gen. errors by KNN method ...
[18:12:41    INFO]  - starting ANNZ::loadReaders() ... 
[18:12:45    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[18:12:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:12:51    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:12:51    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:12:51    INFO]  -----------------------------------------------------------------------------------------------------------
[18:12:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:12:53    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:12:53    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:12:53    INFO]  -----------------------------------------------------------------------------------------------------------
[18:12:54    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[18:12:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:12:57    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:12:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:12:57    INFO]  -----------------------------------------------------------------------------------------------------------
[18:12:58    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:12:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:12:58    INFO]  - will validate that the bias-correction actually improved the result ...
[18:12:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:12:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[18:13:02    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_5/plots/
[18:13:09        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_5/plots output/PAUS_advanced14/regres/train/ANNZ_5/plots_biasCor_before
[18:13:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:13:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[18:13:11    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_5/plots/
[18:13:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_5/plots output/PAUS_advanced14/regres/train/ANNZ_5/plots_biasCor_after
[18:13:18    INFO]  - Got original [KS-test,N_poiss]: [0.0224715 , 4.17684] , after the bias-correction: [0.0212257 , 3.92777] --> will KEEP the correction !

(18:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=41324:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:13 INFO) 
[18:13:21    INFO]  -----------------------------------------------------
[18:13:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:13:21    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:22    INFO]  - starting ANNZ::Init()  ... 
[18:13:23    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_6/saveOpt.txt ...
[18:13:38    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:13:38    INFO] ----------------------------------------------------------------------------------------------------
[18:13:38    INFO]  - will book (ANNZ_6) method(ANN) with options: :HiddenLayers=N+2,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=41324:VarTransform=N,P
[18:13:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:13:38    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:13:38    INFO]      cuts (train):        ,
[18:13:38    INFO]      cuts (valid):       
[18:13:38    INFO]    - weights:            1
[18:13:38    INFO] ----------------------------------------------------------------------------------------------------
[18:13:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:02:11    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[04:02:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[04:02:15    INFO]  - Will gen. errors by KNN method ...
[04:02:16    INFO]  - starting ANNZ::loadReaders() ... 
[04:02:20    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[04:02:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:02:24    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:02:24    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[04:02:24    INFO]  -----------------------------------------------------------------------------------------------------------
[04:02:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:02:26    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:02:26    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[04:02:26    INFO]  -----------------------------------------------------------------------------------------------------------
[04:02:27    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[04:02:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:02:28    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:02:28    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[04:02:28    INFO]  -----------------------------------------------------------------------------------------------------------
[04:02:29    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:02:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:02:30    INFO]  - will try to derive a bias correction ... 
[04:02:30    INFO]  - will validate that training produced an XML file for later ... 
[04:02:30    INFO]  - starting ANNZ::loadReaders() ... 
[04:02:32    INFO]  - will validate that the training was not a complete failure ... 
[04:02:32    INFO]  - training seems to have been successful! will move on ...
[04:02:32    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:02:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:02:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:02:36    INFO] ----------------------------------------------------------------------------------------------------
[04:02:36    INFO]  - will book (ANNZ_6_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[04:02:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:02:36    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[04:02:36    INFO]    - weights:            1
[04:02:36    INFO] ----------------------------------------------------------------------------------------------------
[04:02:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:02:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[05:02:39    INFO]  - Will gen. errors by KNN method ...
[05:02:40    INFO]  - starting ANNZ::loadReaders() ... 
[05:02:45    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[05:02:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:02:50    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:02:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:02:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:02:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:02:51    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:02:51    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:02:51    INFO]  -----------------------------------------------------------------------------------------------------------
[05:02:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[05:02:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:02:54    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:02:54    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:02:54    INFO]  -----------------------------------------------------------------------------------------------------------
[05:02:54    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:02:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:02:55    INFO]  - will validate that the bias-correction actually improved the result ...
[05:02:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:02:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[05:02:59    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_6/plots/
[05:03:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_6/plots output/PAUS_advanced14/regres/train/ANNZ_6/plots_biasCor_before
[05:03:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:03:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[05:03:07    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_6/plots/
[05:03:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_6/plots output/PAUS_advanced14/regres/train/ANNZ_6/plots_biasCor_after
[05:03:14    INFO]  - Got original [KS-test,N_poiss]: [0.0173531 , 3.56714] , after the bias-correction: [0.0172651 , 3.51358] --> will KEEP the correction !

(05:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=94701:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:03 INFO) 
[05:03:16    INFO]  -----------------------------------------------------
[05:03:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:03:16    INFO]  -----------------------------------------------------------------------------------------------------------
[05:03:17    INFO]  - starting ANNZ::Init()  ... 
[05:03:19    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_7/saveOpt.txt ...
[05:03:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:03:34    INFO] ----------------------------------------------------------------------------------------------------
[05:03:34    INFO]  - will book (ANNZ_7) method(ANN) with options: :HiddenLayers=N+4,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=94701:VarTransform=N
[05:03:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:03:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:03:34    INFO]      cuts (train):        ,
[05:03:34    INFO]      cuts (valid):       
[05:03:34    INFO]    - weights:            1
[05:03:34    INFO] ----------------------------------------------------------------------------------------------------
[05:03:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 8 diag elements < tolerance of 2.2204e-16
[05:37:42    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[05:37:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[05:37:46    INFO]  - Will gen. errors by KNN method ...
[05:37:47    INFO]  - starting ANNZ::loadReaders() ... 
[05:37:51    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[05:37:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:37:55    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:37:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:37:55    INFO]  -----------------------------------------------------------------------------------------------------------
[05:37:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:37:56    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:37:56    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:37:56    INFO]  -----------------------------------------------------------------------------------------------------------
[05:37:57    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[05:37:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:37:58    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:37:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:37:58    INFO]  -----------------------------------------------------------------------------------------------------------
[05:37:59    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:38:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:38:00    INFO]  - will try to derive a bias correction ... 
[05:38:00    INFO]  - will validate that training produced an XML file for later ... 
[05:38:00    INFO]  - starting ANNZ::loadReaders() ... 
[05:38:03    INFO]  - will validate that the training was not a complete failure ... 
[05:38:03    INFO]  - training seems to have been successful! will move on ...
[05:38:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:38:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:38:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:38:07    INFO] ----------------------------------------------------------------------------------------------------
[05:38:07    INFO]  - will book (ANNZ_7_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[05:38:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:38:07    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[05:38:07    INFO]    - weights:            1
[05:38:07    INFO] ----------------------------------------------------------------------------------------------------
[05:38:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:36:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[06:36:01    INFO]  - Will gen. errors by KNN method ...
[06:36:02    INFO]  - starting ANNZ::loadReaders() ... 
[06:36:07    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[06:36:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:36:12    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:36:12    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:36:12    INFO]  -----------------------------------------------------------------------------------------------------------
[06:36:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:36:13    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:36:13    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:36:13    INFO]  -----------------------------------------------------------------------------------------------------------
[06:36:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[06:36:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:36:16    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:36:16    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:36:16    INFO]  -----------------------------------------------------------------------------------------------------------
[06:36:16    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:36:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:36:17    INFO]  - will validate that the bias-correction actually improved the result ...
[06:36:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:36:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[06:36:21    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_7/plots/
[06:36:27        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_7/plots output/PAUS_advanced14/regres/train/ANNZ_7/plots_biasCor_before
[06:36:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:36:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[06:36:30    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_7/plots/
[06:36:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_7/plots output/PAUS_advanced14/regres/train/ANNZ_7/plots_biasCor_after
[06:36:36    INFO]  - Got original [KS-test,N_poiss]: [0.0322392 , 4.38902] , after the bias-correction: [0.0244879 , 4.03745] --> will KEEP the correction !

(06:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(06:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=87195:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(06:36 INFO) 
[06:36:38    INFO]  -----------------------------------------------------
[06:36:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[06:36:38    INFO]  -----------------------------------------------------------------------------------------------------------
[06:36:40    INFO]  - starting ANNZ::Init()  ... 
[06:36:41    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_8/saveOpt.txt ...
[06:36:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[06:36:56    INFO] ----------------------------------------------------------------------------------------------------
[06:36:56    INFO]  - will book (ANNZ_8) method(ANN) with options: :HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=87195:VarTransform=N,P
[06:36:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:36:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[06:36:56    INFO]      cuts (train):        ,
[06:36:56    INFO]      cuts (valid):       
[06:36:56    INFO]    - weights:            1
[06:36:56    INFO] ----------------------------------------------------------------------------------------------------
[06:36:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:00:09    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[07:00:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[07:00:13    INFO]  - Will gen. errors by KNN method ...
[07:00:14    INFO]  - starting ANNZ::loadReaders() ... 
[07:00:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[07:00:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:00:19    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:00:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:00:19    INFO]  -----------------------------------------------------------------------------------------------------------
[07:00:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:00:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:00:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:00:21    INFO]  -----------------------------------------------------------------------------------------------------------
[07:00:22    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[07:00:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:00:23    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:00:23    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:00:23    INFO]  -----------------------------------------------------------------------------------------------------------
[07:00:24    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:00:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:00:24    INFO]  - will try to derive a bias correction ... 
[07:00:24    INFO]  - will validate that training produced an XML file for later ... 
[07:00:24    INFO]  - starting ANNZ::loadReaders() ... 
[07:00:24    INFO]  - will validate that the training was not a complete failure ... 
[07:00:24    INFO]  - training seems to have been successful! will move on ...
[07:00:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:00:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:00:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:00:28    INFO] ----------------------------------------------------------------------------------------------------
[07:00:28    INFO]  - will book (ANNZ_8_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[07:00:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:00:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:00:28    INFO]    - weights:            1
[07:00:28    INFO] ----------------------------------------------------------------------------------------------------
[07:00:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:59:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[07:59:07    INFO]  - Will gen. errors by KNN method ...
[07:59:08    INFO]  - starting ANNZ::loadReaders() ... 
[07:59:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[07:59:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:59:15    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:59:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:59:15    INFO]  -----------------------------------------------------------------------------------------------------------
[07:59:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:59:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:59:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:59:17    INFO]  -----------------------------------------------------------------------------------------------------------
[07:59:18    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[07:59:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:59:19    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:59:19    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:59:19    INFO]  -----------------------------------------------------------------------------------------------------------
[07:59:20    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:59:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:59:21    INFO]  - will validate that the bias-correction actually improved the result ...
[07:59:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:59:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[07:59:24    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_8/plots/
[07:59:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_8/plots output/PAUS_advanced14/regres/train/ANNZ_8/plots_biasCor_before
[07:59:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:59:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[07:59:33    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_8/plots/
[07:59:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_8/plots output/PAUS_advanced14/regres/train/ANNZ_8/plots_biasCor_after
[07:59:39    INFO]  - Got original [KS-test,N_poiss]: [0.0245866 , 4.38179] , after the bias-correction: [0.0227963 , 4.22026] --> will KEEP the correction !

(07:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=81589:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:59 INFO) 
[07:59:42    INFO]  -----------------------------------------------------
[07:59:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:59:42    INFO]  -----------------------------------------------------------------------------------------------------------
[07:59:43    INFO]  - starting ANNZ::Init()  ... 
[07:59:44    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_9/saveOpt.txt ...
[07:59:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:59:59    INFO] ----------------------------------------------------------------------------------------------------
[07:59:59    INFO]  - will book (ANNZ_9) method(ANN) with options: :HiddenLayers=N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=81589:VarTransform=N,P
[07:59:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:59:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:59:59    INFO]      cuts (train):        ,
[07:59:59    INFO]      cuts (valid):       
[07:59:59    INFO]    - weights:            1
[07:59:59    INFO] ----------------------------------------------------------------------------------------------------
[07:59:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:55:01    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[08:55:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[08:55:02    INFO]  - Will gen. errors by KNN method ...
[08:55:04    INFO]  - starting ANNZ::loadReaders() ... 
[08:55:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[08:55:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:55:09    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:55:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[08:55:09    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:55:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:55:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[08:55:11    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[08:55:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:55:13    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[08:55:13    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[08:55:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:14    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:55:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:55:14    INFO]  - will try to derive a bias correction ... 
[08:55:14    INFO]  - will validate that training produced an XML file for later ... 
[08:55:14    INFO]  - starting ANNZ::loadReaders() ... 
[08:55:14    INFO]  - will validate that the training was not a complete failure ... 
[08:55:14    INFO]  - training seems to have been successful! will move on ...
[08:55:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:55:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:55:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:55:18    INFO] ----------------------------------------------------------------------------------------------------
[08:55:18    INFO]  - will book (ANNZ_9_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[08:55:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:55:18    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[08:55:18    INFO]    - weights:            1
[08:55:18    INFO] ----------------------------------------------------------------------------------------------------
[08:55:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:56:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[09:56:24    INFO]  - Will gen. errors by KNN method ...
[09:56:26    INFO]  - starting ANNZ::loadReaders() ... 
[09:56:28    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[09:56:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:56:34    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:56:34    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[09:56:34    INFO]  -----------------------------------------------------------------------------------------------------------
[09:56:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:56:36    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:56:36    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[09:56:36    INFO]  -----------------------------------------------------------------------------------------------------------
[09:56:37    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[09:56:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:56:38    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[09:56:38    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:56:38    INFO]  -----------------------------------------------------------------------------------------------------------
[09:56:39    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:56:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:56:40    INFO]  - will validate that the bias-correction actually improved the result ...
[09:56:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:56:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[09:56:43    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_9/plots/
[09:56:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_9/plots output/PAUS_advanced14/regres/train/ANNZ_9/plots_biasCor_before
[09:56:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:56:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[09:56:52    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_9/plots/
[09:56:59        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_9/plots output/PAUS_advanced14/regres/train/ANNZ_9/plots_biasCor_after
[09:56:59    INFO]  - Got original [KS-test,N_poiss]: [0.0168854 , 3.80037] , after the bias-correction: [0.0167506 , 3.69964] --> will KEEP the correction !

(09:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=59627:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:57 INFO) 
[09:57:02    INFO]  -----------------------------------------------------
[09:57:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:57:02    INFO]  -----------------------------------------------------------------------------------------------------------
[09:57:03    INFO]  - starting ANNZ::Init()  ... 
[09:57:04    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_10/saveOpt.txt ...
[09:57:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:57:20    INFO] ----------------------------------------------------------------------------------------------------
[09:57:20    INFO]  - will book (ANNZ_10) method(ANN) with options: :HiddenLayers=N+4,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=59627:VarTransform=N,P
[09:57:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:57:20    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:57:20    INFO]      cuts (train):        ,
[09:57:20    INFO]      cuts (valid):       
[09:57:20    INFO]    - weights:            1
[09:57:20    INFO] ----------------------------------------------------------------------------------------------------
[09:57:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:50:19    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[10:50:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[10:50:21    INFO]  - Will gen. errors by KNN method ...
[10:50:22    INFO]  - starting ANNZ::loadReaders() ... 
[10:50:27    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[10:50:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:50:31    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:50:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:50:31    INFO]  -----------------------------------------------------------------------------------------------------------
[10:50:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:50:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:50:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:50:33    INFO]  -----------------------------------------------------------------------------------------------------------
[10:50:34    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[10:50:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:50:35    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:50:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:50:35    INFO]  -----------------------------------------------------------------------------------------------------------
[10:50:36    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:50:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:50:37    INFO]  - will try to derive a bias correction ... 
[10:50:37    INFO]  - will validate that training produced an XML file for later ... 
[10:50:37    INFO]  - starting ANNZ::loadReaders() ... 
[10:50:40    INFO]  - will validate that the training was not a complete failure ... 
[10:50:40    INFO]  - training seems to have been successful! will move on ...
[10:50:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:50:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:50:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:50:45    INFO] ----------------------------------------------------------------------------------------------------
[10:50:45    INFO]  - will book (ANNZ_10_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[10:50:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:50:45    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:50:45    INFO]    - weights:            1
[10:50:45    INFO] ----------------------------------------------------------------------------------------------------
[10:50:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:54:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[11:54:51    INFO]  - Will gen. errors by KNN method ...
[11:54:52    INFO]  - starting ANNZ::loadReaders() ... 
[11:54:57    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[11:55:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:55:03    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:55:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:55:03    INFO]  -----------------------------------------------------------------------------------------------------------
[11:55:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:55:05    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:55:05    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:55:05    INFO]  -----------------------------------------------------------------------------------------------------------
[11:55:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[11:55:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:55:07    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:55:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:55:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:55:08    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:55:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:55:09    INFO]  - will validate that the bias-correction actually improved the result ...
[11:55:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:55:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[11:55:13    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_10/plots/
[11:55:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_10/plots output/PAUS_advanced14/regres/train/ANNZ_10/plots_biasCor_before
[11:55:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:55:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[11:55:23    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_10/plots/
[11:55:34        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_10/plots output/PAUS_advanced14/regres/train/ANNZ_10/plots_biasCor_after
[11:55:34    INFO]  - Got original [KS-test,N_poiss]: [0.0268941 , 4.34202] , after the bias-correction: [0.0257509 , 4.14941] --> will KEEP the correction !

(11:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=5382:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:55 INFO) 
[11:55:37    INFO]  -----------------------------------------------------
[11:55:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:55:37    INFO]  -----------------------------------------------------------------------------------------------------------
[11:55:39    INFO]  - starting ANNZ::Init()  ... 
[11:55:40    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_11/saveOpt.txt ...
[11:55:57    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:55:57    INFO] ----------------------------------------------------------------------------------------------------
[11:55:57    INFO]  - will book (ANNZ_11) method(ANN) with options: :HiddenLayers=N+4,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=5382:VarTransform=N,P
[11:55:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:55:57    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:55:57    INFO]      cuts (train):        ,
[11:55:57    INFO]      cuts (valid):       
[11:55:57    INFO]    - weights:            1
[11:55:57    INFO] ----------------------------------------------------------------------------------------------------
[11:55:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:46:33    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[16:46:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[16:46:34    INFO]  - Will gen. errors by KNN method ...
[16:46:36    INFO]  - starting ANNZ::loadReaders() ... 
[16:46:37    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[16:46:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:46:42    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:46:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:46:42    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:46:43    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:46:43    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:46:43    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:44    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[16:46:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:46:46    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:46:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:46:46    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:47    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:46:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:46:47    INFO]  - will try to derive a bias correction ... 
[16:46:47    INFO]  - will validate that training produced an XML file for later ... 
[16:46:47    INFO]  - starting ANNZ::loadReaders() ... 
[16:46:47    INFO]  - will validate that the training was not a complete failure ... 
[16:46:47    INFO]  - training seems to have been successful! will move on ...
[16:46:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:46:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:46:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:46:52    INFO] ----------------------------------------------------------------------------------------------------
[16:46:52    INFO]  - will book (ANNZ_11_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[16:46:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:46:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[16:46:52    INFO]    - weights:            1
[16:46:52    INFO] ----------------------------------------------------------------------------------------------------
[16:46:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:06:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[18:06:21    INFO]  - Will gen. errors by KNN method ...
[18:06:23    INFO]  - starting ANNZ::loadReaders() ... 
[18:06:25    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[18:06:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:06:32    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:06:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:06:32    INFO]  -----------------------------------------------------------------------------------------------------------
[18:06:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:06:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:06:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:06:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:06:36    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[18:06:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:06:38    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:06:38    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:06:38    INFO]  -----------------------------------------------------------------------------------------------------------
[18:06:38    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:06:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:06:39    INFO]  - will validate that the bias-correction actually improved the result ...
[18:06:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:06:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[18:06:43    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_11/plots/
[18:06:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_11/plots output/PAUS_advanced14/regres/train/ANNZ_11/plots_biasCor_before
[18:06:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:06:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[18:06:52    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_11/plots/
[18:06:59        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_11/plots output/PAUS_advanced14/regres/train/ANNZ_11/plots_biasCor_after
[18:06:59    INFO]  - Got original [KS-test,N_poiss]: [0.0114611 , 3.07198] , after the bias-correction: [0.0119981 , 3.01201] --> will KEEP the correction !

(18:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=52253:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:07 INFO) 
[18:07:02    INFO]  -----------------------------------------------------
[18:07:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:07:02    INFO]  -----------------------------------------------------------------------------------------------------------
[18:07:03    INFO]  - starting ANNZ::Init()  ... 
[18:07:05    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_12/saveOpt.txt ...
[18:07:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:07:23    INFO] ----------------------------------------------------------------------------------------------------
[18:07:23    INFO]  - will book (ANNZ_12) method(ANN) with options: :HiddenLayers=N+2,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=52253:VarTransform=N
[18:07:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:07:23    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:07:23    INFO]      cuts (train):        ,
[18:07:23    INFO]      cuts (valid):       
[18:07:23    INFO]    - weights:            1
[18:07:23    INFO] ----------------------------------------------------------------------------------------------------
[18:07:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::DecomposeLUCrout>: matrix is singular
Error in <TDecompLU::InvertLU>: matrix is singular, 33 diag elements < tolerance of 2.2204e-16
(10:12 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(10:12 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(10:12 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(10:12 INFO) [40;37;1m - 20/02/19 10:12:57 - starting ANNZ[0m
(10:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=11620:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:12 INFO) 
[10:12:57    INFO]  -----------------------------------------------------
[10:12:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:12:57    INFO]  -----------------------------------------------------------------------------------------------------------
[10:12:59    INFO]  - starting ANNZ::Init()  ... 
[10:12:59    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[10:12:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=21337:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:12 INFO) 
[10:12:59    INFO]  -----------------------------------------------------
[10:12:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:12:59    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:01    INFO]  - starting ANNZ::Init()  ... 
[10:13:01    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[10:13:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=65871:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:01    INFO]  -----------------------------------------------------
[10:13:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:01    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:03    INFO]  - starting ANNZ::Init()  ... 
[10:13:03    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[10:13:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=46140:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:03    INFO]  -----------------------------------------------------
[10:13:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:03    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:05    INFO]  - starting ANNZ::Init()  ... 
[10:13:05    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced14/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[10:13:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=90543:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:06    INFO]  -----------------------------------------------------
[10:13:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:06    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:07    INFO]  - starting ANNZ::Init()  ... 
[10:13:07    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced14/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[10:13:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=57280:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:08    INFO]  -----------------------------------------------------
[10:13:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:08    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:09    INFO]  - starting ANNZ::Init()  ... 
[10:13:10    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced14/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[10:13:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+3,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=26943:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:10    INFO]  -----------------------------------------------------
[10:13:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:10    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:12    INFO]  - starting ANNZ::Init()  ... 
[10:13:12    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced14/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[10:13:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=27892:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:13    INFO]  -----------------------------------------------------
[10:13:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:13    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:14    INFO]  - starting ANNZ::Init()  ... 
[10:13:15    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced14/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[10:13:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=56841:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:15    INFO]  -----------------------------------------------------
[10:13:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:15    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:17    INFO]  - starting ANNZ::Init()  ... 
[10:13:17    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced14/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[10:13:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=58370:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:17    INFO]  -----------------------------------------------------
[10:13:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:17    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:19    INFO]  - starting ANNZ::Init()  ... 
[10:13:19    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced14/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[10:13:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=27401:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:19    INFO]  -----------------------------------------------------
[10:13:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:19    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:21    INFO]  - starting ANNZ::Init()  ... 
[10:13:21    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced14/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[10:13:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=36556:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:22    INFO]  -----------------------------------------------------
[10:13:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:22    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:23    INFO]  - starting ANNZ::Init()  ... 
[10:13:23    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced14/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[10:13:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(10:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=90474:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:13 INFO) 
[10:13:24    INFO]  -----------------------------------------------------
[10:13:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:13:24    INFO]  -----------------------------------------------------------------------------------------------------------
[10:13:25    INFO]  - starting ANNZ::Init()  ... 
[10:13:27    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_12/saveOpt.txt ...
[10:13:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:13:45    INFO] ----------------------------------------------------------------------------------------------------
[10:13:45    INFO]  - will book (ANNZ_12) method(ANN) with options: :HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=90474:VarTransform=N
[10:13:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:13:45    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[10:13:45    INFO]      cuts (train):        ,
[10:13:45    INFO]      cuts (valid):       
[10:13:45    INFO]    - weights:            1
[10:13:45    INFO] ----------------------------------------------------------------------------------------------------
[10:13:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:29:24    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[10:29:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[10:29:28    INFO]  - Will gen. errors by KNN method ...
[10:29:30    INFO]  - starting ANNZ::loadReaders() ... 
[10:29:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[10:29:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:29:39    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:29:39    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[10:29:39    INFO]  -----------------------------------------------------------------------------------------------------------
[10:29:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:29:42    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:29:42    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[10:29:42    INFO]  -----------------------------------------------------------------------------------------------------------
[10:29:43    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[10:29:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:29:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[10:29:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[10:29:47    INFO]  -----------------------------------------------------------------------------------------------------------
[10:29:48    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:29:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:29:49    INFO]  - will try to derive a bias correction ... 
[10:29:49    INFO]  - will validate that training produced an XML file for later ... 
[10:29:49    INFO]  - starting ANNZ::loadReaders() ... 
[10:29:49    INFO]  - will validate that the training was not a complete failure ... 
[10:29:49    INFO]  - training seems to have been successful! will move on ...
[10:29:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:29:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:29:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:29:54    INFO] ----------------------------------------------------------------------------------------------------
[10:29:54    INFO]  - will book (ANNZ_12_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[10:29:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:29:54    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[10:29:54    INFO]    - weights:            1
[10:29:54    INFO] ----------------------------------------------------------------------------------------------------
[10:29:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:42:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[11:42:03    INFO]  - Will gen. errors by KNN method ...
[11:42:04    INFO]  - starting ANNZ::loadReaders() ... 
[11:42:06    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[11:42:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:42:11    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:42:11    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:42:11    INFO]  -----------------------------------------------------------------------------------------------------------
[11:42:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:42:13    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:42:13    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:42:13    INFO]  -----------------------------------------------------------------------------------------------------------
[11:42:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[11:42:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:42:15    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:42:15    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:42:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:42:16    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:42:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:42:17    INFO]  - will validate that the bias-correction actually improved the result ...
[11:42:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:42:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[11:42:21    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_12/plots/
[11:42:27        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_12/plots output/PAUS_advanced14/regres/train/ANNZ_12/plots_biasCor_before
[11:42:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:42:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[11:42:30    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_12/plots/
[11:42:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_12/plots output/PAUS_advanced14/regres/train/ANNZ_12/plots_biasCor_after
[11:42:36    INFO]  - Got original [KS-test,N_poiss]: [0.0233909 , 4.30806] , after the bias-correction: [0.022219 , 4.25054] --> will KEEP the correction !

(11:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=89689:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:42 INFO) 
[11:42:39    INFO]  -----------------------------------------------------
[11:42:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:42:39    INFO]  -----------------------------------------------------------------------------------------------------------
[11:42:40    INFO]  - starting ANNZ::Init()  ... 
[11:42:42    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_13/saveOpt.txt ...
[11:42:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:42:58    INFO] ----------------------------------------------------------------------------------------------------
[11:42:58    INFO]  - will book (ANNZ_13) method(ANN) with options: :HiddenLayers=N+1,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=89689:VarTransform=N
[11:42:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:42:58    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:42:58    INFO]      cuts (train):        ,
[11:42:58    INFO]      cuts (valid):       
[11:42:58    INFO]    - weights:            1
[11:42:58    INFO] ----------------------------------------------------------------------------------------------------
[11:42:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 22 diag elements < tolerance of 2.2204e-16
[12:03:40    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[12:03:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[12:03:44    INFO]  - Will gen. errors by KNN method ...
[12:03:45    INFO]  - starting ANNZ::loadReaders() ... 
[12:03:49    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[12:03:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:03:53    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:03:53    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:03:53    INFO]  -----------------------------------------------------------------------------------------------------------
[12:03:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:03:54    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:03:54    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[12:03:54    INFO]  -----------------------------------------------------------------------------------------------------------
[12:03:55    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[12:03:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:03:57    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[12:03:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[12:03:57    INFO]  -----------------------------------------------------------------------------------------------------------
[12:03:57    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:03:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:03:58    INFO]  - will try to derive a bias correction ... 
[12:03:58    INFO]  - will validate that training produced an XML file for later ... 
[12:03:58    INFO]  - starting ANNZ::loadReaders() ... 
[12:04:01    INFO]  - will validate that the training was not a complete failure ... 
[12:04:01    INFO]  - training seems to have been successful! will move on ...
[12:04:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:04:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:04:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:04:05    INFO] ----------------------------------------------------------------------------------------------------
[12:04:05    INFO]  - will book (ANNZ_13_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[12:04:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:04:05    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[12:04:05    INFO]    - weights:            1
[12:04:05    INFO] ----------------------------------------------------------------------------------------------------
[12:04:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:02:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[13:02:17    INFO]  - Will gen. errors by KNN method ...
[13:02:18    INFO]  - starting ANNZ::loadReaders() ... 
[13:02:23    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[13:02:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:02:27    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:02:27    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:02:27    INFO]  -----------------------------------------------------------------------------------------------------------
[13:02:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:02:29    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:02:29    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[13:02:29    INFO]  -----------------------------------------------------------------------------------------------------------
[13:02:30    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[13:02:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:02:31    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[13:02:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[13:02:31    INFO]  -----------------------------------------------------------------------------------------------------------
[13:02:32    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:02:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:02:33    INFO]  - will validate that the bias-correction actually improved the result ...
[13:02:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:02:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[13:02:37    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_13/plots/
[13:02:44        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_13/plots output/PAUS_advanced14/regres/train/ANNZ_13/plots_biasCor_before
[13:02:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:02:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[13:02:46    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_13/plots/
[13:02:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_13/plots output/PAUS_advanced14/regres/train/ANNZ_13/plots_biasCor_after
[13:02:53    INFO]  - Got original [KS-test,N_poiss]: [0.0285956 , 4.61934] , after the bias-correction: [0.0260741 , 4.41301] --> will KEEP the correction !

(13:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=76820:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:02 INFO) 
[13:02:56    INFO]  -----------------------------------------------------
[13:02:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:02:56    INFO]  -----------------------------------------------------------------------------------------------------------
[13:02:57    INFO]  - starting ANNZ::Init()  ... 
[13:02:58    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_14/saveOpt.txt ...
[13:03:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:03:15    INFO] ----------------------------------------------------------------------------------------------------
[13:03:15    INFO]  - will book (ANNZ_14) method(ANN) with options: :HiddenLayers=N+4,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=76820:VarTransform=N
[13:03:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:03:15    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[13:03:15    INFO]      cuts (train):        ,
[13:03:15    INFO]      cuts (valid):       
[13:03:15    INFO]    - weights:            1
[13:03:15    INFO] ----------------------------------------------------------------------------------------------------
[13:03:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 6 diag elements < tolerance of 2.2204e-16
[14:40:51    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[14:40:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[14:40:56    INFO]  - Will gen. errors by KNN method ...
[14:40:58    INFO]  - starting ANNZ::loadReaders() ... 
[14:41:02    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[14:41:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:41:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:41:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:41:08    INFO]  -----------------------------------------------------------------------------------------------------------
[14:41:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:41:13    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:41:13    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[14:41:13    INFO]  -----------------------------------------------------------------------------------------------------------
[14:41:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[14:41:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:41:18    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[14:41:18    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[14:41:18    INFO]  -----------------------------------------------------------------------------------------------------------
[14:41:19    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:41:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:41:20    INFO]  - will try to derive a bias correction ... 
[14:41:20    INFO]  - will validate that training produced an XML file for later ... 
[14:41:20    INFO]  - starting ANNZ::loadReaders() ... 
[14:41:23    INFO]  - will validate that the training was not a complete failure ... 
[14:41:23    INFO]  - training seems to have been successful! will move on ...
[14:41:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:41:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:41:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:41:28    INFO] ----------------------------------------------------------------------------------------------------
[14:41:28    INFO]  - will book (ANNZ_14_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[14:41:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:41:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[14:41:28    INFO]    - weights:            1
[14:41:28    INFO] ----------------------------------------------------------------------------------------------------
[14:41:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:14:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[16:14:07    INFO]  - Will gen. errors by KNN method ...
[16:14:09    INFO]  - starting ANNZ::loadReaders() ... 
[16:14:14    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[16:14:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:14:22    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:14:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:14:22    INFO]  -----------------------------------------------------------------------------------------------------------
[16:14:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:14:24    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:14:24    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[16:14:24    INFO]  -----------------------------------------------------------------------------------------------------------
[16:14:25    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[16:14:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:14:27    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[16:14:27    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[16:14:27    INFO]  -----------------------------------------------------------------------------------------------------------
[16:14:27    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:14:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:14:28    INFO]  - will validate that the bias-correction actually improved the result ...
[16:14:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:14:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[16:14:32    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_14/plots/
[16:14:40        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_14/plots output/PAUS_advanced14/regres/train/ANNZ_14/plots_biasCor_before
[16:14:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:14:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[16:14:43    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_14/plots/
[16:14:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_14/plots output/PAUS_advanced14/regres/train/ANNZ_14/plots_biasCor_after
[16:14:51    INFO]  - Got original [KS-test,N_poiss]: [0.02676 , 4.34668] , after the bias-correction: [0.0266548 , 4.25754] --> will KEEP the correction !

(16:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=37999:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:14 INFO) 
[16:14:55    INFO]  -----------------------------------------------------
[16:14:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:14:55    INFO]  -----------------------------------------------------------------------------------------------------------
[16:14:56    INFO]  - starting ANNZ::Init()  ... 
[16:14:58    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_15/saveOpt.txt ...
[16:15:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:15:19    INFO] ----------------------------------------------------------------------------------------------------
[16:15:19    INFO]  - will book (ANNZ_15) method(ANN) with options: :HiddenLayers=N,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=37999:VarTransform=N
[16:15:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:15:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:15:19    INFO]      cuts (train):        ,
[16:15:19    INFO]      cuts (valid):       
[16:15:19    INFO]    - weights:            1
[16:15:19    INFO] ----------------------------------------------------------------------------------------------------
[16:15:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 30 diag elements < tolerance of 2.2204e-16
[17:27:49    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[17:27:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[17:27:54    INFO]  - Will gen. errors by KNN method ...
[17:27:55    INFO]  - starting ANNZ::loadReaders() ... 
[17:27:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[17:28:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:28:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:28:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:28:04    INFO]  -----------------------------------------------------------------------------------------------------------
[17:28:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:28:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:28:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[17:28:06    INFO]  -----------------------------------------------------------------------------------------------------------
[17:28:07    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[17:28:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:28:08    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[17:28:08    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[17:28:08    INFO]  -----------------------------------------------------------------------------------------------------------
[17:28:09    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:28:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:28:10    INFO]  - will try to derive a bias correction ... 
[17:28:10    INFO]  - will validate that training produced an XML file for later ... 
[17:28:10    INFO]  - starting ANNZ::loadReaders() ... 
[17:28:13    INFO]  - will validate that the training was not a complete failure ... 
[17:28:13    INFO]  - training seems to have been successful! will move on ...
[17:28:13    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:28:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:28:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:28:18    INFO] ----------------------------------------------------------------------------------------------------
[17:28:18    INFO]  - will book (ANNZ_15_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[17:28:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:28:18    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[17:28:18    INFO]    - weights:            1
[17:28:18    INFO] ----------------------------------------------------------------------------------------------------
[17:28:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:36:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[18:36:35    INFO]  - Will gen. errors by KNN method ...
[18:36:37    INFO]  - starting ANNZ::loadReaders() ... 
[18:36:41    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[18:36:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:36:47    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:36:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:36:47    INFO]  -----------------------------------------------------------------------------------------------------------
[18:36:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:36:48    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:36:48    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[18:36:48    INFO]  -----------------------------------------------------------------------------------------------------------
[18:36:49    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[18:36:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:36:51    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[18:36:51    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[18:36:51    INFO]  -----------------------------------------------------------------------------------------------------------
[18:36:52    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:36:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:36:53    INFO]  - will validate that the bias-correction actually improved the result ...
[18:36:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:36:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[18:36:57    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_15/plots/
[18:37:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_15/plots output/PAUS_advanced14/regres/train/ANNZ_15/plots_biasCor_before
[18:37:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:37:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[18:37:07    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_15/plots/
[18:37:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_15/plots output/PAUS_advanced14/regres/train/ANNZ_15/plots_biasCor_after
[18:37:14    INFO]  - Got original [KS-test,N_poiss]: [0.0286785 , 4.46373] , after the bias-correction: [0.025447 , 4.33315] --> will KEEP the correction !

(18:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=11429:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:37 INFO) 
[18:37:17    INFO]  -----------------------------------------------------
[18:37:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:37:17    INFO]  -----------------------------------------------------------------------------------------------------------
[18:37:19    INFO]  - starting ANNZ::Init()  ... 
[18:37:20    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_16/saveOpt.txt ...
[18:37:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:37:40    INFO] ----------------------------------------------------------------------------------------------------
[18:37:40    INFO]  - will book (ANNZ_16) method(ANN) with options: :HiddenLayers=N+3,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=11429:VarTransform=N
[18:37:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:37:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[18:37:40    INFO]      cuts (train):        ,
[18:37:40    INFO]      cuts (valid):       
[18:37:40    INFO]    - weights:            1
[18:37:40    INFO] ----------------------------------------------------------------------------------------------------
[18:37:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 10 diag elements < tolerance of 2.2204e-16
(20:10 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(20:10 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(20:10 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(20:10 INFO) [40;37;1m - 20/02/19 20:10:45 - starting ANNZ[0m
(20:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=13462:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:10 INFO) 
[20:10:45    INFO]  -----------------------------------------------------
[20:10:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:10:45    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:47    INFO]  - starting ANNZ::Init()  ... 
[20:10:47    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[20:10:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=41014:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:10 INFO) 
[20:10:47    INFO]  -----------------------------------------------------
[20:10:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:10:47    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:48    INFO]  - starting ANNZ::Init()  ... 
[20:10:48    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[20:10:48    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=79119:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:10 INFO) 
[20:10:48    INFO]  -----------------------------------------------------
[20:10:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:10:48    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:50    INFO]  - starting ANNZ::Init()  ... 
[20:10:50    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[20:10:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=74780:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:10 INFO) 
[20:10:51    INFO]  -----------------------------------------------------
[20:10:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:10:51    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:52    INFO]  - starting ANNZ::Init()  ... 
[20:10:53    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced14/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[20:10:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=4189:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:10 INFO) 
[20:10:53    INFO]  -----------------------------------------------------
[20:10:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:10:53    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:54    INFO]  - starting ANNZ::Init()  ... 
[20:10:54    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced14/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[20:10:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=21316:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:10 INFO) 
[20:10:54    INFO]  -----------------------------------------------------
[20:10:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:10:54    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:56    INFO]  - starting ANNZ::Init()  ... 
[20:10:56    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced14/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[20:10:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=37318:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:10 INFO) 
[20:10:57    INFO]  -----------------------------------------------------
[20:10:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:10:57    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:58    INFO]  - starting ANNZ::Init()  ... 
[20:10:59    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced14/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[20:10:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=18141:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:10 INFO) 
[20:10:59    INFO]  -----------------------------------------------------
[20:10:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:10:59    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:00    INFO]  - starting ANNZ::Init()  ... 
[20:11:01    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced14/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[20:11:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=43219:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:01    INFO]  -----------------------------------------------------
[20:11:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:01    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:02    INFO]  - starting ANNZ::Init()  ... 
[20:11:02    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced14/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[20:11:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=77860:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:03    INFO]  -----------------------------------------------------
[20:11:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:03    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:04    INFO]  - starting ANNZ::Init()  ... 
[20:11:04    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced14/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[20:11:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=86755:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:04    INFO]  -----------------------------------------------------
[20:11:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:04    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:06    INFO]  - starting ANNZ::Init()  ... 
[20:11:06    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced14/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[20:11:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=77712:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:07    INFO]  -----------------------------------------------------
[20:11:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:07    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:08    INFO]  - starting ANNZ::Init()  ... 
[20:11:08    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced14/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[20:11:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=40891:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:08    INFO]  -----------------------------------------------------
[20:11:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:08    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:10    INFO]  - starting ANNZ::Init()  ... 
[20:11:10    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced14/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[20:11:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=90051:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:10    INFO]  -----------------------------------------------------
[20:11:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:10    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:11    INFO]  - starting ANNZ::Init()  ... 
[20:11:12    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced14/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[20:11:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=3466:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:12    INFO]  -----------------------------------------------------
[20:11:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:12    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:14    INFO]  - starting ANNZ::Init()  ... 
[20:11:14    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced14/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[20:11:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=73181:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:14    INFO]  -----------------------------------------------------
[20:11:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:14    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:16    INFO]  - starting ANNZ::Init()  ... 
[20:11:17    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced14/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[20:11:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=99425:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:17    INFO]  -----------------------------------------------------
[20:11:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:17    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:18    INFO]  - starting ANNZ::Init()  ... 
[20:11:20    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_16/saveOpt.txt ...
[20:11:38    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:11:39    INFO] ----------------------------------------------------------------------------------------------------
[20:11:39    INFO]  - will book (ANNZ_16) method(ANN) with options: :HiddenLayers=N+1,N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=99425:VarTransform=N
[20:11:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:11:39    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[20:11:39    INFO]      cuts (train):        ,
[20:11:39    INFO]      cuts (valid):       
[20:11:39    INFO]    - weights:            1
[20:11:39    INFO] ----------------------------------------------------------------------------------------------------
[20:11:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 51 diag elements < tolerance of 2.2204e-16
[21:38:03    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[21:38:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[21:38:06    INFO]  - Will gen. errors by KNN method ...
[21:38:08    INFO]  - starting ANNZ::loadReaders() ... 
[21:38:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[21:38:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:38:21    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:38:21    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:38:21    INFO]  -----------------------------------------------------------------------------------------------------------
[21:38:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:38:23    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:38:23    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:38:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:38:24    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[21:38:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:38:25    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:38:25    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:38:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:38:26    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:38:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:38:27    INFO]  - will try to derive a bias correction ... 
[21:38:27    INFO]  - will validate that training produced an XML file for later ... 
[21:38:27    INFO]  - starting ANNZ::loadReaders() ... 
[21:38:32    INFO]  - will validate that the training was not a complete failure ... 
[21:38:33    INFO]  - training seems to have been successful! will move on ...
[21:38:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:38:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:38:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:38:38    INFO] ----------------------------------------------------------------------------------------------------
[21:38:38    INFO]  - will book (ANNZ_16_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[21:38:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:38:38    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:38:38    INFO]    - weights:            1
[21:38:38    INFO] ----------------------------------------------------------------------------------------------------
[21:38:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:04:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[23:04:53    INFO]  - Will gen. errors by KNN method ...
[23:04:55    INFO]  - starting ANNZ::loadReaders() ... 
[23:05:03    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[23:05:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:05:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:05:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:05:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:05:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:05:10    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:05:10    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:05:10    INFO]  -----------------------------------------------------------------------------------------------------------
[23:05:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[23:05:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:05:16    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:05:16    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:05:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:05:17    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:05:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:05:19    INFO]  - will validate that the bias-correction actually improved the result ...
[23:05:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:05:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[23:05:23    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_16/plots/
[23:05:31        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_16/plots output/PAUS_advanced14/regres/train/ANNZ_16/plots_biasCor_before
[23:05:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:05:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[23:05:34    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_16/plots/
[23:05:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_16/plots output/PAUS_advanced14/regres/train/ANNZ_16/plots_biasCor_after
[23:05:42    INFO]  - Got original [KS-test,N_poiss]: [0.0313447 , 4.65064] , after the bias-correction: [0.0260582 , 4.54598] --> will KEEP the correction !

(23:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=435[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:05 INFO) 
[23:05:46    INFO]  -----------------------------------------------------
[23:05:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:05:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:05:48    INFO]  - starting ANNZ::Init()  ... 
[23:05:49    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_17/saveOpt.txt ...
[23:06:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:06:07    INFO] ----------------------------------------------------------------------------------------------------
[23:06:07    INFO]  - will book (ANNZ_17) method(ANN) with options: :HiddenLayers=N+2,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=435:VarTransform=N,P
[23:06:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:06:07    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:06:07    INFO]      cuts (train):        ,
[23:06:07    INFO]      cuts (valid):       
[23:06:07    INFO]    - weights:            1
[23:06:07    INFO] ----------------------------------------------------------------------------------------------------
[23:06:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 2 diag elements < tolerance of 2.2204e-16
(09:06 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:06 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:06 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:06 INFO) [40;37;1m - 21/02/19 09:06:48 - starting ANNZ[0m
(09:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=49497:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:06 INFO) 
[09:06:49    INFO]  -----------------------------------------------------
[09:06:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:06:49    INFO]  -----------------------------------------------------------------------------------------------------------
[09:06:51    INFO]  - starting ANNZ::Init()  ... 
[09:06:51    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[09:06:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=19694:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:06 INFO) 
[09:06:51    INFO]  -----------------------------------------------------
[09:06:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:06:51    INFO]  -----------------------------------------------------------------------------------------------------------
[09:06:52    INFO]  - starting ANNZ::Init()  ... 
[09:06:52    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[09:06:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=11975:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:06 INFO) 
[09:06:53    INFO]  -----------------------------------------------------
[09:06:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:06:53    INFO]  -----------------------------------------------------------------------------------------------------------
[09:06:54    INFO]  - starting ANNZ::Init()  ... 
[09:06:55    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[09:06:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=56794:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:06 INFO) 
[09:06:55    INFO]  -----------------------------------------------------
[09:06:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:06:55    INFO]  -----------------------------------------------------------------------------------------------------------
[09:06:57    INFO]  - starting ANNZ::Init()  ... 
[09:06:57    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced14/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[09:06:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=72709:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:06 INFO) 
[09:06:57    INFO]  -----------------------------------------------------
[09:06:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:06:57    INFO]  -----------------------------------------------------------------------------------------------------------
[09:06:59    INFO]  - starting ANNZ::Init()  ... 
[09:06:59    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced14/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[09:06:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=89:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:06 INFO) 
[09:06:59    INFO]  -----------------------------------------------------
[09:06:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:06:59    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:01    INFO]  - starting ANNZ::Init()  ... 
[09:07:02    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced14/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[09:07:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=1667:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:02    INFO]  -----------------------------------------------------
[09:07:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:02    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:04    INFO]  - starting ANNZ::Init()  ... 
[09:07:04    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced14/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[09:07:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=97922:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:04    INFO]  -----------------------------------------------------
[09:07:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:04    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:06    INFO]  - starting ANNZ::Init()  ... 
[09:07:06    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced14/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[09:07:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=49745:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:07    INFO]  -----------------------------------------------------
[09:07:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:07    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:08    INFO]  - starting ANNZ::Init()  ... 
[09:07:08    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced14/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[09:07:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=3189:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:08    INFO]  -----------------------------------------------------
[09:07:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:08    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:10    INFO]  - starting ANNZ::Init()  ... 
[09:07:10    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced14/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[09:07:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=48107:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:10    INFO]  -----------------------------------------------------
[09:07:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:10    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:12    INFO]  - starting ANNZ::Init()  ... 
[09:07:12    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced14/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[09:07:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=70426:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:12    INFO]  -----------------------------------------------------
[09:07:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:12    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:14    INFO]  - starting ANNZ::Init()  ... 
[09:07:14    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced14/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[09:07:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=12013[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:14    INFO]  -----------------------------------------------------
[09:07:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:14    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:16    INFO]  - starting ANNZ::Init()  ... 
[09:07:16    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced14/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[09:07:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=19844:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:16    INFO]  -----------------------------------------------------
[09:07:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:16    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:18    INFO]  - starting ANNZ::Init()  ... 
[09:07:18    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced14/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[09:07:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=53051:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:18    INFO]  -----------------------------------------------------
[09:07:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:18    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:20    INFO]  - starting ANNZ::Init()  ... 
[09:07:20    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced14/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[09:07:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=6040:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:20    INFO]  -----------------------------------------------------
[09:07:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:20    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:22    INFO]  - starting ANNZ::Init()  ... 
[09:07:23    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced14/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[09:07:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=32596:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:23    INFO]  -----------------------------------------------------
[09:07:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:23    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:24    INFO]  - starting ANNZ::Init()  ... 
[09:07:25    INFO]  - found trained "ANNZ_16" (./output/PAUS_advanced14/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[09:07:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=72188:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:07 INFO) 
[09:07:25    INFO]  -----------------------------------------------------
[09:07:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:07:25    INFO]  -----------------------------------------------------------------------------------------------------------
[09:07:27    INFO]  - starting ANNZ::Init()  ... 
[09:07:28    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_17/saveOpt.txt ...
[09:07:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:07:46    INFO] ----------------------------------------------------------------------------------------------------
[09:07:46    INFO]  - will book (ANNZ_17) method(ANN) with options: :HiddenLayers=N+2,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=72188:VarTransform=N
[09:07:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:07:46    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:07:46    INFO]      cuts (train):        ,
[09:07:46    INFO]      cuts (valid):       
[09:07:46    INFO]    - weights:            1
[09:07:46    INFO] ----------------------------------------------------------------------------------------------------
[09:07:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 9 diag elements < tolerance of 2.2204e-16
(09:25 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:25 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:25 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:25 INFO) [40;37;1m - 21/02/19 09:25:31 - starting ANNZ[0m
(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=67039:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:31    INFO]  -----------------------------------------------------
[09:25:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:31    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:32    INFO]  - starting ANNZ::Init()  ... 
[09:25:32    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[09:25:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=23314:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:33    INFO]  -----------------------------------------------------
[09:25:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:33    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:34    INFO]  - starting ANNZ::Init()  ... 
[09:25:34    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[09:25:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=55353:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:34    INFO]  -----------------------------------------------------
[09:25:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:34    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:36    INFO]  - starting ANNZ::Init()  ... 
[09:25:36    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[09:25:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=88476[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:36    INFO]  -----------------------------------------------------
[09:25:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:36    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:38    INFO]  - starting ANNZ::Init()  ... 
[09:25:38    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced14/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[09:25:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=33008:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:38    INFO]  -----------------------------------------------------
[09:25:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:38    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:40    INFO]  - starting ANNZ::Init()  ... 
[09:25:40    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced14/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[09:25:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=11060:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:40    INFO]  -----------------------------------------------------
[09:25:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:40    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:41    INFO]  - starting ANNZ::Init()  ... 
[09:25:42    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced14/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[09:25:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=22293:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:42    INFO]  -----------------------------------------------------
[09:25:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:42    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:43    INFO]  - starting ANNZ::Init()  ... 
[09:25:44    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced14/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[09:25:44    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=40628:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:44    INFO]  -----------------------------------------------------
[09:25:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:44    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:45    INFO]  - starting ANNZ::Init()  ... 
[09:25:46    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced14/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[09:25:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=92147:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:46    INFO]  -----------------------------------------------------
[09:25:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:46    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:47    INFO]  - starting ANNZ::Init()  ... 
[09:25:47    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced14/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[09:25:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=3867:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:48    INFO]  -----------------------------------------------------
[09:25:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:48    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:49    INFO]  - starting ANNZ::Init()  ... 
[09:25:49    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced14/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[09:25:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=75171:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:49    INFO]  -----------------------------------------------------
[09:25:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:49    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:51    INFO]  - starting ANNZ::Init()  ... 
[09:25:51    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced14/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[09:25:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=29190:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:51    INFO]  -----------------------------------------------------
[09:25:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:51    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:53    INFO]  - starting ANNZ::Init()  ... 
[09:25:53    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced14/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[09:25:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=69719:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:53    INFO]  -----------------------------------------------------
[09:25:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:53    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:54    INFO]  - starting ANNZ::Init()  ... 
[09:25:54    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced14/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[09:25:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=86644:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:55    INFO]  -----------------------------------------------------
[09:25:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:55    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:56    INFO]  - starting ANNZ::Init()  ... 
[09:25:56    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced14/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[09:25:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=60348:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:57    INFO]  -----------------------------------------------------
[09:25:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:57    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:58    INFO]  - starting ANNZ::Init()  ... 
[09:25:59    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced14/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[09:25:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=81769:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:25 INFO) 
[09:25:59    INFO]  -----------------------------------------------------
[09:25:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:25:59    INFO]  -----------------------------------------------------------------------------------------------------------
[09:26:00    INFO]  - starting ANNZ::Init()  ... 
[09:26:01    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced14/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[09:26:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+3:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=10724:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:26 INFO) 
[09:26:01    INFO]  -----------------------------------------------------
[09:26:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:26:01    INFO]  -----------------------------------------------------------------------------------------------------------
[09:26:02    INFO]  - starting ANNZ::Init()  ... 
[09:26:03    INFO]  - found trained "ANNZ_16" (./output/PAUS_advanced14/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[09:26:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(09:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=38169:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:26 INFO) 
[09:26:03    INFO]  -----------------------------------------------------
[09:26:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:26:03    INFO]  -----------------------------------------------------------------------------------------------------------
[09:26:05    INFO]  - starting ANNZ::Init()  ... 
[09:26:06    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_17/saveOpt.txt ...
[09:26:24    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:26:24    INFO] ----------------------------------------------------------------------------------------------------
[09:26:24    INFO]  - will book (ANNZ_17) method(ANN) with options: :HiddenLayers=N+2,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=38169:VarTransform=N
[09:26:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:26:24    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[09:26:24    INFO]      cuts (train):        ,
[09:26:24    INFO]      cuts (valid):       
[09:26:24    INFO]    - weights:            1
[09:26:24    INFO] ----------------------------------------------------------------------------------------------------
[09:26:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:02:18    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[11:02:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[11:02:23    INFO]  - Will gen. errors by KNN method ...
[11:02:25    INFO]  - starting ANNZ::loadReaders() ... 
[11:02:26    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[11:02:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:02:37    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:02:37    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:02:37    INFO]  -----------------------------------------------------------------------------------------------------------
[11:02:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:02:39    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:02:39    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[11:02:39    INFO]  -----------------------------------------------------------------------------------------------------------
[11:02:40    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[11:02:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:02:43    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[11:02:43    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[11:02:43    INFO]  -----------------------------------------------------------------------------------------------------------
[11:02:44    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:02:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:02:45    INFO]  - will try to derive a bias correction ... 
[11:02:45    INFO]  - will validate that training produced an XML file for later ... 
[11:02:45    INFO]  - starting ANNZ::loadReaders() ... 
[11:02:45    INFO]  - will validate that the training was not a complete failure ... 
[11:02:45    INFO]  - training seems to have been successful! will move on ...
[11:02:45    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:02:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:02:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:02:51    INFO] ----------------------------------------------------------------------------------------------------
[11:02:51    INFO]  - will book (ANNZ_17_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[11:02:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:02:51    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[11:02:51    INFO]    - weights:            1
[11:02:51    INFO] ----------------------------------------------------------------------------------------------------
[11:02:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
(11:38 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:38 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:38 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:38 INFO) [40;37;1m - 21/02/19 11:38:48 - starting ANNZ[0m
(11:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=52036:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:38 INFO) 
[11:38:48    INFO]  -----------------------------------------------------
[11:38:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:38:48    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:51    INFO]  - starting ANNZ::Init()  ... 
[11:38:51    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[11:38:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=14635:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:38 INFO) 
[11:38:52    INFO]  -----------------------------------------------------
[11:38:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:38:52    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:53    INFO]  - starting ANNZ::Init()  ... 
[11:38:53    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[11:38:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=80752:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:38 INFO) 
[11:38:53    INFO]  -----------------------------------------------------
[11:38:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:38:53    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:54    INFO]  - starting ANNZ::Init()  ... 
[11:38:54    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[11:38:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=48379:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:38 INFO) 
[11:38:54    INFO]  -----------------------------------------------------
[11:38:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:38:54    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:55    INFO]  - starting ANNZ::Init()  ... 
[11:38:56    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced14/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[11:38:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=54194:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:38 INFO) 
[11:38:56    INFO]  -----------------------------------------------------
[11:38:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:38:56    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:57    INFO]  - starting ANNZ::Init()  ... 
[11:38:57    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced14/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[11:38:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+5:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=17242:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:38 INFO) 
[11:38:57    INFO]  -----------------------------------------------------
[11:38:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:38:57    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:59    INFO]  - starting ANNZ::Init()  ... 
[11:38:59    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced14/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[11:38:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=62795:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:38 INFO) 
[11:38:59    INFO]  -----------------------------------------------------
[11:38:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:38:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:00    INFO]  - starting ANNZ::Init()  ... 
[11:39:01    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced14/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[11:39:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=78450:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:01    INFO]  -----------------------------------------------------
[11:39:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:01    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:02    INFO]  - starting ANNZ::Init()  ... 
[11:39:03    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced14/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[11:39:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=63922:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:03    INFO]  -----------------------------------------------------
[11:39:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:03    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:04    INFO]  - starting ANNZ::Init()  ... 
[11:39:04    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced14/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[11:39:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=71882:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:04    INFO]  -----------------------------------------------------
[11:39:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:04    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:05    INFO]  - starting ANNZ::Init()  ... 
[11:39:05    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced14/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[11:39:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=6760:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:05    INFO]  -----------------------------------------------------
[11:39:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:05    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:06    INFO]  - starting ANNZ::Init()  ... 
[11:39:07    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced14/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[11:39:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=2562:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:07    INFO]  -----------------------------------------------------
[11:39:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:08    INFO]  - starting ANNZ::Init()  ... 
[11:39:08    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced14/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[11:39:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=51426:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:08    INFO]  -----------------------------------------------------
[11:39:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:08    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:09    INFO]  - starting ANNZ::Init()  ... 
[11:39:09    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced14/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[11:39:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=31677:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:09    INFO]  -----------------------------------------------------
[11:39:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:09    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:10    INFO]  - starting ANNZ::Init()  ... 
[11:39:11    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced14/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[11:39:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=69589:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:11    INFO]  -----------------------------------------------------
[11:39:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:11    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:12    INFO]  - starting ANNZ::Init()  ... 
[11:39:13    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced14/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[11:39:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=26532:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:13    INFO]  -----------------------------------------------------
[11:39:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:13    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:14    INFO]  - starting ANNZ::Init()  ... 
[11:39:15    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced14/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[11:39:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=87381[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:15    INFO]  -----------------------------------------------------
[11:39:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:16    INFO]  - starting ANNZ::Init()  ... 
[11:39:17    INFO]  - found trained "ANNZ_16" (./output/PAUS_advanced14/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[11:39:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=45196:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:18    INFO]  -----------------------------------------------------
[11:39:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:18    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:19    INFO]  - starting ANNZ::Init()  ... 
[11:39:19    INFO]  - found trained "ANNZ_17" (./output/PAUS_advanced14/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[11:39:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=54954:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:39 INFO) 
[11:39:19    INFO]  -----------------------------------------------------
[11:39:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:39:19    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:20    INFO]  - starting ANNZ::Init()  ... 
[11:39:21    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_18/saveOpt.txt ...
[11:39:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:39:35    INFO] ----------------------------------------------------------------------------------------------------
[11:39:35    INFO]  - will book (ANNZ_18) method(ANN) with options: :HiddenLayers=N+4,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=54954:VarTransform=N
[11:39:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:39:35    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[11:39:35    INFO]      cuts (train):        ,
[11:39:35    INFO]      cuts (valid):       
[11:39:35    INFO]    - weights:            1
[11:39:35    INFO] ----------------------------------------------------------------------------------------------------
[11:39:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 13 diag elements < tolerance of 2.2204e-16
(16:39 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:39 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:39 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:39 INFO) [40;37;1m - 21/02/19 16:39:50 - starting ANNZ[0m
(16:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=33573:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:39 INFO) 
[16:39:50    INFO]  -----------------------------------------------------
[16:39:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:39:50    INFO]  -----------------------------------------------------------------------------------------------------------
[16:39:51    INFO]  - starting ANNZ::Init()  ... 
[16:39:51    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced14/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[16:39:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=57030:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:39 INFO) 
[16:39:52    INFO]  -----------------------------------------------------
[16:39:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:39:52    INFO]  -----------------------------------------------------------------------------------------------------------
[16:39:53    INFO]  - starting ANNZ::Init()  ... 
[16:39:53    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced14/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[16:39:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=68692:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:39 INFO) 
[16:39:53    INFO]  -----------------------------------------------------
[16:39:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:39:53    INFO]  -----------------------------------------------------------------------------------------------------------
[16:39:55    INFO]  - starting ANNZ::Init()  ... 
[16:39:55    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced14/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[16:39:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+4,N+4:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=51706:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:39 INFO) 
[16:39:55    INFO]  -----------------------------------------------------
[16:39:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:39:55    INFO]  -----------------------------------------------------------------------------------------------------------
[16:39:57    INFO]  - starting ANNZ::Init()  ... 
[16:39:57    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced14/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[16:39:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=34989:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:39 INFO) 
[16:39:58    INFO]  -----------------------------------------------------
[16:39:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:39:58    INFO]  -----------------------------------------------------------------------------------------------------------
[16:39:59    INFO]  - starting ANNZ::Init()  ... 
[16:39:59    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced14/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[16:39:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=43713:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:39 INFO) 
[16:39:59    INFO]  -----------------------------------------------------
[16:39:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:39:59    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:01    INFO]  - starting ANNZ::Init()  ... 
[16:40:01    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced14/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[16:40:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=47505:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:01    INFO]  -----------------------------------------------------
[16:40:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:01    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:03    INFO]  - starting ANNZ::Init()  ... 
[16:40:03    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced14/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[16:40:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=55594:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:04    INFO]  -----------------------------------------------------
[16:40:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:04    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:05    INFO]  - starting ANNZ::Init()  ... 
[16:40:06    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced14/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[16:40:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=80175:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:06    INFO]  -----------------------------------------------------
[16:40:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:06    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:07    INFO]  - starting ANNZ::Init()  ... 
[16:40:07    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced14/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[16:40:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=78537:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:08    INFO]  -----------------------------------------------------
[16:40:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:08    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:09    INFO]  - starting ANNZ::Init()  ... 
[16:40:09    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced14/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[16:40:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=60289:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:09    INFO]  -----------------------------------------------------
[16:40:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:09    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:11    INFO]  - starting ANNZ::Init()  ... 
[16:40:11    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced14/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[16:40:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=55702:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:11    INFO]  -----------------------------------------------------
[16:40:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:11    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:13    INFO]  - starting ANNZ::Init()  ... 
[16:40:13    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced14/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[16:40:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=72743:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:13    INFO]  -----------------------------------------------------
[16:40:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:13    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:15    INFO]  - starting ANNZ::Init()  ... 
[16:40:15    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced14/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[16:40:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=94651:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:15    INFO]  -----------------------------------------------------
[16:40:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:15    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:16    INFO]  - starting ANNZ::Init()  ... 
[16:40:17    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced14/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[16:40:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=35587:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:17    INFO]  -----------------------------------------------------
[16:40:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:17    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:19    INFO]  - starting ANNZ::Init()  ... 
[16:40:20    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced14/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[16:40:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=4381:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:20    INFO]  -----------------------------------------------------
[16:40:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:20    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:22    INFO]  - starting ANNZ::Init()  ... 
[16:40:23    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced14/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[16:40:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=92983:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:23    INFO]  -----------------------------------------------------
[16:40:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:23    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:25    INFO]  - starting ANNZ::Init()  ... 
[16:40:26    INFO]  - found trained "ANNZ_16" (./output/PAUS_advanced14/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[16:40:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=61633:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:26    INFO]  -----------------------------------------------------
[16:40:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:26    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:28    INFO]  - starting ANNZ::Init()  ... 
[16:40:28    INFO]  - found trained "ANNZ_17" (./output/PAUS_advanced14/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[16:40:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=26878:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:40 INFO) 
[16:40:28    INFO]  -----------------------------------------------------
[16:40:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:40:28    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:30    INFO]  - starting ANNZ::Init()  ... 
[16:40:31    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_18/saveOpt.txt ...
[16:40:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:40:48    INFO] ----------------------------------------------------------------------------------------------------
[16:40:48    INFO]  - will book (ANNZ_18) method(ANN) with options: :HiddenLayers=N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=26878:VarTransform=N
[16:40:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:40:48    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[16:40:48    INFO]      cuts (train):        ,
[16:40:48    INFO]      cuts (valid):       
[16:40:48    INFO]    - weights:            1
[16:40:48    INFO] ----------------------------------------------------------------------------------------------------
[16:40:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:48:35    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[19:48:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[19:48:37    INFO]  - Will gen. errors by KNN method ...
[19:48:38    INFO]  - starting ANNZ::loadReaders() ... 
[19:48:40    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[19:48:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:48:56    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:48:56    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:48:56    INFO]  -----------------------------------------------------------------------------------------------------------
[19:48:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:48:58    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:48:58    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[19:48:58    INFO]  -----------------------------------------------------------------------------------------------------------
[19:48:59    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[19:49:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:49:02    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:49:02    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[19:49:02    INFO]  -----------------------------------------------------------------------------------------------------------
[19:49:02    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:49:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:49:03    INFO]  - will try to derive a bias correction ... 
[19:49:03    INFO]  - will validate that training produced an XML file for later ... 
[19:49:03    INFO]  - starting ANNZ::loadReaders() ... 
[19:49:03    INFO]  - will validate that the training was not a complete failure ... 
[19:49:03    INFO]  - training seems to have been successful! will move on ...
[19:49:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:49:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:49:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:49:08    INFO] ----------------------------------------------------------------------------------------------------
[19:49:08    INFO]  - will book (ANNZ_18_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[19:49:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:49:08    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[19:49:08    INFO]    - weights:            1
[19:49:08    INFO] ----------------------------------------------------------------------------------------------------
[19:49:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:26:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[21:26:56    INFO]  - Will gen. errors by KNN method ...
[21:26:58    INFO]  - starting ANNZ::loadReaders() ... 
[21:27:01    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[21:27:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:27:20    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:27:20    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:27:20    INFO]  -----------------------------------------------------------------------------------------------------------
[21:27:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:27:28    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:27:28    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:27:28    INFO]  -----------------------------------------------------------------------------------------------------------
[21:27:29    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[21:27:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:27:35    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:27:35    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:27:35    INFO]  -----------------------------------------------------------------------------------------------------------
[21:27:36    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:27:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:27:37    INFO]  - will validate that the bias-correction actually improved the result ...
[21:27:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:27:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[21:27:43    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_18/plots/
[21:27:52        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_18/plots output/PAUS_advanced14/regres/train/ANNZ_18/plots_biasCor_before
[21:27:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:27:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[21:27:56    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_18/plots/
[21:28:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_18/plots output/PAUS_advanced14/regres/train/ANNZ_18/plots_biasCor_after
[21:28:04    INFO]  - Got original [KS-test,N_poiss]: [0.015333 , 3.45611] , after the bias-correction: [0.0157182 , 3.45822] --> will KEEP the correction !

(21:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced14[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=99947:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:28 INFO) 
[21:28:07    INFO]  -----------------------------------------------------
[21:28:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:28:07    INFO]  -----------------------------------------------------------------------------------------------------------
[21:28:09    INFO]  - starting ANNZ::Init()  ... 
[21:28:11    INFO]  - Saving run information in ./output/PAUS_advanced14/regres/train/ANNZ_19/saveOpt.txt ...
[21:28:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:28:33    INFO] ----------------------------------------------------------------------------------------------------
[21:28:33    INFO]  - will book (ANNZ_19) method(ANN) with options: :HiddenLayers=N+3,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=99947:VarTransform=N,P
[21:28:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:28:33    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:28:33    INFO]      cuts (train):        ,
[21:28:33    INFO]      cuts (valid):       
[21:28:33    INFO]    - weights:            1
[21:28:33    INFO] ----------------------------------------------------------------------------------------------------
[21:28:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:50:47    INFO]  - Saving MLM information in ./output/PAUS_advanced14/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[19:50:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[19:50:52    INFO]  - Will gen. errors by KNN method ...
[19:50:53    INFO]  - starting ANNZ::loadReaders() ... 
[19:50:57    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[19:51:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:51:02    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:51:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:51:02    INFO]  -----------------------------------------------------------------------------------------------------------
[19:51:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:51:04    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:51:04    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[19:51:04    INFO]  -----------------------------------------------------------------------------------------------------------
[19:51:05    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[19:51:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:51:06    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[19:51:06    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[19:51:06    INFO]  -----------------------------------------------------------------------------------------------------------
[19:51:07    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:51:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:51:08    INFO]  - will try to derive a bias correction ... 
[19:51:08    INFO]  - will validate that training produced an XML file for later ... 
[19:51:08    INFO]  - starting ANNZ::loadReaders() ... 
[19:51:11    INFO]  - will validate that the training was not a complete failure ... 
[19:51:11    INFO]  - training seems to have been successful! will move on ...
[19:51:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:51:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:51:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:51:15    INFO] ----------------------------------------------------------------------------------------------------
[19:51:15    INFO]  - will book (ANNZ_19_bias) method(ANN) with options: :HiddenLayers=N+5:VarTransform=N,P:TrainingMethod=BFGS:NCycles=500:UseRegulator=True:RandomSeed=0
[19:51:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:51:15    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[19:51:15    INFO]    - weights:            1
[19:51:15    INFO] ----------------------------------------------------------------------------------------------------
[19:51:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:01:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[21:01:00    INFO]  - Will gen. errors by KNN method ...
[21:01:01    INFO]  - starting ANNZ::loadReaders() ... 
[21:01:06    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_train*.root
[21:01:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:01:12    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:01:12    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:01:12    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:01:14    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:01:14    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:01:14    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:15    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced14/rootIn/ANNZ_tree_valid*.root
[21:01:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:01:17    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:01:17    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:01:17    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:18    INFO]  - Saving file ./output/PAUS_advanced14/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:01:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:01:19    INFO]  - will validate that the bias-correction actually improved the result ...
[21:01:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:01:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[21:01:23    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_19/plots/
[21:01:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_19/plots output/PAUS_advanced14/regres/train/ANNZ_19/plots_biasCor_before
[21:01:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:01:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[21:01:32    INFO]  - Writing to plotting directory output/PAUS_advanced14/regres/train/ANNZ_19/plots/
[21:01:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced14/regres/train/ANNZ_19/plots output/PAUS_advanced14/regres/train/ANNZ_19/plots_biasCor_after
[21:01:39    INFO]  - Got original [KS-test,N_poiss]: [0.0138198 , 3.25505] , after the bias-correction: [0.0138941 , 3.2728] --> will KEEP the correction !

(21:01 INFO) [40;37;1m - 22/02/19 21:01:42 - finished running ANNZ ![0m
