(11:23 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:23 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:23 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:23 INFO) [40;37;1m - 10/03/19 11:23:54 - starting ANNZ[0m
(11:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:23 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:23 INFO) 
[11:23:54    INFO]  -----------------------------------------------------
[11:23:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:23:54    INFO]  -----------------------------------------------------------------------------------------------------------
[11:23:56    INFO]  - starting inputToSplitTree() ... 
[11:23:56    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[11:23:56    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[11:23:56    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[11:23:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:23:57    INFO]  -- ANNZ_tree .......................................... 0  index
[11:23:57    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[11:23:57    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[11:23:57    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[11:23:57    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:23:57    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:23:57    INFO]  -----------------------------------------------------------------------------------------------------------
[11:23:58    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[11:23:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:23:58    INFO]  -- ANNZ_tree .......................................... 0  index
[11:23:58    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[11:23:58    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[11:23:58    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[11:23:58    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[11:23:58    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:23:58    INFO]  -----------------------------------------------------------------------------------------------------------
[11:23:59    INFO]  - Writing to plotting directory output/SPEC_advanced10/rootIn/plots/
[11:24:00    INFO]  - Writing to plotting directory output/SPEC_advanced10/rootIn/plots/

(11:24 INFO) [40;37;1m - 10/03/19 11:24:02 - finished running ANNZ ![0m
(11:24 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:24 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:24 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:24 INFO) [40;37;1m - 10/03/19 11:24:22 - starting ANNZ[0m
(11:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:24 INFO) 
[11:24:22    INFO]  -----------------------------------------------------
[11:24:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:24:22    INFO]  -----------------------------------------------------------------------------------------------------------
[11:24:23    INFO]  - starting ANNZ::Init()  ... 
[11:24:24    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_0/saveOpt.txt ...
[11:24:31    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:24:31    INFO] ----------------------------------------------------------------------------------------------------
[11:24:31    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=260:BoostType=AdaBoost:VarTransform=N
[11:24:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:24:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:24:31    INFO]      cuts (train):        ,
[11:24:31    INFO]      cuts (valid):       
[11:24:31    INFO]    - weights:            1
[11:24:31    INFO] ----------------------------------------------------------------------------------------------------
[11:24:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:24:57    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[11:24:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:24:59    INFO]  - Will gen. input-parameter errors ...
[11:25:01    INFO]  - starting ANNZ::loadReaders() ... 
[11:25:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:26:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:26:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:26:12    INFO]  -----------------------------------------------------------------------------------------------------------
[11:26:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:26:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:26:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:26:30    INFO]  -----------------------------------------------------------------------------------------------------------
[11:26:30    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:26:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:26:31    INFO]  - will try to derive a bias correction ... 
[11:26:31    INFO]  - will validate that training produced an XML file for later ... 
[11:26:31    INFO]  - starting ANNZ::loadReaders() ... 
[11:26:32    INFO]  - will validate that the training was not a complete failure ... 
[11:26:33    INFO]  - training seems to have been successful! will move on ...
[11:26:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:26:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:26:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:26:37    INFO] ----------------------------------------------------------------------------------------------------
[11:26:37    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:26:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:26:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:26:37    INFO]    - weights:            1
[11:26:37    INFO] ----------------------------------------------------------------------------------------------------
[11:26:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:26:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:26:47    INFO]  - Will gen. input-parameter errors ...
[11:26:49    INFO]  - starting ANNZ::loadReaders() ... 
[11:26:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:28:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:28:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:28:51    INFO]  -----------------------------------------------------------------------------------------------------------
[11:28:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:29:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:29:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:29:17    INFO]  -----------------------------------------------------------------------------------------------------------
[11:29:18    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:29:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:29:19    INFO]  - will validate that the bias-correction actually improved the result ...
[11:29:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:29:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
Warning in <Fit>: Fit data is empty 
[11:29:26    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_0/plots/
[11:29:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_0/plots output/SPEC_advanced10/regres/train/ANNZ_0/plots_biasCor_before
[11:29:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:29:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
Warning in <Fit>: Fit data is empty 
[11:29:48    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_0/plots/
[11:30:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_0/plots output/SPEC_advanced10/regres/train/ANNZ_0/plots_biasCor_after
[11:30:03    INFO]  - Got original [KS-test,N_poiss]: [0.0812234 , 6.12183] , after the bias-correction: [0.0495183 , 5.96791] --> will KEEP the correction !

(11:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:30 INFO) 
[11:30:07    INFO]  -----------------------------------------------------
[11:30:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:30:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:30:07    INFO]  - starting ANNZ::Init()  ... 
[11:30:09    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_1/saveOpt.txt ...
[11:30:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:30:15    INFO] ----------------------------------------------------------------------------------------------------
[11:30:15    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N
[11:30:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:30:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:30:15    INFO]      cuts (train):        ,
[11:30:15    INFO]      cuts (valid):       
[11:30:15    INFO]    - weights:            1
[11:30:15    INFO] ----------------------------------------------------------------------------------------------------
[11:30:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:30:53    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[11:30:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:30:56    INFO]  - Will gen. input-parameter errors ...
[11:30:58    INFO]  - starting ANNZ::loadReaders() ... 
[11:31:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:33:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:33:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:33:39    INFO]  -----------------------------------------------------------------------------------------------------------
[11:33:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:34:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:34:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:34:17    INFO]  -----------------------------------------------------------------------------------------------------------
[11:34:17    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:34:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:34:19    INFO]  - will try to derive a bias correction ... 
[11:34:19    INFO]  - will validate that training produced an XML file for later ... 
[11:34:19    INFO]  - starting ANNZ::loadReaders() ... 
[11:34:21    INFO]  - will validate that the training was not a complete failure ... 
[11:34:21    INFO]  - training seems to have been successful! will move on ...
[11:34:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:34:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:34:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:34:27    INFO] ----------------------------------------------------------------------------------------------------
[11:34:27    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:34:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:34:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:34:27    INFO]    - weights:            1
[11:34:27    INFO] ----------------------------------------------------------------------------------------------------
[11:34:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:34:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:34:38    INFO]  - Will gen. input-parameter errors ...
[11:34:40    INFO]  - starting ANNZ::loadReaders() ... 
[11:34:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:37:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:37:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:37:12    INFO]  -----------------------------------------------------------------------------------------------------------
[11:37:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:37:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:37:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:37:47    INFO]  -----------------------------------------------------------------------------------------------------------
[11:37:47    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:37:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:37:48    INFO]  - will validate that the bias-correction actually improved the result ...
[11:37:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:37:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[11:37:57    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_1/plots/
[11:38:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_1/plots output/SPEC_advanced10/regres/train/ANNZ_1/plots_biasCor_before
[11:38:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:38:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[11:38:22    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_1/plots/
[11:38:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_1/plots output/SPEC_advanced10/regres/train/ANNZ_1/plots_biasCor_after
[11:38:42    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12581] , after the bias-correction: [0.0494062 , 5.95035] --> will KEEP the correction !

(11:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:38 INFO) 
[11:38:47    INFO]  -----------------------------------------------------
[11:38:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:38:47    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:48    INFO]  - starting ANNZ::Init()  ... 
[11:38:50    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_2/saveOpt.txt ...
[11:38:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:38:56    INFO] ----------------------------------------------------------------------------------------------------
[11:38:56    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=440:BoostType=Bagging:VarTransform=N
[11:38:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:38:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:38:56    INFO]      cuts (train):        ,
[11:38:56    INFO]      cuts (valid):       
[11:38:56    INFO]    - weights:            1
[11:38:56    INFO] ----------------------------------------------------------------------------------------------------
[11:38:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:39:47    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[11:39:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[11:39:52    INFO]  - Will gen. input-parameter errors ...
[11:39:55    INFO]  - starting ANNZ::loadReaders() ... 
[11:40:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:43:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:43:10    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:43:10    INFO]  -----------------------------------------------------------------------------------------------------------
[11:43:10    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:43:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:43:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:43:58    INFO]  -----------------------------------------------------------------------------------------------------------
[11:43:58    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:44:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:44:00    INFO]  - will try to derive a bias correction ... 
[11:44:00    INFO]  - will validate that training produced an XML file for later ... 
[11:44:00    INFO]  - starting ANNZ::loadReaders() ... 
[11:44:06    INFO]  - will validate that the training was not a complete failure ... 
[11:44:06    INFO]  - training seems to have been successful! will move on ...
[11:44:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:44:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:44:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:44:12    INFO] ----------------------------------------------------------------------------------------------------
[11:44:12    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:44:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:44:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:44:12    INFO]    - weights:            1
[11:44:12    INFO] ----------------------------------------------------------------------------------------------------
[11:44:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:44:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[11:44:24    INFO]  - Will gen. input-parameter errors ...
[11:44:26    INFO]  - starting ANNZ::loadReaders() ... 
[11:44:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:48:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:48:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:48:11    INFO]  -----------------------------------------------------------------------------------------------------------
[11:48:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:49:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:49:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:49:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:49:07    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:49:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:49:09    INFO]  - will validate that the bias-correction actually improved the result ...
[11:49:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:49:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[11:49:18    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_2/plots/
[11:49:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_2/plots output/SPEC_advanced10/regres/train/ANNZ_2/plots_biasCor_before
[11:49:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:49:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[11:49:44    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_2/plots/
[11:50:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_2/plots output/SPEC_advanced10/regres/train/ANNZ_2/plots_biasCor_after
[11:50:00    INFO]  - Got original [KS-test,N_poiss]: [0.0850325 , 6.67145] , after the bias-correction: [0.0445889 , 5.66151] --> will KEEP the correction !

(11:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:50 INFO) 
[11:50:05    INFO]  -----------------------------------------------------
[11:50:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:50:05    INFO]  -----------------------------------------------------------------------------------------------------------
[11:50:06    INFO]  - starting ANNZ::Init()  ... 
[11:50:08    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_3/saveOpt.txt ...
[11:50:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:50:14    INFO] ----------------------------------------------------------------------------------------------------
[11:50:14    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=460:BoostType=AdaBoost:VarTransform=N
[11:50:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:50:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:50:14    INFO]      cuts (train):        ,
[11:50:14    INFO]      cuts (valid):       
[11:50:14    INFO]    - weights:            1
[11:50:14    INFO] ----------------------------------------------------------------------------------------------------
[11:50:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:50:51    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[11:50:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[11:50:53    INFO]  - Will gen. input-parameter errors ...
[11:50:55    INFO]  - starting ANNZ::loadReaders() ... 
[11:51:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:53:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:53:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:53:29    INFO]  -----------------------------------------------------------------------------------------------------------
[11:53:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:54:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:54:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:54:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:54:02    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:54:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:54:04    INFO]  - will try to derive a bias correction ... 
[11:54:04    INFO]  - will validate that training produced an XML file for later ... 
[11:54:04    INFO]  - starting ANNZ::loadReaders() ... 
[11:54:06    INFO]  - will validate that the training was not a complete failure ... 
[11:54:06    INFO]  - training seems to have been successful! will move on ...
[11:54:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:54:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:54:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:54:12    INFO] ----------------------------------------------------------------------------------------------------
[11:54:12    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:54:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:54:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:54:12    INFO]    - weights:            1
[11:54:12    INFO] ----------------------------------------------------------------------------------------------------
[11:54:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:54:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[11:54:24    INFO]  - Will gen. input-parameter errors ...
[11:54:26    INFO]  - starting ANNZ::loadReaders() ... 
[11:54:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:56:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:56:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:56:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:56:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:57:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:57:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:57:35    INFO]  -----------------------------------------------------------------------------------------------------------
[11:57:35    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:57:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:57:36    INFO]  - will validate that the bias-correction actually improved the result ...
[11:57:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:57:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
Warning in <Fit>: Fit data is empty 
[11:57:44    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_3/plots/
[11:58:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_3/plots output/SPEC_advanced10/regres/train/ANNZ_3/plots_biasCor_before
[11:58:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:58:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
Warning in <Fit>: Fit data is empty 
[11:58:09    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_3/plots/
[11:58:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_3/plots output/SPEC_advanced10/regres/train/ANNZ_3/plots_biasCor_after
[11:58:38    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12581] , after the bias-correction: [0.0496303 , 5.9883] --> will KEEP the correction !

(11:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:58 INFO) 
[11:58:54    INFO]  -----------------------------------------------------
[11:58:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:58:54    INFO]  -----------------------------------------------------------------------------------------------------------
[11:58:56    INFO]  - starting ANNZ::Init()  ... 
[11:58:57    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_4/saveOpt.txt ...
[11:59:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:59:04    INFO] ----------------------------------------------------------------------------------------------------
[11:59:04    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=330:BoostType=Bagging:VarTransform=N,P
[11:59:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:59:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:59:04    INFO]      cuts (train):        ,
[11:59:04    INFO]      cuts (valid):       
[11:59:04    INFO]    - weights:            1
[11:59:04    INFO] ----------------------------------------------------------------------------------------------------
[11:59:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:59:46    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[11:59:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[11:59:51    INFO]  - Will gen. input-parameter errors ...
[12:00:01   ERROR]  - ... ------------------------------------------------------------ 
[12:00:01   ERROR]  - MESSAGE - Trying to create directory (./output/SPEC_advanced10/regres/train/ANNZ_4/postTrain/) and got exit-status (-1) 
[12:00:01   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 341 , (Mar  8 2019 14:46:52) 
[12:00:01   ERROR]  - ..... ABORTING !!! 
[12:00:01   ERROR]  ------------------------------------------------------------ ... - 
(12:00 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(12:00 CRITICAL) [41;37;1mWill terminate !!!![0m
(12:06 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(12:06 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(12:06 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(12:06 INFO) [40;37;1m - 10/03/19 12:06:02 - starting ANNZ[0m
(12:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:06 INFO) 
[12:06:02    INFO]  -----------------------------------------------------
[12:06:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:06:02    INFO]  -----------------------------------------------------------------------------------------------------------
[12:06:03    INFO]  - starting ANNZ::Init()  ... 
[12:06:03    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced10/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[12:06:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:06 INFO) 
[12:06:03    INFO]  -----------------------------------------------------
[12:06:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:06:03    INFO]  -----------------------------------------------------------------------------------------------------------
[12:06:04    INFO]  - starting ANNZ::Init()  ... 
[12:06:05    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced10/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[12:06:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:06 INFO) 
[12:06:05    INFO]  -----------------------------------------------------
[12:06:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:06:05    INFO]  -----------------------------------------------------------------------------------------------------------
[12:06:06    INFO]  - starting ANNZ::Init()  ... 
[12:06:08    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced10/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[12:06:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:06 INFO) 
[12:06:08    INFO]  -----------------------------------------------------
[12:06:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:06:08    INFO]  -----------------------------------------------------------------------------------------------------------
[12:06:09    INFO]  - starting ANNZ::Init()  ... 
[12:06:09    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced10/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[12:06:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:06 INFO) 
[12:06:10    INFO]  -----------------------------------------------------
[12:06:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:06:10    INFO]  -----------------------------------------------------------------------------------------------------------
[12:06:10    INFO]  - starting ANNZ::Init()  ... 
[12:06:11    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced10/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[12:06:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(12:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:06 INFO) 
[12:06:11    INFO]  -----------------------------------------------------
[12:06:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:06:11    INFO]  -----------------------------------------------------------------------------------------------------------
[12:06:12    INFO]  - starting ANNZ::Init()  ... 
[12:06:14    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_5/saveOpt.txt ...
[12:06:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:06:22    INFO] ----------------------------------------------------------------------------------------------------
[12:06:22    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=360:BoostType=Bagging:VarTransform=N
[12:06:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:06:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:06:22    INFO]      cuts (train):        ,
[12:06:22    INFO]      cuts (valid):       
[12:06:22    INFO]    - weights:            1
[12:06:22    INFO] ----------------------------------------------------------------------------------------------------
[12:06:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:07:05    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[12:07:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[12:07:10    INFO]  - Will gen. input-parameter errors ...
[12:07:12    INFO]  - starting ANNZ::loadReaders() ... 
[12:07:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:09:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:09:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:09:35    INFO]  -----------------------------------------------------------------------------------------------------------
[12:09:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:10:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:10:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:10:10    INFO]  -----------------------------------------------------------------------------------------------------------
[12:10:10    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:10:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:10:12    INFO]  - will try to derive a bias correction ... 
[12:10:12    INFO]  - will validate that training produced an XML file for later ... 
[12:10:12    INFO]  - starting ANNZ::loadReaders() ... 
[12:10:17    INFO]  - will validate that the training was not a complete failure ... 
[12:10:17    INFO]  - training seems to have been successful! will move on ...
[12:10:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:10:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:10:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:10:23    INFO] ----------------------------------------------------------------------------------------------------
[12:10:23    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:10:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:10:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:10:23    INFO]    - weights:            1
[12:10:23    INFO] ----------------------------------------------------------------------------------------------------
[12:10:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:10:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[12:10:34    INFO]  - Will gen. input-parameter errors ...
[12:10:37    INFO]  - starting ANNZ::loadReaders() ... 
[12:10:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:13:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:13:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:13:11    INFO]  -----------------------------------------------------------------------------------------------------------
[12:13:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:13:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:13:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:13:47    INFO]  -----------------------------------------------------------------------------------------------------------
[12:13:47    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:13:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:13:49    INFO]  - will validate that the bias-correction actually improved the result ...
[12:13:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:13:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[12:13:57    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_5/plots/
[12:14:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_5/plots output/SPEC_advanced10/regres/train/ANNZ_5/plots_biasCor_before
[12:14:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:14:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[12:14:18    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_5/plots/
[12:14:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_5/plots output/SPEC_advanced10/regres/train/ANNZ_5/plots_biasCor_after
[12:14:34    INFO]  - Got original [KS-test,N_poiss]: [0.0841362 , 6.6826] , after the bias-correction: [0.0491822 , 5.84356] --> will KEEP the correction !

(12:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:14 INFO) 
[12:14:39    INFO]  -----------------------------------------------------
[12:14:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:14:39    INFO]  -----------------------------------------------------------------------------------------------------------
[12:14:40    INFO]  - starting ANNZ::Init()  ... 
[12:14:42    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_6/saveOpt.txt ...
[12:14:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:14:49    INFO] ----------------------------------------------------------------------------------------------------
[12:14:49    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=530:BoostType=Bagging:VarTransform=N
[12:14:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:14:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:14:49    INFO]      cuts (train):        ,
[12:14:49    INFO]      cuts (valid):       
[12:14:49    INFO]    - weights:            1
[12:14:49    INFO] ----------------------------------------------------------------------------------------------------
[12:14:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:15:53    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[12:15:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[12:15:59    INFO]  - Will gen. input-parameter errors ...
[12:16:03    INFO]  - starting ANNZ::loadReaders() ... 
[12:16:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:19:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:19:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:19:51    INFO]  -----------------------------------------------------------------------------------------------------------
[12:19:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:20:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:20:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:20:45    INFO]  -----------------------------------------------------------------------------------------------------------
[12:20:45    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:20:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:20:48    INFO]  - will try to derive a bias correction ... 
[12:20:48    INFO]  - will validate that training produced an XML file for later ... 
[12:20:48    INFO]  - starting ANNZ::loadReaders() ... 
[12:20:55    INFO]  - will validate that the training was not a complete failure ... 
[12:20:55    INFO]  - training seems to have been successful! will move on ...
[12:20:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:21:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:21:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:21:02    INFO] ----------------------------------------------------------------------------------------------------
[12:21:02    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:21:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:21:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:21:02    INFO]    - weights:            1
[12:21:02    INFO] ----------------------------------------------------------------------------------------------------
[12:21:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:21:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[12:21:15    INFO]  - Will gen. input-parameter errors ...
[12:21:18    INFO]  - starting ANNZ::loadReaders() ... 
[12:21:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:26:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:26:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:26:34    INFO]  -----------------------------------------------------------------------------------------------------------
[12:26:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:27:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:27:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:27:42    INFO]  -----------------------------------------------------------------------------------------------------------
[12:27:43    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:27:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:27:46    INFO]  - will validate that the bias-correction actually improved the result ...
[12:27:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:27:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[12:27:56    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_6/plots/
[12:28:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_6/plots output/SPEC_advanced10/regres/train/ANNZ_6/plots_biasCor_before
[12:28:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:28:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[12:28:30    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_6/plots/
[12:28:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_6/plots output/SPEC_advanced10/regres/train/ANNZ_6/plots_biasCor_after
[12:28:49    INFO]  - Got original [KS-test,N_poiss]: [0.0849205 , 6.72584] , after the bias-correction: [0.0489581 , 5.74381] --> will KEEP the correction !

(12:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:28 INFO) 
[12:28:54    INFO]  -----------------------------------------------------
[12:28:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:28:54    INFO]  -----------------------------------------------------------------------------------------------------------
[12:28:55    INFO]  - starting ANNZ::Init()  ... 
[12:28:56    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_7/saveOpt.txt ...
[12:29:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:29:03    INFO] ----------------------------------------------------------------------------------------------------
[12:29:03    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=470:BoostType=AdaBoost:VarTransform=N,P
[12:29:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:29:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:29:03    INFO]      cuts (train):        ,
[12:29:03    INFO]      cuts (valid):       
[12:29:03    INFO]    - weights:            1
[12:29:03    INFO] ----------------------------------------------------------------------------------------------------
[12:29:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:29:39    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[12:29:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[12:29:41    INFO]  - Will gen. input-parameter errors ...
[12:29:43    INFO]  - starting ANNZ::loadReaders() ... 
[12:29:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:33:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:33:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:33:25    INFO]  -----------------------------------------------------------------------------------------------------------
[12:33:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:34:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:34:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:34:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:34:18    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:34:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:34:19    INFO]  - will try to derive a bias correction ... 
[12:34:19    INFO]  - will validate that training produced an XML file for later ... 
[12:34:19    INFO]  - starting ANNZ::loadReaders() ... 
[12:34:21    INFO]  - will validate that the training was not a complete failure ... 
[12:34:21    INFO]  - training seems to have been successful! will move on ...
[12:34:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:34:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:34:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:34:26    INFO] ----------------------------------------------------------------------------------------------------
[12:34:26    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:34:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:34:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:34:26    INFO]    - weights:            1
[12:34:26    INFO] ----------------------------------------------------------------------------------------------------
[12:34:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:34:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[12:34:36    INFO]  - Will gen. input-parameter errors ...
[12:34:38    INFO]  - starting ANNZ::loadReaders() ... 
[12:34:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:38:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:38:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:38:34    INFO]  -----------------------------------------------------------------------------------------------------------
[12:38:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:39:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:39:25    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:39:25    INFO]  -----------------------------------------------------------------------------------------------------------
[12:39:25    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:39:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:39:27    INFO]  - will validate that the bias-correction actually improved the result ...
[12:39:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:39:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[12:39:35    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_7/plots/
[12:39:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_7/plots output/SPEC_advanced10/regres/train/ANNZ_7/plots_biasCor_before
[12:39:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:39:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[12:39:55    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_7/plots/
[12:40:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_7/plots output/SPEC_advanced10/regres/train/ANNZ_7/plots_biasCor_after
[12:40:11    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40773] , after the bias-correction: [0.0442528 , 5.76265] --> will KEEP the correction !

(12:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:40 INFO) 
[12:40:15    INFO]  -----------------------------------------------------
[12:40:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:40:15    INFO]  -----------------------------------------------------------------------------------------------------------
[12:40:16    INFO]  - starting ANNZ::Init()  ... 
[12:40:17    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_8/saveOpt.txt ...
[12:40:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:40:25    INFO] ----------------------------------------------------------------------------------------------------
[12:40:25    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N,P
[12:40:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:40:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:40:25    INFO]      cuts (train):        ,
[12:40:25    INFO]      cuts (valid):       
[12:40:25    INFO]    - weights:            1
[12:40:25    INFO] ----------------------------------------------------------------------------------------------------
[12:40:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:41:26    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[12:41:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[12:41:31    INFO]  - Will gen. input-parameter errors ...
[12:41:34    INFO]  - starting ANNZ::loadReaders() ... 
[12:41:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:47:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:47:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:47:38    INFO]  -----------------------------------------------------------------------------------------------------------
[12:47:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:49:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:49:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:49:08    INFO]  -----------------------------------------------------------------------------------------------------------
[12:49:08    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:49:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:49:10    INFO]  - will try to derive a bias correction ... 
[12:49:10    INFO]  - will validate that training produced an XML file for later ... 
[12:49:10    INFO]  - starting ANNZ::loadReaders() ... 
[12:49:17    INFO]  - will validate that the training was not a complete failure ... 
[12:49:18    INFO]  - training seems to have been successful! will move on ...
[12:49:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:49:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:49:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:49:26    INFO] ----------------------------------------------------------------------------------------------------
[12:49:26    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:49:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:49:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:49:26    INFO]    - weights:            1
[12:49:26    INFO] ----------------------------------------------------------------------------------------------------
[12:49:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:49:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[12:49:38    INFO]  - Will gen. input-parameter errors ...
[12:49:41    INFO]  - starting ANNZ::loadReaders() ... 
[12:49:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:56:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:56:06    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:57:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:57:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:57:48    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:48    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:57:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:57:50    INFO]  - will validate that the bias-correction actually improved the result ...
[12:57:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:57:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[12:57:58    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_8/plots/
[12:58:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_8/plots output/SPEC_advanced10/regres/train/ANNZ_8/plots_biasCor_before
[12:58:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:58:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[12:58:21    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_8/plots/
[12:58:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_8/plots output/SPEC_advanced10/regres/train/ANNZ_8/plots_biasCor_after
[12:58:37    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.85316] , after the bias-correction: [0.044925 , 5.72542] --> will KEEP the correction !

(12:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:58 INFO) 
[12:58:43    INFO]  -----------------------------------------------------
[12:58:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:58:43    INFO]  -----------------------------------------------------------------------------------------------------------
[12:58:44    INFO]  - starting ANNZ::Init()  ... 
[12:58:47    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_9/saveOpt.txt ...
[12:58:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:58:54    INFO] ----------------------------------------------------------------------------------------------------
[12:58:54    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=320:BoostType=AdaBoost:VarTransform=N
[12:58:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:58:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:58:54    INFO]      cuts (train):        ,
[12:58:54    INFO]      cuts (valid):       
[12:58:54    INFO]    - weights:            1
[12:58:54    INFO] ----------------------------------------------------------------------------------------------------
[12:58:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:59:21    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[12:59:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[12:59:23    INFO]  - Will gen. input-parameter errors ...
[12:59:25    INFO]  - starting ANNZ::loadReaders() ... 
[12:59:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:00:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:00:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:00:53    INFO]  -----------------------------------------------------------------------------------------------------------
[13:00:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:01:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:01:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:01:14    INFO]  -----------------------------------------------------------------------------------------------------------
[13:01:14    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:01:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:01:15    INFO]  - will try to derive a bias correction ... 
[13:01:15    INFO]  - will validate that training produced an XML file for later ... 
[13:01:15    INFO]  - starting ANNZ::loadReaders() ... 
[13:01:17    INFO]  - will validate that the training was not a complete failure ... 
[13:01:17    INFO]  - training seems to have been successful! will move on ...
[13:01:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:01:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:01:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:01:23    INFO] ----------------------------------------------------------------------------------------------------
[13:01:23    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:01:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:01:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:01:23    INFO]    - weights:            1
[13:01:23    INFO] ----------------------------------------------------------------------------------------------------
[13:01:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:01:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[13:01:34    INFO]  - Will gen. input-parameter errors ...
[13:01:37    INFO]  - starting ANNZ::loadReaders() ... 
[13:01:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:03:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:03:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:03:37    INFO]  -----------------------------------------------------------------------------------------------------------
[13:03:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:04:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:04:05    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:04:05    INFO]  -----------------------------------------------------------------------------------------------------------
[13:04:06    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:04:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:04:07    INFO]  - will validate that the bias-correction actually improved the result ...
[13:04:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:04:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[13:04:14    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_9/plots/
[13:04:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_9/plots output/SPEC_advanced10/regres/train/ANNZ_9/plots_biasCor_before
[13:04:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:04:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[13:04:35    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_9/plots/
[13:04:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_9/plots output/SPEC_advanced10/regres/train/ANNZ_9/plots_biasCor_after
[13:04:51    INFO]  - Got original [KS-test,N_poiss]: [0.0821196 , 6.1111] , after the bias-correction: [0.0495183 , 6.07111] --> will KEEP the correction !

(13:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:04 INFO) 
[13:04:55    INFO]  -----------------------------------------------------
[13:04:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:04:55    INFO]  -----------------------------------------------------------------------------------------------------------
[13:04:56    INFO]  - starting ANNZ::Init()  ... 
[13:04:58    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_10/saveOpt.txt ...
[13:05:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:05:05    INFO] ----------------------------------------------------------------------------------------------------
[13:05:05    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=700:BoostType=AdaBoostR2:VarTransform=N,P
[13:05:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:05:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:05:05    INFO]      cuts (train):        ,
[13:05:05    INFO]      cuts (valid):       
[13:05:05    INFO]    - weights:            1
[13:05:05    INFO] ----------------------------------------------------------------------------------------------------
[13:05:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:06:41    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[13:06:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[13:06:48    INFO]  - Will gen. input-parameter errors ...
[13:06:51    INFO]  - starting ANNZ::loadReaders() ... 
[13:07:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:38:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:38:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:38:34    INFO]  -----------------------------------------------------------------------------------------------------------
[13:38:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:45:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:45:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:45:28    INFO]  -----------------------------------------------------------------------------------------------------------
[13:45:28    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:45:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:45:31    INFO]  - will try to derive a bias correction ... 
[13:45:31    INFO]  - will validate that training produced an XML file for later ... 
[13:45:31    INFO]  - starting ANNZ::loadReaders() ... 
[13:45:47    INFO]  - will validate that the training was not a complete failure ... 
[13:45:47    INFO]  - training seems to have been successful! will move on ...
[13:45:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:45:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:45:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:45:54    INFO] ----------------------------------------------------------------------------------------------------
[13:45:54    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:45:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:45:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:45:54    INFO]    - weights:            1
[13:45:54    INFO] ----------------------------------------------------------------------------------------------------
[13:45:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:46:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[13:46:06    INFO]  - Will gen. input-parameter errors ...
[13:46:09    INFO]  - starting ANNZ::loadReaders() ... 
[13:46:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:15:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:15:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:15:41    INFO]  -----------------------------------------------------------------------------------------------------------
[14:15:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:23:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:23:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:23:18    INFO]  -----------------------------------------------------------------------------------------------------------
[14:23:18    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:23:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:23:20    INFO]  - will validate that the bias-correction actually improved the result ...
[14:23:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:23:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[14:23:29    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_10/plots/
[14:23:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_10/plots output/SPEC_advanced10/regres/train/ANNZ_10/plots_biasCor_before
[14:23:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:23:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[14:23:49    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_10/plots/
[14:24:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_10/plots output/SPEC_advanced10/regres/train/ANNZ_10/plots_biasCor_after
[14:24:03    INFO]  - Got original [KS-test,N_poiss]: [0.0690119 , 6.52845] , after the bias-correction: [0.031257 , 5.46534] --> will KEEP the correction !

(14:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=880:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:24 INFO) 
[14:24:09    INFO]  -----------------------------------------------------
[14:24:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:24:09    INFO]  -----------------------------------------------------------------------------------------------------------
[14:24:09    INFO]  - starting ANNZ::Init()  ... 
[14:24:11    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_11/saveOpt.txt ...
[14:24:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:24:18    INFO] ----------------------------------------------------------------------------------------------------
[14:24:18    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=880:BoostType=AdaBoost:VarTransform=N
[14:24:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:24:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:24:18    INFO]      cuts (train):        ,
[14:24:18    INFO]      cuts (valid):       
[14:24:18    INFO]    - weights:            1
[14:24:18    INFO] ----------------------------------------------------------------------------------------------------
[14:24:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:25:32    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[14:25:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[14:25:38    INFO]  - Will gen. input-parameter errors ...
[14:25:41    INFO]  - starting ANNZ::loadReaders() ... 
[14:25:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:34:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:34:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:34:09    INFO]  -----------------------------------------------------------------------------------------------------------
[14:34:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:36:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:36:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:36:17    INFO]  -----------------------------------------------------------------------------------------------------------
[14:36:17    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:36:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:36:19    INFO]  - will try to derive a bias correction ... 
[14:36:19    INFO]  - will validate that training produced an XML file for later ... 
[14:36:19    INFO]  - starting ANNZ::loadReaders() ... 
[14:36:22    INFO]  - will validate that the training was not a complete failure ... 
[14:36:23    INFO]  - training seems to have been successful! will move on ...
[14:36:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:36:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:36:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:36:28    INFO] ----------------------------------------------------------------------------------------------------
[14:36:28    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:36:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:36:28    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:36:28    INFO]    - weights:            1
[14:36:28    INFO] ----------------------------------------------------------------------------------------------------
[14:36:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:36:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[14:36:39    INFO]  - Will gen. input-parameter errors ...
[14:36:41    INFO]  - starting ANNZ::loadReaders() ... 
[14:36:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:40:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:40:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:40:53    INFO]  -----------------------------------------------------------------------------------------------------------
[14:40:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:41:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:41:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:41:57    INFO]  -----------------------------------------------------------------------------------------------------------
[14:41:57    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:41:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:41:59    INFO]  - will validate that the bias-correction actually improved the result ...
[14:41:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:41:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
Warning in <Fit>: Fit data is empty 
[14:42:05    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_11/plots/
[14:42:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_11/plots output/SPEC_advanced10/regres/train/ANNZ_11/plots_biasCor_before
[14:42:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:42:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
Warning in <Fit>: Fit data is empty 
[14:42:23    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_11/plots/
[14:42:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_11/plots output/SPEC_advanced10/regres/train/ANNZ_11/plots_biasCor_after
[14:42:37    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.15545] , after the bias-correction: [0.0501904 , 6.07951] --> will KEEP the correction !

(14:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:42 INFO) 
[14:42:41    INFO]  -----------------------------------------------------
[14:42:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:42:41    INFO]  -----------------------------------------------------------------------------------------------------------
[14:42:42    INFO]  - starting ANNZ::Init()  ... 
[14:42:43    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_12/saveOpt.txt ...
[14:42:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:42:50    INFO] ----------------------------------------------------------------------------------------------------
[14:42:50    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=520:BoostType=AdaBoostR2:VarTransform=N
[14:42:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:42:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:42:50    INFO]      cuts (train):        ,
[14:42:50    INFO]      cuts (valid):       
[14:42:50    INFO]    - weights:            1
[14:42:50    INFO] ----------------------------------------------------------------------------------------------------
[14:42:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:43:48    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[14:43:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[14:43:52    INFO]  - Will gen. input-parameter errors ...
[14:43:54    INFO]  - starting ANNZ::loadReaders() ... 
[14:44:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:57:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:57:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:57:31    INFO]  -----------------------------------------------------------------------------------------------------------
[14:57:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:00:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:00:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:00:45    INFO]  -----------------------------------------------------------------------------------------------------------
[15:00:45    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:00:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:00:46    INFO]  - will try to derive a bias correction ... 
[15:00:46    INFO]  - will validate that training produced an XML file for later ... 
[15:00:46    INFO]  - starting ANNZ::loadReaders() ... 
[15:00:50    INFO]  - will validate that the training was not a complete failure ... 
[15:00:50    INFO]  - training seems to have been successful! will move on ...
[15:00:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:00:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:00:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:00:56    INFO] ----------------------------------------------------------------------------------------------------
[15:00:56    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:00:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:00:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:00:56    INFO]    - weights:            1
[15:00:56    INFO] ----------------------------------------------------------------------------------------------------
[15:00:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:01:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[15:01:06    INFO]  - Will gen. input-parameter errors ...
[15:01:08    INFO]  - starting ANNZ::loadReaders() ... 
[15:01:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:13:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:13:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:13:18    INFO]  -----------------------------------------------------------------------------------------------------------
[15:13:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:16:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:16:09    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:16:09    INFO]  -----------------------------------------------------------------------------------------------------------
[15:16:09    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:16:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:16:11    INFO]  - will validate that the bias-correction actually improved the result ...
[15:16:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:16:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
Warning in <Fit>: Fit data is empty 
[15:16:17    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_12/plots/
[15:16:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_12/plots output/SPEC_advanced10/regres/train/ANNZ_12/plots_biasCor_before
[15:16:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:16:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
Warning in <Fit>: Fit data is empty 
[15:16:35    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_12/plots/
[15:16:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_12/plots output/SPEC_advanced10/regres/train/ANNZ_12/plots_biasCor_after
[15:16:47    INFO]  - Got original [KS-test,N_poiss]: [0.0629622 , 6.54574] , after the bias-correction: [0.0341698 , 5.49411] --> will KEEP the correction !

(15:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:16 INFO) 
[15:16:51    INFO]  -----------------------------------------------------
[15:16:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:16:51    INFO]  -----------------------------------------------------------------------------------------------------------
[15:16:52    INFO]  - starting ANNZ::Init()  ... 
[15:16:53    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_13/saveOpt.txt ...
[15:16:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:16:58    INFO] ----------------------------------------------------------------------------------------------------
[15:16:58    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=270:BoostType=Bagging:VarTransform=N
[15:16:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:16:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:16:58    INFO]      cuts (train):        ,
[15:16:58    INFO]      cuts (valid):       
[15:16:58    INFO]    - weights:            1
[15:16:58    INFO] ----------------------------------------------------------------------------------------------------
[15:16:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:17:27    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[15:17:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[15:17:30    INFO]  - Will gen. input-parameter errors ...
[15:17:32    INFO]  - starting ANNZ::loadReaders() ... 
[15:17:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:19:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:19:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:19:08    INFO]  -----------------------------------------------------------------------------------------------------------
[15:19:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:19:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:19:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:19:29    INFO]  -----------------------------------------------------------------------------------------------------------
[15:19:29    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:19:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:19:30    INFO]  - will try to derive a bias correction ... 
[15:19:30    INFO]  - will validate that training produced an XML file for later ... 
[15:19:30    INFO]  - starting ANNZ::loadReaders() ... 
[15:19:33    INFO]  - will validate that the training was not a complete failure ... 
[15:19:33    INFO]  - training seems to have been successful! will move on ...
[15:19:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:19:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:19:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:19:38    INFO] ----------------------------------------------------------------------------------------------------
[15:19:38    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:19:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:19:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:19:38    INFO]    - weights:            1
[15:19:38    INFO] ----------------------------------------------------------------------------------------------------
[15:19:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:19:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[15:19:47    INFO]  - Will gen. input-parameter errors ...
[15:19:49    INFO]  - starting ANNZ::loadReaders() ... 
[15:19:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:21:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:21:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:21:22    INFO]  -----------------------------------------------------------------------------------------------------------
[15:21:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:21:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:21:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:21:43    INFO]  -----------------------------------------------------------------------------------------------------------
[15:21:43    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:21:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:21:45    INFO]  - will validate that the bias-correction actually improved the result ...
[15:21:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:21:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[15:21:50    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_13/plots/
[15:22:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_13/plots output/SPEC_advanced10/regres/train/ANNZ_13/plots_biasCor_before
[15:22:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:22:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[15:22:07    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_13/plots/
[15:22:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_13/plots output/SPEC_advanced10/regres/train/ANNZ_13/plots_biasCor_after
[15:22:19    INFO]  - Got original [KS-test,N_poiss]: [0.0841362 , 6.65828] , after the bias-correction: [0.0457092 , 5.60337] --> will KEEP the correction !

(15:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:22 INFO) 
[15:22:24    INFO]  -----------------------------------------------------
[15:22:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:22:24    INFO]  -----------------------------------------------------------------------------------------------------------
[15:22:24    INFO]  - starting ANNZ::Init()  ... 
[15:22:26    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_14/saveOpt.txt ...
[15:22:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:22:33    INFO] ----------------------------------------------------------------------------------------------------
[15:22:33    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=400:BoostType=AdaBoost:VarTransform=N
[15:22:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:22:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:22:33    INFO]      cuts (train):        ,
[15:22:33    INFO]      cuts (valid):       
[15:22:33    INFO]    - weights:            1
[15:22:33    INFO] ----------------------------------------------------------------------------------------------------
[15:22:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:23:01    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[15:23:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[15:23:03    INFO]  - Will gen. input-parameter errors ...
[15:23:05    INFO]  - starting ANNZ::loadReaders() ... 
[15:23:10    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:24:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:24:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:24:45    INFO]  -----------------------------------------------------------------------------------------------------------
[15:24:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:25:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:25:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:25:11    INFO]  -----------------------------------------------------------------------------------------------------------
[15:25:12    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:25:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:25:13    INFO]  - will try to derive a bias correction ... 
[15:25:13    INFO]  - will validate that training produced an XML file for later ... 
[15:25:13    INFO]  - starting ANNZ::loadReaders() ... 
[15:25:14    INFO]  - will validate that the training was not a complete failure ... 
[15:25:14    INFO]  - training seems to have been successful! will move on ...
[15:25:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:25:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:25:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:25:19    INFO] ----------------------------------------------------------------------------------------------------
[15:25:19    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:25:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:25:19    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:25:19    INFO]    - weights:            1
[15:25:19    INFO] ----------------------------------------------------------------------------------------------------
[15:25:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:25:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[15:25:28    INFO]  - Will gen. input-parameter errors ...
[15:25:30    INFO]  - starting ANNZ::loadReaders() ... 
[15:25:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:27:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:27:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:27:43    INFO]  -----------------------------------------------------------------------------------------------------------
[15:27:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:28:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:28:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:28:12    INFO]  -----------------------------------------------------------------------------------------------------------
[15:28:13    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:28:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:28:14    INFO]  - will validate that the bias-correction actually improved the result ...
[15:28:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:28:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[15:28:19    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_14/plots/
[15:28:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_14/plots output/SPEC_advanced10/regres/train/ANNZ_14/plots_biasCor_before
[15:28:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:28:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[15:28:36    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_14/plots/
[15:28:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_14/plots output/SPEC_advanced10/regres/train/ANNZ_14/plots_biasCor_after
[15:28:47    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11987] , after the bias-correction: [0.0497423 , 6.02496] --> will KEEP the correction !

(15:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:28 INFO) 
[15:28:51    INFO]  -----------------------------------------------------
[15:28:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:28:51    INFO]  -----------------------------------------------------------------------------------------------------------
[15:28:51    INFO]  - starting ANNZ::Init()  ... 
[15:28:52    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_15/saveOpt.txt ...
[15:28:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:28:58    INFO] ----------------------------------------------------------------------------------------------------
[15:28:58    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=460:BoostType=AdaBoost:VarTransform=N,P
[15:28:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:28:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:28:58    INFO]      cuts (train):        ,
[15:28:58    INFO]      cuts (valid):       
[15:28:58    INFO]    - weights:            1
[15:28:58    INFO] ----------------------------------------------------------------------------------------------------
[15:28:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:29:29    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[15:29:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[15:29:31    INFO]  - Will gen. input-parameter errors ...
[15:29:32    INFO]  - starting ANNZ::loadReaders() ... 
[15:29:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:32:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:32:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:32:22    INFO]  -----------------------------------------------------------------------------------------------------------
[15:32:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:32:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:32:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:32:59    INFO]  -----------------------------------------------------------------------------------------------------------
[15:32:59    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:33:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:33:00    INFO]  - will try to derive a bias correction ... 
[15:33:00    INFO]  - will validate that training produced an XML file for later ... 
[15:33:00    INFO]  - starting ANNZ::loadReaders() ... 
[15:33:02    INFO]  - will validate that the training was not a complete failure ... 
[15:33:02    INFO]  - training seems to have been successful! will move on ...
[15:33:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:33:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:33:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:33:06    INFO] ----------------------------------------------------------------------------------------------------
[15:33:06    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:33:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:33:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:33:06    INFO]    - weights:            1
[15:33:06    INFO] ----------------------------------------------------------------------------------------------------
[15:33:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:33:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[15:33:14    INFO]  - Will gen. input-parameter errors ...
[15:33:16    INFO]  - starting ANNZ::loadReaders() ... 
[15:33:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:36:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:36:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:36:21    INFO]  -----------------------------------------------------------------------------------------------------------
[15:36:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:37:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:37:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:37:08    INFO]  -----------------------------------------------------------------------------------------------------------
[15:37:08    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:37:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:37:09    INFO]  - will validate that the bias-correction actually improved the result ...
[15:37:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:37:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
Warning in <Fit>: Fit data is empty 
[15:37:14    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_15/plots/
[15:37:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_15/plots output/SPEC_advanced10/regres/train/ANNZ_15/plots_biasCor_before
[15:37:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:37:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
Warning in <Fit>: Fit data is empty 
[15:37:31    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_15/plots/
[15:37:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_15/plots output/SPEC_advanced10/regres/train/ANNZ_15/plots_biasCor_after
[15:37:42    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40365] , after the bias-correction: [0.0442528 , 5.77607] --> will KEEP the correction !

(15:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:37 INFO) 
[15:37:46    INFO]  -----------------------------------------------------
[15:37:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:37:46    INFO]  -----------------------------------------------------------------------------------------------------------
[15:37:46    INFO]  - starting ANNZ::Init()  ... 
[15:37:47    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_16/saveOpt.txt ...
[15:37:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:37:53    INFO] ----------------------------------------------------------------------------------------------------
[15:37:53    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=340:BoostType=AdaBoost:VarTransform=P
[15:37:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:37:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:37:53    INFO]      cuts (train):        ,
[15:37:53    INFO]      cuts (valid):       
[15:37:53    INFO]    - weights:            1
[15:37:53    INFO] ----------------------------------------------------------------------------------------------------
[15:37:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:38:19    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[15:38:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[15:38:21    INFO]  - Will gen. input-parameter errors ...
[15:38:22    INFO]  - starting ANNZ::loadReaders() ... 
[15:38:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:40:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:40:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:40:20    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:40:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:40:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:40:49    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:49    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:40:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:40:50    INFO]  - will try to derive a bias correction ... 
[15:40:50    INFO]  - will validate that training produced an XML file for later ... 
[15:40:50    INFO]  - starting ANNZ::loadReaders() ... 
[15:40:52    INFO]  - will validate that the training was not a complete failure ... 
[15:40:52    INFO]  - training seems to have been successful! will move on ...
[15:40:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:40:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:40:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:40:56    INFO] ----------------------------------------------------------------------------------------------------
[15:40:56    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:40:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:40:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:40:56    INFO]    - weights:            1
[15:40:56    INFO] ----------------------------------------------------------------------------------------------------
[15:40:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:41:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[15:41:04    INFO]  - Will gen. input-parameter errors ...
[15:41:06    INFO]  - starting ANNZ::loadReaders() ... 
[15:41:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:43:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:43:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:43:28    INFO]  -----------------------------------------------------------------------------------------------------------
[15:43:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:43:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:43:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:43:56    INFO]  -----------------------------------------------------------------------------------------------------------
[15:43:56    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:43:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:43:57    INFO]  - will validate that the bias-correction actually improved the result ...
[15:43:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:43:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[15:44:03    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_16/plots/
[15:44:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_16/plots output/SPEC_advanced10/regres/train/ANNZ_16/plots_biasCor_before
[15:44:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:44:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[15:44:21    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_16/plots/
[15:44:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_16/plots output/SPEC_advanced10/regres/train/ANNZ_16/plots_biasCor_after
[15:44:33    INFO]  - Got original [KS-test,N_poiss]: [0.0722609 , 6.2056] , after the bias-correction: [0.0332462 , 5.3808] --> will KEEP the correction !

(15:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:44 INFO) 
[15:44:37    INFO]  -----------------------------------------------------
[15:44:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:44:37    INFO]  -----------------------------------------------------------------------------------------------------------
[15:44:37    INFO]  - starting ANNZ::Init()  ... 
[15:44:38    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_17/saveOpt.txt ...
[15:44:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:44:44    INFO] ----------------------------------------------------------------------------------------------------
[15:44:44    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=480:BoostType=Bagging:VarTransform=N,P
[15:44:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:44:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:44:44    INFO]      cuts (train):        ,
[15:44:44    INFO]      cuts (valid):       
[15:44:44    INFO]    - weights:            1
[15:44:44    INFO] ----------------------------------------------------------------------------------------------------
[15:44:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:45:39    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[15:45:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[15:45:44    INFO]  - Will gen. input-parameter errors ...
[15:45:46    INFO]  - starting ANNZ::loadReaders() ... 
[15:46:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:51:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:51:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:51:15    INFO]  -----------------------------------------------------------------------------------------------------------
[15:51:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:52:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:52:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:52:34    INFO]  -----------------------------------------------------------------------------------------------------------
[15:52:34    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:52:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:52:37    INFO]  - will try to derive a bias correction ... 
[15:52:37    INFO]  - will validate that training produced an XML file for later ... 
[15:52:37    INFO]  - starting ANNZ::loadReaders() ... 
[15:52:43    INFO]  - will validate that the training was not a complete failure ... 
[15:52:43    INFO]  - training seems to have been successful! will move on ...
[15:52:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:52:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:52:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:52:50    INFO] ----------------------------------------------------------------------------------------------------
[15:52:50    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:52:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:52:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:52:50    INFO]    - weights:            1
[15:52:50    INFO] ----------------------------------------------------------------------------------------------------
[15:52:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:53:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[15:53:01    INFO]  - Will gen. input-parameter errors ...
[15:53:04    INFO]  - starting ANNZ::loadReaders() ... 
[15:53:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:58:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:58:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:58:44    INFO]  -----------------------------------------------------------------------------------------------------------
[15:58:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:00:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:00:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:00:15    INFO]  -----------------------------------------------------------------------------------------------------------
[16:00:15    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:00:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:00:17    INFO]  - will validate that the bias-correction actually improved the result ...
[16:00:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:00:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[16:00:23    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_17/plots/
[16:00:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_17/plots output/SPEC_advanced10/regres/train/ANNZ_17/plots_biasCor_before
[16:00:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:00:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[16:00:40    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_17/plots/
[16:00:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_17/plots output/SPEC_advanced10/regres/train/ANNZ_17/plots_biasCor_after
[16:00:52    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.90151] , after the bias-correction: [0.0433565 , 5.78289] --> will KEEP the correction !

(16:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=910:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:00 INFO) 
[16:00:57    INFO]  -----------------------------------------------------
[16:00:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:00:57    INFO]  -----------------------------------------------------------------------------------------------------------
[16:00:58    INFO]  - starting ANNZ::Init()  ... 
[16:00:59    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_18/saveOpt.txt ...
[16:01:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:01:06    INFO] ----------------------------------------------------------------------------------------------------
[16:01:06    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=910:BoostType=AdaBoost:VarTransform=N,P
[16:01:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:01:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:01:06    INFO]      cuts (train):        ,
[16:01:06    INFO]      cuts (valid):       
[16:01:06    INFO]    - weights:            1
[16:01:06    INFO] ----------------------------------------------------------------------------------------------------
[16:01:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:02:03    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[16:02:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[16:02:06    INFO]  - Will gen. input-parameter errors ...
[16:02:08    INFO]  - starting ANNZ::loadReaders() ... 
[16:02:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:10:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:10:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:10:55    INFO]  -----------------------------------------------------------------------------------------------------------
[16:10:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:12:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:12:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:12:53    INFO]  -----------------------------------------------------------------------------------------------------------
[16:12:53    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:12:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:12:55    INFO]  - will try to derive a bias correction ... 
[16:12:55    INFO]  - will validate that training produced an XML file for later ... 
[16:12:55    INFO]  - starting ANNZ::loadReaders() ... 
[16:12:58    INFO]  - will validate that the training was not a complete failure ... 
[16:12:58    INFO]  - training seems to have been successful! will move on ...
[16:12:58    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:13:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:13:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:13:02    INFO] ----------------------------------------------------------------------------------------------------
[16:13:02    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:13:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:13:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:13:02    INFO]    - weights:            1
[16:13:02    INFO] ----------------------------------------------------------------------------------------------------
[16:13:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:13:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[16:13:11    INFO]  - Will gen. input-parameter errors ...
[16:13:13    INFO]  - starting ANNZ::loadReaders() ... 
[16:13:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:17:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:17:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:17:56    INFO]  -----------------------------------------------------------------------------------------------------------
[16:17:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:18:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:18:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:18:54    INFO]  -----------------------------------------------------------------------------------------------------------
[16:18:54    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:18:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:18:56    INFO]  - will validate that the bias-correction actually improved the result ...
[16:18:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:18:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[16:19:02    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_18/plots/
[16:19:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_18/plots output/SPEC_advanced10/regres/train/ANNZ_18/plots_biasCor_before
[16:19:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:19:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[16:19:20    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_18/plots/
[16:19:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_18/plots output/SPEC_advanced10/regres/train/ANNZ_18/plots_biasCor_after
[16:19:39    INFO]  - Got original [KS-test,N_poiss]: [0.101837 , 6.44313] , after the bias-correction: [0.0444768 , 5.68846] --> will KEEP the correction !

(16:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:19 INFO) 
[16:19:43    INFO]  -----------------------------------------------------
[16:19:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:19:43    INFO]  -----------------------------------------------------------------------------------------------------------
[16:19:44    INFO]  - starting ANNZ::Init()  ... 
[16:19:45    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_19/saveOpt.txt ...
[16:19:52    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:19:52    INFO] ----------------------------------------------------------------------------------------------------
[16:19:52    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N
[16:19:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:19:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:19:52    INFO]      cuts (train):        ,
[16:19:52    INFO]      cuts (valid):       
[16:19:52    INFO]    - weights:            1
[16:19:52    INFO] ----------------------------------------------------------------------------------------------------
[16:19:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:20:32    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[16:20:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[16:20:35    INFO]  - Will gen. input-parameter errors ...
[16:20:36    INFO]  - starting ANNZ::loadReaders() ... 
[16:20:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:23:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:23:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:23:19    INFO]  -----------------------------------------------------------------------------------------------------------
[16:23:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:24:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:24:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:24:00    INFO]  -----------------------------------------------------------------------------------------------------------
[16:24:00    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:24:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:24:01    INFO]  - will try to derive a bias correction ... 
[16:24:01    INFO]  - will validate that training produced an XML file for later ... 
[16:24:01    INFO]  - starting ANNZ::loadReaders() ... 
[16:24:03    INFO]  - will validate that the training was not a complete failure ... 
[16:24:03    INFO]  - training seems to have been successful! will move on ...
[16:24:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:24:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:24:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:24:08    INFO] ----------------------------------------------------------------------------------------------------
[16:24:08    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:24:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:24:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:24:08    INFO]    - weights:            1
[16:24:08    INFO] ----------------------------------------------------------------------------------------------------
[16:24:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:24:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[16:24:17    INFO]  - Will gen. input-parameter errors ...
[16:24:19    INFO]  - starting ANNZ::loadReaders() ... 
[16:24:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:26:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:26:34    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:27:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:27:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:27:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:27:03    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:27:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:27:04    INFO]  - will validate that the bias-correction actually improved the result ...
[16:27:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:27:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
Warning in <Fit>: Fit data is empty 
[16:27:12    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_19/plots/
[16:27:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_19/plots output/SPEC_advanced10/regres/train/ANNZ_19/plots_biasCor_before
[16:27:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:27:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
Warning in <Fit>: Fit data is empty 
[16:27:30    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_19/plots/
[16:27:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_19/plots output/SPEC_advanced10/regres/train/ANNZ_19/plots_biasCor_after
[16:27:43    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.14175] , after the bias-correction: [0.0498544 , 6.10283] --> will KEEP the correction !

(16:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:27 INFO) 
[16:27:46    INFO]  -----------------------------------------------------
[16:27:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:27:46    INFO]  -----------------------------------------------------------------------------------------------------------
[16:27:47    INFO]  - starting ANNZ::Init()  ... 
[16:27:48    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_20/saveOpt.txt ...
[16:27:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:27:54    INFO] ----------------------------------------------------------------------------------------------------
[16:27:54    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N,P
[16:27:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:27:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:27:54    INFO]      cuts (train):        ,
[16:27:54    INFO]      cuts (valid):       
[16:27:54    INFO]    - weights:            1
[16:27:54    INFO] ----------------------------------------------------------------------------------------------------
[16:27:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:28:35    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[16:28:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[16:28:39    INFO]  - Will gen. input-parameter errors ...
[16:28:41    INFO]  - starting ANNZ::loadReaders() ... 
[16:28:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:32:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:32:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:32:13    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:33:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:33:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:33:00    INFO]  -----------------------------------------------------------------------------------------------------------
[16:33:00    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:33:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:33:01    INFO]  - will try to derive a bias correction ... 
[16:33:01    INFO]  - will validate that training produced an XML file for later ... 
[16:33:01    INFO]  - starting ANNZ::loadReaders() ... 
[16:33:05    INFO]  - will validate that the training was not a complete failure ... 
[16:33:05    INFO]  - training seems to have been successful! will move on ...
[16:33:05    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:33:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:33:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:33:10    INFO] ----------------------------------------------------------------------------------------------------
[16:33:10    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:33:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:33:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:33:10    INFO]    - weights:            1
[16:33:10    INFO] ----------------------------------------------------------------------------------------------------
[16:33:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:33:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[16:33:18    INFO]  - Will gen. input-parameter errors ...
[16:33:20    INFO]  - starting ANNZ::loadReaders() ... 
[16:33:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:36:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:36:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:36:51    INFO]  -----------------------------------------------------------------------------------------------------------
[16:36:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:37:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:37:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:37:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:37:37    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:37:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:37:38    INFO]  - will validate that the bias-correction actually improved the result ...
[16:37:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:37:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[16:37:45    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_20/plots/
[16:38:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_20/plots output/SPEC_advanced10/regres/train/ANNZ_20/plots_biasCor_before
[16:38:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:38:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[16:38:07    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_20/plots/
[16:38:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_20/plots output/SPEC_advanced10/regres/train/ANNZ_20/plots_biasCor_after
[16:38:18    INFO]  - Got original [KS-test,N_poiss]: [0.0932109 , 6.88301] , after the bias-correction: [0.0436926 , 5.59882] --> will KEEP the correction !

(16:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:38 INFO) 
[16:38:22    INFO]  -----------------------------------------------------
[16:38:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:38:22    INFO]  -----------------------------------------------------------------------------------------------------------
[16:38:23    INFO]  - starting ANNZ::Init()  ... 
[16:38:24    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_21/saveOpt.txt ...
[16:38:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:38:29    INFO] ----------------------------------------------------------------------------------------------------
[16:38:29    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=790:BoostType=AdaBoostR2:VarTransform=N
[16:38:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:38:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:38:29    INFO]      cuts (train):        ,
[16:38:29    INFO]      cuts (valid):       
[16:38:29    INFO]    - weights:            1
[16:38:29    INFO] ----------------------------------------------------------------------------------------------------
[16:38:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:39:44    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[16:39:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[16:39:48    INFO]  - Will gen. input-parameter errors ...
[16:39:50    INFO]  - starting ANNZ::loadReaders() ... 
[16:40:16    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:02:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:02:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:02:55    INFO]  -----------------------------------------------------------------------------------------------------------
[17:02:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:08:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:08:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:08:52    INFO]  -----------------------------------------------------------------------------------------------------------
[17:08:52    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:08:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:08:54    INFO]  - will try to derive a bias correction ... 
[17:08:54    INFO]  - will validate that training produced an XML file for later ... 
[17:08:54    INFO]  - starting ANNZ::loadReaders() ... 
[17:08:59    INFO]  - will validate that the training was not a complete failure ... 
[17:08:59    INFO]  - training seems to have been successful! will move on ...
[17:08:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:09:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:09:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:09:04    INFO] ----------------------------------------------------------------------------------------------------
[17:09:04    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:09:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:09:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:09:04    INFO]    - weights:            1
[17:09:04    INFO] ----------------------------------------------------------------------------------------------------
[17:09:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:09:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[17:09:13    INFO]  - Will gen. input-parameter errors ...
[17:09:15    INFO]  - starting ANNZ::loadReaders() ... 
[17:09:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:31:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:31:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:31:37    INFO]  -----------------------------------------------------------------------------------------------------------
[17:31:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:37:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:37:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:37:15    INFO]  -----------------------------------------------------------------------------------------------------------
[17:37:15    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:37:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:37:17    INFO]  - will validate that the bias-correction actually improved the result ...
[17:37:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:37:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
Warning in <Fit>: Fit data is empty 
[17:37:23    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_21/plots/
[17:37:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_21/plots output/SPEC_advanced10/regres/train/ANNZ_21/plots_biasCor_before
[17:37:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:37:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
Warning in <Fit>: Fit data is empty 
[17:37:42    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_21/plots/
[17:37:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_21/plots output/SPEC_advanced10/regres/train/ANNZ_21/plots_biasCor_after
[17:37:54    INFO]  - Got original [KS-test,N_poiss]: [0.0628501 , 6.55115] , after the bias-correction: [0.0342819 , 5.82803] --> will KEEP the correction !

(17:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:37 INFO) 
[17:37:58    INFO]  -----------------------------------------------------
[17:37:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:37:58    INFO]  -----------------------------------------------------------------------------------------------------------
[17:37:58    INFO]  - starting ANNZ::Init()  ... 
[17:37:59    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_22/saveOpt.txt ...
[17:38:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:38:04    INFO] ----------------------------------------------------------------------------------------------------
[17:38:04    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=520:BoostType=Bagging:VarTransform=N,P
[17:38:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:38:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:38:04    INFO]      cuts (train):        ,
[17:38:04    INFO]      cuts (valid):       
[17:38:04    INFO]    - weights:            1
[17:38:04    INFO] ----------------------------------------------------------------------------------------------------
[17:38:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:38:56    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[17:39:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[17:39:00    INFO]  - Will gen. input-parameter errors ...
[17:39:02    INFO]  - starting ANNZ::loadReaders() ... 
[17:39:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:43:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:43:27    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:43:27    INFO]  -----------------------------------------------------------------------------------------------------------
[17:43:27    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:44:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:44:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:44:31    INFO]  -----------------------------------------------------------------------------------------------------------
[17:44:31    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:44:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:44:33    INFO]  - will try to derive a bias correction ... 
[17:44:33    INFO]  - will validate that training produced an XML file for later ... 
[17:44:33    INFO]  - starting ANNZ::loadReaders() ... 
[17:44:38    INFO]  - will validate that the training was not a complete failure ... 
[17:44:38    INFO]  - training seems to have been successful! will move on ...
[17:44:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:44:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:44:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:44:43    INFO] ----------------------------------------------------------------------------------------------------
[17:44:43    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:44:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:44:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:44:43    INFO]    - weights:            1
[17:44:43    INFO] ----------------------------------------------------------------------------------------------------
[17:44:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:44:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[17:44:52    INFO]  - Will gen. input-parameter errors ...
[17:44:54    INFO]  - starting ANNZ::loadReaders() ... 
[17:45:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:49:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:49:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:49:52    INFO]  -----------------------------------------------------------------------------------------------------------
[17:49:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:51:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:51:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:51:38    INFO]  -----------------------------------------------------------------------------------------------------------
[17:51:38    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:51:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:51:40    INFO]  - will validate that the bias-correction actually improved the result ...
[17:51:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:51:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[17:51:46    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_22/plots/
[17:51:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_22/plots output/SPEC_advanced10/regres/train/ANNZ_22/plots_biasCor_before
[17:51:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:51:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[17:52:03    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_22/plots/
[17:52:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_22/plots output/SPEC_advanced10/regres/train/ANNZ_22/plots_biasCor_after
[17:52:14    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.93267] , after the bias-correction: [0.0442528 , 5.70097] --> will KEEP the correction !

(17:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:52 INFO) 
[17:52:18    INFO]  -----------------------------------------------------
[17:52:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:52:18    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:19    INFO]  - starting ANNZ::Init()  ... 
[17:52:20    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_23/saveOpt.txt ...
[17:52:24    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:52:25    INFO] ----------------------------------------------------------------------------------------------------
[17:52:25    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=430:BoostType=AdaBoostR2
[17:52:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:52:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:52:25    INFO]      cuts (train):        ,
[17:52:25    INFO]      cuts (valid):       
[17:52:25    INFO]    - weights:            1
[17:52:25    INFO] ----------------------------------------------------------------------------------------------------
[17:52:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:53:04    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[17:53:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[17:53:07    INFO]  - Will gen. input-parameter errors ...
[17:53:08    INFO]  - starting ANNZ::loadReaders() ... 
[17:53:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:00:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:00:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:00:06    INFO]  -----------------------------------------------------------------------------------------------------------
[18:00:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:01:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:01:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:01:51    INFO]  -----------------------------------------------------------------------------------------------------------
[18:01:52    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:01:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:01:53    INFO]  - will try to derive a bias correction ... 
[18:01:53    INFO]  - will validate that training produced an XML file for later ... 
[18:01:53    INFO]  - starting ANNZ::loadReaders() ... 
[18:01:56    INFO]  - will validate that the training was not a complete failure ... 
[18:01:56    INFO]  - training seems to have been successful! will move on ...
[18:01:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:01:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:01:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:02:00    INFO] ----------------------------------------------------------------------------------------------------
[18:02:00    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:02:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:02:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:02:00    INFO]    - weights:            1
[18:02:00    INFO] ----------------------------------------------------------------------------------------------------
[18:02:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:02:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[18:02:07    INFO]  - Will gen. input-parameter errors ...
[18:02:09    INFO]  - starting ANNZ::loadReaders() ... 
[18:02:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:08:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:08:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:08:13    INFO]  -----------------------------------------------------------------------------------------------------------
[18:08:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:09:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:09:36    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:36    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:09:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:09:37    INFO]  - will validate that the bias-correction actually improved the result ...
[18:09:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:09:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[18:09:42    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_23/plots/
[18:09:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_23/plots output/SPEC_advanced10/regres/train/ANNZ_23/plots_biasCor_before
[18:09:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:09:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
Warning in <Fit>: Fit data is empty 
[18:09:59    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_23/plots/
[18:10:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_23/plots output/SPEC_advanced10/regres/train/ANNZ_23/plots_biasCor_after
[18:10:11    INFO]  - Got original [KS-test,N_poiss]: [0.0635223 , 6.52854] , after the bias-correction: [0.027672 , 5.19612] --> will KEEP the correction !

(18:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:10 INFO) 
[18:10:14    INFO]  -----------------------------------------------------
[18:10:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:10:14    INFO]  -----------------------------------------------------------------------------------------------------------
[18:10:15    INFO]  - starting ANNZ::Init()  ... 
[18:10:15    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_24/saveOpt.txt ...
[18:10:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:10:20    INFO] ----------------------------------------------------------------------------------------------------
[18:10:20    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[18:10:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:10:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:10:20    INFO]      cuts (train):        ,
[18:10:20    INFO]      cuts (valid):       
[18:10:20    INFO]    - weights:            1
[18:10:20    INFO] ----------------------------------------------------------------------------------------------------
[18:10:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:11:04    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[18:11:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[18:11:09    INFO]  - Will gen. input-parameter errors ...
[18:11:11    INFO]  - starting ANNZ::loadReaders() ... 
[18:11:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:13:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:13:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:13:28    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:13:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:13:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:13:59    INFO]  -----------------------------------------------------------------------------------------------------------
[18:14:00    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:14:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:14:01    INFO]  - will try to derive a bias correction ... 
[18:14:01    INFO]  - will validate that training produced an XML file for later ... 
[18:14:01    INFO]  - starting ANNZ::loadReaders() ... 
[18:14:06    INFO]  - will validate that the training was not a complete failure ... 
[18:14:06    INFO]  - training seems to have been successful! will move on ...
[18:14:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:14:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:14:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:14:14    INFO] ----------------------------------------------------------------------------------------------------
[18:14:14    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:14:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:14:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:14:14    INFO]    - weights:            1
[18:14:14    INFO] ----------------------------------------------------------------------------------------------------
[18:14:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:14:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[18:14:23    INFO]  - Will gen. input-parameter errors ...
[18:14:25    INFO]  - starting ANNZ::loadReaders() ... 
[18:14:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:16:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:16:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:16:51    INFO]  -----------------------------------------------------------------------------------------------------------
[18:16:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:17:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:17:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:17:31    INFO]  -----------------------------------------------------------------------------------------------------------
[18:17:31    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:17:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:17:33    INFO]  - will validate that the bias-correction actually improved the result ...
[18:17:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:17:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[18:17:38    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_24/plots/
[18:17:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_24/plots output/SPEC_advanced10/regres/train/ANNZ_24/plots_biasCor_before
[18:17:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:17:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[18:17:55    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_24/plots/
[18:18:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_24/plots output/SPEC_advanced10/regres/train/ANNZ_24/plots_biasCor_after
[18:18:07    INFO]  - Got original [KS-test,N_poiss]: [0.0844724 , 6.62039] , after the bias-correction: [0.0454851 , 5.53294] --> will KEEP the correction !

(18:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:18 INFO) 
[18:18:11    INFO]  -----------------------------------------------------
[18:18:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:18:11    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:11    INFO]  - starting ANNZ::Init()  ... 
[18:18:12    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_25/saveOpt.txt ...
[18:18:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:18:18    INFO] ----------------------------------------------------------------------------------------------------
[18:18:18    INFO]  - will book (ANNZ_25) method(BDT) with options: :NTrees=280:BoostType=Bagging:VarTransform=P
[18:18:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:18:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:18:18    INFO]      cuts (train):        ,
[18:18:18    INFO]      cuts (valid):       
[18:18:18    INFO]    - weights:            1
[18:18:18    INFO] ----------------------------------------------------------------------------------------------------
[18:18:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.101365
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(18:18 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(18:18 CRITICAL) [41;37;1mWill terminate !!!![0m
(23:01 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:01 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:01 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:01 INFO) [40;37;1m - 10/03/19 23:01:03 - starting ANNZ[0m
(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:03    INFO]  -----------------------------------------------------
[23:01:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:03    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:04    INFO]  - starting ANNZ::Init()  ... 
[23:01:04    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced10/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[23:01:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:04    INFO]  -----------------------------------------------------
[23:01:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:04    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:05    INFO]  - starting ANNZ::Init()  ... 
[23:01:06    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced10/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[23:01:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:06    INFO]  -----------------------------------------------------
[23:01:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:06    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:07    INFO]  - starting ANNZ::Init()  ... 
[23:01:08    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced10/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[23:01:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:08    INFO]  -----------------------------------------------------
[23:01:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:09    INFO]  - starting ANNZ::Init()  ... 
[23:01:09    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced10/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[23:01:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:09    INFO]  -----------------------------------------------------
[23:01:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:09    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:10    INFO]  - starting ANNZ::Init()  ... 
[23:01:11    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced10/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[23:01:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:11    INFO]  -----------------------------------------------------
[23:01:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:11    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:12    INFO]  - starting ANNZ::Init()  ... 
[23:01:13    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced10/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[23:01:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:13    INFO]  -----------------------------------------------------
[23:01:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:13    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:14    INFO]  - starting ANNZ::Init()  ... 
[23:01:15    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced10/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[23:01:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:15    INFO]  -----------------------------------------------------
[23:01:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:15    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:16    INFO]  - starting ANNZ::Init()  ... 
[23:01:16    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced10/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[23:01:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:17    INFO]  -----------------------------------------------------
[23:01:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:17    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:17    INFO]  - starting ANNZ::Init()  ... 
[23:01:19    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced10/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[23:01:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:19    INFO]  -----------------------------------------------------
[23:01:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:19    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:20    INFO]  - starting ANNZ::Init()  ... 
[23:01:20    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced10/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[23:01:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:20    INFO]  -----------------------------------------------------
[23:01:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:21    INFO]  - starting ANNZ::Init()  ... 
[23:01:22    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced10/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[23:01:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:22    INFO]  -----------------------------------------------------
[23:01:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:23    INFO]  - starting ANNZ::Init()  ... 
[23:01:24    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced10/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[23:01:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:24    INFO]  -----------------------------------------------------
[23:01:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:25    INFO]  - starting ANNZ::Init()  ... 
[23:01:26    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced10/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[23:01:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:26    INFO]  -----------------------------------------------------
[23:01:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:26    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:27    INFO]  - starting ANNZ::Init()  ... 
[23:01:27    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced10/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[23:01:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:27    INFO]  -----------------------------------------------------
[23:01:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:28    INFO]  - starting ANNZ::Init()  ... 
[23:01:28    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced10/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[23:01:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoostR2:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:28    INFO]  -----------------------------------------------------
[23:01:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:29    INFO]  - starting ANNZ::Init()  ... 
[23:01:29    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced10/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[23:01:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:29    INFO]  -----------------------------------------------------
[23:01:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:29    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:30    INFO]  - starting ANNZ::Init()  ... 
[23:01:30    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced10/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[23:01:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:31    INFO]  -----------------------------------------------------
[23:01:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:31    INFO]  - starting ANNZ::Init()  ... 
[23:01:32    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced10/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[23:01:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:32    INFO]  -----------------------------------------------------
[23:01:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:32    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:33    INFO]  - starting ANNZ::Init()  ... 
[23:01:33    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced10/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[23:01:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:34    INFO]  -----------------------------------------------------
[23:01:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:34    INFO]  - starting ANNZ::Init()  ... 
[23:01:35    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced10/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[23:01:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:35    INFO]  -----------------------------------------------------
[23:01:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:35    INFO]  - starting ANNZ::Init()  ... 
[23:01:36    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced10/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[23:01:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:36    INFO]  -----------------------------------------------------
[23:01:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:37    INFO]  - starting ANNZ::Init()  ... 
[23:01:38    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced10/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[23:01:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:38    INFO]  -----------------------------------------------------
[23:01:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:38    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:39    INFO]  - starting ANNZ::Init()  ... 
[23:01:40    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced10/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[23:01:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:40    INFO]  -----------------------------------------------------
[23:01:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:40    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:41    INFO]  - starting ANNZ::Init()  ... 
[23:01:41    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced10/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[23:01:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:41    INFO]  -----------------------------------------------------
[23:01:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:41    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:42    INFO]  - starting ANNZ::Init()  ... 
[23:01:43    INFO]  - found trained "ANNZ_24" (./output/SPEC_advanced10/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[23:01:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:01 INFO) 
[23:01:43    INFO]  -----------------------------------------------------
[23:01:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:01:43    INFO]  -----------------------------------------------------------------------------------------------------------
[23:01:44    INFO]  - starting ANNZ::Init()  ... 
[23:01:45    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_25/saveOpt.txt ...
[23:01:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:01:51    INFO] ----------------------------------------------------------------------------------------------------
[23:01:51    INFO]  - will book (ANNZ_25) method(BDT) with options: :NTrees=280:BoostType=AdaBoostR2:VarTransform=P
[23:01:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:01:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:01:51    INFO]      cuts (train):        ,
[23:01:51    INFO]      cuts (valid):       
[23:01:51    INFO]    - weights:            1
[23:01:51    INFO] ----------------------------------------------------------------------------------------------------
[23:01:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.17646
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(23:01 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(23:01 CRITICAL) [41;37;1mWill terminate !!!![0m
(23:03 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:03 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:03 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:03 INFO) [40;37;1m - 10/03/19 23:03:33 - starting ANNZ[0m
(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:34    INFO]  -----------------------------------------------------
[23:03:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:34    INFO]  - starting ANNZ::Init()  ... 
[23:03:34    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced10/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[23:03:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:34    INFO]  -----------------------------------------------------
[23:03:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:35    INFO]  - starting ANNZ::Init()  ... 
[23:03:35    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced10/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[23:03:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:36    INFO]  -----------------------------------------------------
[23:03:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:36    INFO]  - starting ANNZ::Init()  ... 
[23:03:37    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced10/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[23:03:37    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:37    INFO]  -----------------------------------------------------
[23:03:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:37    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:38    INFO]  - starting ANNZ::Init()  ... 
[23:03:38    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced10/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[23:03:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:38    INFO]  -----------------------------------------------------
[23:03:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:38    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:39    INFO]  - starting ANNZ::Init()  ... 
[23:03:39    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced10/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[23:03:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=670:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:39    INFO]  -----------------------------------------------------
[23:03:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:39    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:40    INFO]  - starting ANNZ::Init()  ... 
[23:03:41    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced10/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[23:03:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:41    INFO]  -----------------------------------------------------
[23:03:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:41    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:41    INFO]  - starting ANNZ::Init()  ... 
[23:03:42    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced10/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[23:03:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:42    INFO]  -----------------------------------------------------
[23:03:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:42    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:43    INFO]  - starting ANNZ::Init()  ... 
[23:03:43    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced10/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[23:03:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=550:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:43    INFO]  -----------------------------------------------------
[23:03:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:43    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:44    INFO]  - starting ANNZ::Init()  ... 
[23:03:45    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced10/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[23:03:45    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:45    INFO]  -----------------------------------------------------
[23:03:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:45    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:46    INFO]  - starting ANNZ::Init()  ... 
[23:03:46    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced10/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[23:03:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:46    INFO]  -----------------------------------------------------
[23:03:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:47    INFO]  - starting ANNZ::Init()  ... 
[23:03:48    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced10/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[23:03:48    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:48    INFO]  -----------------------------------------------------
[23:03:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:48    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:49    INFO]  - starting ANNZ::Init()  ... 
[23:03:49    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced10/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[23:03:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:49    INFO]  -----------------------------------------------------
[23:03:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:49    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:50    INFO]  - starting ANNZ::Init()  ... 
[23:03:51    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced10/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[23:03:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:51    INFO]  -----------------------------------------------------
[23:03:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:51    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:51    INFO]  - starting ANNZ::Init()  ... 
[23:03:52    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced10/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[23:03:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:52    INFO]  -----------------------------------------------------
[23:03:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:52    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:52    INFO]  - starting ANNZ::Init()  ... 
[23:03:53    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced10/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[23:03:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:53    INFO]  -----------------------------------------------------
[23:03:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:53    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:54    INFO]  - starting ANNZ::Init()  ... 
[23:03:54    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced10/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[23:03:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:54    INFO]  -----------------------------------------------------
[23:03:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:54    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:54    INFO]  - starting ANNZ::Init()  ... 
[23:03:55    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced10/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[23:03:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:55    INFO]  -----------------------------------------------------
[23:03:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:55    INFO]  - starting ANNZ::Init()  ... 
[23:03:56    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced10/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[23:03:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:56    INFO]  -----------------------------------------------------
[23:03:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:56    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:57    INFO]  - starting ANNZ::Init()  ... 
[23:03:57    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced10/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[23:03:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=610:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:58    INFO]  -----------------------------------------------------
[23:03:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:58    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:58    INFO]  - starting ANNZ::Init()  ... 
[23:03:59    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced10/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[23:03:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:03 INFO) 
[23:03:59    INFO]  -----------------------------------------------------
[23:03:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:03:59    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:59    INFO]  - starting ANNZ::Init()  ... 
[23:04:00    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced10/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[23:04:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:04 INFO) 
[23:04:00    INFO]  -----------------------------------------------------
[23:04:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:04:00    INFO]  -----------------------------------------------------------------------------------------------------------
[23:04:01    INFO]  - starting ANNZ::Init()  ... 
[23:04:01    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced10/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[23:04:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:04 INFO) 
[23:04:02    INFO]  -----------------------------------------------------
[23:04:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:04:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:04:02    INFO]  - starting ANNZ::Init()  ... 
[23:04:03    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced10/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[23:04:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:04 INFO) 
[23:04:03    INFO]  -----------------------------------------------------
[23:04:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:04:03    INFO]  -----------------------------------------------------------------------------------------------------------
[23:04:04    INFO]  - starting ANNZ::Init()  ... 
[23:04:04    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced10/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[23:04:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:04 INFO) 
[23:04:04    INFO]  -----------------------------------------------------
[23:04:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:04:04    INFO]  -----------------------------------------------------------------------------------------------------------
[23:04:05    INFO]  - starting ANNZ::Init()  ... 
[23:04:06    INFO]  - found trained "ANNZ_24" (./output/SPEC_advanced10/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[23:04:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(23:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:04 INFO) 
[23:04:06    INFO]  -----------------------------------------------------
[23:04:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:04:06    INFO]  -----------------------------------------------------------------------------------------------------------
[23:04:06    INFO]  - starting ANNZ::Init()  ... 
[23:04:08    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_25/saveOpt.txt ...
[23:04:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:04:14    INFO] ----------------------------------------------------------------------------------------------------
[23:04:14    INFO]  - will book (ANNZ_25) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N
[23:04:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:04:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:04:14    INFO]      cuts (train):        ,
[23:04:14    INFO]      cuts (valid):       
[23:04:14    INFO]    - weights:            1
[23:04:14    INFO] ----------------------------------------------------------------------------------------------------
[23:04:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:05:07    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_25/ANNZ_25_weights/saveTrainOpt_ANNZ_25.txt ...
[23:05:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[23:05:12    INFO]  - Will gen. input-parameter errors ...
[23:05:14    INFO]  - starting ANNZ::loadReaders() ... 
[23:05:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[23:08:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:08:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:08:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:08:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[23:09:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:09:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:09:08    INFO]  -----------------------------------------------------------------------------------------------------------
[23:09:09    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:09:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:09:11    INFO]  - will try to derive a bias correction ... 
[23:09:11    INFO]  - will validate that training produced an XML file for later ... 
[23:09:11    INFO]  - starting ANNZ::loadReaders() ... 
[23:09:18    INFO]  - will validate that the training was not a complete failure ... 
[23:09:18    INFO]  - training seems to have been successful! will move on ...
[23:09:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:09:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:09:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:09:26    INFO] ----------------------------------------------------------------------------------------------------
[23:09:26    INFO]  - will book (ANNZ_25_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:09:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:09:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:09:26    INFO]    - weights:            1
[23:09:26    INFO] ----------------------------------------------------------------------------------------------------
[23:09:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:09:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[23:09:40    INFO]  - Will gen. input-parameter errors ...
[23:09:42    INFO]  - starting ANNZ::loadReaders() ... 
[23:09:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[23:13:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:13:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:13:06    INFO]  -----------------------------------------------------------------------------------------------------------
[23:13:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[23:13:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:13:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:13:52    INFO]  -----------------------------------------------------------------------------------------------------------
[23:13:52    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:13:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:13:54    INFO]  - will validate that the bias-correction actually improved the result ...
[23:13:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:13:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
[23:14:01    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_25/plots/
[23:14:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_25/plots output/SPEC_advanced10/regres/train/ANNZ_25/plots_biasCor_before
[23:14:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:14:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
[23:14:23    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_25/plots/
[23:14:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_25/plots output/SPEC_advanced10/regres/train/ANNZ_25/plots_biasCor_after
[23:14:36    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.69238] , after the bias-correction: [0.0466055 , 5.74079] --> will KEEP the correction !

(23:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:14 INFO) 
[23:14:40    INFO]  -----------------------------------------------------
[23:14:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:14:40    INFO]  -----------------------------------------------------------------------------------------------------------
[23:14:41    INFO]  - starting ANNZ::Init()  ... 
[23:14:42    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_26/saveOpt.txt ...
[23:14:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:14:49    INFO] ----------------------------------------------------------------------------------------------------
[23:14:49    INFO]  - will book (ANNZ_26) method(BDT) with options: :NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P
[23:14:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:14:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:14:49    INFO]      cuts (train):        ,
[23:14:49    INFO]      cuts (valid):       
[23:14:49    INFO]    - weights:            1
[23:14:49    INFO] ----------------------------------------------------------------------------------------------------
[23:14:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:15:31    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_26/ANNZ_26_weights/saveTrainOpt_ANNZ_26.txt ...
[23:15:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[23:15:35    INFO]  - Will gen. input-parameter errors ...
[23:15:36    INFO]  - starting ANNZ::loadReaders() ... 
[23:15:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[23:24:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:24:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:24:01    INFO]  -----------------------------------------------------------------------------------------------------------
[23:24:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[23:26:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:26:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:26:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:26:02    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:26:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:26:03    INFO]  - will try to derive a bias correction ... 
[23:26:03    INFO]  - will validate that training produced an XML file for later ... 
[23:26:03    INFO]  - starting ANNZ::loadReaders() ... 
[23:26:06    INFO]  - will validate that the training was not a complete failure ... 
[23:26:06    INFO]  - training seems to have been successful! will move on ...
[23:26:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:26:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:26:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:26:12    INFO] ----------------------------------------------------------------------------------------------------
[23:26:12    INFO]  - will book (ANNZ_26_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:26:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:26:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:26:12    INFO]    - weights:            1
[23:26:12    INFO] ----------------------------------------------------------------------------------------------------
[23:26:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:26:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[23:26:21    INFO]  - Will gen. input-parameter errors ...
[23:26:23    INFO]  - starting ANNZ::loadReaders() ... 
[23:26:32    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[23:33:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:33:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:33:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:33:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[23:35:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:35:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:35:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:35:24    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:35:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:35:25    INFO]  - will validate that the bias-correction actually improved the result ...
[23:35:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:35:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[23:35:32    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_26/plots/
[23:35:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_26/plots output/SPEC_advanced10/regres/train/ANNZ_26/plots_biasCor_before
[23:35:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:35:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[23:35:55    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_26/plots/
[23:36:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_26/plots output/SPEC_advanced10/regres/train/ANNZ_26/plots_biasCor_after
[23:36:14    INFO]  - Got original [KS-test,N_poiss]: [0.0701322 , 6.63987] , after the bias-correction: [0.0337217 , 5.45539] --> will KEEP the correction !

(23:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:36 INFO) 
[23:36:18    INFO]  -----------------------------------------------------
[23:36:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:36:18    INFO]  -----------------------------------------------------------------------------------------------------------
[23:36:19    INFO]  - starting ANNZ::Init()  ... 
[23:36:20    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_27/saveOpt.txt ...
[23:36:26    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:36:26    INFO] ----------------------------------------------------------------------------------------------------
[23:36:26    INFO]  - will book (ANNZ_27) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N
[23:36:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:36:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:36:26    INFO]      cuts (train):        ,
[23:36:26    INFO]      cuts (valid):       
[23:36:26    INFO]    - weights:            1
[23:36:26    INFO] ----------------------------------------------------------------------------------------------------
[23:36:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:37:12    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_27/ANNZ_27_weights/saveTrainOpt_ANNZ_27.txt ...
[23:37:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[23:37:17    INFO]  - Will gen. input-parameter errors ...
[23:37:19    INFO]  - starting ANNZ::loadReaders() ... 
[23:37:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[23:39:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:39:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:39:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:39:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[23:40:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:40:09    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:40:09    INFO]  -----------------------------------------------------------------------------------------------------------
[23:40:09    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:40:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:40:11    INFO]  - will try to derive a bias correction ... 
[23:40:11    INFO]  - will validate that training produced an XML file for later ... 
[23:40:11    INFO]  - starting ANNZ::loadReaders() ... 
[23:40:16    INFO]  - will validate that the training was not a complete failure ... 
[23:40:16    INFO]  - training seems to have been successful! will move on ...
[23:40:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:40:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:40:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:40:22    INFO] ----------------------------------------------------------------------------------------------------
[23:40:22    INFO]  - will book (ANNZ_27_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:40:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:40:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:40:22    INFO]    - weights:            1
[23:40:22    INFO] ----------------------------------------------------------------------------------------------------
[23:40:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:40:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[23:40:32    INFO]  - Will gen. input-parameter errors ...
[23:40:34    INFO]  - starting ANNZ::loadReaders() ... 
[23:40:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[23:43:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:43:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:43:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:43:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[23:44:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:44:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:44:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:44:02    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:44:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:44:04    INFO]  - will validate that the bias-correction actually improved the result ...
[23:44:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:44:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
[23:44:12    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_27/plots/
[23:44:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_27/plots output/SPEC_advanced10/regres/train/ANNZ_27/plots_biasCor_before
[23:44:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:44:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
[23:44:29    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_27/plots/
[23:44:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_27/plots output/SPEC_advanced10/regres/train/ANNZ_27/plots_biasCor_after
[23:44:41    INFO]  - Got original [KS-test,N_poiss]: [0.0848085 , 6.65647] , after the bias-correction: [0.048398 , 5.74827] --> will KEEP the correction !

(23:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:44 INFO) 
[23:44:46    INFO]  -----------------------------------------------------
[23:44:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:44:46    INFO]  -----------------------------------------------------------------------------------------------------------
[23:44:47    INFO]  - starting ANNZ::Init()  ... 
[23:44:48    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_28/saveOpt.txt ...
[23:44:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:44:54    INFO] ----------------------------------------------------------------------------------------------------
[23:44:54    INFO]  - will book (ANNZ_28) method(BDT) with options: :NTrees=280:BoostType=AdaBoost:VarTransform=N,P
[23:44:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:44:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:44:54    INFO]      cuts (train):        ,
[23:44:54    INFO]      cuts (valid):       
[23:44:54    INFO]    - weights:            1
[23:44:54    INFO] ----------------------------------------------------------------------------------------------------
[23:44:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:45:14    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_28/ANNZ_28_weights/saveTrainOpt_ANNZ_28.txt ...
[23:45:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[23:45:15    INFO]  - Will gen. input-parameter errors ...
[23:45:17    INFO]  - starting ANNZ::loadReaders() ... 
[23:45:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[23:47:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:47:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:47:11    INFO]  -----------------------------------------------------------------------------------------------------------
[23:47:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[23:47:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:47:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:47:39    INFO]  -----------------------------------------------------------------------------------------------------------
[23:47:39    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:47:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:47:40    INFO]  - will try to derive a bias correction ... 
[23:47:40    INFO]  - will validate that training produced an XML file for later ... 
[23:47:40    INFO]  - starting ANNZ::loadReaders() ... 
[23:47:41    INFO]  - will validate that the training was not a complete failure ... 
[23:47:41    INFO]  - training seems to have been successful! will move on ...
[23:47:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:47:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:47:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:47:45    INFO] ----------------------------------------------------------------------------------------------------
[23:47:45    INFO]  - will book (ANNZ_28_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:47:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:47:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:47:45    INFO]    - weights:            1
[23:47:45    INFO] ----------------------------------------------------------------------------------------------------
[23:47:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:47:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[23:47:53    INFO]  - Will gen. input-parameter errors ...
[23:47:54    INFO]  - starting ANNZ::loadReaders() ... 
[23:47:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[23:50:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:50:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:50:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:50:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[23:50:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:50:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:50:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:50:55    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:50:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:50:56    INFO]  - will validate that the bias-correction actually improved the result ...
[23:50:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:50:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
Warning in <Fit>: Fit data is empty 
[23:51:02    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_28/plots/
[23:51:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_28/plots output/SPEC_advanced10/regres/train/ANNZ_28/plots_biasCor_before
[23:51:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:51:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
Warning in <Fit>: Fit data is empty 
[23:51:22    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_28/plots/
[23:51:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_28/plots output/SPEC_advanced10/regres/train/ANNZ_28/plots_biasCor_after
[23:51:35    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40268] , after the bias-correction: [0.0435806 , 5.80563] --> will KEEP the correction !

(23:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:51 INFO) 
[23:51:40    INFO]  -----------------------------------------------------
[23:51:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:51:40    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:40    INFO]  - starting ANNZ::Init()  ... 
[23:51:42    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_29/saveOpt.txt ...
[23:51:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:51:49    INFO] ----------------------------------------------------------------------------------------------------
[23:51:49    INFO]  - will book (ANNZ_29) method(BDT) with options: :NTrees=850:BoostType=Bagging:VarTransform=N
[23:51:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:51:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:51:49    INFO]      cuts (train):        ,
[23:51:49    INFO]      cuts (valid):       
[23:51:49    INFO]    - weights:            1
[23:51:49    INFO] ----------------------------------------------------------------------------------------------------
[23:51:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:53:20    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_29/ANNZ_29_weights/saveTrainOpt_ANNZ_29.txt ...
[23:53:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[23:53:28    INFO]  - Will gen. input-parameter errors ...
[23:53:32    INFO]  - starting ANNZ::loadReaders() ... 
[23:53:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[00:03:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:03:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:03:29    INFO]  -----------------------------------------------------------------------------------------------------------
[00:03:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[00:05:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:05:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:05:40    INFO]  -----------------------------------------------------------------------------------------------------------
[00:05:41    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:05:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:05:44    INFO]  - will try to derive a bias correction ... 
[00:05:44    INFO]  - will validate that training produced an XML file for later ... 
[00:05:44    INFO]  - starting ANNZ::loadReaders() ... 
[00:05:54    INFO]  - will validate that the training was not a complete failure ... 
[00:05:54    INFO]  - training seems to have been successful! will move on ...
[00:05:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:06:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:06:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:06:02    INFO] ----------------------------------------------------------------------------------------------------
[00:06:02    INFO]  - will book (ANNZ_29_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:06:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:06:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:06:02    INFO]    - weights:            1
[00:06:02    INFO] ----------------------------------------------------------------------------------------------------
[00:06:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:06:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[00:06:13    INFO]  - Will gen. input-parameter errors ...
[00:06:16    INFO]  - starting ANNZ::loadReaders() ... 
[00:06:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[00:17:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:17:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:17:41    INFO]  -----------------------------------------------------------------------------------------------------------
[00:17:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[00:20:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:20:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:20:34    INFO]  -----------------------------------------------------------------------------------------------------------
[00:20:34    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:20:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:20:38    INFO]  - will validate that the bias-correction actually improved the result ...
[00:20:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:20:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
Warning in <Fit>: Fit data is empty 
[00:20:45    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_29/plots/
[00:20:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_29/plots output/SPEC_advanced10/regres/train/ANNZ_29/plots_biasCor_before
[00:20:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:20:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
Warning in <Fit>: Fit data is empty 
[00:21:02    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_29/plots/
[00:21:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_29/plots output/SPEC_advanced10/regres/train/ANNZ_29/plots_biasCor_after
[00:21:15    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.6893] , after the bias-correction: [0.0480618 , 5.67327] --> will KEEP the correction !

(00:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:21 INFO) 
[00:21:21    INFO]  -----------------------------------------------------
[00:21:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:21:21    INFO]  -----------------------------------------------------------------------------------------------------------
[00:21:22    INFO]  - starting ANNZ::Init()  ... 
[00:21:23    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_30/saveOpt.txt ...
[00:21:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:21:29    INFO] ----------------------------------------------------------------------------------------------------
[00:21:29    INFO]  - will book (ANNZ_30) method(BDT) with options: :NTrees=500:BoostType=AdaBoost:VarTransform=P
[00:21:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:21:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:21:29    INFO]      cuts (train):        ,
[00:21:29    INFO]      cuts (valid):       
[00:21:29    INFO]    - weights:            1
[00:21:29    INFO] ----------------------------------------------------------------------------------------------------
[00:21:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:22:03    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_30/ANNZ_30_weights/saveTrainOpt_ANNZ_30.txt ...
[00:22:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[00:22:06    INFO]  - Will gen. input-parameter errors ...
[00:22:07    INFO]  - starting ANNZ::loadReaders() ... 
[00:22:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[00:24:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:24:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:24:46    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[00:25:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:25:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:25:30    INFO]  -----------------------------------------------------------------------------------------------------------
[00:25:30    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:25:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:25:31    INFO]  - will try to derive a bias correction ... 
[00:25:31    INFO]  - will validate that training produced an XML file for later ... 
[00:25:31    INFO]  - starting ANNZ::loadReaders() ... 
[00:25:33    INFO]  - will validate that the training was not a complete failure ... 
[00:25:33    INFO]  - training seems to have been successful! will move on ...
[00:25:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:25:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:25:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:25:38    INFO] ----------------------------------------------------------------------------------------------------
[00:25:38    INFO]  - will book (ANNZ_30_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:25:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:25:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:25:38    INFO]    - weights:            1
[00:25:38    INFO] ----------------------------------------------------------------------------------------------------
[00:25:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:25:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[00:25:46    INFO]  - Will gen. input-parameter errors ...
[00:25:48    INFO]  - starting ANNZ::loadReaders() ... 
[00:25:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[00:28:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:28:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:28:25    INFO]  -----------------------------------------------------------------------------------------------------------
[00:28:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[00:29:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:29:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:29:07    INFO]  -----------------------------------------------------------------------------------------------------------
[00:29:07    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:29:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:29:08    INFO]  - will validate that the bias-correction actually improved the result ...
[00:29:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:29:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
Warning in <Fit>: Fit data is empty 
[00:29:14    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_30/plots/
[00:29:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_30/plots output/SPEC_advanced10/regres/train/ANNZ_30/plots_biasCor_before
[00:29:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:29:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
Warning in <Fit>: Fit data is empty 
[00:29:31    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_30/plots/
[00:29:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_30/plots output/SPEC_advanced10/regres/train/ANNZ_30/plots_biasCor_after
[00:29:43    INFO]  - Got original [KS-test,N_poiss]: [0.0805512 , 6.45296] , after the bias-correction: [0.0350483 , 5.65695] --> will KEEP the correction !

(00:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=580:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:29 INFO) 
[00:29:47    INFO]  -----------------------------------------------------
[00:29:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:29:47    INFO]  -----------------------------------------------------------------------------------------------------------
[00:29:47    INFO]  - starting ANNZ::Init()  ... 
[00:29:49    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_31/saveOpt.txt ...
[00:29:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:29:54    INFO] ----------------------------------------------------------------------------------------------------
[00:29:54    INFO]  - will book (ANNZ_31) method(BDT) with options: :NTrees=580:BoostType=AdaBoostR2:VarTransform=N,P
[00:29:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:29:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:29:54    INFO]      cuts (train):        ,
[00:29:54    INFO]      cuts (valid):       
[00:29:54    INFO]    - weights:            1
[00:29:54    INFO] ----------------------------------------------------------------------------------------------------
[00:29:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:31:00    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_31/ANNZ_31_weights/saveTrainOpt_ANNZ_31.txt ...
[00:31:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[00:31:04    INFO]  - Will gen. input-parameter errors ...
[00:31:07    INFO]  - starting ANNZ::loadReaders() ... 
[00:31:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[00:49:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:49:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:49:58    INFO]  -----------------------------------------------------------------------------------------------------------
[00:49:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[00:54:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:54:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:54:36    INFO]  -----------------------------------------------------------------------------------------------------------
[00:54:36    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:54:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:54:38    INFO]  - will try to derive a bias correction ... 
[00:54:38    INFO]  - will validate that training produced an XML file for later ... 
[00:54:38    INFO]  - starting ANNZ::loadReaders() ... 
[00:54:43    INFO]  - will validate that the training was not a complete failure ... 
[00:54:43    INFO]  - training seems to have been successful! will move on ...
[00:54:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:54:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:54:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:54:49    INFO] ----------------------------------------------------------------------------------------------------
[00:54:49    INFO]  - will book (ANNZ_31_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:54:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:54:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:54:49    INFO]    - weights:            1
[00:54:49    INFO] ----------------------------------------------------------------------------------------------------
[00:54:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:54:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[00:54:59    INFO]  - Will gen. input-parameter errors ...
[00:55:01    INFO]  - starting ANNZ::loadReaders() ... 
[00:55:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[01:14:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:14:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:14:47    INFO]  -----------------------------------------------------------------------------------------------------------
[01:14:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[01:19:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:19:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:19:48    INFO]  -----------------------------------------------------------------------------------------------------------
[01:19:48    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:19:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:19:50    INFO]  - will validate that the bias-correction actually improved the result ...
[01:19:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:19:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
[01:19:57    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_31/plots/
[01:20:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_31/plots output/SPEC_advanced10/regres/train/ANNZ_31/plots_biasCor_before
[01:20:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:20:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
[01:20:16    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_31/plots/
[01:20:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_31/plots output/SPEC_advanced10/regres/train/ANNZ_31/plots_biasCor_after
[01:20:28    INFO]  - Got original [KS-test,N_poiss]: [0.0701322 , 6.55681] , after the bias-correction: [0.0322653 , 5.51223] --> will KEEP the correction !

(01:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:20 INFO) 
[01:20:33    INFO]  -----------------------------------------------------
[01:20:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:20:33    INFO]  -----------------------------------------------------------------------------------------------------------
[01:20:34    INFO]  - starting ANNZ::Init()  ... 
[01:20:37    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_32/saveOpt.txt ...
[01:20:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:20:44    INFO] ----------------------------------------------------------------------------------------------------
[01:20:44    INFO]  - will book (ANNZ_32) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N,P
[01:20:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:20:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:20:44    INFO]      cuts (train):        ,
[01:20:44    INFO]      cuts (valid):       
[01:20:44    INFO]    - weights:            1
[01:20:44    INFO] ----------------------------------------------------------------------------------------------------
[01:20:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:21:42    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_32/ANNZ_32_weights/saveTrainOpt_ANNZ_32.txt ...
[01:21:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[01:21:48    INFO]  - Will gen. input-parameter errors ...
[01:21:52    INFO]  - starting ANNZ::loadReaders() ... 
[01:22:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[01:26:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:26:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:26:52    INFO]  -----------------------------------------------------------------------------------------------------------
[01:26:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[01:28:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:28:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:28:10    INFO]  -----------------------------------------------------------------------------------------------------------
[01:28:10    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:28:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:28:12    INFO]  - will try to derive a bias correction ... 
[01:28:12    INFO]  - will validate that training produced an XML file for later ... 
[01:28:12    INFO]  - starting ANNZ::loadReaders() ... 
[01:28:18    INFO]  - will validate that the training was not a complete failure ... 
[01:28:18    INFO]  - training seems to have been successful! will move on ...
[01:28:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:28:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:28:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:28:27    INFO] ----------------------------------------------------------------------------------------------------
[01:28:27    INFO]  - will book (ANNZ_32_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:28:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:28:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:28:27    INFO]    - weights:            1
[01:28:27    INFO] ----------------------------------------------------------------------------------------------------
[01:28:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:28:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[01:28:39    INFO]  - Will gen. input-parameter errors ...
[01:28:43    INFO]  - starting ANNZ::loadReaders() ... 
[01:28:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[01:34:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:34:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:34:08    INFO]  -----------------------------------------------------------------------------------------------------------
[01:34:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[01:35:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:35:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:35:27    INFO]  -----------------------------------------------------------------------------------------------------------
[01:35:27    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:35:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:35:30    INFO]  - will validate that the bias-correction actually improved the result ...
[01:35:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:35:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
[01:35:40    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_32/plots/
[01:36:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_32/plots output/SPEC_advanced10/regres/train/ANNZ_32/plots_biasCor_before
[01:36:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:36:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
[01:36:13    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_32/plots/
[01:36:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_32/plots output/SPEC_advanced10/regres/train/ANNZ_32/plots_biasCor_after
[01:36:30    INFO]  - Got original [KS-test,N_poiss]: [0.0933229 , 6.85173] , after the bias-correction: [0.0453731 , 5.58688] --> will KEEP the correction !

(01:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:36 INFO) 
[01:36:35    INFO]  -----------------------------------------------------
[01:36:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:36:35    INFO]  -----------------------------------------------------------------------------------------------------------
[01:36:36    INFO]  - starting ANNZ::Init()  ... 
[01:36:39    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_33/saveOpt.txt ...
[01:36:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:36:46    INFO] ----------------------------------------------------------------------------------------------------
[01:36:46    INFO]  - will book (ANNZ_33) method(BDT) with options: :NTrees=430:BoostType=AdaBoost:VarTransform=N,P
[01:36:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:36:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:36:46    INFO]      cuts (train):        ,
[01:36:46    INFO]      cuts (valid):       
[01:36:46    INFO]    - weights:            1
[01:36:46    INFO] ----------------------------------------------------------------------------------------------------
[01:36:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:37:24    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_33/ANNZ_33_weights/saveTrainOpt_ANNZ_33.txt ...
[01:37:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[01:37:26    INFO]  - Will gen. input-parameter errors ...
[01:37:30    INFO]  - starting ANNZ::loadReaders() ... 
[01:37:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[01:40:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:40:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:40:17    INFO]  -----------------------------------------------------------------------------------------------------------
[01:40:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[01:40:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:40:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:40:55    INFO]  -----------------------------------------------------------------------------------------------------------
[01:40:55    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:40:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:40:56    INFO]  - will try to derive a bias correction ... 
[01:40:56    INFO]  - will validate that training produced an XML file for later ... 
[01:40:56    INFO]  - starting ANNZ::loadReaders() ... 
[01:40:58    INFO]  - will validate that the training was not a complete failure ... 
[01:40:58    INFO]  - training seems to have been successful! will move on ...
[01:40:58    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:41:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:41:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:41:08    INFO] ----------------------------------------------------------------------------------------------------
[01:41:08    INFO]  - will book (ANNZ_33_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:41:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:41:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:41:08    INFO]    - weights:            1
[01:41:08    INFO] ----------------------------------------------------------------------------------------------------
[01:41:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:41:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[01:41:16    INFO]  - Will gen. input-parameter errors ...
[01:41:19    INFO]  - starting ANNZ::loadReaders() ... 
[01:41:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[01:44:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:44:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:44:08    INFO]  -----------------------------------------------------------------------------------------------------------
[01:44:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[01:44:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:44:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:44:50    INFO]  -----------------------------------------------------------------------------------------------------------
[01:44:50    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:44:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:44:51    INFO]  - will validate that the bias-correction actually improved the result ...
[01:44:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:44:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
Warning in <Fit>: Fit data is empty 
[01:44:57    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_33/plots/
[01:45:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_33/plots output/SPEC_advanced10/regres/train/ANNZ_33/plots_biasCor_before
[01:45:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:45:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
Warning in <Fit>: Fit data is empty 
[01:45:16    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_33/plots/
[01:45:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_33/plots output/SPEC_advanced10/regres/train/ANNZ_33/plots_biasCor_after
[01:45:30    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40381] , after the bias-correction: [0.0441408 , 5.75862] --> will KEEP the correction !

(01:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:45 INFO) 
[01:45:35    INFO]  -----------------------------------------------------
[01:45:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:45:35    INFO]  -----------------------------------------------------------------------------------------------------------
[01:45:35    INFO]  - starting ANNZ::Init()  ... 
[01:45:38    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_34/saveOpt.txt ...
[01:45:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:45:46    INFO] ----------------------------------------------------------------------------------------------------
[01:45:46    INFO]  - will book (ANNZ_34) method(BDT) with options: :NTrees=480:BoostType=Bagging:VarTransform=N,P
[01:45:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:45:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:45:46    INFO]      cuts (train):        ,
[01:45:46    INFO]      cuts (valid):       
[01:45:46    INFO]    - weights:            1
[01:45:46    INFO] ----------------------------------------------------------------------------------------------------
[01:45:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:46:46    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_34/ANNZ_34_weights/saveTrainOpt_ANNZ_34.txt ...
[01:46:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[01:46:51    INFO]  - Will gen. input-parameter errors ...
[01:46:54    INFO]  - starting ANNZ::loadReaders() ... 
[01:47:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[01:51:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:51:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:51:38    INFO]  -----------------------------------------------------------------------------------------------------------
[01:51:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[01:52:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:52:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:52:50    INFO]  -----------------------------------------------------------------------------------------------------------
[01:52:50    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:52:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:52:53    INFO]  - will try to derive a bias correction ... 
[01:52:53    INFO]  - will validate that training produced an XML file for later ... 
[01:52:53    INFO]  - starting ANNZ::loadReaders() ... 
[01:53:01    INFO]  - will validate that the training was not a complete failure ... 
[01:53:02    INFO]  - training seems to have been successful! will move on ...
[01:53:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:53:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:53:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:53:13    INFO] ----------------------------------------------------------------------------------------------------
[01:53:13    INFO]  - will book (ANNZ_34_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:53:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:53:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:53:13    INFO]    - weights:            1
[01:53:13    INFO] ----------------------------------------------------------------------------------------------------
[01:53:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:53:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[01:53:26    INFO]  - Will gen. input-parameter errors ...
[01:53:30    INFO]  - starting ANNZ::loadReaders() ... 
[01:53:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[01:58:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:58:27    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:58:27    INFO]  -----------------------------------------------------------------------------------------------------------
[01:58:27    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[01:59:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:59:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:59:48    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:48    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:59:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:59:50    INFO]  - will validate that the bias-correction actually improved the result ...
[01:59:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:59:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[01:59:57    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_34/plots/
[02:00:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_34/plots output/SPEC_advanced10/regres/train/ANNZ_34/plots_biasCor_before
[02:00:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:00:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[02:00:15    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_34/plots/
[02:00:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_34/plots output/SPEC_advanced10/regres/train/ANNZ_34/plots_biasCor_after
[02:00:31    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.90151] , after the bias-correction: [0.0433565 , 5.78289] --> will KEEP the correction !

(02:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:00 INFO) 
[02:00:36    INFO]  -----------------------------------------------------
[02:00:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:00:36    INFO]  -----------------------------------------------------------------------------------------------------------
[02:00:36    INFO]  - starting ANNZ::Init()  ... 
[02:00:38    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_35/saveOpt.txt ...
[02:00:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:00:45    INFO] ----------------------------------------------------------------------------------------------------
[02:00:45    INFO]  - will book (ANNZ_35) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N
[02:00:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:00:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:00:45    INFO]      cuts (train):        ,
[02:00:45    INFO]      cuts (valid):       
[02:00:45    INFO]    - weights:            1
[02:00:45    INFO] ----------------------------------------------------------------------------------------------------
[02:00:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:01:26    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_35/ANNZ_35_weights/saveTrainOpt_ANNZ_35.txt ...
[02:01:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[02:01:29    INFO]  - Will gen. input-parameter errors ...
[02:01:31    INFO]  - starting ANNZ::loadReaders() ... 
[02:01:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:04:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:04:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:04:35    INFO]  -----------------------------------------------------------------------------------------------------------
[02:04:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[02:05:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:05:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:05:19    INFO]  -----------------------------------------------------------------------------------------------------------
[02:05:19    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:05:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:05:20    INFO]  - will try to derive a bias correction ... 
[02:05:20    INFO]  - will validate that training produced an XML file for later ... 
[02:05:20    INFO]  - starting ANNZ::loadReaders() ... 
[02:05:24    INFO]  - will validate that the training was not a complete failure ... 
[02:05:24    INFO]  - training seems to have been successful! will move on ...
[02:05:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:05:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:05:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:05:33    INFO] ----------------------------------------------------------------------------------------------------
[02:05:33    INFO]  - will book (ANNZ_35_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:05:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:05:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:05:33    INFO]    - weights:            1
[02:05:33    INFO] ----------------------------------------------------------------------------------------------------
[02:05:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:05:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[02:05:45    INFO]  - Will gen. input-parameter errors ...
[02:05:48    INFO]  - starting ANNZ::loadReaders() ... 
[02:05:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:07:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:07:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:07:57    INFO]  -----------------------------------------------------------------------------------------------------------
[02:07:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[02:08:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:08:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:08:27    INFO]  -----------------------------------------------------------------------------------------------------------
[02:08:27    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:08:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:08:28    INFO]  - will validate that the bias-correction actually improved the result ...
[02:08:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:08:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
Warning in <Fit>: Fit data is empty 
[02:08:35    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_35/plots/
[02:08:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_35/plots output/SPEC_advanced10/regres/train/ANNZ_35/plots_biasCor_before
[02:08:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:08:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
Warning in <Fit>: Fit data is empty 
[02:08:52    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_35/plots/
[02:09:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_35/plots output/SPEC_advanced10/regres/train/ANNZ_35/plots_biasCor_after
[02:09:05    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.14175] , after the bias-correction: [0.0498544 , 6.10283] --> will KEEP the correction !

(02:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=670:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:09 INFO) 
[02:09:09    INFO]  -----------------------------------------------------
[02:09:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:09:09    INFO]  -----------------------------------------------------------------------------------------------------------
[02:09:10    INFO]  - starting ANNZ::Init()  ... 
[02:09:16    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_36/saveOpt.txt ...
[02:09:22    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:09:22    INFO] ----------------------------------------------------------------------------------------------------
[02:09:22    INFO]  - will book (ANNZ_36) method(BDT) with options: :NTrees=670:BoostType=Bagging:VarTransform=N
[02:09:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:09:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:09:22    INFO]      cuts (train):        ,
[02:09:22    INFO]      cuts (valid):       
[02:09:22    INFO]    - weights:            1
[02:09:22    INFO] ----------------------------------------------------------------------------------------------------
[02:09:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:10:40    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_36/ANNZ_36_weights/saveTrainOpt_ANNZ_36.txt ...
[02:10:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[02:10:47    INFO]  - Will gen. input-parameter errors ...
[02:10:52    INFO]  - starting ANNZ::loadReaders() ... 
[02:11:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:16:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:16:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:16:19    INFO]  -----------------------------------------------------------------------------------------------------------
[02:16:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[02:17:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:17:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:17:39    INFO]  -----------------------------------------------------------------------------------------------------------
[02:17:39    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:17:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:17:42    INFO]  - will try to derive a bias correction ... 
[02:17:42    INFO]  - will validate that training produced an XML file for later ... 
[02:17:42    INFO]  - starting ANNZ::loadReaders() ... 
[02:17:49    INFO]  - will validate that the training was not a complete failure ... 
[02:17:50    INFO]  - training seems to have been successful! will move on ...
[02:17:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:18:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:18:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:18:03    INFO] ----------------------------------------------------------------------------------------------------
[02:18:03    INFO]  - will book (ANNZ_36_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:18:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:18:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:18:03    INFO]    - weights:            1
[02:18:03    INFO] ----------------------------------------------------------------------------------------------------
[02:18:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:18:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[02:18:15    INFO]  - Will gen. input-parameter errors ...
[02:18:23    INFO]  - starting ANNZ::loadReaders() ... 
[02:18:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:25:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:25:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:25:26    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[02:26:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:26:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:26:58    INFO]  -----------------------------------------------------------------------------------------------------------
[02:26:59    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:27:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:27:02    INFO]  - will validate that the bias-correction actually improved the result ...
[02:27:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:27:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
Warning in <Fit>: Fit data is empty 
[02:27:08    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_36/plots/
[02:27:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_36/plots output/SPEC_advanced10/regres/train/ANNZ_36/plots_biasCor_before
[02:27:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:27:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
[02:27:27    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_36/plots/
[02:27:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_36/plots output/SPEC_advanced10/regres/train/ANNZ_36/plots_biasCor_after
[02:27:39    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.70519] , after the bias-correction: [0.044925 , 5.76766] --> will KEEP the correction !

(02:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:27 INFO) 
[02:27:44    INFO]  -----------------------------------------------------
[02:27:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:27:44    INFO]  -----------------------------------------------------------------------------------------------------------
[02:27:45    INFO]  - starting ANNZ::Init()  ... 
[02:27:49    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_37/saveOpt.txt ...
[02:27:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:27:56    INFO] ----------------------------------------------------------------------------------------------------
[02:27:56    INFO]  - will book (ANNZ_37) method(BDT) with options: :NTrees=500:BoostType=AdaBoost:VarTransform=N,P
[02:27:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:27:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:27:56    INFO]      cuts (train):        ,
[02:27:56    INFO]      cuts (valid):       
[02:27:56    INFO]    - weights:            1
[02:27:56    INFO] ----------------------------------------------------------------------------------------------------
[02:27:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:28:32    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_37/ANNZ_37_weights/saveTrainOpt_ANNZ_37.txt ...
[02:28:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[02:28:34    INFO]  - Will gen. input-parameter errors ...
[02:28:39    INFO]  - starting ANNZ::loadReaders() ... 
[02:28:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:32:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:32:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:32:06    INFO]  -----------------------------------------------------------------------------------------------------------
[02:32:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[02:32:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:32:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:32:56    INFO]  -----------------------------------------------------------------------------------------------------------
[02:32:56    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:32:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:32:57    INFO]  - will try to derive a bias correction ... 
[02:32:57    INFO]  - will validate that training produced an XML file for later ... 
[02:32:57    INFO]  - starting ANNZ::loadReaders() ... 
[02:32:59    INFO]  - will validate that the training was not a complete failure ... 
[02:32:59    INFO]  - training seems to have been successful! will move on ...
[02:32:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:33:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:33:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:33:04    INFO] ----------------------------------------------------------------------------------------------------
[02:33:04    INFO]  - will book (ANNZ_37_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:33:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:33:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:33:04    INFO]    - weights:            1
[02:33:04    INFO] ----------------------------------------------------------------------------------------------------
[02:33:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:33:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[02:33:12    INFO]  - Will gen. input-parameter errors ...
[02:33:14    INFO]  - starting ANNZ::loadReaders() ... 
[02:33:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:36:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:36:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:36:24    INFO]  -----------------------------------------------------------------------------------------------------------
[02:36:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[02:37:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:37:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:37:12    INFO]  -----------------------------------------------------------------------------------------------------------
[02:37:12    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:37:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:37:13    INFO]  - will validate that the bias-correction actually improved the result ...
[02:37:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:37:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
[02:37:20    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_37/plots/
[02:37:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_37/plots output/SPEC_advanced10/regres/train/ANNZ_37/plots_biasCor_before
[02:37:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:37:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
[02:37:38    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_37/plots/
[02:37:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_37/plots output/SPEC_advanced10/regres/train/ANNZ_37/plots_biasCor_after
[02:37:50    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43485] , after the bias-correction: [0.0445889 , 5.68114] --> will KEEP the correction !

(02:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:37 INFO) 
[02:37:54    INFO]  -----------------------------------------------------
[02:37:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:37:54    INFO]  -----------------------------------------------------------------------------------------------------------
[02:37:55    INFO]  - starting ANNZ::Init()  ... 
[02:37:56    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_38/saveOpt.txt ...
[02:38:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:38:03    INFO] ----------------------------------------------------------------------------------------------------
[02:38:03    INFO]  - will book (ANNZ_38) method(BDT) with options: :NTrees=250:BoostType=Bagging:VarTransform=N,P
[02:38:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:38:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:38:03    INFO]      cuts (train):        ,
[02:38:03    INFO]      cuts (valid):       
[02:38:03    INFO]    - weights:            1
[02:38:03    INFO] ----------------------------------------------------------------------------------------------------
[02:38:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:38:30    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_38/ANNZ_38_weights/saveTrainOpt_ANNZ_38.txt ...
[02:38:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[02:38:34    INFO]  - Will gen. input-parameter errors ...
[02:38:36    INFO]  - starting ANNZ::loadReaders() ... 
[02:38:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:41:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:41:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:41:02    INFO]  -----------------------------------------------------------------------------------------------------------
[02:41:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[02:41:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:41:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:41:41    INFO]  -----------------------------------------------------------------------------------------------------------
[02:41:41    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:41:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:41:43    INFO]  - will try to derive a bias correction ... 
[02:41:43    INFO]  - will validate that training produced an XML file for later ... 
[02:41:43    INFO]  - starting ANNZ::loadReaders() ... 
[02:41:45    INFO]  - will validate that the training was not a complete failure ... 
[02:41:45    INFO]  - training seems to have been successful! will move on ...
[02:41:45    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:41:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:41:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:41:51    INFO] ----------------------------------------------------------------------------------------------------
[02:41:51    INFO]  - will book (ANNZ_38_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:41:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:41:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:41:51    INFO]    - weights:            1
[02:41:51    INFO] ----------------------------------------------------------------------------------------------------
[02:41:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:42:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[02:42:02    INFO]  - Will gen. input-parameter errors ...
[02:42:04    INFO]  - starting ANNZ::loadReaders() ... 
[02:42:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:44:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:44:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:44:36    INFO]  -----------------------------------------------------------------------------------------------------------
[02:44:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[02:45:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:45:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:45:12    INFO]  -----------------------------------------------------------------------------------------------------------
[02:45:12    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:45:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:45:13    INFO]  - will validate that the bias-correction actually improved the result ...
[02:45:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:45:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
[02:45:20    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_38/plots/
[02:45:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_38/plots output/SPEC_advanced10/regres/train/ANNZ_38/plots_biasCor_before
[02:45:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:45:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
[02:45:37    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_38/plots/
[02:45:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_38/plots output/SPEC_advanced10/regres/train/ANNZ_38/plots_biasCor_after
[02:45:49    INFO]  - Got original [KS-test,N_poiss]: [0.0942191 , 6.79833] , after the bias-correction: [0.0434685 , 5.53739] --> will KEEP the correction !

(02:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=760:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:45 INFO) 
[02:45:53    INFO]  -----------------------------------------------------
[02:45:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:45:53    INFO]  -----------------------------------------------------------------------------------------------------------
[02:45:54    INFO]  - starting ANNZ::Init()  ... 
[02:45:56    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_39/saveOpt.txt ...
[02:46:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:46:02    INFO] ----------------------------------------------------------------------------------------------------
[02:46:02    INFO]  - will book (ANNZ_39) method(BDT) with options: :NTrees=760:BoostType=Bagging:VarTransform=N
[02:46:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:46:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:46:02    INFO]      cuts (train):        ,
[02:46:02    INFO]      cuts (valid):       
[02:46:02    INFO]    - weights:            1
[02:46:02    INFO] ----------------------------------------------------------------------------------------------------
[02:46:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:47:27    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_39/ANNZ_39_weights/saveTrainOpt_ANNZ_39.txt ...
[02:47:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[02:47:35    INFO]  - Will gen. input-parameter errors ...
[02:47:39    INFO]  - starting ANNZ::loadReaders() ... 
[02:47:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[02:57:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:57:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:57:46    INFO]  -----------------------------------------------------------------------------------------------------------
[02:57:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[03:00:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:00:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:00:06    INFO]  -----------------------------------------------------------------------------------------------------------
[03:00:06    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:00:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:00:09    INFO]  - will try to derive a bias correction ... 
[03:00:09    INFO]  - will validate that training produced an XML file for later ... 
[03:00:09    INFO]  - starting ANNZ::loadReaders() ... 
[03:00:18    INFO]  - will validate that the training was not a complete failure ... 
[03:00:18    INFO]  - training seems to have been successful! will move on ...
[03:00:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:00:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:00:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:00:26    INFO] ----------------------------------------------------------------------------------------------------
[03:00:26    INFO]  - will book (ANNZ_39_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:00:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:00:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:00:26    INFO]    - weights:            1
[03:00:26    INFO] ----------------------------------------------------------------------------------------------------
[03:00:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:00:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[03:00:39    INFO]  - Will gen. input-parameter errors ...
[03:00:42    INFO]  - starting ANNZ::loadReaders() ... 
[03:01:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[03:10:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:10:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:10:21    INFO]  -----------------------------------------------------------------------------------------------------------
[03:10:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[03:12:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:12:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:12:31    INFO]  -----------------------------------------------------------------------------------------------------------
[03:12:31    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:12:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:12:34    INFO]  - will validate that the bias-correction actually improved the result ...
[03:12:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:12:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
Warning in <Fit>: Fit data is empty 
[03:12:42    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_39/plots/
[03:12:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_39/plots output/SPEC_advanced10/regres/train/ANNZ_39/plots_biasCor_before
[03:12:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:12:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
[03:13:00    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_39/plots/
[03:13:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_39/plots output/SPEC_advanced10/regres/train/ANNZ_39/plots_biasCor_after
[03:13:16    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.61855] , after the bias-correction: [0.0468295 , 5.59174] --> will KEEP the correction !

(03:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:13 INFO) 
[03:13:22    INFO]  -----------------------------------------------------
[03:13:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:13:22    INFO]  -----------------------------------------------------------------------------------------------------------
[03:13:23    INFO]  - starting ANNZ::Init()  ... 
[03:13:24    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_40/saveOpt.txt ...
[03:13:30    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:13:31    INFO] ----------------------------------------------------------------------------------------------------
[03:13:31    INFO]  - will book (ANNZ_40) method(BDT) with options: :NTrees=430:BoostType=AdaBoost:VarTransform=N,P
[03:13:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:13:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:13:31    INFO]      cuts (train):        ,
[03:13:31    INFO]      cuts (valid):       
[03:13:31    INFO]    - weights:            1
[03:13:31    INFO] ----------------------------------------------------------------------------------------------------
[03:13:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:14:02    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_40/ANNZ_40_weights/saveTrainOpt_ANNZ_40.txt ...
[03:14:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_40 ... 
[03:14:04    INFO]  - Will gen. input-parameter errors ...
[03:14:06    INFO]  - starting ANNZ::loadReaders() ... 
[03:14:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[03:16:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:16:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:16:53    INFO]  -----------------------------------------------------------------------------------------------------------
[03:16:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[03:17:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:17:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:17:33    INFO]  -----------------------------------------------------------------------------------------------------------
[03:17:33    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_40/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:17:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:17:34    INFO]  - will try to derive a bias correction ... 
[03:17:34    INFO]  - will validate that training produced an XML file for later ... 
[03:17:34    INFO]  - starting ANNZ::loadReaders() ... 
[03:17:35    INFO]  - will validate that the training was not a complete failure ... 
[03:17:36    INFO]  - training seems to have been successful! will move on ...
[03:17:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:17:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:17:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:17:40    INFO] ----------------------------------------------------------------------------------------------------
[03:17:40    INFO]  - will book (ANNZ_40_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:17:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:17:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:17:40    INFO]    - weights:            1
[03:17:40    INFO] ----------------------------------------------------------------------------------------------------
[03:17:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:17:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_40 ... 
[03:17:48    INFO]  - Will gen. input-parameter errors ...
[03:17:50    INFO]  - starting ANNZ::loadReaders() ... 
[03:17:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[03:21:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:21:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:21:19    INFO]  -----------------------------------------------------------------------------------------------------------
[03:21:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[03:22:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:22:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:22:00    INFO]  -----------------------------------------------------------------------------------------------------------
[03:22:00    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_40/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:22:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:22:01    INFO]  - will validate that the bias-correction actually improved the result ...
[03:22:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:22:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_40,
Warning in <Fit>: Fit data is empty 
[03:22:08    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_40/plots/
[03:22:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_40/plots output/SPEC_advanced10/regres/train/ANNZ_40/plots_biasCor_before
[03:22:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:22:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_40,
Warning in <Fit>: Fit data is empty 
[03:22:25    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_40/plots/
[03:22:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_40/plots output/SPEC_advanced10/regres/train/ANNZ_40/plots_biasCor_after
[03:22:38    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40381] , after the bias-correction: [0.0441408 , 5.75862] --> will KEEP the correction !

(03:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:22 INFO) 
[03:22:41    INFO]  -----------------------------------------------------
[03:22:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:22:41    INFO]  -----------------------------------------------------------------------------------------------------------
[03:22:42    INFO]  - starting ANNZ::Init()  ... 
[03:22:43    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_41/saveOpt.txt ...
[03:22:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:22:50    INFO] ----------------------------------------------------------------------------------------------------
[03:22:50    INFO]  - will book (ANNZ_41) method(BDT) with options: :NTrees=450:BoostType=AdaBoost:VarTransform=N
[03:22:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:22:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:22:50    INFO]      cuts (train):        ,
[03:22:50    INFO]      cuts (valid):       
[03:22:50    INFO]    - weights:            1
[03:22:50    INFO] ----------------------------------------------------------------------------------------------------
[03:22:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:23:23    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_41/ANNZ_41_weights/saveTrainOpt_ANNZ_41.txt ...
[03:23:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_41 ... 
[03:23:26    INFO]  - Will gen. input-parameter errors ...
[03:23:27    INFO]  - starting ANNZ::loadReaders() ... 
[03:23:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[03:25:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:25:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:25:25    INFO]  -----------------------------------------------------------------------------------------------------------
[03:25:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[03:25:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:25:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:25:52    INFO]  -----------------------------------------------------------------------------------------------------------
[03:25:52    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_41/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:25:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:25:53    INFO]  - will try to derive a bias correction ... 
[03:25:53    INFO]  - will validate that training produced an XML file for later ... 
[03:25:53    INFO]  - starting ANNZ::loadReaders() ... 
[03:25:55    INFO]  - will validate that the training was not a complete failure ... 
[03:25:55    INFO]  - training seems to have been successful! will move on ...
[03:25:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:25:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:26:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:26:00    INFO] ----------------------------------------------------------------------------------------------------
[03:26:00    INFO]  - will book (ANNZ_41_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:26:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:26:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:26:00    INFO]    - weights:            1
[03:26:00    INFO] ----------------------------------------------------------------------------------------------------
[03:26:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:26:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_41 ... 
[03:26:10    INFO]  - Will gen. input-parameter errors ...
[03:26:12    INFO]  - starting ANNZ::loadReaders() ... 
[03:26:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[03:28:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:28:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:28:21    INFO]  -----------------------------------------------------------------------------------------------------------
[03:28:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[03:28:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:28:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:28:48    INFO]  -----------------------------------------------------------------------------------------------------------
[03:28:49    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_41/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:28:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:28:50    INFO]  - will validate that the bias-correction actually improved the result ...
[03:28:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:28:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_41,
Warning in <Fit>: Fit data is empty 
[03:28:56    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_41/plots/
[03:29:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_41/plots output/SPEC_advanced10/regres/train/ANNZ_41/plots_biasCor_before
[03:29:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:29:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_41,
Warning in <Fit>: Fit data is empty 
[03:29:13    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_41/plots/
[03:29:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_41/plots output/SPEC_advanced10/regres/train/ANNZ_41/plots_biasCor_after
[03:29:25    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12573] , after the bias-correction: [0.0491822 , 5.96674] --> will KEEP the correction !

(03:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:29 INFO) 
[03:29:29    INFO]  -----------------------------------------------------
[03:29:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:29:29    INFO]  -----------------------------------------------------------------------------------------------------------
[03:29:30    INFO]  - starting ANNZ::Init()  ... 
[03:29:31    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_42/saveOpt.txt ...
[03:29:38    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:29:38    INFO] ----------------------------------------------------------------------------------------------------
[03:29:38    INFO]  - will book (ANNZ_42) method(BDT) with options: :NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P
[03:29:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:29:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:29:38    INFO]      cuts (train):        ,
[03:29:38    INFO]      cuts (valid):       
[03:29:38    INFO]    - weights:            1
[03:29:38    INFO] ----------------------------------------------------------------------------------------------------
[03:29:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:31:55    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_42/ANNZ_42_weights/saveTrainOpt_ANNZ_42.txt ...
[03:32:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_42 ... 
[03:32:02    INFO]  - Will gen. input-parameter errors ...
[03:32:05    INFO]  - starting ANNZ::loadReaders() ... 
[03:32:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[04:19:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:19:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:19:36    INFO]  -----------------------------------------------------------------------------------------------------------
[04:19:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[04:30:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:30:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:30:19    INFO]  -----------------------------------------------------------------------------------------------------------
[04:30:20    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_42/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:30:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:30:23    INFO]  - will try to derive a bias correction ... 
[04:30:23    INFO]  - will validate that training produced an XML file for later ... 
[04:30:23    INFO]  - starting ANNZ::loadReaders() ... 
[04:30:31    INFO]  - will validate that the training was not a complete failure ... 
[04:30:31    INFO]  - training seems to have been successful! will move on ...
[04:30:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:30:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:30:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:30:38    INFO] ----------------------------------------------------------------------------------------------------
[04:30:38    INFO]  - will book (ANNZ_42_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:30:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:30:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:30:38    INFO]    - weights:            1
[04:30:38    INFO] ----------------------------------------------------------------------------------------------------
[04:30:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:30:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_42 ... 
[04:30:49    INFO]  - Will gen. input-parameter errors ...
[04:30:52    INFO]  - starting ANNZ::loadReaders() ... 
[04:31:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:11:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:11:27    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:11:27    INFO]  -----------------------------------------------------------------------------------------------------------
[05:11:27    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:21:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:21:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:21:15    INFO]  -----------------------------------------------------------------------------------------------------------
[05:21:15    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_42/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:21:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:21:18    INFO]  - will validate that the bias-correction actually improved the result ...
[05:21:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:21:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_42,
[05:21:25    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_42/plots/
[05:21:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_42/plots output/SPEC_advanced10/regres/train/ANNZ_42/plots_biasCor_before
[05:21:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:21:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_42,
[05:21:41    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_42/plots/
[05:21:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_42/plots output/SPEC_advanced10/regres/train/ANNZ_42/plots_biasCor_after
[05:21:53    INFO]  - Got original [KS-test,N_poiss]: [0.0699081 , 6.62362] , after the bias-correction: [0.0314811 , 5.55175] --> will KEEP the correction !

(05:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:21 INFO) 
[05:21:58    INFO]  -----------------------------------------------------
[05:21:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:21:58    INFO]  -----------------------------------------------------------------------------------------------------------
[05:21:58    INFO]  - starting ANNZ::Init()  ... 
[05:21:59    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_43/saveOpt.txt ...
[05:22:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:22:05    INFO] ----------------------------------------------------------------------------------------------------
[05:22:05    INFO]  - will book (ANNZ_43) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=N
[05:22:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:22:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:22:05    INFO]      cuts (train):        ,
[05:22:05    INFO]      cuts (valid):       
[05:22:05    INFO]    - weights:            1
[05:22:05    INFO] ----------------------------------------------------------------------------------------------------
[05:22:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:22:45    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_43/ANNZ_43_weights/saveTrainOpt_ANNZ_43.txt ...
[05:22:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_43 ... 
[05:22:49    INFO]  - Will gen. input-parameter errors ...
[05:22:51    INFO]  - starting ANNZ::loadReaders() ... 
[05:22:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:25:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:25:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:25:08    INFO]  -----------------------------------------------------------------------------------------------------------
[05:25:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:25:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:25:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:25:41    INFO]  -----------------------------------------------------------------------------------------------------------
[05:25:41    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_43/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:25:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:25:43    INFO]  - will try to derive a bias correction ... 
[05:25:43    INFO]  - will validate that training produced an XML file for later ... 
[05:25:43    INFO]  - starting ANNZ::loadReaders() ... 
[05:25:47    INFO]  - will validate that the training was not a complete failure ... 
[05:25:47    INFO]  - training seems to have been successful! will move on ...
[05:25:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:25:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:25:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:25:52    INFO] ----------------------------------------------------------------------------------------------------
[05:25:52    INFO]  - will book (ANNZ_43_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:25:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:25:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:25:52    INFO]    - weights:            1
[05:25:52    INFO] ----------------------------------------------------------------------------------------------------
[05:25:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:26:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_43 ... 
[05:26:00    INFO]  - Will gen. input-parameter errors ...
[05:26:02    INFO]  - starting ANNZ::loadReaders() ... 
[05:26:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:28:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:28:27    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:28:27    INFO]  -----------------------------------------------------------------------------------------------------------
[05:28:27    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:29:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:29:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:29:04    INFO]  -----------------------------------------------------------------------------------------------------------
[05:29:05    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_43/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:29:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:29:07    INFO]  - will validate that the bias-correction actually improved the result ...
[05:29:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:29:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_43,
[05:29:14    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_43/plots/
[05:29:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_43/plots output/SPEC_advanced10/regres/train/ANNZ_43/plots_biasCor_before
[05:29:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:29:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_43,
[05:29:30    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_43/plots/
[05:29:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_43/plots output/SPEC_advanced10/regres/train/ANNZ_43/plots_biasCor_after
[05:29:42    INFO]  - Got original [KS-test,N_poiss]: [0.0842483 , 6.64052] , after the bias-correction: [0.0462694 , 5.67737] --> will KEEP the correction !

(05:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:29 INFO) 
[05:29:46    INFO]  -----------------------------------------------------
[05:29:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:29:46    INFO]  -----------------------------------------------------------------------------------------------------------
[05:29:46    INFO]  - starting ANNZ::Init()  ... 
[05:29:47    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_44/saveOpt.txt ...
[05:29:52    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:29:53    INFO] ----------------------------------------------------------------------------------------------------
[05:29:53    INFO]  - will book (ANNZ_44) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N,P
[05:29:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:29:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:29:53    INFO]      cuts (train):        ,
[05:29:53    INFO]      cuts (valid):       
[05:29:53    INFO]    - weights:            1
[05:29:53    INFO] ----------------------------------------------------------------------------------------------------
[05:29:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:30:36    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_44/ANNZ_44_weights/saveTrainOpt_ANNZ_44.txt ...
[05:30:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_44 ... 
[05:30:40    INFO]  - Will gen. input-parameter errors ...
[05:30:42    INFO]  - starting ANNZ::loadReaders() ... 
[05:30:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:34:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:34:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:34:31    INFO]  -----------------------------------------------------------------------------------------------------------
[05:34:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:35:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:35:25    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:35:25    INFO]  -----------------------------------------------------------------------------------------------------------
[05:35:25    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_44/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:35:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:35:27    INFO]  - will try to derive a bias correction ... 
[05:35:27    INFO]  - will validate that training produced an XML file for later ... 
[05:35:27    INFO]  - starting ANNZ::loadReaders() ... 
[05:35:31    INFO]  - will validate that the training was not a complete failure ... 
[05:35:32    INFO]  - training seems to have been successful! will move on ...
[05:35:32    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:35:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:35:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:35:37    INFO] ----------------------------------------------------------------------------------------------------
[05:35:37    INFO]  - will book (ANNZ_44_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:35:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:35:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:35:37    INFO]    - weights:            1
[05:35:37    INFO] ----------------------------------------------------------------------------------------------------
[05:35:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:35:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_44 ... 
[05:35:46    INFO]  - Will gen. input-parameter errors ...
[05:35:48    INFO]  - starting ANNZ::loadReaders() ... 
[05:35:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:40:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:40:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:40:01    INFO]  -----------------------------------------------------------------------------------------------------------
[05:40:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:40:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:40:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:40:53    INFO]  -----------------------------------------------------------------------------------------------------------
[05:40:53    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_44/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:40:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:40:55    INFO]  - will validate that the bias-correction actually improved the result ...
[05:40:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:40:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_44,
[05:41:01    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_44/plots/
[05:41:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_44/plots output/SPEC_advanced10/regres/train/ANNZ_44/plots_biasCor_before
[05:41:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:41:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_44,
[05:41:17    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_44/plots/
[05:41:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_44/plots output/SPEC_advanced10/regres/train/ANNZ_44/plots_biasCor_after
[05:41:28    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.89108] , after the bias-correction: [0.0442528 , 5.55252] --> will KEEP the correction !

(05:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m45[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:41 INFO) 
[05:41:32    INFO]  -----------------------------------------------------
[05:41:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:41:32    INFO]  -----------------------------------------------------------------------------------------------------------
[05:41:32    INFO]  - starting ANNZ::Init()  ... 
[05:41:33    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_45/saveOpt.txt ...
[05:41:38    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:41:39    INFO] ----------------------------------------------------------------------------------------------------
[05:41:39    INFO]  - will book (ANNZ_45) method(BDT) with options: :NTrees=340:BoostType=AdaBoost:VarTransform=N,P
[05:41:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:41:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:41:39    INFO]      cuts (train):        ,
[05:41:39    INFO]      cuts (valid):       
[05:41:39    INFO]    - weights:            1
[05:41:39    INFO] ----------------------------------------------------------------------------------------------------
[05:41:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:41:58    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_45/ANNZ_45_weights/saveTrainOpt_ANNZ_45.txt ...
[05:42:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_45 ... 
[05:42:00    INFO]  - Will gen. input-parameter errors ...
[05:42:01    INFO]  - starting ANNZ::loadReaders() ... 
[05:42:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:44:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:44:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:44:01    INFO]  -----------------------------------------------------------------------------------------------------------
[05:44:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:44:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:44:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:44:27    INFO]  -----------------------------------------------------------------------------------------------------------
[05:44:27    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_45/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:44:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:44:28    INFO]  - will try to derive a bias correction ... 
[05:44:28    INFO]  - will validate that training produced an XML file for later ... 
[05:44:28    INFO]  - starting ANNZ::loadReaders() ... 
[05:44:29    INFO]  - will validate that the training was not a complete failure ... 
[05:44:29    INFO]  - training seems to have been successful! will move on ...
[05:44:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:44:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:44:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:44:33    INFO] ----------------------------------------------------------------------------------------------------
[05:44:33    INFO]  - will book (ANNZ_45_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:44:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:44:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:44:33    INFO]    - weights:            1
[05:44:33    INFO] ----------------------------------------------------------------------------------------------------
[05:44:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:44:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_45 ... 
[05:44:40    INFO]  - Will gen. input-parameter errors ...
[05:44:41    INFO]  - starting ANNZ::loadReaders() ... 
[05:44:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:47:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:47:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:47:02    INFO]  -----------------------------------------------------------------------------------------------------------
[05:47:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:47:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:47:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:47:34    INFO]  -----------------------------------------------------------------------------------------------------------
[05:47:34    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_45/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:47:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:47:35    INFO]  - will validate that the bias-correction actually improved the result ...
[05:47:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:47:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_45,
[05:47:41    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_45/plots/
[05:47:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_45/plots output/SPEC_advanced10/regres/train/ANNZ_45/plots_biasCor_before
[05:47:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:47:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_45,
Warning in <Fit>: Fit data is empty 
[05:47:56    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_45/plots/
[05:48:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_45/plots output/SPEC_advanced10/regres/train/ANNZ_45/plots_biasCor_after
[05:48:07    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.39997] , after the bias-correction: [0.0445889 , 5.73908] --> will KEEP the correction !

(05:48 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:48 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m46[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:48 INFO) 
[05:48:10    INFO]  -----------------------------------------------------
[05:48:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:48:10    INFO]  -----------------------------------------------------------------------------------------------------------
[05:48:11    INFO]  - starting ANNZ::Init()  ... 
[05:48:12    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_46/saveOpt.txt ...
[05:48:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:48:17    INFO] ----------------------------------------------------------------------------------------------------
[05:48:17    INFO]  - will book (ANNZ_46) method(BDT) with options: :NTrees=300:BoostType=AdaBoost:VarTransform=N,P
[05:48:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:48:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:48:17    INFO]      cuts (train):        ,
[05:48:17    INFO]      cuts (valid):       
[05:48:17    INFO]    - weights:            1
[05:48:17    INFO] ----------------------------------------------------------------------------------------------------
[05:48:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:48:35    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_46/ANNZ_46_weights/saveTrainOpt_ANNZ_46.txt ...
[05:48:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_46 ... 
[05:48:36    INFO]  - Will gen. input-parameter errors ...
[05:48:38    INFO]  - starting ANNZ::loadReaders() ... 
[05:48:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:50:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:50:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:50:20    INFO]  -----------------------------------------------------------------------------------------------------------
[05:50:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:50:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:50:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:50:46    INFO]  -----------------------------------------------------------------------------------------------------------
[05:50:46    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_46/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:50:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:50:47    INFO]  - will try to derive a bias correction ... 
[05:50:47    INFO]  - will validate that training produced an XML file for later ... 
[05:50:47    INFO]  - starting ANNZ::loadReaders() ... 
[05:50:48    INFO]  - will validate that the training was not a complete failure ... 
[05:50:48    INFO]  - training seems to have been successful! will move on ...
[05:50:48    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:50:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:50:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:50:52    INFO] ----------------------------------------------------------------------------------------------------
[05:50:52    INFO]  - will book (ANNZ_46_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:50:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:50:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:50:52    INFO]    - weights:            1
[05:50:52    INFO] ----------------------------------------------------------------------------------------------------
[05:50:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:50:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_46 ... 
[05:50:58    INFO]  - Will gen. input-parameter errors ...
[05:50:59    INFO]  - starting ANNZ::loadReaders() ... 
[05:51:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:53:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:53:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:53:12    INFO]  -----------------------------------------------------------------------------------------------------------
[05:53:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:53:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:53:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:53:43    INFO]  -----------------------------------------------------------------------------------------------------------
[05:53:43    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_46/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:53:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:53:44    INFO]  - will validate that the bias-correction actually improved the result ...
[05:53:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:53:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_46,
[05:53:49    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_46/plots/
[05:54:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_46/plots output/SPEC_advanced10/regres/train/ANNZ_46/plots_biasCor_before
[05:54:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:54:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_46,
[05:54:05    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_46/plots/
[05:54:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_46/plots output/SPEC_advanced10/regres/train/ANNZ_46/plots_biasCor_after
[05:54:16    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40445] , after the bias-correction: [0.0447009 , 5.75665] --> will KEEP the correction !

(05:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m47[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:54 INFO) 
[05:54:19    INFO]  -----------------------------------------------------
[05:54:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:54:19    INFO]  -----------------------------------------------------------------------------------------------------------
[05:54:20    INFO]  - starting ANNZ::Init()  ... 
[05:54:21    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_47/saveOpt.txt ...
[05:54:27    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:54:28    INFO] ----------------------------------------------------------------------------------------------------
[05:54:28    INFO]  - will book (ANNZ_47) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[05:54:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:54:28    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:54:28    INFO]      cuts (train):        ,
[05:54:28    INFO]      cuts (valid):       
[05:54:28    INFO]    - weights:            1
[05:54:28    INFO] ----------------------------------------------------------------------------------------------------
[05:54:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:55:16    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_47/ANNZ_47_weights/saveTrainOpt_ANNZ_47.txt ...
[05:55:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_47 ... 
[05:55:20    INFO]  - Will gen. input-parameter errors ...
[05:55:22    INFO]  - starting ANNZ::loadReaders() ... 
[05:55:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[05:57:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:57:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:57:57    INFO]  -----------------------------------------------------------------------------------------------------------
[05:57:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[05:58:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:58:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:58:32    INFO]  -----------------------------------------------------------------------------------------------------------
[05:58:32    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_47/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:58:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:58:34    INFO]  - will try to derive a bias correction ... 
[05:58:34    INFO]  - will validate that training produced an XML file for later ... 
[05:58:34    INFO]  - starting ANNZ::loadReaders() ... 
[05:58:39    INFO]  - will validate that the training was not a complete failure ... 
[05:58:39    INFO]  - training seems to have been successful! will move on ...
[05:58:39    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:58:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:58:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:58:45    INFO] ----------------------------------------------------------------------------------------------------
[05:58:45    INFO]  - will book (ANNZ_47_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:58:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:58:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:58:45    INFO]    - weights:            1
[05:58:45    INFO] ----------------------------------------------------------------------------------------------------
[05:58:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:58:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_47 ... 
[05:58:54    INFO]  - Will gen. input-parameter errors ...
[05:58:56    INFO]  - starting ANNZ::loadReaders() ... 
[05:59:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[06:01:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:01:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[06:01:49    INFO]  -----------------------------------------------------------------------------------------------------------
[06:01:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[06:02:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:02:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[06:02:27    INFO]  -----------------------------------------------------------------------------------------------------------
[06:02:27    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_47/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:02:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:02:29    INFO]  - will validate that the bias-correction actually improved the result ...
[06:02:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:02:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_47,
[06:02:35    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_47/plots/
[06:02:46        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_47/plots output/SPEC_advanced10/regres/train/ANNZ_47/plots_biasCor_before
[06:02:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:02:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_47,
[06:02:51    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_47/plots/
[06:03:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_47/plots output/SPEC_advanced10/regres/train/ANNZ_47/plots_biasCor_after
[06:03:02    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(06:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(06:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m48[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(06:03 INFO) 
[06:03:06    INFO]  -----------------------------------------------------
[06:03:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[06:03:06    INFO]  -----------------------------------------------------------------------------------------------------------
[06:03:07    INFO]  - starting ANNZ::Init()  ... 
[06:03:10    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_48/saveOpt.txt ...
[06:03:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[06:03:15    INFO] ----------------------------------------------------------------------------------------------------
[06:03:15    INFO]  - will book (ANNZ_48) method(BDT) with options: :NTrees=1050:BoostType=AdaBoostR2:VarTransform=N
[06:03:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:03:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[06:03:15    INFO]      cuts (train):        ,
[06:03:15    INFO]      cuts (valid):       
[06:03:15    INFO]    - weights:            1
[06:03:15    INFO] ----------------------------------------------------------------------------------------------------
[06:03:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:05:00    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_48/ANNZ_48_weights/saveTrainOpt_ANNZ_48.txt ...
[06:05:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_48 ... 
[06:05:06    INFO]  - Will gen. input-parameter errors ...
[06:05:09    INFO]  - starting ANNZ::loadReaders() ... 
[06:05:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[06:40:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:40:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[06:40:54    INFO]  -----------------------------------------------------------------------------------------------------------
[06:40:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[06:49:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:49:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[06:49:53    INFO]  -----------------------------------------------------------------------------------------------------------
[06:49:53    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_48/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:49:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:49:56    INFO]  - will try to derive a bias correction ... 
[06:49:56    INFO]  - will validate that training produced an XML file for later ... 
[06:49:56    INFO]  - starting ANNZ::loadReaders() ... 
[06:50:02    INFO]  - will validate that the training was not a complete failure ... 
[06:50:03    INFO]  - training seems to have been successful! will move on ...
[06:50:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[06:50:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:50:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:50:12    INFO] ----------------------------------------------------------------------------------------------------
[06:50:12    INFO]  - will book (ANNZ_48_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[06:50:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:50:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[06:50:12    INFO]    - weights:            1
[06:50:12    INFO] ----------------------------------------------------------------------------------------------------
[06:50:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:50:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_48 ... 
[06:50:20    INFO]  - Will gen. input-parameter errors ...
[06:50:23    INFO]  - starting ANNZ::loadReaders() ... 
[06:50:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[07:26:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:26:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[07:26:54    INFO]  -----------------------------------------------------------------------------------------------------------
[07:26:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[07:35:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:35:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[07:35:27    INFO]  -----------------------------------------------------------------------------------------------------------
[07:35:27    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_48/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:35:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:35:30    INFO]  - will validate that the bias-correction actually improved the result ...
[07:35:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:35:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_48,
Warning in <Fit>: Fit data is empty 
[07:35:35    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_48/plots/
[07:35:46        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_48/plots output/SPEC_advanced10/regres/train/ANNZ_48/plots_biasCor_before
[07:35:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:35:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_48,
[07:35:51    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_48/plots/
[07:36:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_48/plots output/SPEC_advanced10/regres/train/ANNZ_48/plots_biasCor_after
[07:36:02    INFO]  - Got original [KS-test,N_poiss]: [0.0634103 , 6.60477] , after the bias-correction: [0.0334977 , 5.72767] --> will KEEP the correction !

(07:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m49[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:36 INFO) 
[07:36:06    INFO]  -----------------------------------------------------
[07:36:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:36:06    INFO]  -----------------------------------------------------------------------------------------------------------
[07:36:07    INFO]  - starting ANNZ::Init()  ... 
[07:36:11    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_49/saveOpt.txt ...
[07:36:16    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:36:16    INFO] ----------------------------------------------------------------------------------------------------
[07:36:16    INFO]  - will book (ANNZ_49) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N,P
[07:36:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:36:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[07:36:16    INFO]      cuts (train):        ,
[07:36:16    INFO]      cuts (valid):       
[07:36:16    INFO]    - weights:            1
[07:36:16    INFO] ----------------------------------------------------------------------------------------------------
[07:36:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:37:01    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_49/ANNZ_49_weights/saveTrainOpt_ANNZ_49.txt ...
[07:37:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_49 ... 
[07:37:06    INFO]  - Will gen. input-parameter errors ...
[07:37:08    INFO]  - starting ANNZ::loadReaders() ... 
[07:37:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[07:40:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:40:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[07:40:45    INFO]  -----------------------------------------------------------------------------------------------------------
[07:40:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[07:41:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:41:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[07:41:36    INFO]  -----------------------------------------------------------------------------------------------------------
[07:41:36    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_49/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:41:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:41:38    INFO]  - will try to derive a bias correction ... 
[07:41:38    INFO]  - will validate that training produced an XML file for later ... 
[07:41:38    INFO]  - starting ANNZ::loadReaders() ... 
[07:41:43    INFO]  - will validate that the training was not a complete failure ... 
[07:41:43    INFO]  - training seems to have been successful! will move on ...
[07:41:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:41:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:41:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:41:48    INFO] ----------------------------------------------------------------------------------------------------
[07:41:48    INFO]  - will book (ANNZ_49_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:41:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:41:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[07:41:48    INFO]    - weights:            1
[07:41:48    INFO] ----------------------------------------------------------------------------------------------------
[07:41:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:41:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_49 ... 
[07:41:56    INFO]  - Will gen. input-parameter errors ...
[07:41:58    INFO]  - starting ANNZ::loadReaders() ... 
[07:42:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[07:45:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:45:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[07:45:46    INFO]  -----------------------------------------------------------------------------------------------------------
[07:45:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[07:46:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:46:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[07:46:40    INFO]  -----------------------------------------------------------------------------------------------------------
[07:46:41    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_49/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:46:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:46:42    INFO]  - will validate that the bias-correction actually improved the result ...
[07:46:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:46:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_49,
[07:46:48    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_49/plots/
[07:46:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_49/plots output/SPEC_advanced10/regres/train/ANNZ_49/plots_biasCor_before
[07:46:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:46:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_49,
[07:47:03    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_49/plots/
[07:47:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_49/plots output/SPEC_advanced10/regres/train/ANNZ_49/plots_biasCor_after
[07:47:14    INFO]  - Got original [KS-test,N_poiss]: [0.0933229 , 6.85173] , after the bias-correction: [0.0453731 , 5.58688] --> will KEEP the correction !

(07:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m50[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:47 INFO) 
[07:47:18    INFO]  -----------------------------------------------------
[07:47:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:47:18    INFO]  -----------------------------------------------------------------------------------------------------------
[07:47:19    INFO]  - starting ANNZ::Init()  ... 
[07:47:20    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_50/saveOpt.txt ...
[07:47:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:47:25    INFO] ----------------------------------------------------------------------------------------------------
[07:47:25    INFO]  - will book (ANNZ_50) method(BDT) with options: :NTrees=400:BoostType=AdaBoost:VarTransform=N
[07:47:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:47:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[07:47:25    INFO]      cuts (train):        ,
[07:47:25    INFO]      cuts (valid):       
[07:47:25    INFO]    - weights:            1
[07:47:25    INFO] ----------------------------------------------------------------------------------------------------
[07:47:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:47:48    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_50/ANNZ_50_weights/saveTrainOpt_ANNZ_50.txt ...
[07:47:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_50 ... 
[07:47:50    INFO]  - Will gen. input-parameter errors ...
[07:47:51    INFO]  - starting ANNZ::loadReaders() ... 
[07:47:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[07:49:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:49:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[07:49:18    INFO]  -----------------------------------------------------------------------------------------------------------
[07:49:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[07:49:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:49:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[07:49:38    INFO]  -----------------------------------------------------------------------------------------------------------
[07:49:38    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_50/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:49:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:49:39    INFO]  - will try to derive a bias correction ... 
[07:49:39    INFO]  - will validate that training produced an XML file for later ... 
[07:49:39    INFO]  - starting ANNZ::loadReaders() ... 
[07:49:41    INFO]  - will validate that the training was not a complete failure ... 
[07:49:41    INFO]  - training seems to have been successful! will move on ...
[07:49:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:49:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:49:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:49:45    INFO] ----------------------------------------------------------------------------------------------------
[07:49:45    INFO]  - will book (ANNZ_50_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:49:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:49:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[07:49:45    INFO]    - weights:            1
[07:49:45    INFO] ----------------------------------------------------------------------------------------------------
[07:49:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:49:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_50 ... 
[07:49:52    INFO]  - Will gen. input-parameter errors ...
[07:49:53    INFO]  - starting ANNZ::loadReaders() ... 
[07:49:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[07:51:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:51:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[07:51:29    INFO]  -----------------------------------------------------------------------------------------------------------
[07:51:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[07:51:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:51:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[07:51:52    INFO]  -----------------------------------------------------------------------------------------------------------
[07:51:52    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_50/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:51:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:51:53    INFO]  - will validate that the bias-correction actually improved the result ...
[07:51:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:51:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_50,
Warning in <Fit>: Fit data is empty 
[07:51:58    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_50/plots/
[07:52:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_50/plots output/SPEC_advanced10/regres/train/ANNZ_50/plots_biasCor_before
[07:52:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:52:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_50,
Warning in <Fit>: Fit data is empty 
[07:52:13    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_50/plots/
[07:52:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_50/plots output/SPEC_advanced10/regres/train/ANNZ_50/plots_biasCor_after
[07:52:24    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11987] , after the bias-correction: [0.0497423 , 6.02496] --> will KEEP the correction !

(07:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m51[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:52 INFO) 
[07:52:28    INFO]  -----------------------------------------------------
[07:52:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:52:28    INFO]  -----------------------------------------------------------------------------------------------------------
[07:52:28    INFO]  - starting ANNZ::Init()  ... 
[07:52:29    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_51/saveOpt.txt ...
[07:52:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:52:34    INFO] ----------------------------------------------------------------------------------------------------
[07:52:34    INFO]  - will book (ANNZ_51) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[07:52:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:52:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[07:52:34    INFO]      cuts (train):        ,
[07:52:34    INFO]      cuts (valid):       
[07:52:34    INFO]    - weights:            1
[07:52:34    INFO] ----------------------------------------------------------------------------------------------------
[07:52:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:53:07    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_51/ANNZ_51_weights/saveTrainOpt_ANNZ_51.txt ...
[07:53:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_51 ... 
[07:53:10    INFO]  - Will gen. input-parameter errors ...
[07:53:12    INFO]  - starting ANNZ::loadReaders() ... 
[07:53:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[07:55:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:55:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[07:55:43    INFO]  -----------------------------------------------------------------------------------------------------------
[07:55:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[07:56:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:56:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[07:56:19    INFO]  -----------------------------------------------------------------------------------------------------------
[07:56:19    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_51/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:56:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:56:20    INFO]  - will try to derive a bias correction ... 
[07:56:20    INFO]  - will validate that training produced an XML file for later ... 
[07:56:20    INFO]  - starting ANNZ::loadReaders() ... 
[07:56:24    INFO]  - will validate that the training was not a complete failure ... 
[07:56:24    INFO]  - training seems to have been successful! will move on ...
[07:56:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:56:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:56:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:56:29    INFO] ----------------------------------------------------------------------------------------------------
[07:56:29    INFO]  - will book (ANNZ_51_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:56:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:56:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[07:56:29    INFO]    - weights:            1
[07:56:29    INFO] ----------------------------------------------------------------------------------------------------
[07:56:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:56:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_51 ... 
[07:56:36    INFO]  - Will gen. input-parameter errors ...
[07:56:38    INFO]  - starting ANNZ::loadReaders() ... 
[07:56:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[07:59:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:59:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[07:59:16    INFO]  -----------------------------------------------------------------------------------------------------------
[07:59:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[07:59:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:59:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[07:59:53    INFO]  -----------------------------------------------------------------------------------------------------------
[07:59:54    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_51/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:59:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:59:55    INFO]  - will validate that the bias-correction actually improved the result ...
[07:59:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:59:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_51,
[08:00:00    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_51/plots/
[08:00:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_51/plots output/SPEC_advanced10/regres/train/ANNZ_51/plots_biasCor_before
[08:00:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:00:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_51,
[08:00:16    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_51/plots/
[08:00:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_51/plots output/SPEC_advanced10/regres/train/ANNZ_51/plots_biasCor_after
[08:00:27    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.86915] , after the bias-correction: [0.0444768 , 5.62586] --> will KEEP the correction !

(08:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m52[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:00 INFO) 
[08:00:30    INFO]  -----------------------------------------------------
[08:00:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:00:30    INFO]  -----------------------------------------------------------------------------------------------------------
[08:00:31    INFO]  - starting ANNZ::Init()  ... 
[08:00:32    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_52/saveOpt.txt ...
[08:00:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:00:37    INFO] ----------------------------------------------------------------------------------------------------
[08:00:37    INFO]  - will book (ANNZ_52) method(BDT) with options: :NTrees=280:BoostType=Bagging:VarTransform=N,P
[08:00:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:00:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:00:37    INFO]      cuts (train):        ,
[08:00:37    INFO]      cuts (valid):       
[08:00:37    INFO]    - weights:            1
[08:00:37    INFO] ----------------------------------------------------------------------------------------------------
[08:00:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:01:04    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_52/ANNZ_52_weights/saveTrainOpt_ANNZ_52.txt ...
[08:01:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_52 ... 
[08:01:07    INFO]  - Will gen. input-parameter errors ...
[08:01:08    INFO]  - starting ANNZ::loadReaders() ... 
[08:01:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:03:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:03:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:03:17    INFO]  -----------------------------------------------------------------------------------------------------------
[08:03:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:03:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:03:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:03:47    INFO]  -----------------------------------------------------------------------------------------------------------
[08:03:47    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_52/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:03:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:03:49    INFO]  - will try to derive a bias correction ... 
[08:03:49    INFO]  - will validate that training produced an XML file for later ... 
[08:03:49    INFO]  - starting ANNZ::loadReaders() ... 
[08:03:51    INFO]  - will validate that the training was not a complete failure ... 
[08:03:51    INFO]  - training seems to have been successful! will move on ...
[08:03:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:03:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:03:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:03:56    INFO] ----------------------------------------------------------------------------------------------------
[08:03:56    INFO]  - will book (ANNZ_52_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[08:03:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:03:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[08:03:56    INFO]    - weights:            1
[08:03:56    INFO] ----------------------------------------------------------------------------------------------------
[08:03:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:04:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_52 ... 
[08:04:03    INFO]  - Will gen. input-parameter errors ...
[08:04:05    INFO]  - starting ANNZ::loadReaders() ... 
[08:04:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:06:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:06:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:06:09    INFO]  -----------------------------------------------------------------------------------------------------------
[08:06:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:06:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:06:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:06:38    INFO]  -----------------------------------------------------------------------------------------------------------
[08:06:38    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_52/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:06:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:06:40    INFO]  - will validate that the bias-correction actually improved the result ...
[08:06:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:06:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_52,
[08:06:45    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_52/plots/
[08:06:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_52/plots output/SPEC_advanced10/regres/train/ANNZ_52/plots_biasCor_before
[08:06:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:06:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_52,
[08:07:00    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_52/plots/
[08:07:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_52/plots output/SPEC_advanced10/regres/train/ANNZ_52/plots_biasCor_after
[08:07:11    INFO]  - Got original [KS-test,N_poiss]: [0.093883 , 6.85735] , after the bias-correction: [0.041564 , 5.42448] --> will KEEP the correction !

(08:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m53[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:07 INFO) 
[08:07:14    INFO]  -----------------------------------------------------
[08:07:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:07:14    INFO]  -----------------------------------------------------------------------------------------------------------
[08:07:15    INFO]  - starting ANNZ::Init()  ... 
[08:07:16    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_53/saveOpt.txt ...
[08:07:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:07:21    INFO] ----------------------------------------------------------------------------------------------------
[08:07:21    INFO]  - will book (ANNZ_53) method(BDT) with options: :NTrees=370:BoostType=AdaBoostR2:VarTransform=N,P
[08:07:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:07:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:07:21    INFO]      cuts (train):        ,
[08:07:21    INFO]      cuts (valid):       
[08:07:21    INFO]    - weights:            1
[08:07:21    INFO] ----------------------------------------------------------------------------------------------------
[08:07:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:07:55    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_53/ANNZ_53_weights/saveTrainOpt_ANNZ_53.txt ...
[08:07:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_53 ... 
[08:07:58    INFO]  - Will gen. input-parameter errors ...
[08:07:59    INFO]  - starting ANNZ::loadReaders() ... 
[08:08:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:13:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:13:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:13:48    INFO]  -----------------------------------------------------------------------------------------------------------
[08:13:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:15:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:15:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:15:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:15:13    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_53/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:15:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:15:15    INFO]  - will try to derive a bias correction ... 
[08:15:15    INFO]  - will validate that training produced an XML file for later ... 
[08:15:15    INFO]  - starting ANNZ::loadReaders() ... 
[08:15:17    INFO]  - will validate that the training was not a complete failure ... 
[08:15:17    INFO]  - training seems to have been successful! will move on ...
[08:15:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:15:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:15:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:15:25    INFO] ----------------------------------------------------------------------------------------------------
[08:15:25    INFO]  - will book (ANNZ_53_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[08:15:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:15:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[08:15:25    INFO]    - weights:            1
[08:15:25    INFO] ----------------------------------------------------------------------------------------------------
[08:15:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:15:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_53 ... 
[08:15:31    INFO]  - Will gen. input-parameter errors ...
[08:15:33    INFO]  - starting ANNZ::loadReaders() ... 
[08:15:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:20:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:20:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:20:56    INFO]  -----------------------------------------------------------------------------------------------------------
[08:20:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:22:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:22:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:22:15    INFO]  -----------------------------------------------------------------------------------------------------------
[08:22:15    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_53/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:22:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:22:16    INFO]  - will validate that the bias-correction actually improved the result ...
[08:22:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:22:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_53,
[08:22:21    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_53/plots/
[08:22:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_53/plots output/SPEC_advanced10/regres/train/ANNZ_53/plots_biasCor_before
[08:22:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:22:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_53,
[08:22:36    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_53/plots/
[08:22:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_53/plots output/SPEC_advanced10/regres/train/ANNZ_53/plots_biasCor_after
[08:22:47    INFO]  - Got original [KS-test,N_poiss]: [0.0701322 , 6.63987] , after the bias-correction: [0.0337217 , 5.45539] --> will KEEP the correction !

(08:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m54[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:22 INFO) 
[08:22:51    INFO]  -----------------------------------------------------
[08:22:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:22:51    INFO]  -----------------------------------------------------------------------------------------------------------
[08:22:51    INFO]  - starting ANNZ::Init()  ... 
[08:22:55    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_54/saveOpt.txt ...
[08:23:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:23:01    INFO] ----------------------------------------------------------------------------------------------------
[08:23:01    INFO]  - will book (ANNZ_54) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[08:23:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:23:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:23:01    INFO]      cuts (train):        ,
[08:23:01    INFO]      cuts (valid):       
[08:23:01    INFO]    - weights:            1
[08:23:01    INFO] ----------------------------------------------------------------------------------------------------
[08:23:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:23:47    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_54/ANNZ_54_weights/saveTrainOpt_ANNZ_54.txt ...
[08:23:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_54 ... 
[08:23:52    INFO]  - Will gen. input-parameter errors ...
[08:23:54    INFO]  - starting ANNZ::loadReaders() ... 
[08:24:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:26:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:26:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:26:25    INFO]  -----------------------------------------------------------------------------------------------------------
[08:26:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:27:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:27:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:27:00    INFO]  -----------------------------------------------------------------------------------------------------------
[08:27:00    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_54/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:27:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:27:02    INFO]  - will try to derive a bias correction ... 
[08:27:02    INFO]  - will validate that training produced an XML file for later ... 
[08:27:02    INFO]  - starting ANNZ::loadReaders() ... 
[08:27:07    INFO]  - will validate that the training was not a complete failure ... 
[08:27:07    INFO]  - training seems to have been successful! will move on ...
[08:27:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:27:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:27:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:27:13    INFO] ----------------------------------------------------------------------------------------------------
[08:27:13    INFO]  - will book (ANNZ_54_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[08:27:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:27:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[08:27:13    INFO]    - weights:            1
[08:27:13    INFO] ----------------------------------------------------------------------------------------------------
[08:27:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:27:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_54 ... 
[08:27:21    INFO]  - Will gen. input-parameter errors ...
[08:27:23    INFO]  - starting ANNZ::loadReaders() ... 
[08:27:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:30:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:30:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:30:09    INFO]  -----------------------------------------------------------------------------------------------------------
[08:30:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:30:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:30:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:30:47    INFO]  -----------------------------------------------------------------------------------------------------------
[08:30:48    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_54/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:30:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:30:50    INFO]  - will validate that the bias-correction actually improved the result ...
[08:30:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:30:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_54,
[08:30:55    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_54/plots/
[08:31:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_54/plots output/SPEC_advanced10/regres/train/ANNZ_54/plots_biasCor_before
[08:31:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:31:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_54,
[08:31:11    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_54/plots/
[08:31:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_54/plots output/SPEC_advanced10/regres/train/ANNZ_54/plots_biasCor_after
[08:31:22    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m55[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:26    INFO]  -----------------------------------------------------
[08:31:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:26    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:26    INFO]  - starting ANNZ::Init()  ... 
[08:31:27    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_55/saveOpt.txt ...
[08:31:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:31:32    INFO] ----------------------------------------------------------------------------------------------------
[08:31:32    INFO]  - will book (ANNZ_55) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N
[08:31:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:31:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:31:32    INFO]      cuts (train):        ,
[08:31:32    INFO]      cuts (valid):       
[08:31:32    INFO]    - weights:            1
[08:31:32    INFO] ----------------------------------------------------------------------------------------------------
[08:31:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:32:17    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_55/ANNZ_55_weights/saveTrainOpt_ANNZ_55.txt ...
[08:32:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_55 ... 
[08:32:21    INFO]  - Will gen. input-parameter errors ...
[08:32:23    INFO]  - starting ANNZ::loadReaders() ... 
[08:32:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:34:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:34:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:34:44    INFO]  -----------------------------------------------------------------------------------------------------------
[08:34:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:35:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:35:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:35:17    INFO]  -----------------------------------------------------------------------------------------------------------
[08:35:17    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_55/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:35:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:35:19    INFO]  - will try to derive a bias correction ... 
[08:35:19    INFO]  - will validate that training produced an XML file for later ... 
[08:35:19    INFO]  - starting ANNZ::loadReaders() ... 
[08:35:24    INFO]  - will validate that the training was not a complete failure ... 
[08:35:24    INFO]  - training seems to have been successful! will move on ...
[08:35:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:35:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:35:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:35:30    INFO] ----------------------------------------------------------------------------------------------------
[08:35:30    INFO]  - will book (ANNZ_55_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[08:35:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:35:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[08:35:30    INFO]    - weights:            1
[08:35:30    INFO] ----------------------------------------------------------------------------------------------------
[08:35:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:35:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_55 ... 
[08:35:38    INFO]  - Will gen. input-parameter errors ...
[08:35:40    INFO]  - starting ANNZ::loadReaders() ... 
[08:35:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:38:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:38:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:38:15    INFO]  -----------------------------------------------------------------------------------------------------------
[08:38:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:38:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:38:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:38:51    INFO]  -----------------------------------------------------------------------------------------------------------
[08:38:51    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_55/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:38:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:38:53    INFO]  - will validate that the bias-correction actually improved the result ...
[08:38:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:38:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_55,
[08:38:58    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_55/plots/
[08:39:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_55/plots output/SPEC_advanced10/regres/train/ANNZ_55/plots_biasCor_before
[08:39:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:39:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_55,
[08:39:14    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_55/plots/
[08:39:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_55/plots output/SPEC_advanced10/regres/train/ANNZ_55/plots_biasCor_after
[08:39:25    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.69238] , after the bias-correction: [0.0466055 , 5.74079] --> will KEEP the correction !

(08:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m56[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=760:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:39 INFO) 
[08:39:29    INFO]  -----------------------------------------------------
[08:39:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:39:29    INFO]  -----------------------------------------------------------------------------------------------------------
[08:39:29    INFO]  - starting ANNZ::Init()  ... 
[08:39:30    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_56/saveOpt.txt ...
[08:39:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:39:36    INFO] ----------------------------------------------------------------------------------------------------
[08:39:36    INFO]  - will book (ANNZ_56) method(BDT) with options: :NTrees=760:BoostType=Bagging:VarTransform=N,P
[08:39:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:39:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:39:36    INFO]      cuts (train):        ,
[08:39:36    INFO]      cuts (valid):       
[08:39:36    INFO]    - weights:            1
[08:39:36    INFO] ----------------------------------------------------------------------------------------------------
[08:39:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:40:50    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_56/ANNZ_56_weights/saveTrainOpt_ANNZ_56.txt ...
[08:40:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_56 ... 
[08:40:56    INFO]  - Will gen. input-parameter errors ...
[08:40:59    INFO]  - starting ANNZ::loadReaders() ... 
[08:41:16    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:48:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:48:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:48:38    INFO]  -----------------------------------------------------------------------------------------------------------
[08:48:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[08:50:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:50:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:50:28    INFO]  -----------------------------------------------------------------------------------------------------------
[08:50:29    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_56/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:50:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:50:32    INFO]  - will try to derive a bias correction ... 
[08:50:32    INFO]  - will validate that training produced an XML file for later ... 
[08:50:32    INFO]  - starting ANNZ::loadReaders() ... 
[08:50:39    INFO]  - will validate that the training was not a complete failure ... 
[08:50:40    INFO]  - training seems to have been successful! will move on ...
[08:50:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:50:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:50:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:50:49    INFO] ----------------------------------------------------------------------------------------------------
[08:50:49    INFO]  - will book (ANNZ_56_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[08:50:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:50:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[08:50:49    INFO]    - weights:            1
[08:50:49    INFO] ----------------------------------------------------------------------------------------------------
[08:50:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:50:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_56 ... 
[08:50:58    INFO]  - Will gen. input-parameter errors ...
[08:51:01    INFO]  - starting ANNZ::loadReaders() ... 
[08:51:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[08:58:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:58:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:58:47    INFO]  -----------------------------------------------------------------------------------------------------------
[08:58:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:00:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:00:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:00:39    INFO]  -----------------------------------------------------------------------------------------------------------
[09:00:39    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_56/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:00:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:00:42    INFO]  - will validate that the bias-correction actually improved the result ...
[09:00:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:00:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_56,
[09:00:48    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_56/plots/
[09:00:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_56/plots output/SPEC_advanced10/regres/train/ANNZ_56/plots_biasCor_before
[09:00:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:00:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_56,
[09:01:03    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_56/plots/
[09:01:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_56/plots output/SPEC_advanced10/regres/train/ANNZ_56/plots_biasCor_after
[09:01:15    INFO]  - Got original [KS-test,N_poiss]: [0.0932109 , 6.93139] , after the bias-correction: [0.0436926 , 5.81366] --> will KEEP the correction !

(09:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m57[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:01 INFO) 
[09:01:20    INFO]  -----------------------------------------------------
[09:01:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:01:20    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:21    INFO]  - starting ANNZ::Init()  ... 
[09:01:24    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_57/saveOpt.txt ...
[09:01:30    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:01:30    INFO] ----------------------------------------------------------------------------------------------------
[09:01:30    INFO]  - will book (ANNZ_57) method(BDT) with options: :NTrees=350:BoostType=AdaBoostR2:VarTransform=N,P
[09:01:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:01:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:01:30    INFO]      cuts (train):        ,
[09:01:30    INFO]      cuts (valid):       
[09:01:30    INFO]    - weights:            1
[09:01:30    INFO] ----------------------------------------------------------------------------------------------------
[09:01:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:02:09    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_57/ANNZ_57_weights/saveTrainOpt_ANNZ_57.txt ...
[09:02:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_57 ... 
[09:02:12    INFO]  - Will gen. input-parameter errors ...
[09:02:14    INFO]  - starting ANNZ::loadReaders() ... 
[09:02:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[09:10:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:10:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:10:04    INFO]  -----------------------------------------------------------------------------------------------------------
[09:10:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:11:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:11:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:11:41    INFO]  -----------------------------------------------------------------------------------------------------------
[09:11:41    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_57/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:11:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:11:43    INFO]  - will try to derive a bias correction ... 
[09:11:43    INFO]  - will validate that training produced an XML file for later ... 
[09:11:43    INFO]  - starting ANNZ::loadReaders() ... 
[09:11:45    INFO]  - will validate that the training was not a complete failure ... 
[09:11:46    INFO]  - training seems to have been successful! will move on ...
[09:11:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:11:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:11:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:11:51    INFO] ----------------------------------------------------------------------------------------------------
[09:11:51    INFO]  - will book (ANNZ_57_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:11:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:11:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:11:51    INFO]    - weights:            1
[09:11:51    INFO] ----------------------------------------------------------------------------------------------------
[09:11:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:11:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_57 ... 
[09:11:59    INFO]  - Will gen. input-parameter errors ...
[09:12:01    INFO]  - starting ANNZ::loadReaders() ... 
[09:12:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[09:18:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:18:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:18:23    INFO]  -----------------------------------------------------------------------------------------------------------
[09:18:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:20:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:20:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:20:04    INFO]  -----------------------------------------------------------------------------------------------------------
[09:20:04    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_57/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:20:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:20:06    INFO]  - will validate that the bias-correction actually improved the result ...
[09:20:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:20:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_57,
[09:20:12    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_57/plots/
[09:20:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_57/plots output/SPEC_advanced10/regres/train/ANNZ_57/plots_biasCor_before
[09:20:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:20:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_57,
[09:20:31    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_57/plots/
[09:20:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_57/plots output/SPEC_advanced10/regres/train/ANNZ_57/plots_biasCor_after
[09:20:45    INFO]  - Got original [KS-test,N_poiss]: [0.0696841 , 6.67721] , after the bias-correction: [0.0329375 , 5.85005] --> will KEEP the correction !

(09:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m58[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:20 INFO) 
[09:20:49    INFO]  -----------------------------------------------------
[09:20:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:20:49    INFO]  -----------------------------------------------------------------------------------------------------------
[09:20:50    INFO]  - starting ANNZ::Init()  ... 
[09:20:51    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_58/saveOpt.txt ...
[09:20:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:20:58    INFO] ----------------------------------------------------------------------------------------------------
[09:20:58    INFO]  - will book (ANNZ_58) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N,P
[09:20:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:20:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:20:58    INFO]      cuts (train):        ,
[09:20:58    INFO]      cuts (valid):       
[09:20:58    INFO]    - weights:            1
[09:20:58    INFO] ----------------------------------------------------------------------------------------------------
[09:20:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:21:36    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_58/ANNZ_58_weights/saveTrainOpt_ANNZ_58.txt ...
[09:21:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_58 ... 
[09:21:38    INFO]  - Will gen. input-parameter errors ...
[09:21:41    INFO]  - starting ANNZ::loadReaders() ... 
[09:21:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[09:25:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:25:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:25:07    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:25:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:25:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:25:56    INFO]  -----------------------------------------------------------------------------------------------------------
[09:25:56    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_58/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:25:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:25:57    INFO]  - will try to derive a bias correction ... 
[09:25:57    INFO]  - will validate that training produced an XML file for later ... 
[09:25:57    INFO]  - starting ANNZ::loadReaders() ... 
[09:25:59    INFO]  - will validate that the training was not a complete failure ... 
[09:25:59    INFO]  - training seems to have been successful! will move on ...
[09:25:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:26:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:26:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:26:04    INFO] ----------------------------------------------------------------------------------------------------
[09:26:04    INFO]  - will book (ANNZ_58_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:26:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:26:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:26:04    INFO]    - weights:            1
[09:26:04    INFO] ----------------------------------------------------------------------------------------------------
[09:26:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:26:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_58 ... 
[09:26:12    INFO]  - Will gen. input-parameter errors ...
[09:26:14    INFO]  - starting ANNZ::loadReaders() ... 
[09:26:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[09:29:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:29:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:29:37    INFO]  -----------------------------------------------------------------------------------------------------------
[09:29:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:30:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:30:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:30:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:30:22    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_58/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:30:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:30:23    INFO]  - will validate that the bias-correction actually improved the result ...
[09:30:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:30:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_58,
Warning in <Fit>: Fit data is empty 
[09:30:30    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_58/plots/
[09:30:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_58/plots output/SPEC_advanced10/regres/train/ANNZ_58/plots_biasCor_before
[09:30:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:30:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_58,
Warning in <Fit>: Fit data is empty 
[09:30:49    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_58/plots/
[09:31:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_58/plots output/SPEC_advanced10/regres/train/ANNZ_58/plots_biasCor_after
[09:31:03    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40555] , after the bias-correction: [0.0442528 , 5.7589] --> will KEEP the correction !

(09:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m59[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:31 INFO) 
[09:31:07    INFO]  -----------------------------------------------------
[09:31:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:31:07    INFO]  -----------------------------------------------------------------------------------------------------------
[09:31:08    INFO]  - starting ANNZ::Init()  ... 
[09:31:09    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_59/saveOpt.txt ...
[09:31:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:31:16    INFO] ----------------------------------------------------------------------------------------------------
[09:31:16    INFO]  - will book (ANNZ_59) method(BDT) with options: :NTrees=390:BoostType=AdaBoostR2:VarTransform=N
[09:31:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:31:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:31:16    INFO]      cuts (train):        ,
[09:31:16    INFO]      cuts (valid):       
[09:31:16    INFO]    - weights:            1
[09:31:16    INFO] ----------------------------------------------------------------------------------------------------
[09:31:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:31:55    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_59/ANNZ_59_weights/saveTrainOpt_ANNZ_59.txt ...
[09:31:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_59 ... 
[09:31:58    INFO]  - Will gen. input-parameter errors ...
[09:32:00    INFO]  - starting ANNZ::loadReaders() ... 
[09:32:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[09:38:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:38:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:38:39    INFO]  -----------------------------------------------------------------------------------------------------------
[09:38:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:40:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:40:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:40:19    INFO]  -----------------------------------------------------------------------------------------------------------
[09:40:19    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_59/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:40:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:40:21    INFO]  - will try to derive a bias correction ... 
[09:40:21    INFO]  - will validate that training produced an XML file for later ... 
[09:40:21    INFO]  - starting ANNZ::loadReaders() ... 
[09:40:23    INFO]  - will validate that the training was not a complete failure ... 
[09:40:23    INFO]  - training seems to have been successful! will move on ...
[09:40:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:40:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:40:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:40:28    INFO] ----------------------------------------------------------------------------------------------------
[09:40:28    INFO]  - will book (ANNZ_59_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:40:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:40:28    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:40:28    INFO]    - weights:            1
[09:40:28    INFO] ----------------------------------------------------------------------------------------------------
[09:40:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:40:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_59 ... 
[09:40:36    INFO]  - Will gen. input-parameter errors ...
[09:40:37    INFO]  - starting ANNZ::loadReaders() ... 
[09:40:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[09:46:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:46:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:46:15    INFO]  -----------------------------------------------------------------------------------------------------------
[09:46:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:47:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:47:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:47:42    INFO]  -----------------------------------------------------------------------------------------------------------
[09:47:43    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_59/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:47:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:47:44    INFO]  - will validate that the bias-correction actually improved the result ...
[09:47:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:47:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_59,
Warning in <Fit>: Fit data is empty 
[09:47:50    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_59/plots/
[09:48:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_59/plots output/SPEC_advanced10/regres/train/ANNZ_59/plots_biasCor_before
[09:48:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:48:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_59,
[09:48:07    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_59/plots/
[09:48:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_59/plots output/SPEC_advanced10/regres/train/ANNZ_59/plots_biasCor_after
[09:48:19    INFO]  - Got original [KS-test,N_poiss]: [0.06229 , 6.44793] , after the bias-correction: [0.0342819 , 5.77129] --> will KEEP the correction !

(09:48 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:48 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m60[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:48 INFO) 
[09:48:22    INFO]  -----------------------------------------------------
[09:48:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:48:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:48:23    INFO]  - starting ANNZ::Init()  ... 
[09:48:24    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_60/saveOpt.txt ...
[09:48:30    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:48:30    INFO] ----------------------------------------------------------------------------------------------------
[09:48:30    INFO]  - will book (ANNZ_60) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N
[09:48:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:48:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:48:30    INFO]      cuts (train):        ,
[09:48:30    INFO]      cuts (valid):       
[09:48:30    INFO]    - weights:            1
[09:48:30    INFO] ----------------------------------------------------------------------------------------------------
[09:48:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:49:14    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_60/ANNZ_60_weights/saveTrainOpt_ANNZ_60.txt ...
[09:49:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_60 ... 
[09:49:18    INFO]  - Will gen. input-parameter errors ...
[09:49:20    INFO]  - starting ANNZ::loadReaders() ... 
[09:49:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[09:52:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:52:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:52:17    INFO]  -----------------------------------------------------------------------------------------------------------
[09:52:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:52:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:52:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:52:59    INFO]  -----------------------------------------------------------------------------------------------------------
[09:53:00    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_60/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:53:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:53:01    INFO]  - will try to derive a bias correction ... 
[09:53:01    INFO]  - will validate that training produced an XML file for later ... 
[09:53:01    INFO]  - starting ANNZ::loadReaders() ... 
[09:53:06    INFO]  - will validate that the training was not a complete failure ... 
[09:53:06    INFO]  - training seems to have been successful! will move on ...
[09:53:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:53:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:53:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:53:12    INFO] ----------------------------------------------------------------------------------------------------
[09:53:12    INFO]  - will book (ANNZ_60_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:53:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:53:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:53:12    INFO]    - weights:            1
[09:53:12    INFO] ----------------------------------------------------------------------------------------------------
[09:53:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:53:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_60 ... 
[09:53:21    INFO]  - Will gen. input-parameter errors ...
[09:53:23    INFO]  - starting ANNZ::loadReaders() ... 
[09:53:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[09:56:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:56:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:56:25    INFO]  -----------------------------------------------------------------------------------------------------------
[09:56:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[09:57:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:57:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:57:03    INFO]  -----------------------------------------------------------------------------------------------------------
[09:57:03    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_60/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:57:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:57:05    INFO]  - will validate that the bias-correction actually improved the result ...
[09:57:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:57:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_60,
[09:57:11    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_60/plots/
[09:57:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_60/plots output/SPEC_advanced10/regres/train/ANNZ_60/plots_biasCor_before
[09:57:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:57:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_60,
[09:57:29    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_60/plots/
[09:57:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_60/plots output/SPEC_advanced10/regres/train/ANNZ_60/plots_biasCor_after
[09:57:41    INFO]  - Got original [KS-test,N_poiss]: [0.0848085 , 6.65647] , after the bias-correction: [0.048398 , 5.74827] --> will KEEP the correction !

(09:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m61[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=880:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:57 INFO) 
[09:57:45    INFO]  -----------------------------------------------------
[09:57:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:57:45    INFO]  -----------------------------------------------------------------------------------------------------------
[09:57:46    INFO]  - starting ANNZ::Init()  ... 
[09:57:47    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_61/saveOpt.txt ...
[09:57:52    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:57:53    INFO] ----------------------------------------------------------------------------------------------------
[09:57:53    INFO]  - will book (ANNZ_61) method(BDT) with options: :NTrees=880:BoostType=AdaBoostR2:VarTransform=N
[09:57:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:57:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:57:53    INFO]      cuts (train):        ,
[09:57:53    INFO]      cuts (valid):       
[09:57:53    INFO]    - weights:            1
[09:57:53    INFO] ----------------------------------------------------------------------------------------------------
[09:57:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:59:23    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_61/ANNZ_61_weights/saveTrainOpt_ANNZ_61.txt ...
[09:59:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_61 ... 
[09:59:29    INFO]  - Will gen. input-parameter errors ...
[09:59:31    INFO]  - starting ANNZ::loadReaders() ... 
[09:59:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[10:29:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:29:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:29:26    INFO]  -----------------------------------------------------------------------------------------------------------
[10:29:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[10:37:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:37:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:37:10    INFO]  -----------------------------------------------------------------------------------------------------------
[10:37:10    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_61/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:37:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:37:12    INFO]  - will try to derive a bias correction ... 
[10:37:12    INFO]  - will validate that training produced an XML file for later ... 
[10:37:12    INFO]  - starting ANNZ::loadReaders() ... 
[10:37:18    INFO]  - will validate that the training was not a complete failure ... 
[10:37:19    INFO]  - training seems to have been successful! will move on ...
[10:37:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:37:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:37:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:37:25    INFO] ----------------------------------------------------------------------------------------------------
[10:37:25    INFO]  - will book (ANNZ_61_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:37:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:37:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:37:25    INFO]    - weights:            1
[10:37:25    INFO] ----------------------------------------------------------------------------------------------------
[10:37:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:37:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_61 ... 
[10:37:35    INFO]  - Will gen. input-parameter errors ...
[10:37:37    INFO]  - starting ANNZ::loadReaders() ... 
[10:38:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:08:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:08:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:08:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:08:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:15:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:15:16    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:15:16    INFO]  -----------------------------------------------------------------------------------------------------------
[11:15:16    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_61/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:15:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:15:19    INFO]  - will validate that the bias-correction actually improved the result ...
[11:15:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:15:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_61,
Warning in <Fit>: Fit data is empty 
[11:15:25    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_61/plots/
[11:15:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_61/plots output/SPEC_advanced10/regres/train/ANNZ_61/plots_biasCor_before
[11:15:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:15:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_61,
[11:15:41    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_61/plots/
[11:15:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_61/plots output/SPEC_advanced10/regres/train/ANNZ_61/plots_biasCor_after
[11:15:53    INFO]  - Got original [KS-test,N_poiss]: [0.0630742 , 6.6111] , after the bias-correction: [0.034842 , 5.59451] --> will KEEP the correction !

(11:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m62[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:15 INFO) 
[11:15:57    INFO]  -----------------------------------------------------
[11:15:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:15:57    INFO]  -----------------------------------------------------------------------------------------------------------
[11:15:58    INFO]  - starting ANNZ::Init()  ... 
[11:15:59    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_62/saveOpt.txt ...
[11:16:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:16:05    INFO] ----------------------------------------------------------------------------------------------------
[11:16:05    INFO]  - will book (ANNZ_62) method(BDT) with options: :NTrees=1050:BoostType=AdaBoost:VarTransform=N,P
[11:16:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:16:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:16:05    INFO]      cuts (train):        ,
[11:16:05    INFO]      cuts (valid):       
[11:16:05    INFO]    - weights:            1
[11:16:05    INFO] ----------------------------------------------------------------------------------------------------
[11:16:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:17:00    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_62/ANNZ_62_weights/saveTrainOpt_ANNZ_62.txt ...
[11:17:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_62 ... 
[11:17:04    INFO]  - Will gen. input-parameter errors ...
[11:17:06    INFO]  - starting ANNZ::loadReaders() ... 
[11:17:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:25:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:25:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:25:39    INFO]  -----------------------------------------------------------------------------------------------------------
[11:25:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:28:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:28:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:28:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:28:07    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_62/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:28:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:28:09    INFO]  - will try to derive a bias correction ... 
[11:28:09    INFO]  - will validate that training produced an XML file for later ... 
[11:28:09    INFO]  - starting ANNZ::loadReaders() ... 
[11:28:12    INFO]  - will validate that the training was not a complete failure ... 
[11:28:12    INFO]  - training seems to have been successful! will move on ...
[11:28:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:28:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:28:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:28:17    INFO] ----------------------------------------------------------------------------------------------------
[11:28:17    INFO]  - will book (ANNZ_62_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:28:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:28:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:28:17    INFO]    - weights:            1
[11:28:17    INFO] ----------------------------------------------------------------------------------------------------
[11:28:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:28:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_62 ... 
[11:28:26    INFO]  - Will gen. input-parameter errors ...
[11:28:29    INFO]  - starting ANNZ::loadReaders() ... 
[11:28:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:34:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:34:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:34:37    INFO]  -----------------------------------------------------------------------------------------------------------
[11:34:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:36:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:36:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:36:17    INFO]  -----------------------------------------------------------------------------------------------------------
[11:36:17    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_62/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:36:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:36:19    INFO]  - will validate that the bias-correction actually improved the result ...
[11:36:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:36:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_62,
[11:36:26    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_62/plots/
[11:36:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_62/plots output/SPEC_advanced10/regres/train/ANNZ_62/plots_biasCor_before
[11:36:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:36:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_62,
[11:36:43    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_62/plots/
[11:36:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_62/plots output/SPEC_advanced10/regres/train/ANNZ_62/plots_biasCor_after
[11:36:55    INFO]  - Got original [KS-test,N_poiss]: [0.101949 , 6.45033] , after the bias-correction: [0.0447009 , 5.60436] --> will KEEP the correction !

(11:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m63[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:36 INFO) 
[11:36:59    INFO]  -----------------------------------------------------
[11:36:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:36:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:37:00    INFO]  - starting ANNZ::Init()  ... 
[11:37:01    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_63/saveOpt.txt ...
[11:37:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:37:06    INFO] ----------------------------------------------------------------------------------------------------
[11:37:06    INFO]  - will book (ANNZ_63) method(BDT) with options: :NTrees=360:BoostType=AdaBoost:VarTransform=N
[11:37:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:37:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:37:06    INFO]      cuts (train):        ,
[11:37:06    INFO]      cuts (valid):       
[11:37:06    INFO]    - weights:            1
[11:37:06    INFO] ----------------------------------------------------------------------------------------------------
[11:37:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:37:30    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_63/ANNZ_63_weights/saveTrainOpt_ANNZ_63.txt ...
[11:37:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_63 ... 
[11:37:32    INFO]  - Will gen. input-parameter errors ...
[11:37:34    INFO]  - starting ANNZ::loadReaders() ... 
[11:37:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:38:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:38:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:38:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:39:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:39:20    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:39:20    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:20    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_63/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:39:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:39:21    INFO]  - will try to derive a bias correction ... 
[11:39:21    INFO]  - will validate that training produced an XML file for later ... 
[11:39:21    INFO]  - starting ANNZ::loadReaders() ... 
[11:39:22    INFO]  - will validate that the training was not a complete failure ... 
[11:39:22    INFO]  - training seems to have been successful! will move on ...
[11:39:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:39:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:39:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:39:27    INFO] ----------------------------------------------------------------------------------------------------
[11:39:27    INFO]  - will book (ANNZ_63_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:39:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:39:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:39:27    INFO]    - weights:            1
[11:39:27    INFO] ----------------------------------------------------------------------------------------------------
[11:39:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:39:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_63 ... 
[11:39:35    INFO]  - Will gen. input-parameter errors ...
[11:39:37    INFO]  - starting ANNZ::loadReaders() ... 
[11:39:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:41:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:41:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:41:30    INFO]  -----------------------------------------------------------------------------------------------------------
[11:41:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:41:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:41:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:41:55    INFO]  -----------------------------------------------------------------------------------------------------------
[11:41:55    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_63/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:41:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:41:56    INFO]  - will validate that the bias-correction actually improved the result ...
[11:41:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:41:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_63,
Warning in <Fit>: Fit data is empty 
[11:42:02    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_63/plots/
[11:42:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_63/plots output/SPEC_advanced10/regres/train/ANNZ_63/plots_biasCor_before
[11:42:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:42:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_63,
Warning in <Fit>: Fit data is empty 
[11:42:18    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_63/plots/
[11:42:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_63/plots output/SPEC_advanced10/regres/train/ANNZ_63/plots_biasCor_after
[11:42:31    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11284] , after the bias-correction: [0.0497423 , 6.04206] --> will KEEP the correction !

(11:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m64[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:42 INFO) 
[11:42:34    INFO]  -----------------------------------------------------
[11:42:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:42:34    INFO]  -----------------------------------------------------------------------------------------------------------
[11:42:35    INFO]  - starting ANNZ::Init()  ... 
[11:42:36    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_64/saveOpt.txt ...
[11:42:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:42:42    INFO] ----------------------------------------------------------------------------------------------------
[11:42:42    INFO]  - will book (ANNZ_64) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=P
[11:42:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:42:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:42:42    INFO]      cuts (train):        ,
[11:42:42    INFO]      cuts (valid):       
[11:42:42    INFO]    - weights:            1
[11:42:42    INFO] ----------------------------------------------------------------------------------------------------
[11:42:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.101365
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(11:42 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(11:42 CRITICAL) [41;37;1mWill terminate !!!![0m
(11:44 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:44 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:44 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:44 INFO) [40;37;1m - 11/03/19 11:44:58 - starting ANNZ[0m
(11:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:44 INFO) 
[11:44:58    INFO]  -----------------------------------------------------
[11:44:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:44:58    INFO]  -----------------------------------------------------------------------------------------------------------
[11:44:58    INFO]  - starting ANNZ::Init()  ... 
[11:44:58    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced10/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[11:44:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:44 INFO) 
[11:44:58    INFO]  -----------------------------------------------------
[11:44:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:44:58    INFO]  -----------------------------------------------------------------------------------------------------------
[11:44:59    INFO]  - starting ANNZ::Init()  ... 
[11:44:59    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced10/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[11:44:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=910:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:44 INFO) 
[11:44:59    INFO]  -----------------------------------------------------
[11:44:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:44:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:00    INFO]  - starting ANNZ::Init()  ... 
[11:45:01    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced10/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[11:45:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:01    INFO]  -----------------------------------------------------
[11:45:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:01    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:02    INFO]  - starting ANNZ::Init()  ... 
[11:45:02    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced10/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[11:45:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=940:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:02    INFO]  -----------------------------------------------------
[11:45:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:02    INFO]  - starting ANNZ::Init()  ... 
[11:45:03    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced10/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[11:45:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:03    INFO]  -----------------------------------------------------
[11:45:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:03    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:04    INFO]  - starting ANNZ::Init()  ... 
[11:45:04    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced10/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[11:45:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:05    INFO]  -----------------------------------------------------
[11:45:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:05    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:05    INFO]  - starting ANNZ::Init()  ... 
[11:45:06    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced10/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[11:45:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:06    INFO]  -----------------------------------------------------
[11:45:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:06    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:07    INFO]  - starting ANNZ::Init()  ... 
[11:45:07    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced10/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[11:45:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:07    INFO]  -----------------------------------------------------
[11:45:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:08    INFO]  - starting ANNZ::Init()  ... 
[11:45:08    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced10/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[11:45:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:09    INFO]  -----------------------------------------------------
[11:45:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:09    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:09    INFO]  - starting ANNZ::Init()  ... 
[11:45:09    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced10/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[11:45:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:09    INFO]  -----------------------------------------------------
[11:45:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:09    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:10    INFO]  - starting ANNZ::Init()  ... 
[11:45:11    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced10/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[11:45:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:11    INFO]  -----------------------------------------------------
[11:45:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:11    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:12    INFO]  - starting ANNZ::Init()  ... 
[11:45:12    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced10/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[11:45:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:12    INFO]  -----------------------------------------------------
[11:45:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:12    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:13    INFO]  - starting ANNZ::Init()  ... 
[11:45:13    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced10/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[11:45:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:13    INFO]  -----------------------------------------------------
[11:45:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:13    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:14    INFO]  - starting ANNZ::Init()  ... 
[11:45:14    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced10/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[11:45:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:15    INFO]  -----------------------------------------------------
[11:45:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:15    INFO]  - starting ANNZ::Init()  ... 
[11:45:15    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced10/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[11:45:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:15    INFO]  -----------------------------------------------------
[11:45:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:16    INFO]  - starting ANNZ::Init()  ... 
[11:45:16    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced10/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[11:45:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:16    INFO]  -----------------------------------------------------
[11:45:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:16    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:17    INFO]  - starting ANNZ::Init()  ... 
[11:45:17    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced10/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[11:45:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:17    INFO]  -----------------------------------------------------
[11:45:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:17    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:18    INFO]  - starting ANNZ::Init()  ... 
[11:45:19    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced10/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[11:45:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:19    INFO]  -----------------------------------------------------
[11:45:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:19    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:19    INFO]  - starting ANNZ::Init()  ... 
[11:45:20    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced10/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[11:45:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:20    INFO]  -----------------------------------------------------
[11:45:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:20    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:20    INFO]  - starting ANNZ::Init()  ... 
[11:45:21    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced10/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[11:45:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:21    INFO]  -----------------------------------------------------
[11:45:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:21    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:21    INFO]  - starting ANNZ::Init()  ... 
[11:45:22    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced10/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[11:45:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:22    INFO]  -----------------------------------------------------
[11:45:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:22    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:23    INFO]  - starting ANNZ::Init()  ... 
[11:45:23    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced10/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[11:45:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:24    INFO]  -----------------------------------------------------
[11:45:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:24    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:24    INFO]  - starting ANNZ::Init()  ... 
[11:45:25    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced10/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[11:45:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:25    INFO]  -----------------------------------------------------
[11:45:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:25    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:26    INFO]  - starting ANNZ::Init()  ... 
[11:45:26    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced10/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[11:45:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:26    INFO]  -----------------------------------------------------
[11:45:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:26    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:27    INFO]  - starting ANNZ::Init()  ... 
[11:45:27    INFO]  - found trained "ANNZ_24" (./output/SPEC_advanced10/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[11:45:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:28    INFO]  -----------------------------------------------------
[11:45:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:28    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:28    INFO]  - starting ANNZ::Init()  ... 
[11:45:29    INFO]  - found trained "ANNZ_25" (./output/SPEC_advanced10/regres/train/ANNZ_25/ANNZ_25_weights/randomReg_ANNZ_25.weights.xml)
[11:45:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:29    INFO]  -----------------------------------------------------
[11:45:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:29    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:30    INFO]  - starting ANNZ::Init()  ... 
[11:45:30    INFO]  - found trained "ANNZ_26" (./output/SPEC_advanced10/regres/train/ANNZ_26/ANNZ_26_weights/randomReg_ANNZ_26.weights.xml)
[11:45:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:30    INFO]  -----------------------------------------------------
[11:45:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:30    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:31    INFO]  - starting ANNZ::Init()  ... 
[11:45:31    INFO]  - found trained "ANNZ_27" (./output/SPEC_advanced10/regres/train/ANNZ_27/ANNZ_27_weights/randomReg_ANNZ_27.weights.xml)
[11:45:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:32    INFO]  -----------------------------------------------------
[11:45:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:32    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:32    INFO]  - starting ANNZ::Init()  ... 
[11:45:32    INFO]  - found trained "ANNZ_28" (./output/SPEC_advanced10/regres/train/ANNZ_28/ANNZ_28_weights/randomReg_ANNZ_28.weights.xml)
[11:45:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:32    INFO]  -----------------------------------------------------
[11:45:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:32    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:33    INFO]  - starting ANNZ::Init()  ... 
[11:45:34    INFO]  - found trained "ANNZ_29" (./output/SPEC_advanced10/regres/train/ANNZ_29/ANNZ_29_weights/randomReg_ANNZ_29.weights.xml)
[11:45:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:34    INFO]  -----------------------------------------------------
[11:45:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:34    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:35    INFO]  - starting ANNZ::Init()  ... 
[11:45:35    INFO]  - found trained "ANNZ_30" (./output/SPEC_advanced10/regres/train/ANNZ_30/ANNZ_30_weights/randomReg_ANNZ_30.weights.xml)
[11:45:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:35    INFO]  -----------------------------------------------------
[11:45:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:35    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:36    INFO]  - starting ANNZ::Init()  ... 
[11:45:37    INFO]  - found trained "ANNZ_31" (./output/SPEC_advanced10/regres/train/ANNZ_31/ANNZ_31_weights/randomReg_ANNZ_31.weights.xml)
[11:45:37    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:37    INFO]  -----------------------------------------------------
[11:45:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:37    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:37    INFO]  - starting ANNZ::Init()  ... 
[11:45:38    INFO]  - found trained "ANNZ_32" (./output/SPEC_advanced10/regres/train/ANNZ_32/ANNZ_32_weights/randomReg_ANNZ_32.weights.xml)
[11:45:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:38    INFO]  -----------------------------------------------------
[11:45:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:38    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:39    INFO]  - starting ANNZ::Init()  ... 
[11:45:39    INFO]  - found trained "ANNZ_33" (./output/SPEC_advanced10/regres/train/ANNZ_33/ANNZ_33_weights/randomReg_ANNZ_33.weights.xml)
[11:45:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:39    INFO]  -----------------------------------------------------
[11:45:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:39    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:40    INFO]  - starting ANNZ::Init()  ... 
[11:45:41    INFO]  - found trained "ANNZ_34" (./output/SPEC_advanced10/regres/train/ANNZ_34/ANNZ_34_weights/randomReg_ANNZ_34.weights.xml)
[11:45:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=550:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:41    INFO]  -----------------------------------------------------
[11:45:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:41    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:41    INFO]  - starting ANNZ::Init()  ... 
[11:45:42    INFO]  - found trained "ANNZ_35" (./output/SPEC_advanced10/regres/train/ANNZ_35/ANNZ_35_weights/randomReg_ANNZ_35.weights.xml)
[11:45:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:42    INFO]  -----------------------------------------------------
[11:45:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:42    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:42    INFO]  - starting ANNZ::Init()  ... 
[11:45:43    INFO]  - found trained "ANNZ_36" (./output/SPEC_advanced10/regres/train/ANNZ_36/ANNZ_36_weights/randomReg_ANNZ_36.weights.xml)
[11:45:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:43    INFO]  -----------------------------------------------------
[11:45:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:43    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:44    INFO]  - starting ANNZ::Init()  ... 
[11:45:44    INFO]  - found trained "ANNZ_37" (./output/SPEC_advanced10/regres/train/ANNZ_37/ANNZ_37_weights/randomReg_ANNZ_37.weights.xml)
[11:45:44    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:44    INFO]  -----------------------------------------------------
[11:45:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:44    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:45    INFO]  - starting ANNZ::Init()  ... 
[11:45:45    INFO]  - found trained "ANNZ_38" (./output/SPEC_advanced10/regres/train/ANNZ_38/ANNZ_38_weights/randomReg_ANNZ_38.weights.xml)
[11:45:45    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:45    INFO]  -----------------------------------------------------
[11:45:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:45    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:46    INFO]  - starting ANNZ::Init()  ... 
[11:45:47    INFO]  - found trained "ANNZ_39" (./output/SPEC_advanced10/regres/train/ANNZ_39/ANNZ_39_weights/randomReg_ANNZ_39.weights.xml)
[11:45:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:47    INFO]  -----------------------------------------------------
[11:45:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:47    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:48    INFO]  - starting ANNZ::Init()  ... 
[11:45:48    INFO]  - found trained "ANNZ_40" (./output/SPEC_advanced10/regres/train/ANNZ_40/ANNZ_40_weights/randomReg_ANNZ_40.weights.xml)
[11:45:48    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:48    INFO]  -----------------------------------------------------
[11:45:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:48    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:49    INFO]  - starting ANNZ::Init()  ... 
[11:45:49    INFO]  - found trained "ANNZ_41" (./output/SPEC_advanced10/regres/train/ANNZ_41/ANNZ_41_weights/randomReg_ANNZ_41.weights.xml)
[11:45:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:49    INFO]  -----------------------------------------------------
[11:45:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:49    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:50    INFO]  - starting ANNZ::Init()  ... 
[11:45:51    INFO]  - found trained "ANNZ_42" (./output/SPEC_advanced10/regres/train/ANNZ_42/ANNZ_42_weights/randomReg_ANNZ_42.weights.xml)
[11:45:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:51    INFO]  -----------------------------------------------------
[11:45:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:51    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:52    INFO]  - starting ANNZ::Init()  ... 
[11:45:52    INFO]  - found trained "ANNZ_43" (./output/SPEC_advanced10/regres/train/ANNZ_43/ANNZ_43_weights/randomReg_ANNZ_43.weights.xml)
[11:45:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:53    INFO]  -----------------------------------------------------
[11:45:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:53    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:53    INFO]  - starting ANNZ::Init()  ... 
[11:45:54    INFO]  - found trained "ANNZ_44" (./output/SPEC_advanced10/regres/train/ANNZ_44/ANNZ_44_weights/randomReg_ANNZ_44.weights.xml)
[11:45:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m45[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:54    INFO]  -----------------------------------------------------
[11:45:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:54    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:54    INFO]  - starting ANNZ::Init()  ... 
[11:45:55    INFO]  - found trained "ANNZ_45" (./output/SPEC_advanced10/regres/train/ANNZ_45/ANNZ_45_weights/randomReg_ANNZ_45.weights.xml)
[11:45:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m46[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:55    INFO]  -----------------------------------------------------
[11:45:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:55    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:55    INFO]  - starting ANNZ::Init()  ... 
[11:45:55    INFO]  - found trained "ANNZ_46" (./output/SPEC_advanced10/regres/train/ANNZ_46/ANNZ_46_weights/randomReg_ANNZ_46.weights.xml)
[11:45:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m47[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:56    INFO]  -----------------------------------------------------
[11:45:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:56    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:56    INFO]  - starting ANNZ::Init()  ... 
[11:45:57    INFO]  - found trained "ANNZ_47" (./output/SPEC_advanced10/regres/train/ANNZ_47/ANNZ_47_weights/randomReg_ANNZ_47.weights.xml)
[11:45:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m48[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:57    INFO]  -----------------------------------------------------
[11:45:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:57    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:58    INFO]  - starting ANNZ::Init()  ... 
[11:45:59    INFO]  - found trained "ANNZ_48" (./output/SPEC_advanced10/regres/train/ANNZ_48/ANNZ_48_weights/randomReg_ANNZ_48.weights.xml)
[11:45:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m49[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:45 INFO) 
[11:45:59    INFO]  -----------------------------------------------------
[11:45:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:45:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:45:59    INFO]  - starting ANNZ::Init()  ... 
[11:46:00    INFO]  - found trained "ANNZ_49" (./output/SPEC_advanced10/regres/train/ANNZ_49/ANNZ_49_weights/randomReg_ANNZ_49.weights.xml)
[11:46:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m50[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:00    INFO]  -----------------------------------------------------
[11:46:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:00    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:01    INFO]  - starting ANNZ::Init()  ... 
[11:46:01    INFO]  - found trained "ANNZ_50" (./output/SPEC_advanced10/regres/train/ANNZ_50/ANNZ_50_weights/randomReg_ANNZ_50.weights.xml)
[11:46:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m51[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:01    INFO]  -----------------------------------------------------
[11:46:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:01    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:02    INFO]  - starting ANNZ::Init()  ... 
[11:46:02    INFO]  - found trained "ANNZ_51" (./output/SPEC_advanced10/regres/train/ANNZ_51/ANNZ_51_weights/randomReg_ANNZ_51.weights.xml)
[11:46:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m52[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:02    INFO]  -----------------------------------------------------
[11:46:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:03    INFO]  - starting ANNZ::Init()  ... 
[11:46:03    INFO]  - found trained "ANNZ_52" (./output/SPEC_advanced10/regres/train/ANNZ_52/ANNZ_52_weights/randomReg_ANNZ_52.weights.xml)
[11:46:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m53[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:03    INFO]  -----------------------------------------------------
[11:46:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:03    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:04    INFO]  - starting ANNZ::Init()  ... 
[11:46:04    INFO]  - found trained "ANNZ_53" (./output/SPEC_advanced10/regres/train/ANNZ_53/ANNZ_53_weights/randomReg_ANNZ_53.weights.xml)
[11:46:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m54[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:05    INFO]  -----------------------------------------------------
[11:46:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:05    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:05    INFO]  - starting ANNZ::Init()  ... 
[11:46:06    INFO]  - found trained "ANNZ_54" (./output/SPEC_advanced10/regres/train/ANNZ_54/ANNZ_54_weights/randomReg_ANNZ_54.weights.xml)
[11:46:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m55[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:06    INFO]  -----------------------------------------------------
[11:46:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:06    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:07    INFO]  - starting ANNZ::Init()  ... 
[11:46:07    INFO]  - found trained "ANNZ_55" (./output/SPEC_advanced10/regres/train/ANNZ_55/ANNZ_55_weights/randomReg_ANNZ_55.weights.xml)
[11:46:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m56[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:07    INFO]  -----------------------------------------------------
[11:46:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:08    INFO]  - starting ANNZ::Init()  ... 
[11:46:09    INFO]  - found trained "ANNZ_56" (./output/SPEC_advanced10/regres/train/ANNZ_56/ANNZ_56_weights/randomReg_ANNZ_56.weights.xml)
[11:46:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m57[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:09    INFO]  -----------------------------------------------------
[11:46:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:09    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:10    INFO]  - starting ANNZ::Init()  ... 
[11:46:10    INFO]  - found trained "ANNZ_57" (./output/SPEC_advanced10/regres/train/ANNZ_57/ANNZ_57_weights/randomReg_ANNZ_57.weights.xml)
[11:46:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m58[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=610:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:10    INFO]  -----------------------------------------------------
[11:46:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:10    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:11    INFO]  - starting ANNZ::Init()  ... 
[11:46:11    INFO]  - found trained "ANNZ_58" (./output/SPEC_advanced10/regres/train/ANNZ_58/ANNZ_58_weights/randomReg_ANNZ_58.weights.xml)
[11:46:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m59[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:11    INFO]  -----------------------------------------------------
[11:46:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:11    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:12    INFO]  - starting ANNZ::Init()  ... 
[11:46:12    INFO]  - found trained "ANNZ_59" (./output/SPEC_advanced10/regres/train/ANNZ_59/ANNZ_59_weights/randomReg_ANNZ_59.weights.xml)
[11:46:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m60[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:12    INFO]  -----------------------------------------------------
[11:46:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:12    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:13    INFO]  - starting ANNZ::Init()  ... 
[11:46:14    INFO]  - found trained "ANNZ_60" (./output/SPEC_advanced10/regres/train/ANNZ_60/ANNZ_60_weights/randomReg_ANNZ_60.weights.xml)
[11:46:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m61[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:14    INFO]  -----------------------------------------------------
[11:46:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:14    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:14    INFO]  - starting ANNZ::Init()  ... 
[11:46:15    INFO]  - found trained "ANNZ_61" (./output/SPEC_advanced10/regres/train/ANNZ_61/ANNZ_61_weights/randomReg_ANNZ_61.weights.xml)
[11:46:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m62[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:15    INFO]  -----------------------------------------------------
[11:46:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:16    INFO]  - starting ANNZ::Init()  ... 
[11:46:16    INFO]  - found trained "ANNZ_62" (./output/SPEC_advanced10/regres/train/ANNZ_62/ANNZ_62_weights/randomReg_ANNZ_62.weights.xml)
[11:46:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m63[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:16    INFO]  -----------------------------------------------------
[11:46:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:16    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:17    INFO]  - starting ANNZ::Init()  ... 
[11:46:17    INFO]  - found trained "ANNZ_63" (./output/SPEC_advanced10/regres/train/ANNZ_63/ANNZ_63_weights/randomReg_ANNZ_63.weights.xml)
[11:46:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(11:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m64[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:46 INFO) 
[11:46:17    INFO]  -----------------------------------------------------
[11:46:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:46:17    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:18    INFO]  - starting ANNZ::Init()  ... 
[11:46:19    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_64/saveOpt.txt ...
[11:46:24    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:46:25    INFO] ----------------------------------------------------------------------------------------------------
[11:46:25    INFO]  - will book (ANNZ_64) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N,P
[11:46:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:46:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:46:25    INFO]      cuts (train):        ,
[11:46:25    INFO]      cuts (valid):       
[11:46:25    INFO]    - weights:            1
[11:46:25    INFO] ----------------------------------------------------------------------------------------------------
[11:46:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:47:12    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_64/ANNZ_64_weights/saveTrainOpt_ANNZ_64.txt ...
[11:47:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_64 ... 
[11:47:16    INFO]  - Will gen. input-parameter errors ...
[11:47:18    INFO]  - starting ANNZ::loadReaders() ... 
[11:47:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:51:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:51:05    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:51:05    INFO]  -----------------------------------------------------------------------------------------------------------
[11:51:05    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:52:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:52:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:52:01    INFO]  -----------------------------------------------------------------------------------------------------------
[11:52:01    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_64/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:52:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:52:03    INFO]  - will try to derive a bias correction ... 
[11:52:03    INFO]  - will validate that training produced an XML file for later ... 
[11:52:03    INFO]  - starting ANNZ::loadReaders() ... 
[11:52:07    INFO]  - will validate that the training was not a complete failure ... 
[11:52:08    INFO]  - training seems to have been successful! will move on ...
[11:52:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:52:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:52:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:52:13    INFO] ----------------------------------------------------------------------------------------------------
[11:52:13    INFO]  - will book (ANNZ_64_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:52:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:52:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:52:13    INFO]    - weights:            1
[11:52:13    INFO] ----------------------------------------------------------------------------------------------------
[11:52:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:52:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_64 ... 
[11:52:22    INFO]  - Will gen. input-parameter errors ...
[11:52:24    INFO]  - starting ANNZ::loadReaders() ... 
[11:52:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[11:56:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:56:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:56:50    INFO]  -----------------------------------------------------------------------------------------------------------
[11:56:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[11:57:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:57:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:57:57    INFO]  -----------------------------------------------------------------------------------------------------------
[11:57:57    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_64/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:57:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:57:59    INFO]  - will validate that the bias-correction actually improved the result ...
[11:57:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:57:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_64,
[11:58:05    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_64/plots/
[11:58:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_64/plots output/SPEC_advanced10/regres/train/ANNZ_64/plots_biasCor_before
[11:58:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:58:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_64,
[11:58:23    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_64/plots/
[11:58:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_64/plots output/SPEC_advanced10/regres/train/ANNZ_64/plots_biasCor_after
[11:58:36    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.92164] , after the bias-correction: [0.045261 , 5.66527] --> will KEEP the correction !

(11:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m65[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:58 INFO) 
[11:58:41    INFO]  -----------------------------------------------------
[11:58:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:58:41    INFO]  -----------------------------------------------------------------------------------------------------------
[11:58:42    INFO]  - starting ANNZ::Init()  ... 
[11:58:43    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_65/saveOpt.txt ...
[11:58:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:58:49    INFO] ----------------------------------------------------------------------------------------------------
[11:58:49    INFO]  - will book (ANNZ_65) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=N,P
[11:58:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:58:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:58:49    INFO]      cuts (train):        ,
[11:58:49    INFO]      cuts (valid):       
[11:58:49    INFO]    - weights:            1
[11:58:49    INFO] ----------------------------------------------------------------------------------------------------
[11:58:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:59:31    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_65/ANNZ_65_weights/saveTrainOpt_ANNZ_65.txt ...
[11:59:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_65 ... 
[11:59:35    INFO]  - Will gen. input-parameter errors ...
[11:59:38    INFO]  - starting ANNZ::loadReaders() ... 
[11:59:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:03:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:03:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:03:29    INFO]  -----------------------------------------------------------------------------------------------------------
[12:03:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:04:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:04:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:04:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:04:17    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_65/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:04:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:04:18    INFO]  - will try to derive a bias correction ... 
[12:04:18    INFO]  - will validate that training produced an XML file for later ... 
[12:04:18    INFO]  - starting ANNZ::loadReaders() ... 
[12:04:23    INFO]  - will validate that the training was not a complete failure ... 
[12:04:23    INFO]  - training seems to have been successful! will move on ...
[12:04:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:04:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:04:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:04:29    INFO] ----------------------------------------------------------------------------------------------------
[12:04:29    INFO]  - will book (ANNZ_65_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:04:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:04:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:04:29    INFO]    - weights:            1
[12:04:29    INFO] ----------------------------------------------------------------------------------------------------
[12:04:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:04:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_65 ... 
[12:04:38    INFO]  - Will gen. input-parameter errors ...
[12:04:40    INFO]  - starting ANNZ::loadReaders() ... 
[12:04:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:08:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:08:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:08:24    INFO]  -----------------------------------------------------------------------------------------------------------
[12:08:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:09:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:09:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:09:12    INFO]  -----------------------------------------------------------------------------------------------------------
[12:09:12    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_65/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:09:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:09:14    INFO]  - will validate that the bias-correction actually improved the result ...
[12:09:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:09:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_65,
[12:09:20    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_65/plots/
[12:09:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_65/plots output/SPEC_advanced10/regres/train/ANNZ_65/plots_biasCor_before
[12:09:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:09:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_65,
[12:09:37    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_65/plots/
[12:09:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_65/plots output/SPEC_advanced10/regres/train/ANNZ_65/plots_biasCor_after
[12:09:49    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.91132] , after the bias-correction: [0.0448129 , 5.66772] --> will KEEP the correction !

(12:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m66[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:09 INFO) 
[12:09:53    INFO]  -----------------------------------------------------
[12:09:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:09:53    INFO]  -----------------------------------------------------------------------------------------------------------
[12:09:54    INFO]  - starting ANNZ::Init()  ... 
[12:09:55    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_66/saveOpt.txt ...
[12:10:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:10:00    INFO] ----------------------------------------------------------------------------------------------------
[12:10:00    INFO]  - will book (ANNZ_66) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N,P
[12:10:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:10:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:10:00    INFO]      cuts (train):        ,
[12:10:00    INFO]      cuts (valid):       
[12:10:00    INFO]    - weights:            1
[12:10:00    INFO] ----------------------------------------------------------------------------------------------------
[12:10:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:10:46    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_66/ANNZ_66_weights/saveTrainOpt_ANNZ_66.txt ...
[12:10:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_66 ... 
[12:10:50    INFO]  - Will gen. input-parameter errors ...
[12:10:52    INFO]  - starting ANNZ::loadReaders() ... 
[12:11:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:14:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:14:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:14:49    INFO]  -----------------------------------------------------------------------------------------------------------
[12:14:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:15:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:15:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:15:43    INFO]  -----------------------------------------------------------------------------------------------------------
[12:15:43    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_66/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:15:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:15:45    INFO]  - will try to derive a bias correction ... 
[12:15:45    INFO]  - will validate that training produced an XML file for later ... 
[12:15:45    INFO]  - starting ANNZ::loadReaders() ... 
[12:15:50    INFO]  - will validate that the training was not a complete failure ... 
[12:15:50    INFO]  - training seems to have been successful! will move on ...
[12:15:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:15:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:15:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:15:55    INFO] ----------------------------------------------------------------------------------------------------
[12:15:55    INFO]  - will book (ANNZ_66_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:15:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:15:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:15:55    INFO]    - weights:            1
[12:15:55    INFO] ----------------------------------------------------------------------------------------------------
[12:15:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:16:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_66 ... 
[12:16:05    INFO]  - Will gen. input-parameter errors ...
[12:16:07    INFO]  - starting ANNZ::loadReaders() ... 
[12:16:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:20:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:20:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:20:11    INFO]  -----------------------------------------------------------------------------------------------------------
[12:20:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:21:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:21:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:21:07    INFO]  -----------------------------------------------------------------------------------------------------------
[12:21:07    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_66/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:21:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:21:09    INFO]  - will validate that the bias-correction actually improved the result ...
[12:21:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:21:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_66,
[12:21:15    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_66/plots/
[12:21:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_66/plots output/SPEC_advanced10/regres/train/ANNZ_66/plots_biasCor_before
[12:21:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:21:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_66,
[12:21:33    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_66/plots/
[12:21:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_66/plots output/SPEC_advanced10/regres/train/ANNZ_66/plots_biasCor_after
[12:21:52    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.92164] , after the bias-correction: [0.045261 , 5.66527] --> will KEEP the correction !

(12:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m67[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:21 INFO) 
[12:21:57    INFO]  -----------------------------------------------------
[12:21:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:21:57    INFO]  -----------------------------------------------------------------------------------------------------------
[12:21:58    INFO]  - starting ANNZ::Init()  ... 
[12:21:59    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_67/saveOpt.txt ...
[12:22:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:22:06    INFO] ----------------------------------------------------------------------------------------------------
[12:22:06    INFO]  - will book (ANNZ_67) method(BDT) with options: :NTrees=480:BoostType=AdaBoostR2:VarTransform=N
[12:22:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:22:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:22:06    INFO]      cuts (train):        ,
[12:22:06    INFO]      cuts (valid):       
[12:22:06    INFO]    - weights:            1
[12:22:06    INFO] ----------------------------------------------------------------------------------------------------
[12:22:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:22:53    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_67/ANNZ_67_weights/saveTrainOpt_ANNZ_67.txt ...
[12:22:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_67 ... 
[12:22:56    INFO]  - Will gen. input-parameter errors ...
[12:22:58    INFO]  - starting ANNZ::loadReaders() ... 
[12:23:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:31:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:31:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:31:36    INFO]  -----------------------------------------------------------------------------------------------------------
[12:31:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:33:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:33:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:33:45    INFO]  -----------------------------------------------------------------------------------------------------------
[12:33:45    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_67/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:33:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:33:46    INFO]  - will try to derive a bias correction ... 
[12:33:46    INFO]  - will validate that training produced an XML file for later ... 
[12:33:46    INFO]  - starting ANNZ::loadReaders() ... 
[12:33:50    INFO]  - will validate that the training was not a complete failure ... 
[12:33:50    INFO]  - training seems to have been successful! will move on ...
[12:33:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:33:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:33:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:33:58    INFO] ----------------------------------------------------------------------------------------------------
[12:33:58    INFO]  - will book (ANNZ_67_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:33:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:33:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:33:58    INFO]    - weights:            1
[12:33:58    INFO] ----------------------------------------------------------------------------------------------------
[12:33:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:34:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_67 ... 
[12:34:06    INFO]  - Will gen. input-parameter errors ...
[12:34:08    INFO]  - starting ANNZ::loadReaders() ... 
[12:34:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:42:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:42:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:42:13    INFO]  -----------------------------------------------------------------------------------------------------------
[12:42:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:44:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:44:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:44:06    INFO]  -----------------------------------------------------------------------------------------------------------
[12:44:06    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_67/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:44:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:44:08    INFO]  - will validate that the bias-correction actually improved the result ...
[12:44:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:44:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_67,
Warning in <Fit>: Fit data is empty 
[12:44:14    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_67/plots/
[12:44:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_67/plots output/SPEC_advanced10/regres/train/ANNZ_67/plots_biasCor_before
[12:44:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:44:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_67,
[12:44:34    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_67/plots/
[12:44:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_67/plots output/SPEC_advanced10/regres/train/ANNZ_67/plots_biasCor_after
[12:44:45    INFO]  - Got original [KS-test,N_poiss]: [0.06229 , 6.55418] , after the bias-correction: [0.0354022 , 5.68068] --> will KEEP the correction !

(12:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m68[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:44 INFO) 
[12:44:49    INFO]  -----------------------------------------------------
[12:44:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:44:49    INFO]  -----------------------------------------------------------------------------------------------------------
[12:44:50    INFO]  - starting ANNZ::Init()  ... 
[12:44:51    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_68/saveOpt.txt ...
[12:44:57    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:44:57    INFO] ----------------------------------------------------------------------------------------------------
[12:44:57    INFO]  - will book (ANNZ_68) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N
[12:44:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:44:57    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:44:57    INFO]      cuts (train):        ,
[12:44:57    INFO]      cuts (valid):       
[12:44:57    INFO]    - weights:            1
[12:44:57    INFO] ----------------------------------------------------------------------------------------------------
[12:44:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:45:41    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_68/ANNZ_68_weights/saveTrainOpt_ANNZ_68.txt ...
[12:45:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_68 ... 
[12:45:45    INFO]  - Will gen. input-parameter errors ...
[12:45:47    INFO]  - starting ANNZ::loadReaders() ... 
[12:45:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:48:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:48:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:48:02    INFO]  -----------------------------------------------------------------------------------------------------------
[12:48:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:48:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:48:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:48:33    INFO]  -----------------------------------------------------------------------------------------------------------
[12:48:33    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_68/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:48:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:48:35    INFO]  - will try to derive a bias correction ... 
[12:48:35    INFO]  - will validate that training produced an XML file for later ... 
[12:48:35    INFO]  - starting ANNZ::loadReaders() ... 
[12:48:39    INFO]  - will validate that the training was not a complete failure ... 
[12:48:40    INFO]  - training seems to have been successful! will move on ...
[12:48:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:48:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:48:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:48:45    INFO] ----------------------------------------------------------------------------------------------------
[12:48:45    INFO]  - will book (ANNZ_68_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:48:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:48:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:48:45    INFO]    - weights:            1
[12:48:45    INFO] ----------------------------------------------------------------------------------------------------
[12:48:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:48:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_68 ... 
[12:48:55    INFO]  - Will gen. input-parameter errors ...
[12:48:57    INFO]  - starting ANNZ::loadReaders() ... 
[12:49:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:51:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:51:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:51:38    INFO]  -----------------------------------------------------------------------------------------------------------
[12:51:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:52:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:52:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:52:15    INFO]  -----------------------------------------------------------------------------------------------------------
[12:52:15    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_68/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:52:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:52:17    INFO]  - will validate that the bias-correction actually improved the result ...
[12:52:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:52:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_68,
[12:52:23    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_68/plots/
[12:52:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_68/plots output/SPEC_advanced10/regres/train/ANNZ_68/plots_biasCor_before
[12:52:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:52:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_68,
[12:52:40    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_68/plots/
[12:52:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_68/plots output/SPEC_advanced10/regres/train/ANNZ_68/plots_biasCor_after
[12:52:52    INFO]  - Got original [KS-test,N_poiss]: [0.0848085 , 6.65647] , after the bias-correction: [0.048398 , 5.74827] --> will KEEP the correction !

(12:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m69[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:52 INFO) 
[12:52:56    INFO]  -----------------------------------------------------
[12:52:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:52:56    INFO]  -----------------------------------------------------------------------------------------------------------
[12:52:57    INFO]  - starting ANNZ::Init()  ... 
[12:52:58    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_69/saveOpt.txt ...
[12:53:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:53:04    INFO] ----------------------------------------------------------------------------------------------------
[12:53:04    INFO]  - will book (ANNZ_69) method(BDT) with options: :NTrees=300:BoostType=Bagging:VarTransform=N,P
[12:53:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:53:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:53:04    INFO]      cuts (train):        ,
[12:53:04    INFO]      cuts (valid):       
[12:53:04    INFO]    - weights:            1
[12:53:04    INFO] ----------------------------------------------------------------------------------------------------
[12:53:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:53:37    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_69/ANNZ_69_weights/saveTrainOpt_ANNZ_69.txt ...
[12:53:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_69 ... 
[12:53:40    INFO]  - Will gen. input-parameter errors ...
[12:53:42    INFO]  - starting ANNZ::loadReaders() ... 
[12:53:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:56:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:56:14    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[12:56:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:56:51    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:52    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_69/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:56:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:56:53    INFO]  - will try to derive a bias correction ... 
[12:56:53    INFO]  - will validate that training produced an XML file for later ... 
[12:56:53    INFO]  - starting ANNZ::loadReaders() ... 
[12:56:56    INFO]  - will validate that the training was not a complete failure ... 
[12:56:56    INFO]  - training seems to have been successful! will move on ...
[12:56:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:57:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:57:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:57:01    INFO] ----------------------------------------------------------------------------------------------------
[12:57:01    INFO]  - will book (ANNZ_69_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:57:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:57:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:57:01    INFO]    - weights:            1
[12:57:01    INFO] ----------------------------------------------------------------------------------------------------
[12:57:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:57:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_69 ... 
[12:57:10    INFO]  - Will gen. input-parameter errors ...
[12:57:12    INFO]  - starting ANNZ::loadReaders() ... 
[12:57:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[12:59:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:59:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:59:42    INFO]  -----------------------------------------------------------------------------------------------------------
[12:59:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:00:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:00:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:00:18    INFO]  -----------------------------------------------------------------------------------------------------------
[13:00:18    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_69/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:00:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:00:19    INFO]  - will validate that the bias-correction actually improved the result ...
[13:00:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:00:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_69,
[13:00:26    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_69/plots/
[13:00:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_69/plots output/SPEC_advanced10/regres/train/ANNZ_69/plots_biasCor_before
[13:00:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:00:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_69,
[13:00:43    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_69/plots/
[13:00:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_69/plots output/SPEC_advanced10/regres/train/ANNZ_69/plots_biasCor_after
[13:00:54    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.80693] , after the bias-correction: [0.0421242 , 5.57578] --> will KEEP the correction !

(13:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m70[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:00 INFO) 
[13:00:58    INFO]  -----------------------------------------------------
[13:00:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:00:58    INFO]  -----------------------------------------------------------------------------------------------------------
[13:00:59    INFO]  - starting ANNZ::Init()  ... 
[13:01:00    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_70/saveOpt.txt ...
[13:01:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:01:06    INFO] ----------------------------------------------------------------------------------------------------
[13:01:06    INFO]  - will book (ANNZ_70) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[13:01:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:01:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:01:06    INFO]      cuts (train):        ,
[13:01:06    INFO]      cuts (valid):       
[13:01:06    INFO]    - weights:            1
[13:01:06    INFO] ----------------------------------------------------------------------------------------------------
[13:01:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:01:21    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_70/ANNZ_70_weights/saveTrainOpt_ANNZ_70.txt ...
[13:01:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_70 ... 
[13:01:23    INFO]  - Will gen. input-parameter errors ...
[13:01:24    INFO]  - starting ANNZ::loadReaders() ... 
[13:01:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:03:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:03:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:03:04    INFO]  -----------------------------------------------------------------------------------------------------------
[13:03:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:03:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:03:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:03:27    INFO]  -----------------------------------------------------------------------------------------------------------
[13:03:27    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_70/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:03:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:03:28    INFO]  - will try to derive a bias correction ... 
[13:03:28    INFO]  - will validate that training produced an XML file for later ... 
[13:03:28    INFO]  - starting ANNZ::loadReaders() ... 
[13:03:29    INFO]  - will validate that the training was not a complete failure ... 
[13:03:29    INFO]  - training seems to have been successful! will move on ...
[13:03:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:03:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:03:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:03:33    INFO] ----------------------------------------------------------------------------------------------------
[13:03:33    INFO]  - will book (ANNZ_70_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:03:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:03:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:03:33    INFO]    - weights:            1
[13:03:33    INFO] ----------------------------------------------------------------------------------------------------
[13:03:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:03:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_70 ... 
[13:03:40    INFO]  - Will gen. input-parameter errors ...
[13:03:41    INFO]  - starting ANNZ::loadReaders() ... 
[13:03:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:05:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:05:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:05:48    INFO]  -----------------------------------------------------------------------------------------------------------
[13:05:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:06:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:06:20    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:06:20    INFO]  -----------------------------------------------------------------------------------------------------------
[13:06:20    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_70/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:06:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:06:21    INFO]  - will validate that the bias-correction actually improved the result ...
[13:06:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:06:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_70,
Warning in <Fit>: Fit data is empty 
[13:06:26    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_70/plots/
[13:06:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_70/plots output/SPEC_advanced10/regres/train/ANNZ_70/plots_biasCor_before
[13:06:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:06:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_70,
Warning in <Fit>: Fit data is empty 
[13:06:43    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_70/plots/
[13:06:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_70/plots output/SPEC_advanced10/regres/train/ANNZ_70/plots_biasCor_after
[13:06:54    INFO]  - Got original [KS-test,N_poiss]: [0.100941 , 6.44299] , after the bias-correction: [0.0448129 , 5.75736] --> will KEEP the correction !

(13:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m71[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:06 INFO) 
[13:06:57    INFO]  -----------------------------------------------------
[13:06:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:06:57    INFO]  -----------------------------------------------------------------------------------------------------------
[13:06:58    INFO]  - starting ANNZ::Init()  ... 
[13:06:59    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_71/saveOpt.txt ...
[13:07:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:07:05    INFO] ----------------------------------------------------------------------------------------------------
[13:07:05    INFO]  - will book (ANNZ_71) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[13:07:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:07:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:07:05    INFO]      cuts (train):        ,
[13:07:05    INFO]      cuts (valid):       
[13:07:05    INFO]    - weights:            1
[13:07:05    INFO] ----------------------------------------------------------------------------------------------------
[13:07:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:07:47    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_71/ANNZ_71_weights/saveTrainOpt_ANNZ_71.txt ...
[13:07:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_71 ... 
[13:07:51    INFO]  - Will gen. input-parameter errors ...
[13:07:53    INFO]  - starting ANNZ::loadReaders() ... 
[13:08:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:10:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:10:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:10:13    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:10:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:10:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:10:44    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:45    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_71/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:10:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:10:47    INFO]  - will try to derive a bias correction ... 
[13:10:47    INFO]  - will validate that training produced an XML file for later ... 
[13:10:47    INFO]  - starting ANNZ::loadReaders() ... 
[13:10:51    INFO]  - will validate that the training was not a complete failure ... 
[13:10:51    INFO]  - training seems to have been successful! will move on ...
[13:10:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:10:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:10:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:10:57    INFO] ----------------------------------------------------------------------------------------------------
[13:10:57    INFO]  - will book (ANNZ_71_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:10:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:10:57    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:10:57    INFO]    - weights:            1
[13:10:57    INFO] ----------------------------------------------------------------------------------------------------
[13:10:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:11:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_71 ... 
[13:11:06    INFO]  - Will gen. input-parameter errors ...
[13:11:08    INFO]  - starting ANNZ::loadReaders() ... 
[13:11:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:13:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:13:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:13:39    INFO]  -----------------------------------------------------------------------------------------------------------
[13:13:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:14:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:14:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:14:14    INFO]  -----------------------------------------------------------------------------------------------------------
[13:14:14    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_71/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:14:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:14:15    INFO]  - will validate that the bias-correction actually improved the result ...
[13:14:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:14:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_71,
[13:14:22    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_71/plots/
[13:14:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_71/plots output/SPEC_advanced10/regres/train/ANNZ_71/plots_biasCor_before
[13:14:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:14:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_71,
[13:14:38    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_71/plots/
[13:14:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_71/plots output/SPEC_advanced10/regres/train/ANNZ_71/plots_biasCor_after
[13:14:50    INFO]  - Got original [KS-test,N_poiss]: [0.0844724 , 6.62039] , after the bias-correction: [0.0454851 , 5.53294] --> will KEEP the correction !

(13:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m72[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:14 INFO) 
[13:14:54    INFO]  -----------------------------------------------------
[13:14:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:14:54    INFO]  -----------------------------------------------------------------------------------------------------------
[13:14:55    INFO]  - starting ANNZ::Init()  ... 
[13:14:56    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_72/saveOpt.txt ...
[13:15:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:15:02    INFO] ----------------------------------------------------------------------------------------------------
[13:15:02    INFO]  - will book (ANNZ_72) method(BDT) with options: :NTrees=320:BoostType=AdaBoost:VarTransform=N,P
[13:15:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:15:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:15:02    INFO]      cuts (train):        ,
[13:15:02    INFO]      cuts (valid):       
[13:15:02    INFO]    - weights:            1
[13:15:02    INFO] ----------------------------------------------------------------------------------------------------
[13:15:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:15:23    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_72/ANNZ_72_weights/saveTrainOpt_ANNZ_72.txt ...
[13:15:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_72 ... 
[13:15:25    INFO]  - Will gen. input-parameter errors ...
[13:15:26    INFO]  - starting ANNZ::loadReaders() ... 
[13:15:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:17:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:17:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:17:23    INFO]  -----------------------------------------------------------------------------------------------------------
[13:17:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:17:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:17:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:17:52    INFO]  -----------------------------------------------------------------------------------------------------------
[13:17:52    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_72/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:17:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:17:53    INFO]  - will try to derive a bias correction ... 
[13:17:53    INFO]  - will validate that training produced an XML file for later ... 
[13:17:53    INFO]  - starting ANNZ::loadReaders() ... 
[13:17:54    INFO]  - will validate that the training was not a complete failure ... 
[13:17:54    INFO]  - training seems to have been successful! will move on ...
[13:17:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:17:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:17:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:17:58    INFO] ----------------------------------------------------------------------------------------------------
[13:17:58    INFO]  - will book (ANNZ_72_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:17:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:17:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:17:58    INFO]    - weights:            1
[13:17:58    INFO] ----------------------------------------------------------------------------------------------------
[13:17:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:18:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_72 ... 
[13:18:05    INFO]  - Will gen. input-parameter errors ...
[13:18:07    INFO]  - starting ANNZ::loadReaders() ... 
[13:18:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:20:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:20:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:20:33    INFO]  -----------------------------------------------------------------------------------------------------------
[13:20:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:21:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:21:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:21:08    INFO]  -----------------------------------------------------------------------------------------------------------
[13:21:08    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_72/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:21:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:21:09    INFO]  - will validate that the bias-correction actually improved the result ...
[13:21:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:21:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_72,
Warning in <Fit>: Fit data is empty 
[13:21:14    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_72/plots/
[13:21:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_72/plots output/SPEC_advanced10/regres/train/ANNZ_72/plots_biasCor_before
[13:21:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:21:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_72,
[13:21:31    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_72/plots/
[13:21:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_72/plots output/SPEC_advanced10/regres/train/ANNZ_72/plots_biasCor_after
[13:21:43    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40225] , after the bias-correction: [0.0434685 , 5.80056] --> will KEEP the correction !

(13:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m73[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:21 INFO) 
[13:21:46    INFO]  -----------------------------------------------------
[13:21:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:21:46    INFO]  -----------------------------------------------------------------------------------------------------------
[13:21:47    INFO]  - starting ANNZ::Init()  ... 
[13:21:48    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_73/saveOpt.txt ...
[13:21:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:21:54    INFO] ----------------------------------------------------------------------------------------------------
[13:21:54    INFO]  - will book (ANNZ_73) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N,P
[13:21:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:21:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:21:54    INFO]      cuts (train):        ,
[13:21:54    INFO]      cuts (valid):       
[13:21:54    INFO]    - weights:            1
[13:21:54    INFO] ----------------------------------------------------------------------------------------------------
[13:21:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:22:40    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_73/ANNZ_73_weights/saveTrainOpt_ANNZ_73.txt ...
[13:22:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_73 ... 
[13:22:44    INFO]  - Will gen. input-parameter errors ...
[13:22:46    INFO]  - starting ANNZ::loadReaders() ... 
[13:22:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:27:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:27:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:27:09    INFO]  -----------------------------------------------------------------------------------------------------------
[13:27:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:28:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:28:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:28:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:28:00    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_73/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:28:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:28:02    INFO]  - will try to derive a bias correction ... 
[13:28:02    INFO]  - will validate that training produced an XML file for later ... 
[13:28:02    INFO]  - starting ANNZ::loadReaders() ... 
[13:28:06    INFO]  - will validate that the training was not a complete failure ... 
[13:28:07    INFO]  - training seems to have been successful! will move on ...
[13:28:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:28:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:28:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:28:12    INFO] ----------------------------------------------------------------------------------------------------
[13:28:12    INFO]  - will book (ANNZ_73_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:28:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:28:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:28:12    INFO]    - weights:            1
[13:28:12    INFO] ----------------------------------------------------------------------------------------------------
[13:28:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:28:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_73 ... 
[13:28:21    INFO]  - Will gen. input-parameter errors ...
[13:28:23    INFO]  - starting ANNZ::loadReaders() ... 
[13:28:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:32:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:32:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:32:25    INFO]  -----------------------------------------------------------------------------------------------------------
[13:32:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:33:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:33:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:33:38    INFO]  -----------------------------------------------------------------------------------------------------------
[13:33:38    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_73/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:33:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:33:40    INFO]  - will validate that the bias-correction actually improved the result ...
[13:33:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:33:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_73,
[13:33:47    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_73/plots/
[13:33:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_73/plots output/SPEC_advanced10/regres/train/ANNZ_73/plots_biasCor_before
[13:33:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:33:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_73,
[13:34:03    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_73/plots/
[13:34:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_73/plots output/SPEC_advanced10/regres/train/ANNZ_73/plots_biasCor_after
[13:34:16    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.92164] , after the bias-correction: [0.045261 , 5.66527] --> will KEEP the correction !

(13:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m74[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:34 INFO) 
[13:34:20    INFO]  -----------------------------------------------------
[13:34:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:34:20    INFO]  -----------------------------------------------------------------------------------------------------------
[13:34:21    INFO]  - starting ANNZ::Init()  ... 
[13:34:22    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_74/saveOpt.txt ...
[13:34:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:34:29    INFO] ----------------------------------------------------------------------------------------------------
[13:34:29    INFO]  - will book (ANNZ_74) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N
[13:34:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:34:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:34:29    INFO]      cuts (train):        ,
[13:34:29    INFO]      cuts (valid):       
[13:34:29    INFO]    - weights:            1
[13:34:29    INFO] ----------------------------------------------------------------------------------------------------
[13:34:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:34:59    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_74/ANNZ_74_weights/saveTrainOpt_ANNZ_74.txt ...
[13:35:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_74 ... 
[13:35:02    INFO]  - Will gen. input-parameter errors ...
[13:35:03    INFO]  - starting ANNZ::loadReaders() ... 
[13:35:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:36:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:36:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:36:44    INFO]  -----------------------------------------------------------------------------------------------------------
[13:36:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:37:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:37:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:37:07    INFO]  -----------------------------------------------------------------------------------------------------------
[13:37:08    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_74/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:37:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:37:09    INFO]  - will try to derive a bias correction ... 
[13:37:09    INFO]  - will validate that training produced an XML file for later ... 
[13:37:09    INFO]  - starting ANNZ::loadReaders() ... 
[13:37:10    INFO]  - will validate that the training was not a complete failure ... 
[13:37:11    INFO]  - training seems to have been successful! will move on ...
[13:37:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:37:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:37:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:37:15    INFO] ----------------------------------------------------------------------------------------------------
[13:37:15    INFO]  - will book (ANNZ_74_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:37:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:37:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:37:15    INFO]    - weights:            1
[13:37:15    INFO] ----------------------------------------------------------------------------------------------------
[13:37:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:37:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_74 ... 
[13:37:23    INFO]  - Will gen. input-parameter errors ...
[13:37:25    INFO]  - starting ANNZ::loadReaders() ... 
[13:37:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:39:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:39:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:39:18    INFO]  -----------------------------------------------------------------------------------------------------------
[13:39:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:39:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:39:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:39:45    INFO]  -----------------------------------------------------------------------------------------------------------
[13:39:45    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_74/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:39:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:39:46    INFO]  - will validate that the bias-correction actually improved the result ...
[13:39:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:39:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_74,
Warning in <Fit>: Fit data is empty 
[13:39:52    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_74/plots/
[13:40:04        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_74/plots output/SPEC_advanced10/regres/train/ANNZ_74/plots_biasCor_before
[13:40:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:40:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_74,
Warning in <Fit>: Fit data is empty 
[13:40:09    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_74/plots/
[13:40:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_74/plots output/SPEC_advanced10/regres/train/ANNZ_74/plots_biasCor_after
[13:40:20    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12573] , after the bias-correction: [0.0498544 , 6.14904] --> will KEEP the correction !

(13:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m75[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:40 INFO) 
[13:40:24    INFO]  -----------------------------------------------------
[13:40:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:40:24    INFO]  -----------------------------------------------------------------------------------------------------------
[13:40:25    INFO]  - starting ANNZ::Init()  ... 
[13:40:26    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_75/saveOpt.txt ...
[13:40:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:40:32    INFO] ----------------------------------------------------------------------------------------------------
[13:40:32    INFO]  - will book (ANNZ_75) method(BDT) with options: :NTrees=440:BoostType=AdaBoost:VarTransform=N,P
[13:40:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:40:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:40:32    INFO]      cuts (train):        ,
[13:40:32    INFO]      cuts (valid):       
[13:40:32    INFO]    - weights:            1
[13:40:32    INFO] ----------------------------------------------------------------------------------------------------
[13:40:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:40:58    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_75/ANNZ_75_weights/saveTrainOpt_ANNZ_75.txt ...
[13:41:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_75 ... 
[13:41:00    INFO]  - Will gen. input-parameter errors ...
[13:41:02    INFO]  - starting ANNZ::loadReaders() ... 
[13:41:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:43:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:43:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:43:51    INFO]  -----------------------------------------------------------------------------------------------------------
[13:43:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:44:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:44:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:44:29    INFO]  -----------------------------------------------------------------------------------------------------------
[13:44:29    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_75/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:44:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:44:30    INFO]  - will try to derive a bias correction ... 
[13:44:30    INFO]  - will validate that training produced an XML file for later ... 
[13:44:30    INFO]  - starting ANNZ::loadReaders() ... 
[13:44:32    INFO]  - will validate that the training was not a complete failure ... 
[13:44:32    INFO]  - training seems to have been successful! will move on ...
[13:44:32    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:44:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:44:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:44:36    INFO] ----------------------------------------------------------------------------------------------------
[13:44:36    INFO]  - will book (ANNZ_75_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:44:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:44:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:44:36    INFO]    - weights:            1
[13:44:36    INFO] ----------------------------------------------------------------------------------------------------
[13:44:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:44:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_75 ... 
[13:44:43    INFO]  - Will gen. input-parameter errors ...
[13:44:44    INFO]  - starting ANNZ::loadReaders() ... 
[13:44:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:47:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:47:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:47:28    INFO]  -----------------------------------------------------------------------------------------------------------
[13:47:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:48:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:48:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:48:08    INFO]  -----------------------------------------------------------------------------------------------------------
[13:48:08    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_75/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:48:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:48:09    INFO]  - will validate that the bias-correction actually improved the result ...
[13:48:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:48:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_75,
Warning in <Fit>: Fit data is empty 
[13:48:15    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_75/plots/
[13:48:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_75/plots output/SPEC_advanced10/regres/train/ANNZ_75/plots_biasCor_before
[13:48:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:48:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_75,
Warning in <Fit>: Fit data is empty 
[13:48:31    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_75/plots/
[13:48:44        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_75/plots output/SPEC_advanced10/regres/train/ANNZ_75/plots_biasCor_after
[13:48:44    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40663] , after the bias-correction: [0.0441408 , 5.75862] --> will KEEP the correction !

(13:48 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:48 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m76[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:48 INFO) 
[13:48:47    INFO]  -----------------------------------------------------
[13:48:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:48:47    INFO]  -----------------------------------------------------------------------------------------------------------
[13:48:48    INFO]  - starting ANNZ::Init()  ... 
[13:48:49    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_76/saveOpt.txt ...
[13:48:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:48:55    INFO] ----------------------------------------------------------------------------------------------------
[13:48:55    INFO]  - will book (ANNZ_76) method(BDT) with options: :NTrees=400:BoostType=AdaBoost:VarTransform=N
[13:48:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:48:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:48:55    INFO]      cuts (train):        ,
[13:48:55    INFO]      cuts (valid):       
[13:48:55    INFO]    - weights:            1
[13:48:55    INFO] ----------------------------------------------------------------------------------------------------
[13:48:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:49:21    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_76/ANNZ_76_weights/saveTrainOpt_ANNZ_76.txt ...
[13:49:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_76 ... 
[13:49:24    INFO]  - Will gen. input-parameter errors ...
[13:49:25    INFO]  - starting ANNZ::loadReaders() ... 
[13:49:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:51:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:51:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:51:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:51:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:51:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:51:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:51:27    INFO]  -----------------------------------------------------------------------------------------------------------
[13:51:27    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_76/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:51:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:51:28    INFO]  - will try to derive a bias correction ... 
[13:51:28    INFO]  - will validate that training produced an XML file for later ... 
[13:51:28    INFO]  - starting ANNZ::loadReaders() ... 
[13:51:30    INFO]  - will validate that the training was not a complete failure ... 
[13:51:31    INFO]  - training seems to have been successful! will move on ...
[13:51:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:51:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:51:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:51:36    INFO] ----------------------------------------------------------------------------------------------------
[13:51:36    INFO]  - will book (ANNZ_76_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:51:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:51:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:51:36    INFO]    - weights:            1
[13:51:36    INFO] ----------------------------------------------------------------------------------------------------
[13:51:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:51:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_76 ... 
[13:51:46    INFO]  - Will gen. input-parameter errors ...
[13:51:48    INFO]  - starting ANNZ::loadReaders() ... 
[13:51:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[13:53:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:53:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:53:34    INFO]  -----------------------------------------------------------------------------------------------------------
[13:53:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[13:54:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:54:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:54:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:54:00    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_76/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:54:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:54:01    INFO]  - will validate that the bias-correction actually improved the result ...
[13:54:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:54:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_76,
Warning in <Fit>: Fit data is empty 
[13:54:07    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_76/plots/
[13:54:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_76/plots output/SPEC_advanced10/regres/train/ANNZ_76/plots_biasCor_before
[13:54:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:54:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_76,
Warning in <Fit>: Fit data is empty 
[13:54:24    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_76/plots/
[13:54:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_76/plots output/SPEC_advanced10/regres/train/ANNZ_76/plots_biasCor_after
[13:54:35    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11987] , after the bias-correction: [0.0497423 , 6.02496] --> will KEEP the correction !

(13:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m77[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:54 INFO) 
[13:54:38    INFO]  -----------------------------------------------------
[13:54:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:54:38    INFO]  -----------------------------------------------------------------------------------------------------------
[13:54:39    INFO]  - starting ANNZ::Init()  ... 
[13:54:43    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_77/saveOpt.txt ...
[13:54:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:54:49    INFO] ----------------------------------------------------------------------------------------------------
[13:54:49    INFO]  - will book (ANNZ_77) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N,P
[13:54:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:54:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:54:49    INFO]      cuts (train):        ,
[13:54:49    INFO]      cuts (valid):       
[13:54:49    INFO]    - weights:            1
[13:54:49    INFO] ----------------------------------------------------------------------------------------------------
[13:54:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:55:46    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_77/ANNZ_77_weights/saveTrainOpt_ANNZ_77.txt ...
[13:55:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_77 ... 
[13:55:51    INFO]  - Will gen. input-parameter errors ...
[13:55:53    INFO]  - starting ANNZ::loadReaders() ... 
[13:56:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:00:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:00:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:00:57    INFO]  -----------------------------------------------------------------------------------------------------------
[14:00:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:02:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:02:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:02:13    INFO]  -----------------------------------------------------------------------------------------------------------
[14:02:13    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_77/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:02:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:02:15    INFO]  - will try to derive a bias correction ... 
[14:02:15    INFO]  - will validate that training produced an XML file for later ... 
[14:02:15    INFO]  - starting ANNZ::loadReaders() ... 
[14:02:21    INFO]  - will validate that the training was not a complete failure ... 
[14:02:21    INFO]  - training seems to have been successful! will move on ...
[14:02:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:02:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:02:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:02:27    INFO] ----------------------------------------------------------------------------------------------------
[14:02:27    INFO]  - will book (ANNZ_77_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:02:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:02:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:02:27    INFO]    - weights:            1
[14:02:27    INFO] ----------------------------------------------------------------------------------------------------
[14:02:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:02:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_77 ... 
[14:02:36    INFO]  - Will gen. input-parameter errors ...
[14:02:38    INFO]  - starting ANNZ::loadReaders() ... 
[14:02:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:07:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:07:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:07:41    INFO]  -----------------------------------------------------------------------------------------------------------
[14:07:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:08:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:08:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:08:52    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:53    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_77/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:08:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:08:55    INFO]  - will validate that the bias-correction actually improved the result ...
[14:08:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:08:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_77,
[14:09:01    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_77/plots/
[14:09:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_77/plots output/SPEC_advanced10/regres/train/ANNZ_77/plots_biasCor_before
[14:09:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:09:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_77,
[14:09:17    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_77/plots/
[14:09:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_77/plots output/SPEC_advanced10/regres/train/ANNZ_77/plots_biasCor_after
[14:09:28    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.90095] , after the bias-correction: [0.0432445 , 5.75087] --> will KEEP the correction !

(14:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m78[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:09 INFO) 
[14:09:32    INFO]  -----------------------------------------------------
[14:09:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:09:32    INFO]  -----------------------------------------------------------------------------------------------------------
[14:09:33    INFO]  - starting ANNZ::Init()  ... 
[14:09:34    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_78/saveOpt.txt ...
[14:09:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:09:40    INFO] ----------------------------------------------------------------------------------------------------
[14:09:40    INFO]  - will book (ANNZ_78) method(BDT) with options: :NTrees=470:BoostType=AdaBoost:VarTransform=N
[14:09:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:09:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:09:40    INFO]      cuts (train):        ,
[14:09:40    INFO]      cuts (valid):       
[14:09:40    INFO]    - weights:            1
[14:09:40    INFO] ----------------------------------------------------------------------------------------------------
[14:09:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:10:08    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_78/ANNZ_78_weights/saveTrainOpt_ANNZ_78.txt ...
[14:10:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_78 ... 
[14:10:10    INFO]  - Will gen. input-parameter errors ...
[14:10:12    INFO]  - starting ANNZ::loadReaders() ... 
[14:10:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:12:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:12:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:12:00    INFO]  -----------------------------------------------------------------------------------------------------------
[14:12:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:12:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:12:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:12:26    INFO]  -----------------------------------------------------------------------------------------------------------
[14:12:26    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_78/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:12:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:12:27    INFO]  - will try to derive a bias correction ... 
[14:12:27    INFO]  - will validate that training produced an XML file for later ... 
[14:12:27    INFO]  - starting ANNZ::loadReaders() ... 
[14:12:29    INFO]  - will validate that the training was not a complete failure ... 
[14:12:29    INFO]  - training seems to have been successful! will move on ...
[14:12:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:12:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:12:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:12:33    INFO] ----------------------------------------------------------------------------------------------------
[14:12:33    INFO]  - will book (ANNZ_78_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:12:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:12:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:12:33    INFO]    - weights:            1
[14:12:33    INFO] ----------------------------------------------------------------------------------------------------
[14:12:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:12:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_78 ... 
[14:12:41    INFO]  - Will gen. input-parameter errors ...
[14:12:43    INFO]  - starting ANNZ::loadReaders() ... 
[14:12:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:14:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:14:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:14:28    INFO]  -----------------------------------------------------------------------------------------------------------
[14:14:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:14:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:14:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:14:52    INFO]  -----------------------------------------------------------------------------------------------------------
[14:14:52    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_78/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:14:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:14:54    INFO]  - will validate that the bias-correction actually improved the result ...
[14:14:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:14:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_78,
Warning in <Fit>: Fit data is empty 
[14:14:59    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_78/plots/
[14:15:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_78/plots output/SPEC_advanced10/regres/train/ANNZ_78/plots_biasCor_before
[14:15:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:15:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_78,
Warning in <Fit>: Fit data is empty 
[14:15:15    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_78/plots/
[14:15:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_78/plots output/SPEC_advanced10/regres/train/ANNZ_78/plots_biasCor_after
[14:15:26    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12581] , after the bias-correction: [0.0494062 , 5.98524] --> will KEEP the correction !

(14:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m79[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:15 INFO) 
[14:15:30    INFO]  -----------------------------------------------------
[14:15:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:15:30    INFO]  -----------------------------------------------------------------------------------------------------------
[14:15:30    INFO]  - starting ANNZ::Init()  ... 
[14:15:31    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_79/saveOpt.txt ...
[14:15:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:15:37    INFO] ----------------------------------------------------------------------------------------------------
[14:15:37    INFO]  - will book (ANNZ_79) method(BDT) with options: :NTrees=280:BoostType=Bagging:VarTransform=N,P
[14:15:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:15:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:15:37    INFO]      cuts (train):        ,
[14:15:37    INFO]      cuts (valid):       
[14:15:37    INFO]    - weights:            1
[14:15:37    INFO] ----------------------------------------------------------------------------------------------------
[14:15:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:16:05    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_79/ANNZ_79_weights/saveTrainOpt_ANNZ_79.txt ...
[14:16:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_79 ... 
[14:16:07    INFO]  - Will gen. input-parameter errors ...
[14:16:09    INFO]  - starting ANNZ::loadReaders() ... 
[14:16:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:18:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:18:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:18:23    INFO]  -----------------------------------------------------------------------------------------------------------
[14:18:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:18:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:18:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:18:55    INFO]  -----------------------------------------------------------------------------------------------------------
[14:18:55    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_79/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:18:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:18:57    INFO]  - will try to derive a bias correction ... 
[14:18:57    INFO]  - will validate that training produced an XML file for later ... 
[14:18:57    INFO]  - starting ANNZ::loadReaders() ... 
[14:19:00    INFO]  - will validate that the training was not a complete failure ... 
[14:19:00    INFO]  - training seems to have been successful! will move on ...
[14:19:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:19:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:19:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:19:04    INFO] ----------------------------------------------------------------------------------------------------
[14:19:04    INFO]  - will book (ANNZ_79_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:19:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:19:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:19:04    INFO]    - weights:            1
[14:19:04    INFO] ----------------------------------------------------------------------------------------------------
[14:19:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:19:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_79 ... 
[14:19:12    INFO]  - Will gen. input-parameter errors ...
[14:19:14    INFO]  - starting ANNZ::loadReaders() ... 
[14:19:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:21:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:21:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:21:30    INFO]  -----------------------------------------------------------------------------------------------------------
[14:21:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:22:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:22:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:22:01    INFO]  -----------------------------------------------------------------------------------------------------------
[14:22:01    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_79/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:22:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:22:03    INFO]  - will validate that the bias-correction actually improved the result ...
[14:22:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:22:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_79,
[14:22:08    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_79/plots/
[14:22:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_79/plots output/SPEC_advanced10/regres/train/ANNZ_79/plots_biasCor_before
[14:22:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:22:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_79,
[14:22:24    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_79/plots/
[14:22:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_79/plots output/SPEC_advanced10/regres/train/ANNZ_79/plots_biasCor_after
[14:22:35    INFO]  - Got original [KS-test,N_poiss]: [0.093883 , 6.85735] , after the bias-correction: [0.041564 , 5.42448] --> will KEEP the correction !

(14:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m80[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:22 INFO) 
[14:22:39    INFO]  -----------------------------------------------------
[14:22:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:22:39    INFO]  -----------------------------------------------------------------------------------------------------------
[14:22:39    INFO]  - starting ANNZ::Init()  ... 
[14:22:40    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_80/saveOpt.txt ...
[14:22:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:22:46    INFO] ----------------------------------------------------------------------------------------------------
[14:22:46    INFO]  - will book (ANNZ_80) method(BDT) with options: :NTrees=350:BoostType=AdaBoost:VarTransform=N,P
[14:22:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:22:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:22:46    INFO]      cuts (train):        ,
[14:22:46    INFO]      cuts (valid):       
[14:22:46    INFO]    - weights:            1
[14:22:46    INFO] ----------------------------------------------------------------------------------------------------
[14:22:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:23:07    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_80/ANNZ_80_weights/saveTrainOpt_ANNZ_80.txt ...
[14:23:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_80 ... 
[14:23:08    INFO]  - Will gen. input-parameter errors ...
[14:23:10    INFO]  - starting ANNZ::loadReaders() ... 
[14:23:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:25:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:25:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:25:13    INFO]  -----------------------------------------------------------------------------------------------------------
[14:25:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:25:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:25:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:25:45    INFO]  -----------------------------------------------------------------------------------------------------------
[14:25:45    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_80/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:25:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:25:46    INFO]  - will try to derive a bias correction ... 
[14:25:46    INFO]  - will validate that training produced an XML file for later ... 
[14:25:46    INFO]  - starting ANNZ::loadReaders() ... 
[14:25:47    INFO]  - will validate that the training was not a complete failure ... 
[14:25:47    INFO]  - training seems to have been successful! will move on ...
[14:25:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:25:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:25:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:25:51    INFO] ----------------------------------------------------------------------------------------------------
[14:25:51    INFO]  - will book (ANNZ_80_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:25:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:25:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:25:51    INFO]    - weights:            1
[14:25:51    INFO] ----------------------------------------------------------------------------------------------------
[14:25:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:25:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_80 ... 
[14:25:58    INFO]  - Will gen. input-parameter errors ...
[14:25:59    INFO]  - starting ANNZ::loadReaders() ... 
[14:26:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:28:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:28:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:28:18    INFO]  -----------------------------------------------------------------------------------------------------------
[14:28:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:28:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:28:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:28:58    INFO]  -----------------------------------------------------------------------------------------------------------
[14:28:58    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_80/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:28:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:28:59    INFO]  - will validate that the bias-correction actually improved the result ...
[14:28:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:28:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_80,
Warning in <Fit>: Fit data is empty 
[14:29:05    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_80/plots/
[14:29:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_80/plots output/SPEC_advanced10/regres/train/ANNZ_80/plots_biasCor_before
[14:29:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:29:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_80,
[14:29:21    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_80/plots/
[14:29:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_80/plots output/SPEC_advanced10/regres/train/ANNZ_80/plots_biasCor_after
[14:29:32    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40261] , after the bias-correction: [0.0448129 , 5.80583] --> will KEEP the correction !

(14:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m81[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:29 INFO) 
[14:29:35    INFO]  -----------------------------------------------------
[14:29:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:29:35    INFO]  -----------------------------------------------------------------------------------------------------------
[14:29:36    INFO]  - starting ANNZ::Init()  ... 
[14:29:37    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_81/saveOpt.txt ...
[14:29:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:29:43    INFO] ----------------------------------------------------------------------------------------------------
[14:29:43    INFO]  - will book (ANNZ_81) method(BDT) with options: :NTrees=290:BoostType=Bagging:VarTransform=N,P
[14:29:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:29:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:29:43    INFO]      cuts (train):        ,
[14:29:43    INFO]      cuts (valid):       
[14:29:43    INFO]    - weights:            1
[14:29:43    INFO] ----------------------------------------------------------------------------------------------------
[14:29:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:30:12    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_81/ANNZ_81_weights/saveTrainOpt_ANNZ_81.txt ...
[14:30:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_81 ... 
[14:30:15    INFO]  - Will gen. input-parameter errors ...
[14:30:16    INFO]  - starting ANNZ::loadReaders() ... 
[14:30:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:32:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:32:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:32:43    INFO]  -----------------------------------------------------------------------------------------------------------
[14:32:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:33:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:33:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:33:17    INFO]  -----------------------------------------------------------------------------------------------------------
[14:33:18    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_81/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:33:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:33:19    INFO]  - will try to derive a bias correction ... 
[14:33:19    INFO]  - will validate that training produced an XML file for later ... 
[14:33:19    INFO]  - starting ANNZ::loadReaders() ... 
[14:33:22    INFO]  - will validate that the training was not a complete failure ... 
[14:33:22    INFO]  - training seems to have been successful! will move on ...
[14:33:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:33:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:33:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:33:27    INFO] ----------------------------------------------------------------------------------------------------
[14:33:27    INFO]  - will book (ANNZ_81_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:33:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:33:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:33:27    INFO]    - weights:            1
[14:33:27    INFO] ----------------------------------------------------------------------------------------------------
[14:33:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:33:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_81 ... 
[14:33:34    INFO]  - Will gen. input-parameter errors ...
[14:33:36    INFO]  - starting ANNZ::loadReaders() ... 
[14:33:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:36:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:36:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:36:03    INFO]  -----------------------------------------------------------------------------------------------------------
[14:36:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:36:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:36:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:36:35    INFO]  -----------------------------------------------------------------------------------------------------------
[14:36:36    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_81/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:36:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:36:37    INFO]  - will validate that the bias-correction actually improved the result ...
[14:36:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:36:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_81,
[14:36:43    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_81/plots/
[14:36:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_81/plots output/SPEC_advanced10/regres/train/ANNZ_81/plots_biasCor_before
[14:36:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:36:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_81,
[14:36:59    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_81/plots/
[14:37:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_81/plots output/SPEC_advanced10/regres/train/ANNZ_81/plots_biasCor_after
[14:37:11    INFO]  - Got original [KS-test,N_poiss]: [0.093659 , 6.82626] , after the bias-correction: [0.0432445 , 5.54732] --> will KEEP the correction !

(14:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m82[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:37 INFO) 
[14:37:15    INFO]  -----------------------------------------------------
[14:37:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:37:15    INFO]  -----------------------------------------------------------------------------------------------------------
[14:37:16    INFO]  - starting ANNZ::Init()  ... 
[14:37:17    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_82/saveOpt.txt ...
[14:37:22    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:37:22    INFO] ----------------------------------------------------------------------------------------------------
[14:37:22    INFO]  - will book (ANNZ_82) method(BDT) with options: :NTrees=250:BoostType=Bagging:VarTransform=N,P
[14:37:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:37:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:37:22    INFO]      cuts (train):        ,
[14:37:22    INFO]      cuts (valid):       
[14:37:22    INFO]    - weights:            1
[14:37:22    INFO] ----------------------------------------------------------------------------------------------------
[14:37:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:37:50    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_82/ANNZ_82_weights/saveTrainOpt_ANNZ_82.txt ...
[14:37:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_82 ... 
[14:37:53    INFO]  - Will gen. input-parameter errors ...
[14:37:55    INFO]  - starting ANNZ::loadReaders() ... 
[14:38:01    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:40:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:40:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:40:08    INFO]  -----------------------------------------------------------------------------------------------------------
[14:40:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:40:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:40:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:40:40    INFO]  -----------------------------------------------------------------------------------------------------------
[14:40:40    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_82/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:40:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:40:41    INFO]  - will try to derive a bias correction ... 
[14:40:41    INFO]  - will validate that training produced an XML file for later ... 
[14:40:41    INFO]  - starting ANNZ::loadReaders() ... 
[14:40:44    INFO]  - will validate that the training was not a complete failure ... 
[14:40:44    INFO]  - training seems to have been successful! will move on ...
[14:40:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:40:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:40:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:40:49    INFO] ----------------------------------------------------------------------------------------------------
[14:40:49    INFO]  - will book (ANNZ_82_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:40:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:40:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:40:49    INFO]    - weights:            1
[14:40:49    INFO] ----------------------------------------------------------------------------------------------------
[14:40:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:40:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_82 ... 
[14:40:57    INFO]  - Will gen. input-parameter errors ...
[14:40:59    INFO]  - starting ANNZ::loadReaders() ... 
[14:41:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:43:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:43:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:43:03    INFO]  -----------------------------------------------------------------------------------------------------------
[14:43:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:43:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:43:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:43:33    INFO]  -----------------------------------------------------------------------------------------------------------
[14:43:33    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_82/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:43:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:43:35    INFO]  - will validate that the bias-correction actually improved the result ...
[14:43:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:43:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_82,
[14:43:40    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_82/plots/
[14:43:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_82/plots output/SPEC_advanced10/regres/train/ANNZ_82/plots_biasCor_before
[14:43:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:43:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_82,
[14:43:57    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_82/plots/
[14:44:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_82/plots output/SPEC_advanced10/regres/train/ANNZ_82/plots_biasCor_after
[14:44:09    INFO]  - Got original [KS-test,N_poiss]: [0.0942191 , 6.79833] , after the bias-correction: [0.0434685 , 5.53739] --> will KEEP the correction !

(14:44 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:44 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m83[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:44 INFO) 
[14:44:12    INFO]  -----------------------------------------------------
[14:44:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:44:12    INFO]  -----------------------------------------------------------------------------------------------------------
[14:44:13    INFO]  - starting ANNZ::Init()  ... 
[14:44:14    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_83/saveOpt.txt ...
[14:44:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:44:20    INFO] ----------------------------------------------------------------------------------------------------
[14:44:20    INFO]  - will book (ANNZ_83) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N,P
[14:44:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:44:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:44:20    INFO]      cuts (train):        ,
[14:44:20    INFO]      cuts (valid):       
[14:44:20    INFO]    - weights:            1
[14:44:20    INFO] ----------------------------------------------------------------------------------------------------
[14:44:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:44:51    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_83/ANNZ_83_weights/saveTrainOpt_ANNZ_83.txt ...
[14:44:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_83 ... 
[14:44:53    INFO]  - Will gen. input-parameter errors ...
[14:44:54    INFO]  - starting ANNZ::loadReaders() ... 
[14:45:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:47:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:47:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:47:51    INFO]  -----------------------------------------------------------------------------------------------------------
[14:47:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:48:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:48:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:48:31    INFO]  -----------------------------------------------------------------------------------------------------------
[14:48:31    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_83/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:48:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:48:32    INFO]  - will try to derive a bias correction ... 
[14:48:32    INFO]  - will validate that training produced an XML file for later ... 
[14:48:32    INFO]  - starting ANNZ::loadReaders() ... 
[14:48:34    INFO]  - will validate that the training was not a complete failure ... 
[14:48:34    INFO]  - training seems to have been successful! will move on ...
[14:48:34    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:48:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:48:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:48:38    INFO] ----------------------------------------------------------------------------------------------------
[14:48:38    INFO]  - will book (ANNZ_83_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:48:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:48:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:48:38    INFO]    - weights:            1
[14:48:38    INFO] ----------------------------------------------------------------------------------------------------
[14:48:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:48:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_83 ... 
[14:48:45    INFO]  - Will gen. input-parameter errors ...
[14:48:47    INFO]  - starting ANNZ::loadReaders() ... 
[14:48:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:51:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:51:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:51:31    INFO]  -----------------------------------------------------------------------------------------------------------
[14:51:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:52:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:52:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:52:12    INFO]  -----------------------------------------------------------------------------------------------------------
[14:52:12    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_83/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:52:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:52:13    INFO]  - will validate that the bias-correction actually improved the result ...
[14:52:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:52:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_83,
[14:52:19    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_83/plots/
[14:52:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_83/plots output/SPEC_advanced10/regres/train/ANNZ_83/plots_biasCor_before
[14:52:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:52:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_83,
Warning in <Fit>: Fit data is empty 
[14:52:36    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_83/plots/
[14:52:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_83/plots output/SPEC_advanced10/regres/train/ANNZ_83/plots_biasCor_after
[14:52:48    INFO]  - Got original [KS-test,N_poiss]: [0.101501 , 6.43426] , after the bias-correction: [0.0441408 , 5.72005] --> will KEEP the correction !

(14:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m84[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:52 INFO) 
[14:52:52    INFO]  -----------------------------------------------------
[14:52:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:52:52    INFO]  -----------------------------------------------------------------------------------------------------------
[14:52:52    INFO]  - starting ANNZ::Init()  ... 
[14:52:53    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_84/saveOpt.txt ...
[14:52:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:52:59    INFO] ----------------------------------------------------------------------------------------------------
[14:52:59    INFO]  - will book (ANNZ_84) method(BDT) with options: :NTrees=330:BoostType=AdaBoost:VarTransform=N,P
[14:52:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:52:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:52:59    INFO]      cuts (train):        ,
[14:52:59    INFO]      cuts (valid):       
[14:52:59    INFO]    - weights:            1
[14:52:59    INFO] ----------------------------------------------------------------------------------------------------
[14:53:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:53:21    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_84/ANNZ_84_weights/saveTrainOpt_ANNZ_84.txt ...
[14:53:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_84 ... 
[14:53:22    INFO]  - Will gen. input-parameter errors ...
[14:53:24    INFO]  - starting ANNZ::loadReaders() ... 
[14:53:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:55:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:55:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:55:35    INFO]  -----------------------------------------------------------------------------------------------------------
[14:55:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:56:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:56:05    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:56:05    INFO]  -----------------------------------------------------------------------------------------------------------
[14:56:06    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_84/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:56:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:56:07    INFO]  - will try to derive a bias correction ... 
[14:56:07    INFO]  - will validate that training produced an XML file for later ... 
[14:56:07    INFO]  - starting ANNZ::loadReaders() ... 
[14:56:08    INFO]  - will validate that the training was not a complete failure ... 
[14:56:08    INFO]  - training seems to have been successful! will move on ...
[14:56:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:56:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:56:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:56:12    INFO] ----------------------------------------------------------------------------------------------------
[14:56:12    INFO]  - will book (ANNZ_84_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:56:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:56:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:56:12    INFO]    - weights:            1
[14:56:12    INFO] ----------------------------------------------------------------------------------------------------
[14:56:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:56:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_84 ... 
[14:56:19    INFO]  - Will gen. input-parameter errors ...
[14:56:20    INFO]  - starting ANNZ::loadReaders() ... 
[14:56:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[14:58:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:58:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:58:48    INFO]  -----------------------------------------------------------------------------------------------------------
[14:58:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[14:59:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:59:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:59:24    INFO]  -----------------------------------------------------------------------------------------------------------
[14:59:24    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_84/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:59:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:59:25    INFO]  - will validate that the bias-correction actually improved the result ...
[14:59:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:59:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_84,
Warning in <Fit>: Fit data is empty 
[14:59:31    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_84/plots/
[14:59:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_84/plots output/SPEC_advanced10/regres/train/ANNZ_84/plots_biasCor_before
[14:59:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:59:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_84,
Warning in <Fit>: Fit data is empty 
[14:59:47    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_84/plots/
[14:59:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_84/plots output/SPEC_advanced10/regres/train/ANNZ_84/plots_biasCor_after
[14:59:59    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40538] , after the bias-correction: [0.0435806 , 5.8054] --> will KEEP the correction !

(15:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m85[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:00 INFO) 
[15:00:02    INFO]  -----------------------------------------------------
[15:00:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:00:02    INFO]  -----------------------------------------------------------------------------------------------------------
[15:00:03    INFO]  - starting ANNZ::Init()  ... 
[15:00:04    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_85/saveOpt.txt ...
[15:00:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:00:10    INFO] ----------------------------------------------------------------------------------------------------
[15:00:10    INFO]  - will book (ANNZ_85) method(BDT) with options: :NTrees=450:BoostType=Bagging:VarTransform=N
[15:00:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:00:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:00:10    INFO]      cuts (train):        ,
[15:00:10    INFO]      cuts (valid):       
[15:00:10    INFO]    - weights:            1
[15:00:10    INFO] ----------------------------------------------------------------------------------------------------
[15:00:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:00:57    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_85/ANNZ_85_weights/saveTrainOpt_ANNZ_85.txt ...
[15:01:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_85 ... 
[15:01:01    INFO]  - Will gen. input-parameter errors ...
[15:01:03    INFO]  - starting ANNZ::loadReaders() ... 
[15:01:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:03:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:03:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:03:44    INFO]  -----------------------------------------------------------------------------------------------------------
[15:03:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:04:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:04:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:04:18    INFO]  -----------------------------------------------------------------------------------------------------------
[15:04:19    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_85/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:04:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:04:21    INFO]  - will try to derive a bias correction ... 
[15:04:21    INFO]  - will validate that training produced an XML file for later ... 
[15:04:21    INFO]  - starting ANNZ::loadReaders() ... 
[15:04:25    INFO]  - will validate that the training was not a complete failure ... 
[15:04:26    INFO]  - training seems to have been successful! will move on ...
[15:04:26    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:04:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:04:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:04:31    INFO] ----------------------------------------------------------------------------------------------------
[15:04:31    INFO]  - will book (ANNZ_85_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:04:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:04:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:04:31    INFO]    - weights:            1
[15:04:31    INFO] ----------------------------------------------------------------------------------------------------
[15:04:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:04:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_85 ... 
[15:04:40    INFO]  - Will gen. input-parameter errors ...
[15:04:42    INFO]  - starting ANNZ::loadReaders() ... 
[15:04:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:07:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:07:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:07:31    INFO]  -----------------------------------------------------------------------------------------------------------
[15:07:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:08:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:08:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:08:07    INFO]  -----------------------------------------------------------------------------------------------------------
[15:08:07    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_85/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:08:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:08:09    INFO]  - will validate that the bias-correction actually improved the result ...
[15:08:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:08:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_85,
[15:08:14    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_85/plots/
[15:08:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_85/plots output/SPEC_advanced10/regres/train/ANNZ_85/plots_biasCor_before
[15:08:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:08:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_85,
[15:08:30    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_85/plots/
[15:08:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_85/plots output/SPEC_advanced10/regres/train/ANNZ_85/plots_biasCor_after
[15:08:42    INFO]  - Got original [KS-test,N_poiss]: [0.0845844 , 6.68592] , after the bias-correction: [0.0457092 , 5.73646] --> will KEEP the correction !

(15:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m86[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:08 INFO) 
[15:08:46    INFO]  -----------------------------------------------------
[15:08:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:08:46    INFO]  -----------------------------------------------------------------------------------------------------------
[15:08:46    INFO]  - starting ANNZ::Init()  ... 
[15:08:47    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_86/saveOpt.txt ...
[15:08:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:08:53    INFO] ----------------------------------------------------------------------------------------------------
[15:08:53    INFO]  - will book (ANNZ_86) method(BDT) with options: :NTrees=430:BoostType=AdaBoost:VarTransform=N,P
[15:08:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:08:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:08:53    INFO]      cuts (train):        ,
[15:08:53    INFO]      cuts (valid):       
[15:08:53    INFO]    - weights:            1
[15:08:53    INFO] ----------------------------------------------------------------------------------------------------
[15:08:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:09:16    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_86/ANNZ_86_weights/saveTrainOpt_ANNZ_86.txt ...
[15:09:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_86 ... 
[15:09:18    INFO]  - Will gen. input-parameter errors ...
[15:09:20    INFO]  - starting ANNZ::loadReaders() ... 
[15:09:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:11:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:11:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:11:40    INFO]  -----------------------------------------------------------------------------------------------------------
[15:11:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:12:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:12:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:12:15    INFO]  -----------------------------------------------------------------------------------------------------------
[15:12:15    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_86/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:12:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:12:16    INFO]  - will try to derive a bias correction ... 
[15:12:16    INFO]  - will validate that training produced an XML file for later ... 
[15:12:16    INFO]  - starting ANNZ::loadReaders() ... 
[15:12:18    INFO]  - will validate that the training was not a complete failure ... 
[15:12:18    INFO]  - training seems to have been successful! will move on ...
[15:12:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:12:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:12:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:12:22    INFO] ----------------------------------------------------------------------------------------------------
[15:12:22    INFO]  - will book (ANNZ_86_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:12:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:12:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:12:22    INFO]    - weights:            1
[15:12:22    INFO] ----------------------------------------------------------------------------------------------------
[15:12:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:12:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_86 ... 
[15:12:29    INFO]  - Will gen. input-parameter errors ...
[15:12:30    INFO]  - starting ANNZ::loadReaders() ... 
[15:12:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:15:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:15:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:15:01    INFO]  -----------------------------------------------------------------------------------------------------------
[15:15:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:15:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:15:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:15:40    INFO]  -----------------------------------------------------------------------------------------------------------
[15:15:40    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_86/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:15:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:15:41    INFO]  - will validate that the bias-correction actually improved the result ...
[15:15:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:15:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_86,
Warning in <Fit>: Fit data is empty 
[15:15:46    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_86/plots/
[15:15:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_86/plots output/SPEC_advanced10/regres/train/ANNZ_86/plots_biasCor_before
[15:15:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:15:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_86,
Warning in <Fit>: Fit data is empty 
[15:16:02    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_86/plots/
[15:16:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_86/plots output/SPEC_advanced10/regres/train/ANNZ_86/plots_biasCor_after
[15:16:14    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40381] , after the bias-correction: [0.0441408 , 5.75862] --> will KEEP the correction !

(15:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m87[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:16 INFO) 
[15:16:17    INFO]  -----------------------------------------------------
[15:16:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:16:17    INFO]  -----------------------------------------------------------------------------------------------------------
[15:16:18    INFO]  - starting ANNZ::Init()  ... 
[15:16:19    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_87/saveOpt.txt ...
[15:16:24    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:16:24    INFO] ----------------------------------------------------------------------------------------------------
[15:16:24    INFO]  - will book (ANNZ_87) method(BDT) with options: :NTrees=340:BoostType=AdaBoostR2:VarTransform=N
[15:16:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:16:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:16:24    INFO]      cuts (train):        ,
[15:16:24    INFO]      cuts (valid):       
[15:16:24    INFO]    - weights:            1
[15:16:24    INFO] ----------------------------------------------------------------------------------------------------
[15:16:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:16:53    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_87/ANNZ_87_weights/saveTrainOpt_ANNZ_87.txt ...
[15:16:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_87 ... 
[15:16:55    INFO]  - Will gen. input-parameter errors ...
[15:16:57    INFO]  - starting ANNZ::loadReaders() ... 
[15:17:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:21:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:21:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:21:17    INFO]  -----------------------------------------------------------------------------------------------------------
[15:21:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:22:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:22:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:22:19    INFO]  -----------------------------------------------------------------------------------------------------------
[15:22:19    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_87/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:22:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:22:20    INFO]  - will try to derive a bias correction ... 
[15:22:20    INFO]  - will validate that training produced an XML file for later ... 
[15:22:20    INFO]  - starting ANNZ::loadReaders() ... 
[15:22:22    INFO]  - will validate that the training was not a complete failure ... 
[15:22:22    INFO]  - training seems to have been successful! will move on ...
[15:22:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:22:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:22:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:22:26    INFO] ----------------------------------------------------------------------------------------------------
[15:22:26    INFO]  - will book (ANNZ_87_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:22:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:22:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:22:26    INFO]    - weights:            1
[15:22:26    INFO] ----------------------------------------------------------------------------------------------------
[15:22:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:22:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_87 ... 
[15:22:33    INFO]  - Will gen. input-parameter errors ...
[15:22:34    INFO]  - starting ANNZ::loadReaders() ... 
[15:22:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:26:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:26:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:26:29    INFO]  -----------------------------------------------------------------------------------------------------------
[15:26:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:27:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:27:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:27:26    INFO]  -----------------------------------------------------------------------------------------------------------
[15:27:26    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_87/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:27:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:27:27    INFO]  - will validate that the bias-correction actually improved the result ...
[15:27:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:27:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_87,
Warning in <Fit>: Fit data is empty 
[15:27:32    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_87/plots/
[15:27:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_87/plots output/SPEC_advanced10/regres/train/ANNZ_87/plots_biasCor_before
[15:27:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:27:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_87,
[15:27:48    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_87/plots/
[15:27:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_87/plots output/SPEC_advanced10/regres/train/ANNZ_87/plots_biasCor_after
[15:27:59    INFO]  - Got original [KS-test,N_poiss]: [0.06229 , 6.57205] , after the bias-correction: [0.0343939 , 5.70948] --> will KEEP the correction !

(15:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m88[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:28 INFO) 
[15:28:02    INFO]  -----------------------------------------------------
[15:28:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:28:02    INFO]  -----------------------------------------------------------------------------------------------------------
[15:28:03    INFO]  - starting ANNZ::Init()  ... 
[15:28:04    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_88/saveOpt.txt ...
[15:28:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:28:10    INFO] ----------------------------------------------------------------------------------------------------
[15:28:10    INFO]  - will book (ANNZ_88) method(BDT) with options: :NTrees=530:BoostType=Bagging:VarTransform=N,P
[15:28:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:28:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:28:10    INFO]      cuts (train):        ,
[15:28:10    INFO]      cuts (valid):       
[15:28:10    INFO]    - weights:            1
[15:28:10    INFO] ----------------------------------------------------------------------------------------------------
[15:28:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:29:02    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_88/ANNZ_88_weights/saveTrainOpt_ANNZ_88.txt ...
[15:29:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_88 ... 
[15:29:07    INFO]  - Will gen. input-parameter errors ...
[15:29:09    INFO]  - starting ANNZ::loadReaders() ... 
[15:29:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:33:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:33:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:33:19    INFO]  -----------------------------------------------------------------------------------------------------------
[15:33:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:34:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:34:20    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:34:20    INFO]  -----------------------------------------------------------------------------------------------------------
[15:34:20    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_88/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:34:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:34:22    INFO]  - will try to derive a bias correction ... 
[15:34:22    INFO]  - will validate that training produced an XML file for later ... 
[15:34:22    INFO]  - starting ANNZ::loadReaders() ... 
[15:34:28    INFO]  - will validate that the training was not a complete failure ... 
[15:34:28    INFO]  - training seems to have been successful! will move on ...
[15:34:28    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:34:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:34:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:34:34    INFO] ----------------------------------------------------------------------------------------------------
[15:34:34    INFO]  - will book (ANNZ_88_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:34:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:34:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:34:34    INFO]    - weights:            1
[15:34:34    INFO] ----------------------------------------------------------------------------------------------------
[15:34:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:34:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_88 ... 
[15:34:42    INFO]  - Will gen. input-parameter errors ...
[15:34:46    INFO]  - starting ANNZ::loadReaders() ... 
[15:34:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:39:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:39:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:39:06    INFO]  -----------------------------------------------------------------------------------------------------------
[15:39:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:40:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:40:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:40:08    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:08    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_88/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:40:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:40:10    INFO]  - will validate that the bias-correction actually improved the result ...
[15:40:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:40:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_88,
[15:40:15    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_88/plots/
[15:40:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_88/plots output/SPEC_advanced10/regres/train/ANNZ_88/plots_biasCor_before
[15:40:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:40:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_88,
[15:40:31    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_88/plots/
[15:40:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_88/plots output/SPEC_advanced10/regres/train/ANNZ_88/plots_biasCor_after
[15:40:42    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.90789] , after the bias-correction: [0.0448129 , 5.83848] --> will KEEP the correction !

(15:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m89[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:40 INFO) 
[15:40:46    INFO]  -----------------------------------------------------
[15:40:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:40:46    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:47    INFO]  - starting ANNZ::Init()  ... 
[15:40:51    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_89/saveOpt.txt ...
[15:40:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:40:56    INFO] ----------------------------------------------------------------------------------------------------
[15:40:56    INFO]  - will book (ANNZ_89) method(BDT) with options: :NTrees=250:BoostType=Bagging:VarTransform=N,P
[15:40:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:40:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:40:56    INFO]      cuts (train):        ,
[15:40:56    INFO]      cuts (valid):       
[15:40:56    INFO]    - weights:            1
[15:40:56    INFO] ----------------------------------------------------------------------------------------------------
[15:40:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:41:21    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_89/ANNZ_89_weights/saveTrainOpt_ANNZ_89.txt ...
[15:41:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_89 ... 
[15:41:23    INFO]  - Will gen. input-parameter errors ...
[15:41:25    INFO]  - starting ANNZ::loadReaders() ... 
[15:41:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:43:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:43:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:43:22    INFO]  -----------------------------------------------------------------------------------------------------------
[15:43:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:43:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:43:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:43:50    INFO]  -----------------------------------------------------------------------------------------------------------
[15:43:50    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_89/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:43:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:43:51    INFO]  - will try to derive a bias correction ... 
[15:43:51    INFO]  - will validate that training produced an XML file for later ... 
[15:43:51    INFO]  - starting ANNZ::loadReaders() ... 
[15:43:53    INFO]  - will validate that the training was not a complete failure ... 
[15:43:53    INFO]  - training seems to have been successful! will move on ...
[15:43:53    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:43:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:43:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:43:58    INFO] ----------------------------------------------------------------------------------------------------
[15:43:58    INFO]  - will book (ANNZ_89_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:43:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:43:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:43:58    INFO]    - weights:            1
[15:43:58    INFO] ----------------------------------------------------------------------------------------------------
[15:43:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:44:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_89 ... 
[15:44:05    INFO]  - Will gen. input-parameter errors ...
[15:44:06    INFO]  - starting ANNZ::loadReaders() ... 
[15:44:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[15:45:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:45:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:45:58    INFO]  -----------------------------------------------------------------------------------------------------------
[15:45:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[15:46:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:46:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:46:24    INFO]  -----------------------------------------------------------------------------------------------------------
[15:46:24    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_89/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:46:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:46:26    INFO]  - will validate that the bias-correction actually improved the result ...
[15:46:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:46:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_89,
[15:46:31    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_89/plots/
[15:46:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_89/plots output/SPEC_advanced10/regres/train/ANNZ_89/plots_biasCor_before
[15:46:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:46:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_89,
[15:46:46    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_89/plots/
[15:46:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_89/plots output/SPEC_advanced10/regres/train/ANNZ_89/plots_biasCor_after
[15:46:57    INFO]  - Got original [KS-test,N_poiss]: [0.0942191 , 6.79833] , after the bias-correction: [0.0434685 , 5.53739] --> will KEEP the correction !

(15:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m90[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=670:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:47 INFO) 
[15:47:00    INFO]  -----------------------------------------------------
[15:47:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:47:00    INFO]  -----------------------------------------------------------------------------------------------------------
[15:47:01    INFO]  - starting ANNZ::Init()  ... 
[15:47:02    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_90/saveOpt.txt ...
[15:47:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:47:07    INFO] ----------------------------------------------------------------------------------------------------
[15:47:07    INFO]  - will book (ANNZ_90) method(BDT) with options: :NTrees=670:BoostType=AdaBoostR2:VarTransform=N,P
[15:47:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:47:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:47:07    INFO]      cuts (train):        ,
[15:47:07    INFO]      cuts (valid):       
[15:47:07    INFO]    - weights:            1
[15:47:07    INFO] ----------------------------------------------------------------------------------------------------
[15:47:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:48:12    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_90/ANNZ_90_weights/saveTrainOpt_ANNZ_90.txt ...
[15:48:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_90 ... 
[15:48:17    INFO]  - Will gen. input-parameter errors ...
[15:48:19    INFO]  - starting ANNZ::loadReaders() ... 
[15:48:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:03:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:03:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:03:48    INFO]  -----------------------------------------------------------------------------------------------------------
[16:03:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:07:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:07:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:07:34    INFO]  -----------------------------------------------------------------------------------------------------------
[16:07:34    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_90/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:07:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:07:36    INFO]  - will try to derive a bias correction ... 
[16:07:36    INFO]  - will validate that training produced an XML file for later ... 
[16:07:36    INFO]  - starting ANNZ::loadReaders() ... 
[16:07:41    INFO]  - will validate that the training was not a complete failure ... 
[16:07:41    INFO]  - training seems to have been successful! will move on ...
[16:07:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:07:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:07:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:07:50    INFO] ----------------------------------------------------------------------------------------------------
[16:07:50    INFO]  - will book (ANNZ_90_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:07:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:07:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:07:50    INFO]    - weights:            1
[16:07:50    INFO] ----------------------------------------------------------------------------------------------------
[16:07:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:07:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_90 ... 
[16:07:58    INFO]  - Will gen. input-parameter errors ...
[16:08:00    INFO]  - starting ANNZ::loadReaders() ... 
[16:08:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:23:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:23:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:23:18    INFO]  -----------------------------------------------------------------------------------------------------------
[16:23:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:27:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:27:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:27:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:27:02    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_90/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:27:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:27:04    INFO]  - will validate that the bias-correction actually improved the result ...
[16:27:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:27:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_90,
[16:27:10    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_90/plots/
[16:27:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_90/plots output/SPEC_advanced10/regres/train/ANNZ_90/plots_biasCor_before
[16:27:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:27:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_90,
[16:27:25    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_90/plots/
[16:27:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_90/plots output/SPEC_advanced10/regres/train/ANNZ_90/plots_biasCor_after
[16:27:36    INFO]  - Got original [KS-test,N_poiss]: [0.06946 , 6.5316] , after the bias-correction: [0.0309209 , 5.53618] --> will KEEP the correction !

(16:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m91[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:27 INFO) 
[16:27:40    INFO]  -----------------------------------------------------
[16:27:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:27:40    INFO]  -----------------------------------------------------------------------------------------------------------
[16:27:41    INFO]  - starting ANNZ::Init()  ... 
[16:27:45    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_91/saveOpt.txt ...
[16:27:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:27:50    INFO] ----------------------------------------------------------------------------------------------------
[16:27:50    INFO]  - will book (ANNZ_91) method(BDT) with options: :NTrees=430:BoostType=AdaBoost:VarTransform=N,P
[16:27:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:27:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:27:50    INFO]      cuts (train):        ,
[16:27:50    INFO]      cuts (valid):       
[16:27:50    INFO]    - weights:            1
[16:27:50    INFO] ----------------------------------------------------------------------------------------------------
[16:27:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:28:12    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_91/ANNZ_91_weights/saveTrainOpt_ANNZ_91.txt ...
[16:28:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_91 ... 
[16:28:14    INFO]  - Will gen. input-parameter errors ...
[16:28:16    INFO]  - starting ANNZ::loadReaders() ... 
[16:28:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:30:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:30:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:30:26    INFO]  -----------------------------------------------------------------------------------------------------------
[16:30:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:30:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:30:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:30:58    INFO]  -----------------------------------------------------------------------------------------------------------
[16:30:58    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_91/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:30:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:30:59    INFO]  - will try to derive a bias correction ... 
[16:30:59    INFO]  - will validate that training produced an XML file for later ... 
[16:30:59    INFO]  - starting ANNZ::loadReaders() ... 
[16:31:00    INFO]  - will validate that the training was not a complete failure ... 
[16:31:00    INFO]  - training seems to have been successful! will move on ...
[16:31:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:31:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:31:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:31:04    INFO] ----------------------------------------------------------------------------------------------------
[16:31:04    INFO]  - will book (ANNZ_91_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:31:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:31:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:31:04    INFO]    - weights:            1
[16:31:04    INFO] ----------------------------------------------------------------------------------------------------
[16:31:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:31:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_91 ... 
[16:31:10    INFO]  - Will gen. input-parameter errors ...
[16:31:12    INFO]  - starting ANNZ::loadReaders() ... 
[16:31:16    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:33:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:33:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:33:30    INFO]  -----------------------------------------------------------------------------------------------------------
[16:33:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:34:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:34:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:34:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:34:03    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_91/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:34:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:34:04    INFO]  - will validate that the bias-correction actually improved the result ...
[16:34:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:34:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_91,
Warning in <Fit>: Fit data is empty 
[16:34:09    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_91/plots/
[16:34:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_91/plots output/SPEC_advanced10/regres/train/ANNZ_91/plots_biasCor_before
[16:34:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:34:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_91,
Warning in <Fit>: Fit data is empty 
[16:34:25    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_91/plots/
[16:34:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_91/plots output/SPEC_advanced10/regres/train/ANNZ_91/plots_biasCor_after
[16:34:35    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40381] , after the bias-correction: [0.0441408 , 5.75862] --> will KEEP the correction !

(16:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m92[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=970:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:34 INFO) 
[16:34:39    INFO]  -----------------------------------------------------
[16:34:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:34:39    INFO]  -----------------------------------------------------------------------------------------------------------
[16:34:39    INFO]  - starting ANNZ::Init()  ... 
[16:34:41    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_92/saveOpt.txt ...
[16:34:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:34:46    INFO] ----------------------------------------------------------------------------------------------------
[16:34:46    INFO]  - will book (ANNZ_92) method(BDT) with options: :NTrees=970:BoostType=AdaBoost:VarTransform=N,P
[16:34:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:34:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:34:46    INFO]      cuts (train):        ,
[16:34:46    INFO]      cuts (valid):       
[16:34:46    INFO]    - weights:            1
[16:34:46    INFO] ----------------------------------------------------------------------------------------------------
[16:34:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:35:31    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_92/ANNZ_92_weights/saveTrainOpt_ANNZ_92.txt ...
[16:35:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_92 ... 
[16:35:34    INFO]  - Will gen. input-parameter errors ...
[16:35:36    INFO]  - starting ANNZ::loadReaders() ... 
[16:35:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:41:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:41:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:41:21    INFO]  -----------------------------------------------------------------------------------------------------------
[16:41:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:42:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:42:44    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:44    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_92/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:42:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:42:46    INFO]  - will try to derive a bias correction ... 
[16:42:46    INFO]  - will validate that training produced an XML file for later ... 
[16:42:46    INFO]  - starting ANNZ::loadReaders() ... 
[16:42:48    INFO]  - will validate that the training was not a complete failure ... 
[16:42:48    INFO]  - training seems to have been successful! will move on ...
[16:42:48    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:42:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:42:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:42:56    INFO] ----------------------------------------------------------------------------------------------------
[16:42:56    INFO]  - will book (ANNZ_92_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:42:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:42:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:42:56    INFO]    - weights:            1
[16:42:56    INFO] ----------------------------------------------------------------------------------------------------
[16:42:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:43:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_92 ... 
[16:43:03    INFO]  - Will gen. input-parameter errors ...
[16:43:05    INFO]  - starting ANNZ::loadReaders() ... 
[16:43:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:46:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:46:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:46:17    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:47:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:47:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:47:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:47:03    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_92/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:47:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:47:04    INFO]  - will validate that the bias-correction actually improved the result ...
[16:47:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:47:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_92,
[16:47:10    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_92/plots/
[16:47:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_92/plots output/SPEC_advanced10/regres/train/ANNZ_92/plots_biasCor_before
[16:47:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:47:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_92,
[16:47:25    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_92/plots/
[16:47:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_92/plots output/SPEC_advanced10/regres/train/ANNZ_92/plots_biasCor_after
[16:47:36    INFO]  - Got original [KS-test,N_poiss]: [0.101837 , 6.44297] , after the bias-correction: [0.0445889 , 5.67693] --> will KEEP the correction !

(16:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m93[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:47 INFO) 
[16:47:40    INFO]  -----------------------------------------------------
[16:47:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:47:40    INFO]  -----------------------------------------------------------------------------------------------------------
[16:47:40    INFO]  - starting ANNZ::Init()  ... 
[16:47:42    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_93/saveOpt.txt ...
[16:47:47    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:47:47    INFO] ----------------------------------------------------------------------------------------------------
[16:47:47    INFO]  - will book (ANNZ_93) method(BDT) with options: :NTrees=310:BoostType=AdaBoostR2:VarTransform=N
[16:47:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:47:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:47:47    INFO]      cuts (train):        ,
[16:47:47    INFO]      cuts (valid):       
[16:47:47    INFO]    - weights:            1
[16:47:47    INFO] ----------------------------------------------------------------------------------------------------
[16:47:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:48:12    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_93/ANNZ_93_weights/saveTrainOpt_ANNZ_93.txt ...
[16:48:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_93 ... 
[16:48:14    INFO]  - Will gen. input-parameter errors ...
[16:48:15    INFO]  - starting ANNZ::loadReaders() ... 
[16:48:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:51:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:51:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:51:54    INFO]  -----------------------------------------------------------------------------------------------------------
[16:51:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:52:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:52:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:52:47    INFO]  -----------------------------------------------------------------------------------------------------------
[16:52:47    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_93/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:52:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:52:48    INFO]  - will try to derive a bias correction ... 
[16:52:48    INFO]  - will validate that training produced an XML file for later ... 
[16:52:48    INFO]  - starting ANNZ::loadReaders() ... 
[16:52:50    INFO]  - will validate that the training was not a complete failure ... 
[16:52:50    INFO]  - training seems to have been successful! will move on ...
[16:52:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:52:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:52:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:52:55    INFO] ----------------------------------------------------------------------------------------------------
[16:52:55    INFO]  - will book (ANNZ_93_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:52:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:52:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:52:55    INFO]    - weights:            1
[16:52:55    INFO] ----------------------------------------------------------------------------------------------------
[16:52:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:53:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_93 ... 
[16:53:01    INFO]  - Will gen. input-parameter errors ...
[16:53:03    INFO]  - starting ANNZ::loadReaders() ... 
[16:53:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[16:56:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:56:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:56:33    INFO]  -----------------------------------------------------------------------------------------------------------
[16:56:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[16:57:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:57:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:57:31    INFO]  -----------------------------------------------------------------------------------------------------------
[16:57:32    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_93/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:57:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:57:33    INFO]  - will validate that the bias-correction actually improved the result ...
[16:57:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:57:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_93,
Warning in <Fit>: Fit data is empty 
[16:57:39    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_93/plots/
[16:57:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_93/plots output/SPEC_advanced10/regres/train/ANNZ_93/plots_biasCor_before
[16:57:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:57:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_93,
[16:58:03    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_93/plots/
[16:58:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_93/plots output/SPEC_advanced10/regres/train/ANNZ_93/plots_biasCor_after
[16:58:17    INFO]  - Got original [KS-test,N_poiss]: [0.0626261 , 6.53232] , after the bias-correction: [0.034506 , 5.77992] --> will KEEP the correction !

(16:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m94[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:58 INFO) 
[16:58:20    INFO]  -----------------------------------------------------
[16:58:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:58:20    INFO]  -----------------------------------------------------------------------------------------------------------
[16:58:21    INFO]  - starting ANNZ::Init()  ... 
[16:58:22    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_94/saveOpt.txt ...
[16:58:27    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:58:28    INFO] ----------------------------------------------------------------------------------------------------
[16:58:28    INFO]  - will book (ANNZ_94) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=N,P
[16:58:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:58:28    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:58:28    INFO]      cuts (train):        ,
[16:58:28    INFO]      cuts (valid):       
[16:58:28    INFO]    - weights:            1
[16:58:28    INFO] ----------------------------------------------------------------------------------------------------
[16:58:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:59:10    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_94/ANNZ_94_weights/saveTrainOpt_ANNZ_94.txt ...
[16:59:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_94 ... 
[16:59:14    INFO]  - Will gen. input-parameter errors ...
[16:59:16    INFO]  - starting ANNZ::loadReaders() ... 
[16:59:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:03:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:03:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:03:37    INFO]  -----------------------------------------------------------------------------------------------------------
[17:03:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:04:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:04:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:04:34    INFO]  -----------------------------------------------------------------------------------------------------------
[17:04:34    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_94/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:04:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:04:36    INFO]  - will try to derive a bias correction ... 
[17:04:36    INFO]  - will validate that training produced an XML file for later ... 
[17:04:36    INFO]  - starting ANNZ::loadReaders() ... 
[17:04:40    INFO]  - will validate that the training was not a complete failure ... 
[17:04:40    INFO]  - training seems to have been successful! will move on ...
[17:04:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:04:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:04:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:04:46    INFO] ----------------------------------------------------------------------------------------------------
[17:04:46    INFO]  - will book (ANNZ_94_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:04:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:04:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:04:46    INFO]    - weights:            1
[17:04:46    INFO] ----------------------------------------------------------------------------------------------------
[17:04:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:04:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_94 ... 
[17:04:55    INFO]  - Will gen. input-parameter errors ...
[17:04:57    INFO]  - starting ANNZ::loadReaders() ... 
[17:05:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:08:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:08:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:08:28    INFO]  -----------------------------------------------------------------------------------------------------------
[17:08:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:09:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:09:20    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:09:20    INFO]  -----------------------------------------------------------------------------------------------------------
[17:09:20    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_94/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:09:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:09:22    INFO]  - will validate that the bias-correction actually improved the result ...
[17:09:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:09:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_94,
[17:09:28    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_94/plots/
[17:09:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_94/plots output/SPEC_advanced10/regres/train/ANNZ_94/plots_biasCor_before
[17:09:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:09:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_94,
[17:09:45    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_94/plots/
[17:09:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_94/plots output/SPEC_advanced10/regres/train/ANNZ_94/plots_biasCor_after
[17:09:56    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.91132] , after the bias-correction: [0.0448129 , 5.66772] --> will KEEP the correction !

(17:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m95[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:10 INFO) 
[17:10:00    INFO]  -----------------------------------------------------
[17:10:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:10:00    INFO]  -----------------------------------------------------------------------------------------------------------
[17:10:00    INFO]  - starting ANNZ::Init()  ... 
[17:10:02    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_95/saveOpt.txt ...
[17:10:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:10:07    INFO] ----------------------------------------------------------------------------------------------------
[17:10:07    INFO]  - will book (ANNZ_95) method(BDT) with options: :NTrees=520:BoostType=Bagging:VarTransform=N,P
[17:10:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:10:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:10:07    INFO]      cuts (train):        ,
[17:10:07    INFO]      cuts (valid):       
[17:10:07    INFO]    - weights:            1
[17:10:07    INFO] ----------------------------------------------------------------------------------------------------
[17:10:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:11:00    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_95/ANNZ_95_weights/saveTrainOpt_ANNZ_95.txt ...
[17:11:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_95 ... 
[17:11:05    INFO]  - Will gen. input-parameter errors ...
[17:11:07    INFO]  - starting ANNZ::loadReaders() ... 
[17:11:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:15:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:15:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:15:54    INFO]  -----------------------------------------------------------------------------------------------------------
[17:15:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:17:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:17:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:17:10    INFO]  -----------------------------------------------------------------------------------------------------------
[17:17:10    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_95/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:17:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:17:12    INFO]  - will try to derive a bias correction ... 
[17:17:12    INFO]  - will validate that training produced an XML file for later ... 
[17:17:12    INFO]  - starting ANNZ::loadReaders() ... 
[17:17:18    INFO]  - will validate that the training was not a complete failure ... 
[17:17:18    INFO]  - training seems to have been successful! will move on ...
[17:17:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:17:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:17:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:17:27    INFO] ----------------------------------------------------------------------------------------------------
[17:17:27    INFO]  - will book (ANNZ_95_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:17:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:17:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:17:27    INFO]    - weights:            1
[17:17:27    INFO] ----------------------------------------------------------------------------------------------------
[17:17:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:17:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_95 ... 
[17:17:35    INFO]  - Will gen. input-parameter errors ...
[17:17:38    INFO]  - starting ANNZ::loadReaders() ... 
[17:17:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:22:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:22:32    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:22:32    INFO]  -----------------------------------------------------------------------------------------------------------
[17:22:32    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:23:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:23:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:23:43    INFO]  -----------------------------------------------------------------------------------------------------------
[17:23:43    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_95/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:23:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:23:45    INFO]  - will validate that the bias-correction actually improved the result ...
[17:23:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:23:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_95,
[17:23:52    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_95/plots/
[17:24:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_95/plots output/SPEC_advanced10/regres/train/ANNZ_95/plots_biasCor_before
[17:24:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:24:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_95,
[17:24:08    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_95/plots/
[17:24:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_95/plots output/SPEC_advanced10/regres/train/ANNZ_95/plots_biasCor_after
[17:24:20    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.93267] , after the bias-correction: [0.0442528 , 5.70097] --> will KEEP the correction !

(17:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m96[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:24 INFO) 
[17:24:24    INFO]  -----------------------------------------------------
[17:24:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:24:24    INFO]  -----------------------------------------------------------------------------------------------------------
[17:24:25    INFO]  - starting ANNZ::Init()  ... 
[17:24:30    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_96/saveOpt.txt ...
[17:24:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:24:35    INFO] ----------------------------------------------------------------------------------------------------
[17:24:35    INFO]  - will book (ANNZ_96) method(BDT) with options: :NTrees=510:BoostType=AdaBoostR2:VarTransform=N,P
[17:24:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:24:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:24:35    INFO]      cuts (train):        ,
[17:24:35    INFO]      cuts (valid):       
[17:24:35    INFO]    - weights:            1
[17:24:35    INFO] ----------------------------------------------------------------------------------------------------
[17:24:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:25:26    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_96/ANNZ_96_weights/saveTrainOpt_ANNZ_96.txt ...
[17:25:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_96 ... 
[17:25:30    INFO]  - Will gen. input-parameter errors ...
[17:25:32    INFO]  - starting ANNZ::loadReaders() ... 
[17:25:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:37:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:37:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:37:41    INFO]  -----------------------------------------------------------------------------------------------------------
[17:37:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:40:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:40:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:40:06    INFO]  -----------------------------------------------------------------------------------------------------------
[17:40:06    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_96/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:40:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:40:08    INFO]  - will try to derive a bias correction ... 
[17:40:08    INFO]  - will validate that training produced an XML file for later ... 
[17:40:08    INFO]  - starting ANNZ::loadReaders() ... 
[17:40:11    INFO]  - will validate that the training was not a complete failure ... 
[17:40:11    INFO]  - training seems to have been successful! will move on ...
[17:40:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:40:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:40:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:40:16    INFO] ----------------------------------------------------------------------------------------------------
[17:40:16    INFO]  - will book (ANNZ_96_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:40:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:40:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:40:16    INFO]    - weights:            1
[17:40:16    INFO] ----------------------------------------------------------------------------------------------------
[17:40:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:40:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_96 ... 
[17:40:24    INFO]  - Will gen. input-parameter errors ...
[17:40:25    INFO]  - starting ANNZ::loadReaders() ... 
[17:40:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:49:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:49:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:49:54    INFO]  -----------------------------------------------------------------------------------------------------------
[17:49:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:52:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:52:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:52:12    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:12    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_96/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:52:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:52:14    INFO]  - will validate that the bias-correction actually improved the result ...
[17:52:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:52:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_96,
[17:52:19    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_96/plots/
[17:52:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_96/plots output/SPEC_advanced10/regres/train/ANNZ_96/plots_biasCor_before
[17:52:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:52:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_96,
[17:52:35    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_96/plots/
[17:52:46        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_96/plots output/SPEC_advanced10/regres/train/ANNZ_96/plots_biasCor_after
[17:52:46    INFO]  - Got original [KS-test,N_poiss]: [0.0696841 , 6.57644] , after the bias-correction: [0.0318172 , 5.36647] --> will KEEP the correction !

(17:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m97[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:52 INFO) 
[17:52:50    INFO]  -----------------------------------------------------
[17:52:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:52:50    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:50    INFO]  - starting ANNZ::Init()  ... 
[17:52:53    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_97/saveOpt.txt ...
[17:52:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:52:59    INFO] ----------------------------------------------------------------------------------------------------
[17:52:59    INFO]  - will book (ANNZ_97) method(BDT) with options: :NTrees=320:BoostType=AdaBoostR2:VarTransform=N
[17:52:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:52:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:52:59    INFO]      cuts (train):        ,
[17:52:59    INFO]      cuts (valid):       
[17:52:59    INFO]    - weights:            1
[17:52:59    INFO] ----------------------------------------------------------------------------------------------------
[17:52:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:53:24    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_97/ANNZ_97_weights/saveTrainOpt_ANNZ_97.txt ...
[17:53:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_97 ... 
[17:53:26    INFO]  - Will gen. input-parameter errors ...
[17:53:28    INFO]  - starting ANNZ::loadReaders() ... 
[17:53:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[17:57:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:57:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:57:19    INFO]  -----------------------------------------------------------------------------------------------------------
[17:57:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[17:58:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:58:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:58:15    INFO]  -----------------------------------------------------------------------------------------------------------
[17:58:15    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_97/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:58:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:58:16    INFO]  - will try to derive a bias correction ... 
[17:58:16    INFO]  - will validate that training produced an XML file for later ... 
[17:58:16    INFO]  - starting ANNZ::loadReaders() ... 
[17:58:18    INFO]  - will validate that the training was not a complete failure ... 
[17:58:18    INFO]  - training seems to have been successful! will move on ...
[17:58:18    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:58:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:58:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:58:22    INFO] ----------------------------------------------------------------------------------------------------
[17:58:22    INFO]  - will book (ANNZ_97_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:58:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:58:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:58:22    INFO]    - weights:            1
[17:58:22    INFO] ----------------------------------------------------------------------------------------------------
[17:58:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:58:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_97 ... 
[17:58:29    INFO]  - Will gen. input-parameter errors ...
[17:58:30    INFO]  - starting ANNZ::loadReaders() ... 
[17:58:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:02:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:02:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:02:08    INFO]  -----------------------------------------------------------------------------------------------------------
[18:02:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:03:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:03:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:03:01    INFO]  -----------------------------------------------------------------------------------------------------------
[18:03:01    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_97/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:03:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:03:02    INFO]  - will validate that the bias-correction actually improved the result ...
[18:03:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:03:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_97,
Warning in <Fit>: Fit data is empty 
[18:03:07    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_97/plots/
[18:03:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_97/plots output/SPEC_advanced10/regres/train/ANNZ_97/plots_biasCor_before
[18:03:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:03:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_97,
[18:03:22    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_97/plots/
[18:03:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_97/plots output/SPEC_advanced10/regres/train/ANNZ_97/plots_biasCor_after
[18:03:33    INFO]  - Got original [KS-test,N_poiss]: [0.062514 , 6.43487] , after the bias-correction: [0.03473 , 5.79229] --> will KEEP the correction !

(18:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m98[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:03 INFO) 
[18:03:37    INFO]  -----------------------------------------------------
[18:03:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:03:37    INFO]  -----------------------------------------------------------------------------------------------------------
[18:03:37    INFO]  - starting ANNZ::Init()  ... 
[18:03:38    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_98/saveOpt.txt ...
[18:03:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:03:44    INFO] ----------------------------------------------------------------------------------------------------
[18:03:44    INFO]  - will book (ANNZ_98) method(BDT) with options: :NTrees=280:BoostType=AdaBoostR2:VarTransform=N,P
[18:03:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:03:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:03:44    INFO]      cuts (train):        ,
[18:03:44    INFO]      cuts (valid):       
[18:03:44    INFO]    - weights:            1
[18:03:44    INFO] ----------------------------------------------------------------------------------------------------
[18:03:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:04:09    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_98/ANNZ_98_weights/saveTrainOpt_ANNZ_98.txt ...
[18:04:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_98 ... 
[18:04:11    INFO]  - Will gen. input-parameter errors ...
[18:04:13    INFO]  - starting ANNZ::loadReaders() ... 
[18:04:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:08:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:08:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:08:08    INFO]  -----------------------------------------------------------------------------------------------------------
[18:08:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:09:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:05    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:09:05    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:05    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_98/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:09:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:09:06    INFO]  - will try to derive a bias correction ... 
[18:09:06    INFO]  - will validate that training produced an XML file for later ... 
[18:09:06    INFO]  - starting ANNZ::loadReaders() ... 
[18:09:08    INFO]  - will validate that the training was not a complete failure ... 
[18:09:08    INFO]  - training seems to have been successful! will move on ...
[18:09:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:09:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:09:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:09:12    INFO] ----------------------------------------------------------------------------------------------------
[18:09:12    INFO]  - will book (ANNZ_98_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:09:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:09:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:09:12    INFO]    - weights:            1
[18:09:12    INFO] ----------------------------------------------------------------------------------------------------
[18:09:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:09:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_98 ... 
[18:09:19    INFO]  - Will gen. input-parameter errors ...
[18:09:20    INFO]  - starting ANNZ::loadReaders() ... 
[18:09:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:13:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:13:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:13:02    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:13:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:13:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:13:56    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:57    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_98/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:13:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:13:58    INFO]  - will validate that the bias-correction actually improved the result ...
[18:13:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:13:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_98,
[18:14:03    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_98/plots/
[18:14:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_98/plots output/SPEC_advanced10/regres/train/ANNZ_98/plots_biasCor_before
[18:14:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:14:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_98,
[18:14:18    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_98/plots/
[18:14:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_98/plots output/SPEC_advanced10/regres/train/ANNZ_98/plots_biasCor_after
[18:14:29    INFO]  - Got original [KS-test,N_poiss]: [0.0691239 , 6.68834] , after the bias-correction: [0.0327134 , 5.29252] --> will KEEP the correction !

(18:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m99[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:14 INFO) 
[18:14:32    INFO]  -----------------------------------------------------
[18:14:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:14:32    INFO]  -----------------------------------------------------------------------------------------------------------
[18:14:33    INFO]  - starting ANNZ::Init()  ... 
[18:14:34    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/train/ANNZ_99/saveOpt.txt ...
[18:14:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:14:40    INFO] ----------------------------------------------------------------------------------------------------
[18:14:40    INFO]  - will book (ANNZ_99) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[18:14:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:14:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:14:40    INFO]      cuts (train):        ,
[18:14:40    INFO]      cuts (valid):       
[18:14:40    INFO]    - weights:            1
[18:14:40    INFO] ----------------------------------------------------------------------------------------------------
[18:14:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:15:27    INFO]  - Saving MLM information in ./output/SPEC_advanced10/regres/train/ANNZ_99/ANNZ_99_weights/saveTrainOpt_ANNZ_99.txt ...
[18:15:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_99 ... 
[18:15:31    INFO]  - Will gen. input-parameter errors ...
[18:15:33    INFO]  - starting ANNZ::loadReaders() ... 
[18:15:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:18:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:18:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:18:06    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:18:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:18:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:18:41    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:42    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_99/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:18:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:18:44    INFO]  - will try to derive a bias correction ... 
[18:18:44    INFO]  - will validate that training produced an XML file for later ... 
[18:18:44    INFO]  - starting ANNZ::loadReaders() ... 
[18:18:49    INFO]  - will validate that the training was not a complete failure ... 
[18:18:49    INFO]  - training seems to have been successful! will move on ...
[18:18:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:18:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:18:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:18:54    INFO] ----------------------------------------------------------------------------------------------------
[18:18:54    INFO]  - will book (ANNZ_99_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:18:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:18:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:18:54    INFO]    - weights:            1
[18:18:54    INFO] ----------------------------------------------------------------------------------------------------
[18:18:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:19:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_99 ... 
[18:19:03    INFO]  - Will gen. input-parameter errors ...
[18:19:05    INFO]  - starting ANNZ::loadReaders() ... 
[18:19:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:21:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:21:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:21:51    INFO]  -----------------------------------------------------------------------------------------------------------
[18:21:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:22:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:22:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:22:29    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:29    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_99/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:22:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:22:31    INFO]  - will validate that the bias-correction actually improved the result ...
[18:22:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:22:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_99,
[18:22:37    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_99/plots/
[18:22:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_99/plots output/SPEC_advanced10/regres/train/ANNZ_99/plots_biasCor_before
[18:22:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:22:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_99,
[18:22:53    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/train/ANNZ_99/plots/
[18:23:04        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced10/regres/train/ANNZ_99/plots output/SPEC_advanced10/regres/train/ANNZ_99/plots_biasCor_after
[18:23:04    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(18:23 INFO) [40;37;1m - 11/03/19 18:23:09 - finished running ANNZ ![0m
(15:37 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:37 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:37 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:37 INFO) [40;37;1m - 12/03/19 15:37:16 - starting ANNZ[0m
(15:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:37 INFO) 
[15:37:16    INFO]  -----------------------------------------------------
[15:37:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:37:16    INFO]  -----------------------------------------------------------------------------------------------------------
[15:37:19    INFO]  - starting ANNZ::Init()  ... 
[15:37:19    INFO]  - Will generate 1 PDFs ... 
[15:40:10    INFO] --------------------------------------------------------
[15:40:10    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[15:40:10    INFO]  - All REJECTED MLMs: 
[15:40:10    INFO] ----------------------------------------------------------------------------------------------------------------
[15:40:14   ERROR]  - ... ------------------------------------------------------------ 
[15:40:14   ERROR]  - MESSAGE -  - Failed system-call (rm -rf   ./output/SPEC_advanced10/regres/optim/) - sysReturn = -1... 
[15:40:14   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[15:40:14   ERROR]  - ..... ABORTING !!! 
[15:40:14   ERROR]  ------------------------------------------------------------ ... - 
(15:40 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(15:40 CRITICAL) [41;37;1mWill terminate !!!![0m
(15:54 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:54 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:54 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:54 INFO) [40;37;1m - 12/03/19 15:54:16 - starting ANNZ[0m
(15:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:54 INFO) 
[15:54:16    INFO]  -----------------------------------------------------
[15:54:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:54:16    INFO]  -----------------------------------------------------------------------------------------------------------
[15:54:18    INFO]  - starting ANNZ::Init()  ... 
[15:54:18    INFO]  - Will generate 1 PDFs ... 
[15:56:51    INFO] --------------------------------------------------------
[15:56:51    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[15:56:51    INFO]  - All REJECTED MLMs: 
[15:56:51    INFO] ----------------------------------------------------------------------------------------------------------------
[15:56:57   ERROR]  - ... ------------------------------------------------------------ 
[15:56:57   ERROR]  - MESSAGE -  - Failed system-call (rm -rf   ./output/SPEC_advanced10/regres/optim/) - sysReturn = -1... 
[15:56:57   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[15:56:57   ERROR]  - ..... ABORTING !!! 
[15:56:57   ERROR]  ------------------------------------------------------------ ... - 
(15:56 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(15:56 CRITICAL) [41;37;1mWill terminate !!!![0m
(17:59 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(17:59 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(17:59 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(17:59 INFO) [40;37;1m - 12/03/19 17:59:41 - starting ANNZ[0m
(17:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(17:59 INFO) 
[17:59:42    INFO]  -----------------------------------------------------
[17:59:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:59:42    INFO]  -----------------------------------------------------------------------------------------------------------
[17:59:44    INFO]  - starting ANNZ::Init()  ... 
[17:59:44    INFO]  - Will generate 1 PDFs ... 
[18:00:49    INFO] --------------------------------------------------------
[18:00:49    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[18:00:49    INFO]  - All REJECTED MLMs: 
[18:00:49    INFO] ----------------------------------------------------------------------------------------------------------------
[18:01:02    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/optim/saveOpt.txt ...
[18:06:04    INFO]  - starting ANNZ::Optim() ... 
[18:06:04    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[18:06:05    INFO]  - ANNZ_4 Now in nTrainValidNow = 0 , treeNamePostfix = _train , number of entries is bad ... 
[18:06:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[18:06:05    INFO]  - Will gen. input-parameter errors ...
[18:06:18    INFO]  - starting ANNZ::loadReaders() ... 
[18:06:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_train*.root
[18:08:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:08:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:08:02    INFO]  -----------------------------------------------------------------------------------------------------------
[18:08:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced10/rootIn/ANNZ_tree_valid*.root
[18:08:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:08:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:08:26    INFO]  -----------------------------------------------------------------------------------------------------------
[18:08:27    INFO]  - Saving file ./output/SPEC_advanced10/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:08:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:08:38    INFO] ANNZ_4 - There was need to regenerate the result-trees. Will validate that all is good now ...
[18:08:39    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[18:12:51    INFO]  - Found 100 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[18:12:51    INFO]  - Now in merging loop 1/2
[18:13:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:13:04    INFO]  - Now in merging loop 2/2
[18:13:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:13:20    INFO]  - Now in final merging of all sub-steps ...
[18:13:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:13:23    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced10/regres/train/postTrain/ANNZ_tree_train_00001.root) ... 
[18:19:27    INFO]  - Found 100 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[18:19:27    INFO]  - Now in merging loop 1/2
[18:19:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:19:41    INFO]  - Now in merging loop 2/2
[18:19:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:19:55    INFO]  - Now in final merging of all sub-steps ...
[18:19:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:19:56    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced10/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[18:25:14    INFO]  - Found 100 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[18:25:14    INFO]  - Now in merging loop 1/2
[18:25:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:25:34    INFO]  - Now in merging loop 2/2
[18:25:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:25:49    INFO]  - Now in final merging of all sub-steps ...
[18:25:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:25:51    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/SPEC_advanced10/regres/train/postTrain/ANNZ_tree_errKNN_00001.root) ... 
[18:25:57    INFO]  - Saving file ./output/SPEC_advanced10/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[18:26:02    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[18:26:02    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced10/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[18:26:02    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[18:26:04    INFO]  - ending makeTreeRegClsAllMLM() ... 
[18:26:04    INFO]  - starting ANNZ::optimReg() ... 
[18:26:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:26:21    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced10/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[18:26:24    INFO]  - starting ANNZ::fillColosureV() ... 
[18:26:27    INFO]  ---------------------------------------------------------------------------------- 
[18:26:27    INFO]  - Got the following average properties: 
[18:26:27    INFO]  --------------------------------------- 
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00895836 	 0.0572833 	 0.0887213
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00844192 	 0.0580746 	 0.0874688
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0125413 	 0.0443738 	 0.0875448
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00858728 	 0.0581359 	 0.0873682
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.0324783 	 0.0624138 	 0.0774471
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0126438 	 0.0451117 	 0.0861711
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0128898 	 0.0446543 	 0.087566
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00415285 	 0.0649555 	 0.0910147
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0106011 	 0.0469688 	 0.0903376
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00839091 	 0.0580548 	 0.0878906
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00693335 	 0.0434622 	 0.047456
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00882729 	 0.0580044 	 0.087666
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00768601 	 0.0438563 	 0.0515601
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0126007 	 0.0451849 	 0.0848612
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00850124 	 0.0582352 	 0.087706
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00422595 	 0.0647675 	 0.0914453
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00393937 	 0.0604603 	 0.0894116
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0105702 	 0.0477364 	 0.0873181
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.00396408 	 0.0659294 	 0.0883793
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00862215 	 0.0579557 	 0.0883379
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.0101035 	 0.0485226 	 0.0861218
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00849144 	 0.0440127 	 0.0513191
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.0106034 	 0.0472496 	 0.0879493
[18:26:27    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00611366 	 0.0365981 	 0.0546687
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.0124974 	 0.0441028 	 0.0880895
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.0126569 	 0.0443142 	 0.0860558
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.00773661 	 0.0431132 	 0.0502906
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0129299 	 0.0444353 	 0.086872
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.00434633 	 0.0650436 	 0.0909968
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.0131893 	 0.0449171 	 0.0855816
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.00424721 	 0.0603133 	 0.0885649
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00730385 	 0.0437494 	 0.0472452
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.0106037 	 0.047938 	 0.0879799
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.00426349 	 0.0650477 	 0.0903527
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.0105702 	 0.0477364 	 0.0873181
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.00862215 	 0.0579557 	 0.0883379
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.0126753 	 0.0441983 	 0.0860537
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.00366486 	 0.0653097 	 0.0894867
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.0106433 	 0.048671 	 0.0856391
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.012921 	 0.0439188 	 0.0876045
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_40 	 0.00426349 	 0.0650477 	 0.0903527
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_41 	 0.00852265 	 0.0581794 	 0.0875595
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_42 	 0.00791974 	 0.042717 	 0.0485682
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_43 	 0.0130958 	 0.0444912 	 0.0858231
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_44 	 0.0104585 	 0.0473992 	 0.0884155
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_45 	 0.00439204 	 0.0649988 	 0.0906485
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_46 	 0.00427053 	 0.0652029 	 0.0899043
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_47 	 0.0125466 	 0.0444737 	 0.088845
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_48 	 0.00822397 	 0.043954 	 0.050279
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_49 	 0.0106037 	 0.047938 	 0.0879799
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_50 	 0.00850124 	 0.0582352 	 0.087706
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_51 	 0.0105466 	 0.047261 	 0.0888532
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_52 	 0.00984881 	 0.0471539 	 0.0913985
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_53 	 0.00773661 	 0.0431132 	 0.0502906
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_54 	 0.0125466 	 0.0444737 	 0.088845
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_55 	 0.0126569 	 0.0443142 	 0.0860558
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_56 	 0.00994309 	 0.0474724 	 0.0899981
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_57 	 0.00708545 	 0.0443394 	 0.0442052
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_58 	 0.00415324 	 0.0649561 	 0.0910147
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_59 	 0.00802292 	 0.0448689 	 0.0497723
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_60 	 0.0129299 	 0.0444353 	 0.086872
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_61 	 0.00862057 	 0.0438515 	 0.0514065
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_62 	 0.00386373 	 0.0660011 	 0.0879689
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_63 	 0.00873274 	 0.0581707 	 0.0879252
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_64 	 0.0103316 	 0.0477905 	 0.0871374
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_65 	 0.0103006 	 0.0482836 	 0.0866883
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_66 	 0.0103316 	 0.0477905 	 0.0871374
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_67 	 0.00800335 	 0.044238 	 0.0512049
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_68 	 0.0129299 	 0.0444353 	 0.086872
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_69 	 0.0106137 	 0.0473984 	 0.0882901
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_70 	 0.0038315 	 0.0655043 	 0.089299
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_71 	 0.0124974 	 0.0441028 	 0.0880895
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_72 	 0.0043084 	 0.0650687 	 0.0902782
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_73 	 0.0103316 	 0.0477905 	 0.0871374
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_74 	 0.00862994 	 0.0581149 	 0.0878553
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_75 	 0.00426335 	 0.0650461 	 0.0903527
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_76 	 0.00850124 	 0.0582352 	 0.087706
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_77 	 0.0102844 	 0.0471374 	 0.0873936
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_78 	 0.00846818 	 0.0581275 	 0.0874793
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_79 	 0.00984881 	 0.0471539 	 0.0913985
[18:26:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_80 	 0.00442474 	 0.0649841 	 0.0908419
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_81 	 0.0105384 	 0.0470919 	 0.0888414
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_82 	 0.0106433 	 0.048671 	 0.0856391
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_83 	 0.00372565 	 0.0652593 	 0.0895226
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_84 	 0.00430907 	 0.0650736 	 0.0902218
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_85 	 0.013023 	 0.0440446 	 0.0865331
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_86 	 0.00426349 	 0.0650477 	 0.0903527
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_87 	 0.00831129 	 0.0442485 	 0.0496186
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_88 	 0.0109873 	 0.0474614 	 0.0878887
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_89 	 0.0106433 	 0.048671 	 0.0856391
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_90 	 0.00740735 	 0.0439554 	 0.0460145
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_91 	 0.00426349 	 0.0650477 	 0.0903527
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_92 	 0.00367171 	 0.0657435 	 0.0883111
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_93 	 0.00780153 	 0.0456354 	 0.0452132
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_94 	 0.0103006 	 0.0482836 	 0.0866883
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_95 	 0.0106034 	 0.0472496 	 0.0879493
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_96 	 0.00745625 	 0.0431614 	 0.0486925
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_97 	 0.00758587 	 0.0439889 	 0.051261
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_98 	 0.0070925 	 0.0440991 	 0.0462053
[18:26:29    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_99 	 0.0125466 	 0.0444737 	 0.088845
[18:26:29    INFO]  ------------------------------------------------------------------------------------------------- 
[18:26:29    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[18:26:29    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[18:26:29    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[18:26:29    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[18:26:29    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 12.5% of the [sig68] dist.
[18:26:29    INFO]  - The "best" MLM is: ANNZ_23
[18:26:29    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[18:26:29    INFO]  - initial PDF weights: ANNZ_23:0.027 ANNZ_10:0.027 ANNZ_98:0.027 ANNZ_57:0.026 ANNZ_31:0.026 ANNZ_96:0.025 ANNZ_90:0.025 ANNZ_26:0.025 ANNZ_53:0.024 ANNZ_97:0.024 ANNZ_42:0.024 ANNZ_12:0.023 ANNZ_67:0.023 ANNZ_93:0.022 ANNZ_59:0.022 ANNZ_48:0.022 ANNZ_87:0.021 ANNZ_21:0.021 ANNZ_61:0.021 ANNZ_16:0.020 ANNZ_30:0.020 ANNZ_15:0.019 ANNZ_79:0.019 ANNZ_52:0.019 ANNZ_56:0.018 ANNZ_77:0.018 ANNZ_20:0.018 ANNZ_73:0.017 ANNZ_66:0.017 ANNZ_64:0.016 ANNZ_65:0.016 ANNZ_94:0.016 ANNZ_44:0.015 ANNZ_81:0.015 ANNZ_51:0.014 ANNZ_8:0.014 ANNZ_22:0.014 ANNZ_95:0.013 ANNZ_69:0.013 ANNZ_34:0.013 ANNZ_17:0.012 ANNZ_9:0.012 ANNZ_49:0.011 ANNZ_32:0.011 ANNZ_1:0.011 ANNZ_78:0.010 ANNZ_50:0.010 ANNZ_14:0.010 ANNZ_76:0.009 ANNZ_41:0.009 ANNZ_35:0.008 ANNZ_19:0.008 ANNZ_3:0.008 ANNZ_89:0.007 ANNZ_38:0.007 ANNZ_82:0.006 ANNZ_74:0.006 ANNZ_63:0.006 ANNZ_0:0.005 ANNZ_11:0.005 ANNZ_88:0.005 ANNZ_24:0.004 ANNZ_71:0.004 ANNZ_2:0.003 ANNZ_54:0.003 ANNZ_99:0.003 ANNZ_47:0.002 ANNZ_55:0.002 ANNZ_25:0.002 ANNZ_36:0.001 ANNZ_13:0.001 ANNZ_5:0.000 
[18:26:29    INFO]  - will loop on the input trees ...
[18:26:31    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.53693e-01
[18:26:31    INFO]  - nTry: 1 - min-param best/prev/now: 2.53693e-01 / 2.53693e-01 / 2.54251e-01
[18:26:32    INFO]  - nTry: 2 - min-param best/prev/now: 2.53693e-01 / 2.54251e-01 / 2.54878e-01
[18:26:32    INFO]  - nTry: 3 - min-param best/prev/now: 2.53693e-01 / 2.54251e-01 / 2.56017e-01
[18:26:32    INFO]  - nTry: 4 - min-param best/prev/now: 2.53693e-01 / 2.54251e-01 / 2.56363e-01
[18:26:33    INFO]  - nTry: 5 - min-param best/prev/now: 2.53693e-01 / 2.56363e-01 / 2.56643e-01
[18:26:33    INFO]  - nTry: 6 - min-param best/prev/now: 2.53693e-01 / 2.56363e-01 / 2.57204e-01
[18:26:33    INFO]  - nTry: 7 - min-param best/prev/now: 2.53693e-01 / 2.57204e-01 / 2.57911e-01
[18:26:34    INFO]  - nTry: 8 - min-param best/prev/now: 2.53693e-01 / 2.57204e-01 / 2.58135e-01
[18:26:34    INFO]  - nTry: 9 - min-param best/prev/now: 2.53693e-01 / 2.57204e-01 / 2.58164e-01
[18:26:35    INFO]  - nTry: 10 - min-param best/prev/now: 2.53693e-01 / 2.58164e-01 / 2.58364e-01
[18:26:38    INFO]  - nTry: 20 - min-param best/prev/now: 2.53693e-01 / 2.58833e-01 / 2.58740e-01
[18:26:41    INFO]  - nTry: 30 - min-param best/prev/now: 2.53693e-01 / 2.58716e-01 / 2.58743e-01
[18:26:45    INFO]  - nTry: 40 - min-param best/prev/now: 2.53693e-01 / 2.58994e-01 / 2.59026e-01
[18:26:48    INFO]  - nTry: 50 - min-param best/prev/now: 2.53693e-01 / 2.59120e-01 / 2.59143e-01
[18:26:52    INFO]  - nTry: 60 - min-param best/prev/now: 2.53693e-01 / 2.58967e-01 / 2.59033e-01
[18:26:55    INFO]  - nTry: 70 - min-param best/prev/now: 2.53693e-01 / 2.59129e-01 / 2.59198e-01
[18:26:58    INFO]  - nTry: 80 - min-param best/prev/now: 2.53693e-01 / 2.59205e-01 / 2.59270e-01
[18:27:02    INFO]  - nTry: 90 - min-param best/prev/now: 2.53693e-01 / 2.59258e-01 / 2.59287e-01
[18:27:05    INFO]  - nTry: 100 - min-param best/prev/now: 2.53693e-01 / 2.59287e-01 / 2.59304e-01
[18:27:12    INFO]  - nTry: 120 - min-param best/prev/now: 2.53693e-01 / 2.59329e-01 / 2.59388e-01
[18:27:19    INFO]  - nTry: 140 - min-param best/prev/now: 2.53693e-01 / 2.59389e-01 / 2.59397e-01
[18:27:22    INFO]  - nTry: 150 - min-param best/prev/now: 2.53693e-01 / 2.59386e-01 / 2.59384e-01
[18:27:25    INFO]  - nTry: 160 - min-param best/prev/now: 2.53693e-01 / 2.59367e-01 / 2.59393e-01
[18:27:32    INFO]  - nTry: 180 - min-param best/prev/now: 2.53693e-01 / 2.59397e-01 / 2.59415e-01
[18:27:39    INFO]  - nTry: 200 - min-param best/prev/now: 2.53693e-01 / 2.59503e-01 / 2.59513e-01
[18:27:46    INFO]  - nTry: 220 - min-param best/prev/now: 2.53693e-01 / 2.59522e-01 / 2.59518e-01
[18:27:53    INFO]  - nTry: 240 - min-param best/prev/now: 2.53693e-01 / 2.59539e-01 / 2.59542e-01
[18:27:56    INFO]  - nTry: 250 - min-param best/prev/now: 2.53693e-01 / 2.59523e-01 / 2.59518e-01
[18:27:56    INFO]  - finished PDF optimization! - final minimization parameter: 2.53693e-01 , PDF weights: ANNZ_23:0.027 ANNZ_10:0.027 ANNZ_98:0.027 ANNZ_57:0.026 ANNZ_31:0.026 ANNZ_96:0.025 ANNZ_90:0.025 ANNZ_26:0.025 ANNZ_53:0.024 ANNZ_97:0.024 ANNZ_42:0.024 ANNZ_12:0.023 ANNZ_67:0.023 ANNZ_93:0.022 ANNZ_59:0.022 ANNZ_48:0.022 ANNZ_87:0.021 ANNZ_21:0.021 ANNZ_61:0.021 ANNZ_16:0.020 ANNZ_30:0.020 ANNZ_15:0.019 ANNZ_79:0.019 ANNZ_52:0.019 ANNZ_56:0.018 ANNZ_77:0.018 ANNZ_20:0.018 ANNZ_73:0.017 ANNZ_66:0.017 ANNZ_64:0.016 ANNZ_65:0.016 ANNZ_94:0.016 ANNZ_44:0.015 ANNZ_81:0.015 ANNZ_51:0.014 ANNZ_8:0.014 ANNZ_22:0.014 ANNZ_95:0.013 ANNZ_69:0.013 ANNZ_34:0.013 ANNZ_17:0.012 ANNZ_9:0.012 ANNZ_49:0.011 ANNZ_32:0.011 ANNZ_1:0.011 ANNZ_78:0.010 ANNZ_50:0.010 ANNZ_14:0.010 ANNZ_76:0.009 ANNZ_41:0.009 ANNZ_35:0.008 ANNZ_19:0.008 ANNZ_3:0.008 ANNZ_89:0.007 ANNZ_38:0.007 ANNZ_82:0.006 ANNZ_74:0.006 ANNZ_63:0.006 ANNZ_0:0.005 ANNZ_11:0.005 ANNZ_88:0.005 ANNZ_24:0.004 ANNZ_71:0.004 ANNZ_2:0.003 ANNZ_54:0.003 ANNZ_99:0.003 ANNZ_47:0.002 ANNZ_55:0.002 ANNZ_25:0.002 ANNZ_36:0.001 ANNZ_13:0.001 ANNZ_5:0.000 
[18:27:56    INFO]  - will derive the bias correction for the pdf ... 
[18:27:59    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.005327, ANNZ_1:0.010654, ANNZ_2:0.003425, ANNZ_3:0.007610, ANNZ_4:0.000000, ANNZ_5:0.000381, ANNZ_6:0.000000, ANNZ_7:0.000000, ANNZ_8:0.014079, ANNZ_9:0.011796, ANNZ_10:0.027017, ANNZ_11:0.004947, ANNZ_12:0.023212, ANNZ_13:0.000761, ANNZ_14:0.009513, ANNZ_15:0.019406, ANNZ_16:0.020167, ANNZ_17:0.012177, ANNZ_18:0.000000, ANNZ_19:0.007991, ANNZ_20:0.017504, ANNZ_21:0.020928, ANNZ_22:0.013699, ANNZ_23:0.027397, ANNZ_24:0.004186, ANNZ_25:0.001522, ANNZ_26:0.024734, ANNZ_27:0.000000, ANNZ_28:0.000000, ANNZ_29:0.000000, ANNZ_30:0.019787, ANNZ_31:0.025875, ANNZ_32:0.011035, ANNZ_33:0.000000, ANNZ_34:0.012557, ANNZ_35:0.008371, ANNZ_36:0.001142, ANNZ_37:0.000000, ANNZ_38:0.006849, ANNZ_39:0.000000, ANNZ_40:0.000000, ANNZ_41:0.008752, ANNZ_42:0.023592, ANNZ_43:0.000000, ANNZ_44:0.015221, ANNZ_45:0.000000, ANNZ_46:0.000000, ANNZ_47:0.002283, ANNZ_48:0.021689, ANNZ_49:0.011416, ANNZ_50:0.009893, ANNZ_51:0.014460, ANNZ_52:0.018645, ANNZ_53:0.024353, ANNZ_54:0.003044, ANNZ_55:0.001903, ANNZ_56:0.018265, ANNZ_57:0.026256, ANNZ_58:0.000000, ANNZ_59:0.022070, ANNZ_60:0.000000, ANNZ_61:0.020548, ANNZ_62:0.000000, ANNZ_63:0.005708, ANNZ_64:0.016362, ANNZ_65:0.015982, ANNZ_66:0.016743, ANNZ_67:0.022831, ANNZ_68:0.000000, ANNZ_69:0.012938, ANNZ_70:0.000000, ANNZ_71:0.003805, ANNZ_72:0.000000, ANNZ_73:0.017123, ANNZ_74:0.006088, ANNZ_75:0.000000, ANNZ_76:0.009132, ANNZ_77:0.017884, ANNZ_78:0.010274, ANNZ_79:0.019026, ANNZ_80:0.000000, ANNZ_81:0.014840, ANNZ_82:0.006469, ANNZ_83:0.000000, ANNZ_84:0.000000, ANNZ_85:0.000000, ANNZ_86:0.000000, ANNZ_87:0.021309, ANNZ_88:0.004566, ANNZ_89:0.007230, ANNZ_90:0.025114, ANNZ_91:0.000000, ANNZ_92:0.000000, ANNZ_93:0.022451, ANNZ_94:0.015601, ANNZ_95:0.013318, ANNZ_96:0.025495, ANNZ_97:0.023973, ANNZ_98:0.026636, ANNZ_99:0.002664, 
[18:27:59    INFO]  - Saving optimization results in ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt ...
[18:28:10   ERROR]  - ... ------------------------------------------------------------ 
[18:28:10   ERROR]  - MESSAGE -  - Failed system-call (echo '# -----------------------------------------------------------------' >  ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt) - sysReturn = -1... 
[18:28:10   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[18:28:10   ERROR]  - ..... ABORTING !!! 
[18:28:10   ERROR]  ------------------------------------------------------------ ... - 
(18:28 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(18:28 CRITICAL) [41;37;1mWill terminate !!!![0m
(18:42 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:42 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:42 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:42 INFO) [40;37;1m - 12/03/19 18:42:23 - starting ANNZ[0m
(18:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(18:42 INFO) 
[18:42:23    INFO]  -----------------------------------------------------
[18:42:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:42:23    INFO]  -----------------------------------------------------------------------------------------------------------
[18:42:25    INFO]  - starting ANNZ::Init()  ... 
[18:42:25    INFO]  - Will generate 1 PDFs ... 
[18:43:32    INFO] --------------------------------------------------------
[18:43:32    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[18:43:32    INFO]  - All REJECTED MLMs: 
[18:43:32    INFO] ----------------------------------------------------------------------------------------------------------------
[18:43:56    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/optim/saveOpt.txt ...
[18:56:56    INFO]  - starting ANNZ::Optim() ... 
[18:56:56    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[18:56:57    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced10/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[18:56:57    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[18:57:02    INFO]  - ending makeTreeRegClsAllMLM() ... 
[18:57:02    INFO]  - starting ANNZ::optimReg() ... 
[18:57:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:57:45    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced10/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[18:57:51    INFO]  - starting ANNZ::fillColosureV() ... 
[18:57:56    INFO]  ---------------------------------------------------------------------------------- 
[18:57:56    INFO]  - Got the following average properties: 
[18:57:56    INFO]  --------------------------------------- 
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00883084 	 0.0573128 	 0.0891001
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00844192 	 0.0580746 	 0.0874688
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0125413 	 0.0443738 	 0.0875448
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00858728 	 0.0581359 	 0.0873682
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.0324783 	 0.0624138 	 0.0774471
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0126438 	 0.0451117 	 0.0861711
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0128898 	 0.0446543 	 0.087566
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00415285 	 0.0649555 	 0.0910147
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0106011 	 0.0469688 	 0.0903376
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00839091 	 0.0580548 	 0.0878906
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00693335 	 0.0434622 	 0.047456
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00882729 	 0.0580044 	 0.087666
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00768601 	 0.0438563 	 0.0515601
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0126007 	 0.0451849 	 0.0848612
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00850124 	 0.0582352 	 0.087706
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00422595 	 0.0647675 	 0.0914453
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00393937 	 0.0604603 	 0.0894116
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0105702 	 0.0477364 	 0.0873181
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.00396408 	 0.0659294 	 0.0883793
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00862215 	 0.0579557 	 0.0883379
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.0101035 	 0.0485226 	 0.0861218
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00849144 	 0.0440127 	 0.0513191
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.0106034 	 0.0472496 	 0.0879493
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00611366 	 0.0365981 	 0.0546687
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.0124974 	 0.0441028 	 0.0880895
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.0126569 	 0.0443142 	 0.0860558
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.00773661 	 0.0431132 	 0.0502906
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0129299 	 0.0444353 	 0.086872
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.00434633 	 0.0650436 	 0.0909968
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.0131893 	 0.0449171 	 0.0855816
[18:57:56    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.00424721 	 0.0603133 	 0.0885649
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00730385 	 0.0437494 	 0.0472452
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.0106037 	 0.047938 	 0.0879799
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.00426349 	 0.0650477 	 0.0903527
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.0105702 	 0.0477364 	 0.0873181
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.00862215 	 0.0579557 	 0.0883379
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.0126753 	 0.0441983 	 0.0860537
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.00366486 	 0.0653097 	 0.0894867
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.0106433 	 0.048671 	 0.0856391
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.012921 	 0.0439188 	 0.0876045
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_40 	 0.00426349 	 0.0650477 	 0.0903527
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_41 	 0.00852265 	 0.0581794 	 0.0875595
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_42 	 0.00791974 	 0.042717 	 0.0485682
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_43 	 0.0130958 	 0.0444912 	 0.0858231
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_44 	 0.0104585 	 0.0473992 	 0.0884155
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_45 	 0.00439204 	 0.0649988 	 0.0906485
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_46 	 0.00427053 	 0.0652029 	 0.0899043
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_47 	 0.0125466 	 0.0444737 	 0.088845
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_48 	 0.00822397 	 0.043954 	 0.050279
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_49 	 0.0106037 	 0.047938 	 0.0879799
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_50 	 0.00850124 	 0.0582352 	 0.087706
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_51 	 0.0105466 	 0.047261 	 0.0888532
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_52 	 0.00984881 	 0.0471539 	 0.0913985
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_53 	 0.00773661 	 0.0431132 	 0.0502906
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_54 	 0.0125466 	 0.0444737 	 0.088845
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_55 	 0.0126569 	 0.0443142 	 0.0860558
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_56 	 0.00994309 	 0.0474724 	 0.0899981
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_57 	 0.00708545 	 0.0443394 	 0.0442052
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_58 	 0.00415324 	 0.0649561 	 0.0910147
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_59 	 0.00802292 	 0.0448689 	 0.0497723
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_60 	 0.0129299 	 0.0444353 	 0.086872
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_61 	 0.00862057 	 0.0438515 	 0.0514065
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_62 	 0.00386373 	 0.0660011 	 0.0879689
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_63 	 0.00873274 	 0.0581707 	 0.0879252
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_64 	 0.0103316 	 0.0477905 	 0.0871374
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_65 	 0.0103006 	 0.0482836 	 0.0866883
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_66 	 0.0103316 	 0.0477905 	 0.0871374
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_67 	 0.00800335 	 0.044238 	 0.0512049
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_68 	 0.0129299 	 0.0444353 	 0.086872
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_69 	 0.0106137 	 0.0473984 	 0.0882901
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_70 	 0.0038315 	 0.0655043 	 0.089299
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_71 	 0.0124974 	 0.0441028 	 0.0880895
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_72 	 0.0043084 	 0.0650687 	 0.0902782
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_73 	 0.0103316 	 0.0477905 	 0.0871374
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_74 	 0.00862994 	 0.0581149 	 0.0878553
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_75 	 0.00426335 	 0.0650461 	 0.0903527
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_76 	 0.00850124 	 0.0582352 	 0.087706
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_77 	 0.0102844 	 0.0471374 	 0.0873936
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_78 	 0.00846818 	 0.0581275 	 0.0874793
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_79 	 0.00984881 	 0.0471539 	 0.0913985
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_80 	 0.00442474 	 0.0649841 	 0.0908419
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_81 	 0.0105384 	 0.0470919 	 0.0888414
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_82 	 0.0106433 	 0.048671 	 0.0856391
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_83 	 0.00372565 	 0.0652593 	 0.0895226
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_84 	 0.00430907 	 0.0650736 	 0.0902218
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_85 	 0.013023 	 0.0440446 	 0.0865331
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_86 	 0.00426349 	 0.0650477 	 0.0903527
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_87 	 0.00831129 	 0.0442485 	 0.0496186
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_88 	 0.0109873 	 0.0474614 	 0.0878887
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_89 	 0.0106433 	 0.048671 	 0.0856391
[18:57:57    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_90 	 0.00740735 	 0.0439554 	 0.0460145
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_91 	 0.00426349 	 0.0650477 	 0.0903527
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_92 	 0.00367171 	 0.0657435 	 0.0883111
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_93 	 0.00780153 	 0.0456354 	 0.0452132
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_94 	 0.0103006 	 0.0482836 	 0.0866883
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_95 	 0.0106034 	 0.0472496 	 0.0879493
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_96 	 0.00745625 	 0.0431614 	 0.0486925
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_97 	 0.00758587 	 0.0439889 	 0.051261
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_98 	 0.0070925 	 0.0440991 	 0.0462053
[18:57:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_99 	 0.0125466 	 0.0444737 	 0.088845
[18:57:58    INFO]  ------------------------------------------------------------------------------------------------- 
[18:57:58    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[18:57:58    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[18:57:58    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[18:57:58    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[18:57:58    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 12.5% of the [sig68] dist.
[18:57:58    INFO]  - The "best" MLM is: ANNZ_23
[18:57:58    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[18:57:58    INFO]  - initial PDF weights: ANNZ_23:0.045 ANNZ_10:0.044 ANNZ_98:0.043 ANNZ_57:0.042 ANNZ_96:0.041 ANNZ_31:0.040 ANNZ_90:0.039 ANNZ_26:0.038 ANNZ_53:0.037 ANNZ_42:0.036 ANNZ_97:0.035 ANNZ_12:0.034 ANNZ_67:0.033 ANNZ_48:0.032 ANNZ_93:0.031 ANNZ_59:0.030 ANNZ_87:0.029 ANNZ_21:0.027 ANNZ_61:0.026 ANNZ_79:0.025 ANNZ_52:0.024 ANNZ_56:0.023 ANNZ_77:0.022 ANNZ_44:0.021 ANNZ_81:0.020 ANNZ_8:0.019 ANNZ_51:0.018 ANNZ_95:0.017 ANNZ_22:0.016 ANNZ_69:0.015 ANNZ_34:0.014 ANNZ_88:0.013 ANNZ_71:0.012 ANNZ_24:0.011 ANNZ_2:0.010 ANNZ_54:0.008 ANNZ_99:0.007 ANNZ_47:0.006 ANNZ_36:0.005 ANNZ_25:0.004 ANNZ_55:0.003 ANNZ_13:0.002 ANNZ_5:0.001 
[18:57:58    INFO]  - will loop on the input trees ...
[18:58:00    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.52484e-01
[18:58:01    INFO]  - nTry: 1 - min-param best/prev/now: 2.52484e-01 / 2.52484e-01 / 2.55768e-01
[18:58:01    INFO]  - nTry: 2 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.57050e-01
[18:58:01    INFO]  - nTry: 3 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.57417e-01
[18:58:02    INFO]  - nTry: 4 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.57614e-01
[18:58:02    INFO]  - nTry: 5 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.58136e-01
[18:58:02    INFO]  - nTry: 6 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.58080e-01
[18:58:02    INFO]  - nTry: 7 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.58418e-01
[18:58:03    INFO]  - nTry: 8 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.58703e-01
[18:58:03    INFO]  - nTry: 9 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.58670e-01
[18:58:03    INFO]  - nTry: 10 - min-param best/prev/now: 2.52484e-01 / 2.55768e-01 / 2.58776e-01
[18:58:06    INFO]  - nTry: 20 - min-param best/prev/now: 2.52484e-01 / 2.59266e-01 / 2.59299e-01
[18:58:09    INFO]  - nTry: 30 - min-param best/prev/now: 2.52484e-01 / 2.59266e-01 / 2.59660e-01
[18:58:12    INFO]  - nTry: 40 - min-param best/prev/now: 2.52484e-01 / 2.59760e-01 / 2.59835e-01
[18:58:15    INFO]  - nTry: 50 - min-param best/prev/now: 2.52484e-01 / 2.59760e-01 / 2.60082e-01
[18:58:18    INFO]  - nTry: 60 - min-param best/prev/now: 2.52484e-01 / 2.60164e-01 / 2.60197e-01
[18:58:21    INFO]  - nTry: 70 - min-param best/prev/now: 2.52484e-01 / 2.60247e-01 / 2.60295e-01
[18:58:24    INFO]  - nTry: 80 - min-param best/prev/now: 2.52484e-01 / 2.60284e-01 / 2.60350e-01
[18:58:26    INFO]  - nTry: 90 - min-param best/prev/now: 2.52484e-01 / 2.60334e-01 / 2.60361e-01
[18:58:29    INFO]  - nTry: 100 - min-param best/prev/now: 2.52484e-01 / 2.60385e-01 / 2.60407e-01
[18:58:35    INFO]  - nTry: 120 - min-param best/prev/now: 2.52484e-01 / 2.60744e-01 / 2.60754e-01
[18:58:41    INFO]  - nTry: 140 - min-param best/prev/now: 2.52484e-01 / 2.60616e-01 / 2.60615e-01
[18:58:44    INFO]  - nTry: 150 - min-param best/prev/now: 2.52484e-01 / 2.60594e-01 / 2.60619e-01
[18:58:47    INFO]  - nTry: 160 - min-param best/prev/now: 2.52484e-01 / 2.60594e-01 / 2.60631e-01
[18:58:53    INFO]  - nTry: 180 - min-param best/prev/now: 2.52484e-01 / 2.60746e-01 / 2.60763e-01
[18:58:59    INFO]  - nTry: 200 - min-param best/prev/now: 2.52484e-01 / 2.60746e-01 / 2.60789e-01
[18:59:04    INFO]  - nTry: 220 - min-param best/prev/now: 2.52484e-01 / 2.60784e-01 / 2.60768e-01
[18:59:10    INFO]  - nTry: 240 - min-param best/prev/now: 2.52484e-01 / 2.60780e-01 / 2.60783e-01
[18:59:13    INFO]  - nTry: 250 - min-param best/prev/now: 2.52484e-01 / 2.60783e-01 / 2.60798e-01
[18:59:13    INFO]  - finished PDF optimization! - final minimization parameter: 2.52484e-01 , PDF weights: ANNZ_23:0.045 ANNZ_10:0.044 ANNZ_98:0.043 ANNZ_57:0.042 ANNZ_96:0.041 ANNZ_31:0.040 ANNZ_90:0.039 ANNZ_26:0.038 ANNZ_53:0.037 ANNZ_42:0.036 ANNZ_97:0.035 ANNZ_12:0.034 ANNZ_67:0.033 ANNZ_48:0.032 ANNZ_93:0.031 ANNZ_59:0.030 ANNZ_87:0.029 ANNZ_21:0.027 ANNZ_61:0.026 ANNZ_79:0.025 ANNZ_52:0.024 ANNZ_56:0.023 ANNZ_77:0.022 ANNZ_44:0.021 ANNZ_81:0.020 ANNZ_8:0.019 ANNZ_51:0.018 ANNZ_95:0.017 ANNZ_22:0.016 ANNZ_69:0.015 ANNZ_34:0.014 ANNZ_88:0.013 ANNZ_71:0.012 ANNZ_24:0.011 ANNZ_2:0.010 ANNZ_54:0.008 ANNZ_99:0.007 ANNZ_47:0.006 ANNZ_36:0.005 ANNZ_25:0.004 ANNZ_55:0.003 ANNZ_13:0.002 ANNZ_5:0.001 
[18:59:13    INFO]  - will derive the bias correction for the pdf ... 
[18:59:16    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.000000, ANNZ_1:0.000000, ANNZ_2:0.009514, ANNZ_3:0.000000, ANNZ_4:0.000000, ANNZ_5:0.001057, ANNZ_6:0.000000, ANNZ_7:0.000000, ANNZ_8:0.019027, ANNZ_9:0.000000, ANNZ_10:0.044397, ANNZ_11:0.000000, ANNZ_12:0.033827, ANNZ_13:0.002114, ANNZ_14:0.000000, ANNZ_15:0.000000, ANNZ_16:0.000000, ANNZ_17:0.000000, ANNZ_18:0.000000, ANNZ_19:0.000000, ANNZ_20:0.000000, ANNZ_21:0.027484, ANNZ_22:0.015856, ANNZ_23:0.045455, ANNZ_24:0.010571, ANNZ_25:0.004228, ANNZ_26:0.038055, ANNZ_27:0.000000, ANNZ_28:0.000000, ANNZ_29:0.000000, ANNZ_30:0.000000, ANNZ_31:0.040169, ANNZ_32:0.000000, ANNZ_33:0.000000, ANNZ_34:0.013742, ANNZ_35:0.000000, ANNZ_36:0.005285, ANNZ_37:0.000000, ANNZ_38:0.000000, ANNZ_39:0.000000, ANNZ_40:0.000000, ANNZ_41:0.000000, ANNZ_42:0.035941, ANNZ_43:0.000000, ANNZ_44:0.021142, ANNZ_45:0.000000, ANNZ_46:0.000000, ANNZ_47:0.006342, ANNZ_48:0.031712, ANNZ_49:0.000000, ANNZ_50:0.000000, ANNZ_51:0.017970, ANNZ_52:0.024313, ANNZ_53:0.036998, ANNZ_54:0.008457, ANNZ_55:0.003171, ANNZ_56:0.023256, ANNZ_57:0.042283, ANNZ_58:0.000000, ANNZ_59:0.029598, ANNZ_60:0.000000, ANNZ_61:0.026427, ANNZ_62:0.000000, ANNZ_63:0.000000, ANNZ_64:0.000000, ANNZ_65:0.000000, ANNZ_66:0.000000, ANNZ_67:0.032770, ANNZ_68:0.000000, ANNZ_69:0.014799, ANNZ_70:0.000000, ANNZ_71:0.011628, ANNZ_72:0.000000, ANNZ_73:0.000000, ANNZ_74:0.000000, ANNZ_75:0.000000, ANNZ_76:0.000000, ANNZ_77:0.022199, ANNZ_78:0.000000, ANNZ_79:0.025370, ANNZ_80:0.000000, ANNZ_81:0.020085, ANNZ_82:0.000000, ANNZ_83:0.000000, ANNZ_84:0.000000, ANNZ_85:0.000000, ANNZ_86:0.000000, ANNZ_87:0.028541, ANNZ_88:0.012685, ANNZ_89:0.000000, ANNZ_90:0.039112, ANNZ_91:0.000000, ANNZ_92:0.000000, ANNZ_93:0.030655, ANNZ_94:0.000000, ANNZ_95:0.016913, ANNZ_96:0.041226, ANNZ_97:0.034884, ANNZ_98:0.043340, ANNZ_99:0.007400, 
[18:59:16    INFO]  - Saving optimization results in ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt ...
[18:59:33   ERROR]  - ... ------------------------------------------------------------ 
[18:59:33   ERROR]  - MESSAGE -  - Failed system-call (echo '# -----------------------------------------------------------------' >  ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt) - sysReturn = -1... 
[18:59:33   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[18:59:33   ERROR]  - ..... ABORTING !!! 
[18:59:33   ERROR]  ------------------------------------------------------------ ... - 
(18:59 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(18:59 CRITICAL) [41;37;1mWill terminate !!!![0m
(21:03 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:03 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:03 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:03 INFO) [40;37;1m - 12/03/19 21:03:11 - starting ANNZ[0m
(21:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(21:03 INFO) 
[21:03:12    INFO]  -----------------------------------------------------
[21:03:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:03:12    INFO]  -----------------------------------------------------------------------------------------------------------
[21:03:12    INFO]  - starting ANNZ::Init()  ... 
[21:03:12    INFO]  - Will generate 1 PDFs ... 
[21:04:18    INFO] --------------------------------------------------------
[21:04:18    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[21:04:18    INFO]  - All REJECTED MLMs: 
[21:04:18    INFO] ----------------------------------------------------------------------------------------------------------------
[21:05:13    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/optim/saveOpt.txt ...
[21:37:35    INFO]  - starting ANNZ::Optim() ... 
[21:37:35    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[21:37:37    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced10/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[21:37:37    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[21:37:47    INFO]  - ending makeTreeRegClsAllMLM() ... 
[21:37:47    INFO]  - starting ANNZ::optimReg() ... 
[21:38:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:39:03    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced10/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[21:39:13    INFO]  - starting ANNZ::fillColosureV() ... 
[21:39:16    INFO]  ---------------------------------------------------------------------------------- 
[21:39:16    INFO]  - Got the following average properties: 
[21:39:16    INFO]  --------------------------------------- 
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00883084 	 0.0573128 	 0.0891001
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00844192 	 0.0580746 	 0.0874688
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0125413 	 0.0443738 	 0.0875448
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00858728 	 0.0581359 	 0.0873682
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.0324783 	 0.0624138 	 0.0774471
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0126438 	 0.0451117 	 0.0861711
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0128898 	 0.0446543 	 0.087566
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00415285 	 0.0649555 	 0.0910147
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0106011 	 0.0469688 	 0.0903376
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00839091 	 0.0580548 	 0.0878906
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00693335 	 0.0434622 	 0.047456
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00882729 	 0.0580044 	 0.087666
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00768601 	 0.0438563 	 0.0515601
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0126007 	 0.0451849 	 0.0848612
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00850124 	 0.0582352 	 0.087706
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00422595 	 0.0647675 	 0.0914453
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00393937 	 0.0604603 	 0.0894116
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0105702 	 0.0477364 	 0.0873181
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.00396408 	 0.0659294 	 0.0883793
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00862215 	 0.0579557 	 0.0883379
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.0101035 	 0.0485226 	 0.0861218
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00849144 	 0.0440127 	 0.0513191
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.0106034 	 0.0472496 	 0.0879493
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00611366 	 0.0365981 	 0.0546687
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.0124974 	 0.0441028 	 0.0880895
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.0126569 	 0.0443142 	 0.0860558
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.00773661 	 0.0431132 	 0.0502906
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0129299 	 0.0444353 	 0.086872
[21:39:16    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.00434633 	 0.0650436 	 0.0909968
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.0131893 	 0.0449171 	 0.0855816
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.00424721 	 0.0603133 	 0.0885649
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00730385 	 0.0437494 	 0.0472452
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.0106037 	 0.047938 	 0.0879799
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.00426349 	 0.0650477 	 0.0903527
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.0105702 	 0.0477364 	 0.0873181
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.00862215 	 0.0579557 	 0.0883379
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.0126753 	 0.0441983 	 0.0860537
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.00366486 	 0.0653097 	 0.0894867
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.0106433 	 0.048671 	 0.0856391
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.012921 	 0.0439188 	 0.0876045
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_40 	 0.00426349 	 0.0650477 	 0.0903527
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_41 	 0.00852265 	 0.0581794 	 0.0875595
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_42 	 0.00791974 	 0.042717 	 0.0485682
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_43 	 0.0130958 	 0.0444912 	 0.0858231
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_44 	 0.0104585 	 0.0473992 	 0.0884155
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_45 	 0.00439204 	 0.0649988 	 0.0906485
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_46 	 0.00427053 	 0.0652029 	 0.0899043
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_47 	 0.0125466 	 0.0444737 	 0.088845
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_48 	 0.00822397 	 0.043954 	 0.050279
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_49 	 0.0106037 	 0.047938 	 0.0879799
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_50 	 0.00850124 	 0.0582352 	 0.087706
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_51 	 0.0105466 	 0.047261 	 0.0888532
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_52 	 0.00984881 	 0.0471539 	 0.0913985
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_53 	 0.00773661 	 0.0431132 	 0.0502906
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_54 	 0.0125466 	 0.0444737 	 0.088845
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_55 	 0.0126569 	 0.0443142 	 0.0860558
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_56 	 0.00994309 	 0.0474724 	 0.0899981
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_57 	 0.00708545 	 0.0443394 	 0.0442052
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_58 	 0.00415324 	 0.0649561 	 0.0910147
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_59 	 0.00802292 	 0.0448689 	 0.0497723
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_60 	 0.0129299 	 0.0444353 	 0.086872
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_61 	 0.00862057 	 0.0438515 	 0.0514065
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_62 	 0.00386373 	 0.0660011 	 0.0879689
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_63 	 0.00873274 	 0.0581707 	 0.0879252
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_64 	 0.0103316 	 0.0477905 	 0.0871374
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_65 	 0.0103006 	 0.0482836 	 0.0866883
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_66 	 0.0103316 	 0.0477905 	 0.0871374
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_67 	 0.00800335 	 0.044238 	 0.0512049
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_68 	 0.0129299 	 0.0444353 	 0.086872
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_69 	 0.0106137 	 0.0473984 	 0.0882901
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_70 	 0.0038315 	 0.0655043 	 0.089299
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_71 	 0.0124974 	 0.0441028 	 0.0880895
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_72 	 0.0043084 	 0.0650687 	 0.0902782
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_73 	 0.0103316 	 0.0477905 	 0.0871374
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_74 	 0.00862994 	 0.0581149 	 0.0878553
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_75 	 0.00426335 	 0.0650461 	 0.0903527
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_76 	 0.00850124 	 0.0582352 	 0.087706
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_77 	 0.0102844 	 0.0471374 	 0.0873936
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_78 	 0.00846818 	 0.0581275 	 0.0874793
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_79 	 0.00984881 	 0.0471539 	 0.0913985
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_80 	 0.00442474 	 0.0649841 	 0.0908419
[21:39:17    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_81 	 0.0105384 	 0.0470919 	 0.0888414
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_82 	 0.0106433 	 0.048671 	 0.0856391
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_83 	 0.00372565 	 0.0652593 	 0.0895226
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_84 	 0.00430907 	 0.0650736 	 0.0902218
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_85 	 0.013023 	 0.0440446 	 0.0865331
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_86 	 0.00426349 	 0.0650477 	 0.0903527
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_87 	 0.00831129 	 0.0442485 	 0.0496186
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_88 	 0.0109873 	 0.0474614 	 0.0878887
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_89 	 0.0106433 	 0.048671 	 0.0856391
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_90 	 0.00740735 	 0.0439554 	 0.0460145
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_91 	 0.00426349 	 0.0650477 	 0.0903527
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_92 	 0.00367171 	 0.0657435 	 0.0883111
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_93 	 0.00780153 	 0.0456354 	 0.0452132
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_94 	 0.0103006 	 0.0482836 	 0.0866883
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_95 	 0.0106034 	 0.0472496 	 0.0879493
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_96 	 0.00745625 	 0.0431614 	 0.0486925
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_97 	 0.00758587 	 0.0439889 	 0.051261
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_98 	 0.0070925 	 0.0440991 	 0.0462053
[21:39:18    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_99 	 0.0125466 	 0.0444737 	 0.088845
[21:39:18    INFO]  ------------------------------------------------------------------------------------------------- 
[21:39:18    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[21:39:18    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[21:39:18    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[21:39:18    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[21:39:18    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 12.5% of the [sig68] dist.
[21:39:18    INFO]  - The "best" MLM is: ANNZ_23
[21:39:18    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[21:39:18    INFO]  - initial PDF weights: ANNZ_23:0.045 ANNZ_10:0.044 ANNZ_98:0.043 ANNZ_57:0.042 ANNZ_31:0.041 ANNZ_96:0.040 ANNZ_90:0.039 ANNZ_26:0.038 ANNZ_53:0.037 ANNZ_97:0.036 ANNZ_12:0.035 ANNZ_42:0.034 ANNZ_67:0.033 ANNZ_93:0.032 ANNZ_59:0.031 ANNZ_48:0.030 ANNZ_87:0.029 ANNZ_21:0.027 ANNZ_61:0.026 ANNZ_79:0.025 ANNZ_52:0.024 ANNZ_56:0.023 ANNZ_77:0.022 ANNZ_20:0.021 ANNZ_66:0.020 ANNZ_73:0.019 ANNZ_64:0.018 ANNZ_65:0.017 ANNZ_94:0.016 ANNZ_9:0.015 ANNZ_44:0.014 ANNZ_1:0.013 ANNZ_81:0.012 ANNZ_78:0.011 ANNZ_51:0.010 ANNZ_8:0.008 ANNZ_19:0.007 ANNZ_35:0.006 ANNZ_17:0.005 ANNZ_34:0.004 ANNZ_74:0.003 ANNZ_0:0.002 ANNZ_11:0.001 
[21:39:18    INFO]  - will loop on the input trees ...
[21:39:20    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.50977e-01
[21:39:20    INFO]  - nTry: 1 - min-param best/prev/now: 2.50977e-01 / 2.50977e-01 / 2.53097e-01
[21:39:21    INFO]  - nTry: 2 - min-param best/prev/now: 2.50977e-01 / 2.50977e-01 / 2.53485e-01
[21:39:21    INFO]  - nTry: 3 - min-param best/prev/now: 2.50977e-01 / 2.50977e-01 / 2.53534e-01
[21:39:21    INFO]  - nTry: 4 - min-param best/prev/now: 2.50977e-01 / 2.53534e-01 / 2.53765e-01
[21:39:21    INFO]  - nTry: 5 - min-param best/prev/now: 2.50977e-01 / 2.53765e-01 / 2.54031e-01
[21:39:22    INFO]  - nTry: 6 - min-param best/prev/now: 2.50977e-01 / 2.53765e-01 / 2.54548e-01
[21:39:22    INFO]  - nTry: 7 - min-param best/prev/now: 2.50977e-01 / 2.53765e-01 / 2.54437e-01
[21:39:22    INFO]  - nTry: 8 - min-param best/prev/now: 2.50977e-01 / 2.54437e-01 / 2.54602e-01
[21:39:22    INFO]  - nTry: 9 - min-param best/prev/now: 2.50977e-01 / 2.54437e-01 / 2.54360e-01
[21:39:23    INFO]  - nTry: 10 - min-param best/prev/now: 2.50977e-01 / 2.54360e-01 / 2.54372e-01
[21:39:25    INFO]  - nTry: 20 - min-param best/prev/now: 2.50977e-01 / 2.54223e-01 / 2.54398e-01
[21:39:28    INFO]  - nTry: 30 - min-param best/prev/now: 2.50977e-01 / 2.54617e-01 / 2.54621e-01
[21:39:31    INFO]  - nTry: 40 - min-param best/prev/now: 2.50977e-01 / 2.54970e-01 / 2.54996e-01
[21:39:34    INFO]  - nTry: 50 - min-param best/prev/now: 2.50977e-01 / 2.55297e-01 / 2.55423e-01
[21:39:36    INFO]  - nTry: 60 - min-param best/prev/now: 2.50977e-01 / 2.55526e-01 / 2.55579e-01
[21:39:39    INFO]  - nTry: 70 - min-param best/prev/now: 2.50977e-01 / 2.55660e-01 / 2.55820e-01
[21:39:42    INFO]  - nTry: 80 - min-param best/prev/now: 2.50977e-01 / 2.55660e-01 / 2.56045e-01
[21:39:45    INFO]  - nTry: 90 - min-param best/prev/now: 2.50977e-01 / 2.56061e-01 / 2.56048e-01
[21:39:47    INFO]  - nTry: 100 - min-param best/prev/now: 2.50977e-01 / 2.56036e-01 / 2.56040e-01
[21:39:53    INFO]  - nTry: 120 - min-param best/prev/now: 2.50977e-01 / 2.56061e-01 / 2.56078e-01
[21:39:58    INFO]  - nTry: 140 - min-param best/prev/now: 2.50977e-01 / 2.55971e-01 / 2.55976e-01
[21:40:01    INFO]  - nTry: 150 - min-param best/prev/now: 2.50977e-01 / 2.55968e-01 / 2.55979e-01
[21:40:04    INFO]  - nTry: 160 - min-param best/prev/now: 2.50977e-01 / 2.55952e-01 / 2.55945e-01
[21:40:09    INFO]  - nTry: 180 - min-param best/prev/now: 2.50977e-01 / 2.55922e-01 / 2.55921e-01
[21:40:15    INFO]  - nTry: 200 - min-param best/prev/now: 2.50977e-01 / 2.55919e-01 / 2.55926e-01
[21:40:20    INFO]  - nTry: 220 - min-param best/prev/now: 2.50977e-01 / 2.55978e-01 / 2.56016e-01
[21:40:26    INFO]  - nTry: 240 - min-param best/prev/now: 2.50977e-01 / 2.55982e-01 / 2.55996e-01
[21:40:29    INFO]  - nTry: 250 - min-param best/prev/now: 2.50977e-01 / 2.55969e-01 / 2.55967e-01
[21:40:29    INFO]  - finished PDF optimization! - final minimization parameter: 2.50977e-01 , PDF weights: ANNZ_23:0.045 ANNZ_10:0.044 ANNZ_98:0.043 ANNZ_57:0.042 ANNZ_31:0.041 ANNZ_96:0.040 ANNZ_90:0.039 ANNZ_26:0.038 ANNZ_53:0.037 ANNZ_97:0.036 ANNZ_12:0.035 ANNZ_42:0.034 ANNZ_67:0.033 ANNZ_93:0.032 ANNZ_59:0.031 ANNZ_48:0.030 ANNZ_87:0.029 ANNZ_21:0.027 ANNZ_61:0.026 ANNZ_79:0.025 ANNZ_52:0.024 ANNZ_56:0.023 ANNZ_77:0.022 ANNZ_20:0.021 ANNZ_66:0.020 ANNZ_73:0.019 ANNZ_64:0.018 ANNZ_65:0.017 ANNZ_94:0.016 ANNZ_9:0.015 ANNZ_44:0.014 ANNZ_1:0.013 ANNZ_81:0.012 ANNZ_78:0.011 ANNZ_51:0.010 ANNZ_8:0.008 ANNZ_19:0.007 ANNZ_35:0.006 ANNZ_17:0.005 ANNZ_34:0.004 ANNZ_74:0.003 ANNZ_0:0.002 ANNZ_11:0.001 
[21:40:29    INFO]  - will derive the bias correction for the pdf ... 
[21:40:31    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.002114, ANNZ_1:0.012685, ANNZ_2:0.000000, ANNZ_3:0.000000, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.000000, ANNZ_7:0.000000, ANNZ_8:0.008457, ANNZ_9:0.014799, ANNZ_10:0.044397, ANNZ_11:0.001057, ANNZ_12:0.034884, ANNZ_13:0.000000, ANNZ_14:0.000000, ANNZ_15:0.000000, ANNZ_16:0.000000, ANNZ_17:0.005285, ANNZ_18:0.000000, ANNZ_19:0.007400, ANNZ_20:0.021142, ANNZ_21:0.027484, ANNZ_22:0.000000, ANNZ_23:0.045455, ANNZ_24:0.000000, ANNZ_25:0.000000, ANNZ_26:0.038055, ANNZ_27:0.000000, ANNZ_28:0.000000, ANNZ_29:0.000000, ANNZ_30:0.000000, ANNZ_31:0.041226, ANNZ_32:0.000000, ANNZ_33:0.000000, ANNZ_34:0.004228, ANNZ_35:0.006342, ANNZ_36:0.000000, ANNZ_37:0.000000, ANNZ_38:0.000000, ANNZ_39:0.000000, ANNZ_40:0.000000, ANNZ_41:0.000000, ANNZ_42:0.033827, ANNZ_43:0.000000, ANNZ_44:0.013742, ANNZ_45:0.000000, ANNZ_46:0.000000, ANNZ_47:0.000000, ANNZ_48:0.029598, ANNZ_49:0.000000, ANNZ_50:0.000000, ANNZ_51:0.009514, ANNZ_52:0.024313, ANNZ_53:0.036998, ANNZ_54:0.000000, ANNZ_55:0.000000, ANNZ_56:0.023256, ANNZ_57:0.042283, ANNZ_58:0.000000, ANNZ_59:0.030655, ANNZ_60:0.000000, ANNZ_61:0.026427, ANNZ_62:0.000000, ANNZ_63:0.000000, ANNZ_64:0.017970, ANNZ_65:0.016913, ANNZ_66:0.020085, ANNZ_67:0.032770, ANNZ_68:0.000000, ANNZ_69:0.000000, ANNZ_70:0.000000, ANNZ_71:0.000000, ANNZ_72:0.000000, ANNZ_73:0.019027, ANNZ_74:0.003171, ANNZ_75:0.000000, ANNZ_76:0.000000, ANNZ_77:0.022199, ANNZ_78:0.010571, ANNZ_79:0.025370, ANNZ_80:0.000000, ANNZ_81:0.011628, ANNZ_82:0.000000, ANNZ_83:0.000000, ANNZ_84:0.000000, ANNZ_85:0.000000, ANNZ_86:0.000000, ANNZ_87:0.028541, ANNZ_88:0.000000, ANNZ_89:0.000000, ANNZ_90:0.039112, ANNZ_91:0.000000, ANNZ_92:0.000000, ANNZ_93:0.031712, ANNZ_94:0.015856, ANNZ_95:0.000000, ANNZ_96:0.040169, ANNZ_97:0.035941, ANNZ_98:0.043340, ANNZ_99:0.000000, 
[21:40:31    INFO]  - Saving optimization results in ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt ...
[21:40:48   ERROR]  - ... ------------------------------------------------------------ 
[21:40:48   ERROR]  - MESSAGE -  - Failed system-call (echo '# -----------------------------------------------------------------' >  ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt) - sysReturn = -1... 
[21:40:48   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[21:40:48   ERROR]  - ..... ABORTING !!! 
[21:40:48   ERROR]  ------------------------------------------------------------ ... - 
(21:40 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(21:40 CRITICAL) [41;37;1mWill terminate !!!![0m
Traceback (most recent call last):
  File "scripts/annz_rndReg_advanced_SPEC_advanced10.py", line 1, in <module>
    from scripts.helperFuncs import *
ImportError: No module named scripts.helperFuncs
Traceback (most recent call last):
  File "scripts/annz_rndReg_advanced_SPEC_advanced10.py", line 1, in <module>
    from scripts.helperFuncs import *
ImportError: No module named scripts.helperFuncs
(21:43 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:43 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:43 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:43 INFO) [40;37;1m - 12/03/19 21:43:32 - starting ANNZ[0m
(21:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(21:43 INFO) 
[21:43:32    INFO]  -----------------------------------------------------
[21:43:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:43:32    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:34    INFO]  - starting ANNZ::Init()  ... 
[21:43:34    INFO]  - Will generate 1 PDFs ... 
[21:44:37    INFO] --------------------------------------------------------
[21:44:37    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[21:44:37    INFO]  - All REJECTED MLMs: 
[21:44:37    INFO] ----------------------------------------------------------------------------------------------------------------
[21:45:40    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/optim/saveOpt.txt ...
[22:22:09    INFO]  - starting ANNZ::Optim() ... 
[22:22:09    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[22:22:12    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced10/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[22:22:12    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[22:22:20    INFO]  - ending makeTreeRegClsAllMLM() ... 
[22:22:20    INFO]  - starting ANNZ::optimReg() ... 
[22:23:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:23:44    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced10/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[22:23:53    INFO]  - starting ANNZ::fillColosureV() ... 
[22:23:58    INFO]  ---------------------------------------------------------------------------------- 
[22:23:58    INFO]  - Got the following average properties: 
[22:23:58    INFO]  --------------------------------------- 
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00883084 	 0.0573128 	 0.0891001
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00844192 	 0.0580746 	 0.0874688
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0125413 	 0.0443738 	 0.0875448
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00858728 	 0.0581359 	 0.0873682
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.0324783 	 0.0624138 	 0.0774471
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0126438 	 0.0451117 	 0.0861711
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0128898 	 0.0446543 	 0.087566
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00415285 	 0.0649555 	 0.0910147
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0106011 	 0.0469688 	 0.0903376
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00839091 	 0.0580548 	 0.0878906
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00693335 	 0.0434622 	 0.047456
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00882729 	 0.0580044 	 0.087666
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00768601 	 0.0438563 	 0.0515601
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0126007 	 0.0451849 	 0.0848612
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00850124 	 0.0582352 	 0.087706
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00422595 	 0.0647675 	 0.0914453
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00393937 	 0.0604603 	 0.0894116
[22:23:58    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0105702 	 0.0477364 	 0.0873181
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.00396408 	 0.0659294 	 0.0883793
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00862215 	 0.0579557 	 0.0883379
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.0101035 	 0.0485226 	 0.0861218
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00849144 	 0.0440127 	 0.0513191
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.0106034 	 0.0472496 	 0.0879493
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00611366 	 0.0365981 	 0.0546687
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.0124974 	 0.0441028 	 0.0880895
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.0126569 	 0.0443142 	 0.0860558
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.00773661 	 0.0431132 	 0.0502906
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0129299 	 0.0444353 	 0.086872
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.00434633 	 0.0650436 	 0.0909968
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.0131893 	 0.0449171 	 0.0855816
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.00424721 	 0.0603133 	 0.0885649
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00730385 	 0.0437494 	 0.0472452
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.0106037 	 0.047938 	 0.0879799
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.00426349 	 0.0650477 	 0.0903527
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.0105702 	 0.0477364 	 0.0873181
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.00862215 	 0.0579557 	 0.0883379
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.0126753 	 0.0441983 	 0.0860537
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.00366486 	 0.0653097 	 0.0894867
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.0106433 	 0.048671 	 0.0856391
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.012921 	 0.0439188 	 0.0876045
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_40 	 0.00426349 	 0.0650477 	 0.0903527
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_41 	 0.00852265 	 0.0581794 	 0.0875595
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_42 	 0.00791974 	 0.042717 	 0.0485682
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_43 	 0.0130958 	 0.0444912 	 0.0858231
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_44 	 0.0104585 	 0.0473992 	 0.0884155
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_45 	 0.00439204 	 0.0649988 	 0.0906485
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_46 	 0.00427053 	 0.0652029 	 0.0899043
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_47 	 0.0125466 	 0.0444737 	 0.088845
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_48 	 0.00822397 	 0.043954 	 0.050279
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_49 	 0.0106037 	 0.047938 	 0.0879799
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_50 	 0.00850124 	 0.0582352 	 0.087706
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_51 	 0.0105466 	 0.047261 	 0.0888532
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_52 	 0.00984881 	 0.0471539 	 0.0913985
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_53 	 0.00773661 	 0.0431132 	 0.0502906
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_54 	 0.0125466 	 0.0444737 	 0.088845
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_55 	 0.0126569 	 0.0443142 	 0.0860558
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_56 	 0.00994309 	 0.0474724 	 0.0899981
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_57 	 0.00708545 	 0.0443394 	 0.0442052
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_58 	 0.00415324 	 0.0649561 	 0.0910147
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_59 	 0.00802292 	 0.0448689 	 0.0497723
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_60 	 0.0129299 	 0.0444353 	 0.086872
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_61 	 0.00862057 	 0.0438515 	 0.0514065
[22:23:59    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_62 	 0.00386373 	 0.0660011 	 0.0879689
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_63 	 0.00873274 	 0.0581707 	 0.0879252
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_64 	 0.0103316 	 0.0477905 	 0.0871374
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_65 	 0.0103006 	 0.0482836 	 0.0866883
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_66 	 0.0103316 	 0.0477905 	 0.0871374
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_67 	 0.00800335 	 0.044238 	 0.0512049
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_68 	 0.0129299 	 0.0444353 	 0.086872
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_69 	 0.0106137 	 0.0473984 	 0.0882901
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_70 	 0.0038315 	 0.0655043 	 0.089299
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_71 	 0.0124974 	 0.0441028 	 0.0880895
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_72 	 0.0043084 	 0.0650687 	 0.0902782
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_73 	 0.0103316 	 0.0477905 	 0.0871374
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_74 	 0.00862994 	 0.0581149 	 0.0878553
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_75 	 0.00426335 	 0.0650461 	 0.0903527
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_76 	 0.00850124 	 0.0582352 	 0.087706
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_77 	 0.0102844 	 0.0471374 	 0.0873936
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_78 	 0.00846818 	 0.0581275 	 0.0874793
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_79 	 0.00984881 	 0.0471539 	 0.0913985
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_80 	 0.00442474 	 0.0649841 	 0.0908419
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_81 	 0.0105384 	 0.0470919 	 0.0888414
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_82 	 0.0106433 	 0.048671 	 0.0856391
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_83 	 0.00372565 	 0.0652593 	 0.0895226
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_84 	 0.00430907 	 0.0650736 	 0.0902218
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_85 	 0.013023 	 0.0440446 	 0.0865331
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_86 	 0.00426349 	 0.0650477 	 0.0903527
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_87 	 0.00831129 	 0.0442485 	 0.0496186
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_88 	 0.0109873 	 0.0474614 	 0.0878887
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_89 	 0.0106433 	 0.048671 	 0.0856391
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_90 	 0.00740735 	 0.0439554 	 0.0460145
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_91 	 0.00426349 	 0.0650477 	 0.0903527
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_92 	 0.00367171 	 0.0657435 	 0.0883111
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_93 	 0.00780153 	 0.0456354 	 0.0452132
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_94 	 0.0103006 	 0.0482836 	 0.0866883
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_95 	 0.0106034 	 0.0472496 	 0.0879493
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_96 	 0.00745625 	 0.0431614 	 0.0486925
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_97 	 0.00758587 	 0.0439889 	 0.051261
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_98 	 0.0070925 	 0.0440991 	 0.0462053
[22:24:00    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_99 	 0.0125466 	 0.0444737 	 0.088845
[22:24:00    INFO]  ------------------------------------------------------------------------------------------------- 
[22:24:00    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[22:24:00    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[22:24:00    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[22:24:00    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[22:24:00    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 12.5% of the [sig68] dist.
[22:24:00    INFO]  - The "best" MLM is: ANNZ_23
[22:24:00    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[22:24:00    INFO]  - initial PDF weights: ANNZ_23:0.032 ANNZ_10:0.031 ANNZ_98:0.031 ANNZ_57:0.030 ANNZ_31:0.030 ANNZ_96:0.029 ANNZ_90:0.029 ANNZ_26:0.028 ANNZ_53:0.028 ANNZ_97:0.027 ANNZ_12:0.027 ANNZ_42:0.026 ANNZ_67:0.026 ANNZ_93:0.025 ANNZ_59:0.025 ANNZ_48:0.024 ANNZ_87:0.024 ANNZ_21:0.023 ANNZ_16:0.023 ANNZ_61:0.022 ANNZ_30:0.022 ANNZ_15:0.021 ANNZ_52:0.020 ANNZ_79:0.020 ANNZ_56:0.019 ANNZ_77:0.019 ANNZ_20:0.018 ANNZ_9:0.018 ANNZ_64:0.017 ANNZ_73:0.017 ANNZ_66:0.016 ANNZ_1:0.016 ANNZ_94:0.015 ANNZ_65:0.015 ANNZ_78:0.014 ANNZ_44:0.014 ANNZ_81:0.013 ANNZ_76:0.013 ANNZ_14:0.012 ANNZ_50:0.012 ANNZ_41:0.011 ANNZ_51:0.011 ANNZ_8:0.010 ANNZ_19:0.010 ANNZ_35:0.009 ANNZ_3:0.009 ANNZ_74:0.008 ANNZ_95:0.008 ANNZ_22:0.007 ANNZ_0:0.007 ANNZ_69:0.006 ANNZ_17:0.006 ANNZ_34:0.005 ANNZ_63:0.005 ANNZ_32:0.004 ANNZ_49:0.004 ANNZ_11:0.003 ANNZ_82:0.003 ANNZ_89:0.002 ANNZ_38:0.002 ANNZ_88:0.001 ANNZ_71:0.001 
[22:24:00    INFO]  - will loop on the input trees ...
[22:24:02    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.51787e-01
[22:24:02    INFO]  - nTry: 1 - min-param best/prev/now: 2.51787e-01 / 2.51787e-01 / 2.53639e-01
[22:24:03    INFO]  - nTry: 2 - min-param best/prev/now: 2.51787e-01 / 2.51787e-01 / 2.54456e-01
[22:24:03    INFO]  - nTry: 3 - min-param best/prev/now: 2.51787e-01 / 2.51787e-01 / 2.54816e-01
[22:24:03    INFO]  - nTry: 4 - min-param best/prev/now: 2.51787e-01 / 2.51787e-01 / 2.54809e-01
[22:24:04    INFO]  - nTry: 5 - min-param best/prev/now: 2.51787e-01 / 2.51787e-01 / 2.54335e-01
[22:24:04    INFO]  - nTry: 6 - min-param best/prev/now: 2.51787e-01 / 2.51787e-01 / 2.54709e-01
[22:24:04    INFO]  - nTry: 7 - min-param best/prev/now: 2.51787e-01 / 2.51787e-01 / 2.54879e-01
[22:24:05    INFO]  - nTry: 8 - min-param best/prev/now: 2.51787e-01 / 2.54879e-01 / 2.54846e-01
[22:24:05    INFO]  - nTry: 9 - min-param best/prev/now: 2.51787e-01 / 2.54846e-01 / 2.55092e-01
[22:24:05    INFO]  - nTry: 10 - min-param best/prev/now: 2.51787e-01 / 2.54846e-01 / 2.55131e-01
[22:24:09    INFO]  - nTry: 20 - min-param best/prev/now: 2.51787e-01 / 2.54846e-01 / 2.55471e-01
[22:24:12    INFO]  - nTry: 30 - min-param best/prev/now: 2.51787e-01 / 2.54846e-01 / 2.55769e-01
[22:24:15    INFO]  - nTry: 40 - min-param best/prev/now: 2.51787e-01 / 2.55735e-01 / 2.55814e-01
[22:24:19    INFO]  - nTry: 50 - min-param best/prev/now: 2.51787e-01 / 2.56104e-01 / 2.56117e-01
[22:24:22    INFO]  - nTry: 60 - min-param best/prev/now: 2.51787e-01 / 2.55956e-01 / 2.55960e-01
[22:24:25    INFO]  - nTry: 70 - min-param best/prev/now: 2.51787e-01 / 2.55991e-01 / 2.56029e-01
[22:24:28    INFO]  - nTry: 80 - min-param best/prev/now: 2.51787e-01 / 2.55974e-01 / 2.56067e-01
[22:24:32    INFO]  - nTry: 90 - min-param best/prev/now: 2.51787e-01 / 2.56087e-01 / 2.56079e-01
[22:24:35    INFO]  - nTry: 100 - min-param best/prev/now: 2.51787e-01 / 2.56056e-01 / 2.56051e-01
[22:24:41    INFO]  - nTry: 120 - min-param best/prev/now: 2.51787e-01 / 2.56118e-01 / 2.56135e-01
[22:24:48    INFO]  - nTry: 140 - min-param best/prev/now: 2.51787e-01 / 2.56229e-01 / 2.56240e-01
[22:24:51    INFO]  - nTry: 150 - min-param best/prev/now: 2.51787e-01 / 2.56371e-01 / 2.56365e-01
[22:24:54    INFO]  - nTry: 160 - min-param best/prev/now: 2.51787e-01 / 2.56364e-01 / 2.56373e-01
[22:25:01    INFO]  - nTry: 180 - min-param best/prev/now: 2.51787e-01 / 2.56336e-01 / 2.56349e-01
[22:25:08    INFO]  - nTry: 200 - min-param best/prev/now: 2.51787e-01 / 2.56391e-01 / 2.56396e-01
[22:25:14    INFO]  - nTry: 220 - min-param best/prev/now: 2.51787e-01 / 2.56405e-01 / 2.56408e-01
[22:25:21    INFO]  - nTry: 240 - min-param best/prev/now: 2.51787e-01 / 2.56381e-01 / 2.56385e-01
[22:25:24    INFO]  - nTry: 250 - min-param best/prev/now: 2.51787e-01 / 2.56399e-01 / 2.56402e-01
[22:25:24    INFO]  - finished PDF optimization! - final minimization parameter: 2.51787e-01 , PDF weights: ANNZ_23:0.032 ANNZ_10:0.031 ANNZ_98:0.031 ANNZ_57:0.030 ANNZ_31:0.030 ANNZ_96:0.029 ANNZ_90:0.029 ANNZ_26:0.028 ANNZ_53:0.028 ANNZ_97:0.027 ANNZ_12:0.027 ANNZ_42:0.026 ANNZ_67:0.026 ANNZ_93:0.025 ANNZ_59:0.025 ANNZ_48:0.024 ANNZ_87:0.024 ANNZ_21:0.023 ANNZ_16:0.023 ANNZ_61:0.022 ANNZ_30:0.022 ANNZ_15:0.021 ANNZ_52:0.020 ANNZ_79:0.020 ANNZ_56:0.019 ANNZ_77:0.019 ANNZ_20:0.018 ANNZ_9:0.018 ANNZ_64:0.017 ANNZ_73:0.017 ANNZ_66:0.016 ANNZ_1:0.016 ANNZ_94:0.015 ANNZ_65:0.015 ANNZ_78:0.014 ANNZ_44:0.014 ANNZ_81:0.013 ANNZ_76:0.013 ANNZ_14:0.012 ANNZ_50:0.012 ANNZ_41:0.011 ANNZ_51:0.011 ANNZ_8:0.010 ANNZ_19:0.010 ANNZ_35:0.009 ANNZ_3:0.009 ANNZ_74:0.008 ANNZ_95:0.008 ANNZ_22:0.007 ANNZ_0:0.007 ANNZ_69:0.006 ANNZ_17:0.006 ANNZ_34:0.005 ANNZ_63:0.005 ANNZ_32:0.004 ANNZ_49:0.004 ANNZ_11:0.003 ANNZ_82:0.003 ANNZ_89:0.002 ANNZ_38:0.002 ANNZ_88:0.001 ANNZ_71:0.001 
[22:25:24    INFO]  - will derive the bias correction for the pdf ... 
[22:25:27    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.006656, ANNZ_1:0.015873, ANNZ_2:0.000000, ANNZ_3:0.008705, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.000000, ANNZ_7:0.000000, ANNZ_8:0.010241, ANNZ_9:0.017921, ANNZ_10:0.031234, ANNZ_11:0.003072, ANNZ_12:0.026626, ANNZ_13:0.000000, ANNZ_14:0.012289, ANNZ_15:0.020993, ANNZ_16:0.022529, ANNZ_17:0.005632, ANNZ_18:0.000000, ANNZ_19:0.009729, ANNZ_20:0.018433, ANNZ_21:0.023041, ANNZ_22:0.007168, ANNZ_23:0.031746, ANNZ_24:0.000000, ANNZ_25:0.000000, ANNZ_26:0.028162, ANNZ_27:0.000000, ANNZ_28:0.000000, ANNZ_29:0.000000, ANNZ_30:0.021505, ANNZ_31:0.029698, ANNZ_32:0.004096, ANNZ_33:0.000000, ANNZ_34:0.005120, ANNZ_35:0.009217, ANNZ_36:0.000000, ANNZ_37:0.000000, ANNZ_38:0.001536, ANNZ_39:0.000000, ANNZ_40:0.000000, ANNZ_41:0.011265, ANNZ_42:0.026114, ANNZ_43:0.000000, ANNZ_44:0.013825, ANNZ_45:0.000000, ANNZ_46:0.000000, ANNZ_47:0.000000, ANNZ_48:0.024066, ANNZ_49:0.003584, ANNZ_50:0.011777, ANNZ_51:0.010753, ANNZ_52:0.020481, ANNZ_53:0.027650, ANNZ_54:0.000000, ANNZ_55:0.000000, ANNZ_56:0.019457, ANNZ_57:0.030210, ANNZ_58:0.000000, ANNZ_59:0.024578, ANNZ_60:0.000000, ANNZ_61:0.022017, ANNZ_62:0.000000, ANNZ_63:0.004608, ANNZ_64:0.017409, ANNZ_65:0.014849, ANNZ_66:0.016385, ANNZ_67:0.025602, ANNZ_68:0.000000, ANNZ_69:0.006144, ANNZ_70:0.000000, ANNZ_71:0.000512, ANNZ_72:0.000000, ANNZ_73:0.016897, ANNZ_74:0.008193, ANNZ_75:0.000000, ANNZ_76:0.012801, ANNZ_77:0.018945, ANNZ_78:0.014337, ANNZ_79:0.019969, ANNZ_80:0.000000, ANNZ_81:0.013313, ANNZ_82:0.002560, ANNZ_83:0.000000, ANNZ_84:0.000000, ANNZ_85:0.000000, ANNZ_86:0.000000, ANNZ_87:0.023554, ANNZ_88:0.001024, ANNZ_89:0.002048, ANNZ_90:0.028674, ANNZ_91:0.000000, ANNZ_92:0.000000, ANNZ_93:0.025090, ANNZ_94:0.015361, ANNZ_95:0.007680, ANNZ_96:0.029186, ANNZ_97:0.027138, ANNZ_98:0.030722, ANNZ_99:0.000000, 
[22:25:27    INFO]  - Saving optimization results in ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt ...
[22:25:43   ERROR]  - ... ------------------------------------------------------------ 
[22:25:43   ERROR]  - MESSAGE -  - Failed system-call (echo '# -----------------------------------------------------------------' >  ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt) - sysReturn = -1... 
[22:25:43   ERROR]  - FROM    - FILE: ../src/Utils.cpp , LINE: 398 , (Mar  8 2019 14:46:52) 
[22:25:43   ERROR]  - ..... ABORTING !!! 
[22:25:43   ERROR]  ------------------------------------------------------------ ... - 
(22:25 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(22:25 CRITICAL) [41;37;1mWill terminate !!!![0m
(23:45 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:45 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:45 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:45 INFO) [40;37;1m - 12/03/19 23:45:02 - starting ANNZ[0m
(23:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(23:45 INFO) 
[23:45:03    INFO]  -----------------------------------------------------
[23:45:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:45:03    INFO]  -----------------------------------------------------------------------------------------------------------
[23:45:06    INFO]  - starting ANNZ::Init()  ... 
[23:45:06    INFO]  - Will generate 1 PDFs ... 
[23:46:04    INFO] --------------------------------------------------------
[23:46:04    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[23:46:04    INFO]  - All REJECTED MLMs: 
[23:46:04    INFO] ----------------------------------------------------------------------------------------------------------------
[23:46:11    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/optim/saveOpt.txt ...
[23:48:18    INFO]  - starting ANNZ::Optim() ... 
[23:48:18    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[23:48:20    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced10/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[23:48:20    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[23:48:20    INFO]  - ending makeTreeRegClsAllMLM() ... 
[23:48:20    INFO]  - starting ANNZ::optimReg() ... 
[23:48:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:48:29    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced10/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[23:48:30    INFO]  - starting ANNZ::fillColosureV() ... 
[23:48:33    INFO]  ---------------------------------------------------------------------------------- 
[23:48:33    INFO]  - Got the following average properties: 
[23:48:33    INFO]  --------------------------------------- 
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00883084 	 0.0573128 	 0.0891001
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00844192 	 0.0580746 	 0.0874688
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0125413 	 0.0443738 	 0.0875448
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00858728 	 0.0581359 	 0.0873682
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.0324783 	 0.0624138 	 0.0774471
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.0126438 	 0.0451117 	 0.0861711
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0128898 	 0.0446543 	 0.087566
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00415285 	 0.0649555 	 0.0910147
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0106011 	 0.0469688 	 0.0903376
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00839091 	 0.0580548 	 0.0878906
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00693335 	 0.0434622 	 0.047456
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00882729 	 0.0580044 	 0.087666
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00768601 	 0.0438563 	 0.0515601
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0126007 	 0.0451849 	 0.0848612
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00850124 	 0.0582352 	 0.087706
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00422595 	 0.0647675 	 0.0914453
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00393937 	 0.0604603 	 0.0894116
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.0105702 	 0.0477364 	 0.0873181
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.00396408 	 0.0659294 	 0.0883793
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00862215 	 0.0579557 	 0.0883379
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.0101035 	 0.0485226 	 0.0861218
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00849144 	 0.0440127 	 0.0513191
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.0106034 	 0.0472496 	 0.0879493
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00611366 	 0.0365981 	 0.0546687
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.0124974 	 0.0441028 	 0.0880895
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.0126569 	 0.0443142 	 0.0860558
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.00773661 	 0.0431132 	 0.0502906
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0129299 	 0.0444353 	 0.086872
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.00434633 	 0.0650436 	 0.0909968
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.0131893 	 0.0449171 	 0.0855816
[23:48:33    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.00424721 	 0.0603133 	 0.0885649
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00730385 	 0.0437494 	 0.0472452
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.0106037 	 0.047938 	 0.0879799
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.00426349 	 0.0650477 	 0.0903527
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.0105702 	 0.0477364 	 0.0873181
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.00862215 	 0.0579557 	 0.0883379
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.0126753 	 0.0441983 	 0.0860537
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.00366486 	 0.0653097 	 0.0894867
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.0106433 	 0.048671 	 0.0856391
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.012921 	 0.0439188 	 0.0876045
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_40 	 0.00426349 	 0.0650477 	 0.0903527
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_41 	 0.00852265 	 0.0581794 	 0.0875595
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_42 	 0.00791974 	 0.042717 	 0.0485682
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_43 	 0.0130958 	 0.0444912 	 0.0858231
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_44 	 0.0104585 	 0.0473992 	 0.0884155
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_45 	 0.00439204 	 0.0649988 	 0.0906485
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_46 	 0.00427053 	 0.0652029 	 0.0899043
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_47 	 0.0125466 	 0.0444737 	 0.088845
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_48 	 0.00822397 	 0.043954 	 0.050279
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_49 	 0.0106037 	 0.047938 	 0.0879799
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_50 	 0.00850124 	 0.0582352 	 0.087706
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_51 	 0.0105466 	 0.047261 	 0.0888532
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_52 	 0.00984881 	 0.0471539 	 0.0913985
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_53 	 0.00773661 	 0.0431132 	 0.0502906
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_54 	 0.0125466 	 0.0444737 	 0.088845
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_55 	 0.0126569 	 0.0443142 	 0.0860558
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_56 	 0.00994309 	 0.0474724 	 0.0899981
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_57 	 0.00708545 	 0.0443394 	 0.0442052
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_58 	 0.00415324 	 0.0649561 	 0.0910147
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_59 	 0.00802292 	 0.0448689 	 0.0497723
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_60 	 0.0129299 	 0.0444353 	 0.086872
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_61 	 0.00862057 	 0.0438515 	 0.0514065
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_62 	 0.00386373 	 0.0660011 	 0.0879689
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_63 	 0.00873274 	 0.0581707 	 0.0879252
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_64 	 0.0103316 	 0.0477905 	 0.0871374
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_65 	 0.0103006 	 0.0482836 	 0.0866883
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_66 	 0.0103316 	 0.0477905 	 0.0871374
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_67 	 0.00800335 	 0.044238 	 0.0512049
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_68 	 0.0129299 	 0.0444353 	 0.086872
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_69 	 0.0106137 	 0.0473984 	 0.0882901
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_70 	 0.0038315 	 0.0655043 	 0.089299
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_71 	 0.0124974 	 0.0441028 	 0.0880895
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_72 	 0.0043084 	 0.0650687 	 0.0902782
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_73 	 0.0103316 	 0.0477905 	 0.0871374
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_74 	 0.00862994 	 0.0581149 	 0.0878553
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_75 	 0.00426335 	 0.0650461 	 0.0903527
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_76 	 0.00850124 	 0.0582352 	 0.087706
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_77 	 0.0102844 	 0.0471374 	 0.0873936
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_78 	 0.00846818 	 0.0581275 	 0.0874793
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_79 	 0.00984881 	 0.0471539 	 0.0913985
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_80 	 0.00442474 	 0.0649841 	 0.0908419
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_81 	 0.0105384 	 0.0470919 	 0.0888414
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_82 	 0.0106433 	 0.048671 	 0.0856391
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_83 	 0.00372565 	 0.0652593 	 0.0895226
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_84 	 0.00430907 	 0.0650736 	 0.0902218
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_85 	 0.013023 	 0.0440446 	 0.0865331
[23:48:34    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_86 	 0.00426349 	 0.0650477 	 0.0903527
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_87 	 0.00831129 	 0.0442485 	 0.0496186
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_88 	 0.0109873 	 0.0474614 	 0.0878887
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_89 	 0.0106433 	 0.048671 	 0.0856391
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_90 	 0.00740735 	 0.0439554 	 0.0460145
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_91 	 0.00426349 	 0.0650477 	 0.0903527
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_92 	 0.00367171 	 0.0657435 	 0.0883111
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_93 	 0.00780153 	 0.0456354 	 0.0452132
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_94 	 0.0103006 	 0.0482836 	 0.0866883
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_95 	 0.0106034 	 0.0472496 	 0.0879493
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_96 	 0.00745625 	 0.0431614 	 0.0486925
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_97 	 0.00758587 	 0.0439889 	 0.051261
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_98 	 0.0070925 	 0.0440991 	 0.0462053
[23:48:35    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_99 	 0.0125466 	 0.0444737 	 0.088845
[23:48:35    INFO]  ------------------------------------------------------------------------------------------------- 
[23:48:35    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[23:48:35    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[23:48:35    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[23:48:35    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[23:48:35    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 12.5% of the [sig68] dist.
[23:48:35    INFO]  - The "best" MLM is: ANNZ_23
[23:48:35    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[23:48:35    INFO]  - initial PDF weights: ANNZ_23:0.037 ANNZ_10:0.036 ANNZ_98:0.036 ANNZ_57:0.035 ANNZ_96:0.034 ANNZ_31:0.034 ANNZ_90:0.033 ANNZ_26:0.032 ANNZ_53:0.031 ANNZ_42:0.031 ANNZ_97:0.030 ANNZ_12:0.029 ANNZ_67:0.029 ANNZ_48:0.028 ANNZ_93:0.027 ANNZ_59:0.027 ANNZ_87:0.026 ANNZ_21:0.025 ANNZ_61:0.024 ANNZ_79:0.024 ANNZ_52:0.023 ANNZ_56:0.022 ANNZ_77:0.022 ANNZ_20:0.021 ANNZ_66:0.020 ANNZ_64:0.020 ANNZ_73:0.019 ANNZ_44:0.018 ANNZ_81:0.017 ANNZ_65:0.017 ANNZ_94:0.016 ANNZ_8:0.015 ANNZ_51:0.015 ANNZ_22:0.014 ANNZ_95:0.013 ANNZ_69:0.013 ANNZ_17:0.012 ANNZ_34:0.011 ANNZ_32:0.010 ANNZ_49:0.010 ANNZ_82:0.009 ANNZ_88:0.008 ANNZ_71:0.008 ANNZ_24:0.007 ANNZ_2:0.006 ANNZ_54:0.006 ANNZ_99:0.005 ANNZ_47:0.004 ANNZ_36:0.003 ANNZ_25:0.003 ANNZ_55:0.002 ANNZ_13:0.001 ANNZ_5:0.001 
[23:48:35    INFO]  - will loop on the input trees ...
[23:48:36    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.53387e-01
[23:48:37    INFO]  - nTry: 1 - min-param best/prev/now: 2.53387e-01 / 2.53387e-01 / 2.55451e-01
[23:48:37    INFO]  - nTry: 2 - min-param best/prev/now: 2.53387e-01 / 2.55451e-01 / 2.56782e-01
[23:48:37    INFO]  - nTry: 3 - min-param best/prev/now: 2.53387e-01 / 2.55451e-01 / 2.57469e-01
[23:48:38    INFO]  - nTry: 4 - min-param best/prev/now: 2.53387e-01 / 2.55451e-01 / 2.57226e-01
[23:48:38    INFO]  - nTry: 5 - min-param best/prev/now: 2.53387e-01 / 2.55451e-01 / 2.57659e-01
[23:48:38    INFO]  - nTry: 6 - min-param best/prev/now: 2.53387e-01 / 2.55451e-01 / 2.57747e-01
[23:48:38    INFO]  - nTry: 7 - min-param best/prev/now: 2.53387e-01 / 2.55451e-01 / 2.57944e-01
[23:48:39    INFO]  - nTry: 8 - min-param best/prev/now: 2.53387e-01 / 2.55451e-01 / 2.58118e-01
[23:48:39    INFO]  - nTry: 9 - min-param best/prev/now: 2.53387e-01 / 2.58118e-01 / 2.58246e-01
[23:48:39    INFO]  - nTry: 10 - min-param best/prev/now: 2.53387e-01 / 2.58118e-01 / 2.58435e-01
[23:48:42    INFO]  - nTry: 20 - min-param best/prev/now: 2.53387e-01 / 2.59256e-01 / 2.59557e-01
[23:48:45    INFO]  - nTry: 30 - min-param best/prev/now: 2.53387e-01 / 2.59809e-01 / 2.59862e-01
[23:48:48    INFO]  - nTry: 40 - min-param best/prev/now: 2.53387e-01 / 2.60228e-01 / 2.60234e-01
[23:48:51    INFO]  - nTry: 50 - min-param best/prev/now: 2.53387e-01 / 2.60453e-01 / 2.60523e-01
[23:48:54    INFO]  - nTry: 60 - min-param best/prev/now: 2.53387e-01 / 2.60453e-01 / 2.60632e-01
[23:48:57    INFO]  - nTry: 70 - min-param best/prev/now: 2.53387e-01 / 2.60788e-01 / 2.60797e-01
[23:49:00    INFO]  - nTry: 80 - min-param best/prev/now: 2.53387e-01 / 2.60738e-01 / 2.60774e-01
[23:49:02    INFO]  - nTry: 90 - min-param best/prev/now: 2.53387e-01 / 2.60774e-01 / 2.60833e-01
[23:49:05    INFO]  - nTry: 100 - min-param best/prev/now: 2.53387e-01 / 2.60847e-01 / 2.60873e-01
[23:49:11    INFO]  - nTry: 120 - min-param best/prev/now: 2.53387e-01 / 2.60788e-01 / 2.60788e-01
[23:49:17    INFO]  - nTry: 140 - min-param best/prev/now: 2.53387e-01 / 2.60693e-01 / 2.60715e-01
[23:49:20    INFO]  - nTry: 150 - min-param best/prev/now: 2.53387e-01 / 2.60709e-01 / 2.60732e-01
[23:49:23    INFO]  - nTry: 160 - min-param best/prev/now: 2.53387e-01 / 2.60697e-01 / 2.60679e-01
[23:49:28    INFO]  - nTry: 180 - min-param best/prev/now: 2.53387e-01 / 2.60635e-01 / 2.60645e-01
[23:49:34    INFO]  - nTry: 200 - min-param best/prev/now: 2.53387e-01 / 2.60703e-01 / 2.60711e-01
[23:49:40    INFO]  - nTry: 220 - min-param best/prev/now: 2.53387e-01 / 2.60718e-01 / 2.60723e-01
[23:49:46    INFO]  - nTry: 240 - min-param best/prev/now: 2.53387e-01 / 2.60800e-01 / 2.60799e-01
[23:49:48    INFO]  - nTry: 250 - min-param best/prev/now: 2.53387e-01 / 2.60780e-01 / 2.60787e-01
[23:49:48    INFO]  - finished PDF optimization! - final minimization parameter: 2.53387e-01 , PDF weights: ANNZ_23:0.037 ANNZ_10:0.036 ANNZ_98:0.036 ANNZ_57:0.035 ANNZ_96:0.034 ANNZ_31:0.034 ANNZ_90:0.033 ANNZ_26:0.032 ANNZ_53:0.031 ANNZ_42:0.031 ANNZ_97:0.030 ANNZ_12:0.029 ANNZ_67:0.029 ANNZ_48:0.028 ANNZ_93:0.027 ANNZ_59:0.027 ANNZ_87:0.026 ANNZ_21:0.025 ANNZ_61:0.024 ANNZ_79:0.024 ANNZ_52:0.023 ANNZ_56:0.022 ANNZ_77:0.022 ANNZ_20:0.021 ANNZ_66:0.020 ANNZ_64:0.020 ANNZ_73:0.019 ANNZ_44:0.018 ANNZ_81:0.017 ANNZ_65:0.017 ANNZ_94:0.016 ANNZ_8:0.015 ANNZ_51:0.015 ANNZ_22:0.014 ANNZ_95:0.013 ANNZ_69:0.013 ANNZ_17:0.012 ANNZ_34:0.011 ANNZ_32:0.010 ANNZ_49:0.010 ANNZ_82:0.009 ANNZ_88:0.008 ANNZ_71:0.008 ANNZ_24:0.007 ANNZ_2:0.006 ANNZ_54:0.006 ANNZ_99:0.005 ANNZ_47:0.004 ANNZ_36:0.003 ANNZ_25:0.003 ANNZ_55:0.002 ANNZ_13:0.001 ANNZ_5:0.001 
[23:49:48    INFO]  - will derive the bias correction for the pdf ... 
[23:49:51    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.000000, ANNZ_1:0.000000, ANNZ_2:0.006289, ANNZ_3:0.000000, ANNZ_4:0.000000, ANNZ_5:0.000699, ANNZ_6:0.000000, ANNZ_7:0.000000, ANNZ_8:0.015374, ANNZ_9:0.000000, ANNZ_10:0.036338, ANNZ_11:0.000000, ANNZ_12:0.029350, ANNZ_13:0.001398, ANNZ_14:0.000000, ANNZ_15:0.000000, ANNZ_16:0.000000, ANNZ_17:0.011880, ANNZ_18:0.000000, ANNZ_19:0.000000, ANNZ_20:0.020964, ANNZ_21:0.025157, ANNZ_22:0.013976, ANNZ_23:0.037037, ANNZ_24:0.006988, ANNZ_25:0.002795, ANNZ_26:0.032145, ANNZ_27:0.000000, ANNZ_28:0.000000, ANNZ_29:0.000000, ANNZ_30:0.000000, ANNZ_31:0.033543, ANNZ_32:0.010482, ANNZ_33:0.000000, ANNZ_34:0.011181, ANNZ_35:0.000000, ANNZ_36:0.003494, ANNZ_37:0.000000, ANNZ_38:0.000000, ANNZ_39:0.000000, ANNZ_40:0.000000, ANNZ_41:0.000000, ANNZ_42:0.030748, ANNZ_43:0.000000, ANNZ_44:0.018169, ANNZ_45:0.000000, ANNZ_46:0.000000, ANNZ_47:0.004193, ANNZ_48:0.027952, ANNZ_49:0.009783, ANNZ_50:0.000000, ANNZ_51:0.014675, ANNZ_52:0.023061, ANNZ_53:0.031447, ANNZ_54:0.005590, ANNZ_55:0.002096, ANNZ_56:0.022362, ANNZ_57:0.034941, ANNZ_58:0.000000, ANNZ_59:0.026555, ANNZ_60:0.000000, ANNZ_61:0.024458, ANNZ_62:0.000000, ANNZ_63:0.000000, ANNZ_64:0.019567, ANNZ_65:0.016771, ANNZ_66:0.020266, ANNZ_67:0.028651, ANNZ_68:0.000000, ANNZ_69:0.012579, ANNZ_70:0.000000, ANNZ_71:0.007687, ANNZ_72:0.000000, ANNZ_73:0.018868, ANNZ_74:0.000000, ANNZ_75:0.000000, ANNZ_76:0.000000, ANNZ_77:0.021663, ANNZ_78:0.000000, ANNZ_79:0.023760, ANNZ_80:0.000000, ANNZ_81:0.017470, ANNZ_82:0.009085, ANNZ_83:0.000000, ANNZ_84:0.000000, ANNZ_85:0.000000, ANNZ_86:0.000000, ANNZ_87:0.025856, ANNZ_88:0.008386, ANNZ_89:0.000000, ANNZ_90:0.032844, ANNZ_91:0.000000, ANNZ_92:0.000000, ANNZ_93:0.027254, ANNZ_94:0.016073, ANNZ_95:0.013277, ANNZ_96:0.034242, ANNZ_97:0.030049, ANNZ_98:0.035639, ANNZ_99:0.004892, 
[23:49:51    INFO]  - Saving optimization results in ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt ...
[23:49:56    INFO]  - Saving bias-correction results in ./output/SPEC_advanced10/regres/optim/saveOptimObj.root ...
[23:50:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:50:11    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced10/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[23:50:21    INFO]  - starting ANNZ::doEvalReg() ... 
[23:50:21    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[23:50:21    INFO]  - Reading bias-correction results from ./output/SPEC_advanced10/regres/optim/saveOptimObj.root ...
[23:50:21    INFO]  - Getting optimization results from ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt ...
[23:50:21    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[23:50:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:50:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:50:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:50:23    INFO]  - starting storeTreeToAscii() ... 
[23:50:23    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[23:50:23    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced10/regres/optim/eval/ANNZ_randomReg_0000.csv
[23:50:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:50:23    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[23:50:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:50:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:50:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[23:50:24    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[23:50:36    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/optim/eval/plots/

(23:50 INFO) [40;37;1m - 12/03/19 23:50:43 - finished running ANNZ ![0m
(23:51 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(23:51 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(23:51 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(23:51 INFO) [40;37;1m - 12/03/19 23:51:35 - starting ANNZ[0m
(23:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m100[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced10[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data10c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(23:51 INFO) 
[23:51:35    INFO]  -----------------------------------------------------
[23:51:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:51:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:37    INFO]  - starting ANNZ::Init()  ... 
[23:51:37    INFO]  - Will generate 1 PDFs ... 
[23:52:33    INFO] --------------------------------------------------------
[23:52:33    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[23:52:33    INFO]  - All REJECTED MLMs: 
[23:52:33    INFO] ----------------------------------------------------------------------------------------------------------------
[23:52:40    INFO]  - Saving run information in ./output/SPEC_advanced10/regres/eval_nFile0/saveOpt.txt ...
[23:54:56    INFO]  - starting inputToFullTree(ANNz_data10c.csv) ... 
[23:54:57    INFO]  - Found 2232 lines in file PAUS/ANNz_data10c.csv -> total so far = 2232 ... 
[23:54:57    INFO]  - Now reading-in PAUS/ANNz_data10c.csv ... 
[23:54:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:54:57    INFO]  -- ANNZ_tree_eval .................................. 2232  nLine
[23:54:57    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[23:54:57    INFO]  -----------------------------------------------------------------------------------------------------------
[23:54:58    INFO]  - starting ANNZ::Eval() ... 
[23:54:58    INFO]  - starting ANNZ::doEvalReg() ... 
[23:54:58    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,ANNZ_90,ANNZ_91,ANNZ_92,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[23:54:58    INFO]  - Reading bias-correction results from ./output/SPEC_advanced10/regres/optim/saveOptimObj.root ...
[23:54:58    INFO]  - Getting optimization results from ./output/SPEC_advanced10/regres/optim/saveOptimOpt.txt ...
[23:54:58    INFO]  - creating MLM trees from input ...
[23:54:58    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_2,ANNZ_5,ANNZ_8,ANNZ_10,ANNZ_12,ANNZ_13,ANNZ_17,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_31,ANNZ_32,ANNZ_34,ANNZ_36,ANNZ_42,ANNZ_44,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_59,ANNZ_61,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_69,ANNZ_71,ANNZ_73,ANNZ_77,ANNZ_79,ANNZ_81,ANNZ_82,ANNZ_87,ANNZ_88,ANNZ_90,ANNZ_93,ANNZ_94,ANNZ_95,ANNZ_96,ANNZ_97,ANNZ_98,ANNZ_99,
[23:54:58    INFO]  - starting ANNZ::loadReaders() ... 
[01:05:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:05:27    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[01:05:27    INFO]  -----------------------------------------------------------------------------------------------------------
[01:05:28    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[01:05:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:05:30    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 2232  nObj
[01:05:30    INFO]  -----------------------------------------------------------------------------------------------------------
[01:05:30    INFO]  - starting storeTreeToAscii() ... 
[01:05:30    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[01:05:30    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced10/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[01:05:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:05:30    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[01:05:30    INFO]  -----------------------------------------------------------------------------------------------------------
[01:05:33    INFO]  - detected the target,zspec in the evaluated sample - Will create performance plots ...
[01:05:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:05:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[01:05:33    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
Warning in <Fit>: Fit data is empty 
[01:05:42    INFO]  - Writing to plotting directory output/SPEC_advanced10/regres/eval_nFile0/plots/

(01:05 INFO) [40;37;1m - 13/03/19 01:05:47 - finished running ANNZ ![0m
