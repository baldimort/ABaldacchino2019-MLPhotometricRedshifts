(21:35 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:35 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:35 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:35 INFO) [40;37;1m - 12/02/19 21:35:03 - starting ANNZ[0m
(21:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:35 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data8a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data8b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:35 INFO) 
[21:35:04    INFO]  -----------------------------------------------------
[21:35:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:35:04    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:07    INFO]  - starting inputToSplitTree() ... 
[21:35:07    INFO]  - Found 13465 lines in file PAUS/ANNz_data8a.csv -> total so far = 13465 ... 
[21:35:07    INFO]  - Found 3366 lines in file PAUS/ANNz_data8b.csv -> total so far = 3366 ... 
[21:35:08    INFO]  - Now reading-in PAUS/ANNz_data8a.csv ... 
[21:35:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:35:09    INFO]  -- ANNZ_tree .......................................... 0  index
[21:35:09    INFO]  -- ANNZ_tree ...................................... 13465  nLine
[21:35:09    INFO]  -- ANNZ_tree ...................................... 13465  nLineFile
[21:35:09    INFO]  -- ANNZ_tree ...................................... 13465  nObj
[21:35:09    INFO]  -- ANNZ_tree .......................................... 0  nTest
[21:35:09    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[21:35:09    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:10    INFO]  - Now reading-in PAUS/ANNz_data8b.csv ... 
[21:35:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:35:10    INFO]  -- ANNZ_tree .......................................... 0  index
[21:35:10    INFO]  -- ANNZ_tree ...................................... 16831  nLine
[21:35:10    INFO]  -- ANNZ_tree ....................................... 3366  nLineFile
[21:35:10    INFO]  -- ANNZ_tree ....................................... 3366  nObj
[21:35:10    INFO]  -- ANNZ_tree ....................................... 3366  nTest
[21:35:10    INFO]  -- ANNZ_tree ...................................... 13465  nTrain
[21:35:10    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:11    INFO]  - Writing to plotting directory output/PAUS_advanced12/rootIn/plots/
[21:35:13    INFO]  - Writing to plotting directory output/PAUS_advanced12/rootIn/plots/

(21:35 INFO) [40;37;1m - 12/02/19 21:35:16 - finished running ANNZ ![0m
(21:35 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(21:35 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(21:35 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(21:35 INFO) [40;37;1m - 12/02/19 21:35:33 - starting ANNZ[0m
(21:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=670:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:35 INFO) 
[21:35:33    INFO]  -----------------------------------------------------
[21:35:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:35:33    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:34    INFO]  - starting ANNZ::Init()  ... 
[21:35:35    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_0/saveOpt.txt ...
[21:35:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:35:49    INFO] ----------------------------------------------------------------------------------------------------
[21:35:49    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=670:BoostType=AdaBoost:VarTransform=N,P
[21:35:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:35:49    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:35:49    INFO]      cuts (train):        ,
[21:35:49    INFO]      cuts (valid):       
[21:35:49    INFO]    - weights:            1
[21:35:49    INFO] ----------------------------------------------------------------------------------------------------
[21:35:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:36:52    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[21:36:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[21:36:56    INFO]  - Will gen. input-parameter errors ...
[21:36:58    INFO]  - starting ANNZ::loadReaders() ... 
[21:37:16    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[21:41:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:41:25    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:41:25    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:41:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:43:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:43:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:43:02    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[21:44:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:44:19    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:44:19    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:44:19    INFO]  -----------------------------------------------------------------------------------------------------------
[21:44:19    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:44:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:44:21    INFO]  - will try to derive a bias correction ... 
[21:44:21    INFO]  - will validate that training produced an XML file for later ... 
[21:44:21    INFO]  - starting ANNZ::loadReaders() ... 
[21:44:25    INFO]  - will validate that the training was not a complete failure ... 
[21:44:25    INFO]  - training seems to have been successful! will move on ...
[21:44:25    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:44:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:44:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:44:32    INFO] ----------------------------------------------------------------------------------------------------
[21:44:32    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:44:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:44:32    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:44:32    INFO]    - weights:            1
[21:44:32    INFO] ----------------------------------------------------------------------------------------------------
[21:44:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:44:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[21:44:47    INFO]  - Will gen. input-parameter errors ...
[21:44:49    INFO]  - starting ANNZ::loadReaders() ... 
[21:44:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[21:48:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:48:14    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:48:14    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:48:14    INFO]  -----------------------------------------------------------------------------------------------------------
[21:49:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:49:18    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:49:18    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:49:18    INFO]  -----------------------------------------------------------------------------------------------------------
[21:49:18    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[21:50:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:50:21    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:50:21    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:50:21    INFO]  -----------------------------------------------------------------------------------------------------------
[21:50:21    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:50:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:50:23    INFO]  - will validate that the bias-correction actually improved the result ...
[21:50:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:50:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
Warning in <Fit>: Fit data is empty 
[21:50:29    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_0/plots/
[21:50:41        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_0/plots output/PAUS_advanced12/regres/train/ANNZ_0/plots_biasCor_before
[21:50:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:50:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[21:50:46    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_0/plots/
[21:50:59        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_0/plots output/PAUS_advanced12/regres/train/ANNZ_0/plots_biasCor_after
[21:50:59    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.90436] , after the bias-correction: [0.022148 , 3.45132] --> will KEEP the correction !

(21:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:51 INFO) 
[21:51:03    INFO]  -----------------------------------------------------
[21:51:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:51:03    INFO]  -----------------------------------------------------------------------------------------------------------
[21:51:04    INFO]  - starting ANNZ::Init()  ... 
[21:51:05    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_1/saveOpt.txt ...
[21:51:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:51:19    INFO] ----------------------------------------------------------------------------------------------------
[21:51:19    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=270:BoostType=AdaBoost:VarTransform=P
[21:51:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:51:19    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:51:19    INFO]      cuts (train):        ,
[21:51:19    INFO]      cuts (valid):       
[21:51:19    INFO]    - weights:            1
[21:51:19    INFO] ----------------------------------------------------------------------------------------------------
[21:51:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:51:41    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[21:51:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[21:51:43    INFO]  - Will gen. input-parameter errors ...
[21:51:45    INFO]  - starting ANNZ::loadReaders() ... 
[21:51:49    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[21:53:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:53:34    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:53:34    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:53:34    INFO]  -----------------------------------------------------------------------------------------------------------
[21:54:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:54:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:54:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:54:11    INFO]  -----------------------------------------------------------------------------------------------------------
[21:54:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[21:54:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:54:40    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:54:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:54:40    INFO]  -----------------------------------------------------------------------------------------------------------
[21:54:40    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:54:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:54:41    INFO]  - will try to derive a bias correction ... 
[21:54:41    INFO]  - will validate that training produced an XML file for later ... 
[21:54:41    INFO]  - starting ANNZ::loadReaders() ... 
[21:54:42    INFO]  - will validate that the training was not a complete failure ... 
[21:54:42    INFO]  - training seems to have been successful! will move on ...
[21:54:42    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:54:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:54:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:54:47    INFO] ----------------------------------------------------------------------------------------------------
[21:54:47    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:54:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:54:47    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[21:54:47    INFO]    - weights:            1
[21:54:47    INFO] ----------------------------------------------------------------------------------------------------
[21:54:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:54:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[21:54:57    INFO]  - Will gen. input-parameter errors ...
[21:54:59    INFO]  - starting ANNZ::loadReaders() ... 
[21:55:06    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[21:57:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:57:23    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:57:23    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:57:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:58:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:58:10    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:58:10    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[21:58:10    INFO]  -----------------------------------------------------------------------------------------------------------
[21:58:10    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[21:59:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:59:01    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[21:59:01    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[21:59:01    INFO]  -----------------------------------------------------------------------------------------------------------
[21:59:02    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:59:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:59:03    INFO]  - will validate that the bias-correction actually improved the result ...
[21:59:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:59:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[21:59:08    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_1/plots/
[21:59:20        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_1/plots output/PAUS_advanced12/regres/train/ANNZ_1/plots_biasCor_before
[21:59:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:59:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[21:59:25    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_1/plots/
[21:59:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_1/plots output/PAUS_advanced12/regres/train/ANNZ_1/plots_biasCor_after
[21:59:37    INFO]  - Got original [KS-test,N_poiss]: [0.0473709 , 4.21006] , after the bias-correction: [0.0189363 , 3.55434] --> will KEEP the correction !

(21:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:59 INFO) 
[21:59:41    INFO]  -----------------------------------------------------
[21:59:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:59:41    INFO]  -----------------------------------------------------------------------------------------------------------
[21:59:42    INFO]  - starting ANNZ::Init()  ... 
[21:59:43    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_2/saveOpt.txt ...
[21:59:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:59:59    INFO] ----------------------------------------------------------------------------------------------------
[21:59:59    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N,P
[21:59:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:59:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[21:59:59    INFO]      cuts (train):        ,
[21:59:59    INFO]      cuts (valid):       
[21:59:59    INFO]    - weights:            1
[21:59:59    INFO] ----------------------------------------------------------------------------------------------------
[22:00:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:00:54    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[22:00:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[22:00:57    INFO]  - Will gen. input-parameter errors ...
[22:00:59    INFO]  - starting ANNZ::loadReaders() ... 
[22:01:08    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:03:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:03:55    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:03:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:03:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:04:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:04:45    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:04:45    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:04:45    INFO]  -----------------------------------------------------------------------------------------------------------
[22:04:45    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:05:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:05:40    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:05:40    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:05:40    INFO]  -----------------------------------------------------------------------------------------------------------
[22:05:40    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:05:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:05:41    INFO]  - will try to derive a bias correction ... 
[22:05:41    INFO]  - will validate that training produced an XML file for later ... 
[22:05:41    INFO]  - starting ANNZ::loadReaders() ... 
[22:05:44    INFO]  - will validate that the training was not a complete failure ... 
[22:05:44    INFO]  - training seems to have been successful! will move on ...
[22:05:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:05:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:05:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:05:50    INFO] ----------------------------------------------------------------------------------------------------
[22:05:50    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:05:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:05:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:05:50    INFO]    - weights:            1
[22:05:50    INFO] ----------------------------------------------------------------------------------------------------
[22:05:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:06:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[22:06:02    INFO]  - Will gen. input-parameter errors ...
[22:06:04    INFO]  - starting ANNZ::loadReaders() ... 
[22:06:12    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:09:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:09:06    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:09:06    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:09:06    INFO]  -----------------------------------------------------------------------------------------------------------
[22:10:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:10:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:10:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:10:02    INFO]  -----------------------------------------------------------------------------------------------------------
[22:10:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:10:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:10:59    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:10:59    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:10:59    INFO]  -----------------------------------------------------------------------------------------------------------
[22:10:59    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:11:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:11:01    INFO]  - will validate that the bias-correction actually improved the result ...
[22:11:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:11:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[22:11:07    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_2/plots/
[22:11:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_2/plots output/PAUS_advanced12/regres/train/ANNZ_2/plots_biasCor_before
[22:11:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:11:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[22:11:24    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_2/plots/
[22:11:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_2/plots output/PAUS_advanced12/regres/train/ANNZ_2/plots_biasCor_after
[22:11:37    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.8953] , after the bias-correction: [0.0219252 , 3.46552] --> will KEEP the correction !

(22:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:11 INFO) 
[22:11:41    INFO]  -----------------------------------------------------
[22:11:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:11:41    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:43    INFO]  - starting ANNZ::Init()  ... 
[22:11:44    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_3/saveOpt.txt ...
[22:11:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:11:59    INFO] ----------------------------------------------------------------------------------------------------
[22:11:59    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N
[22:11:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:11:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:11:59    INFO]      cuts (train):        ,
[22:11:59    INFO]      cuts (valid):       
[22:11:59    INFO]    - weights:            1
[22:11:59    INFO] ----------------------------------------------------------------------------------------------------
[22:11:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:13:03    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[22:13:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[22:13:10    INFO]  - Will gen. input-parameter errors ...
[22:13:13    INFO]  - starting ANNZ::loadReaders() ... 
[22:13:33    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:16:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:16:36    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:16:36    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:16:36    INFO]  -----------------------------------------------------------------------------------------------------------
[22:17:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:17:33    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:17:33    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:17:33    INFO]  -----------------------------------------------------------------------------------------------------------
[22:17:33    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:18:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:18:28    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:18:28    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:18:28    INFO]  -----------------------------------------------------------------------------------------------------------
[22:18:28    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:18:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:18:31    INFO]  - will try to derive a bias correction ... 
[22:18:31    INFO]  - will validate that training produced an XML file for later ... 
[22:18:31    INFO]  - starting ANNZ::loadReaders() ... 
[22:18:37    INFO]  - will validate that the training was not a complete failure ... 
[22:18:37    INFO]  - training seems to have been successful! will move on ...
[22:18:37    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:18:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:18:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:18:44    INFO] ----------------------------------------------------------------------------------------------------
[22:18:44    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:18:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:18:44    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:18:44    INFO]    - weights:            1
[22:18:44    INFO] ----------------------------------------------------------------------------------------------------
[22:18:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:19:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[22:19:01    INFO]  - Will gen. input-parameter errors ...
[22:19:05    INFO]  - starting ANNZ::loadReaders() ... 
[22:19:24    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:22:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:22:48    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:22:48    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:22:48    INFO]  -----------------------------------------------------------------------------------------------------------
[22:24:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:24:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:24:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:24:11    INFO]  -----------------------------------------------------------------------------------------------------------
[22:24:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:25:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:25:21    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:25:21    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:25:21    INFO]  -----------------------------------------------------------------------------------------------------------
[22:25:21    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:25:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:25:23    INFO]  - will validate that the bias-correction actually improved the result ...
[22:25:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:25:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[22:25:30    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_3/plots/
[22:25:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_3/plots output/PAUS_advanced12/regres/train/ANNZ_3/plots_biasCor_before
[22:25:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:25:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[22:25:47    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_3/plots/
[22:26:00        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_3/plots output/PAUS_advanced12/regres/train/ANNZ_3/plots_biasCor_after
[22:26:00    INFO]  - Got original [KS-test,N_poiss]: [0.0411676 , 4.62703] , after the bias-correction: [0.0263082 , 3.67218] --> will KEEP the correction !

(22:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:26 INFO) 
[22:26:05    INFO]  -----------------------------------------------------
[22:26:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:26:05    INFO]  -----------------------------------------------------------------------------------------------------------
[22:26:07    INFO]  - starting ANNZ::Init()  ... 
[22:26:09    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_4/saveOpt.txt ...
[22:26:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:26:25    INFO] ----------------------------------------------------------------------------------------------------
[22:26:25    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N
[22:26:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:26:25    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:26:25    INFO]      cuts (train):        ,
[22:26:25    INFO]      cuts (valid):       
[22:26:25    INFO]    - weights:            1
[22:26:25    INFO] ----------------------------------------------------------------------------------------------------
[22:26:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:27:00    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[22:27:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[22:27:03    INFO]  - Will gen. input-parameter errors ...
[22:27:05    INFO]  - starting ANNZ::loadReaders() ... 
[22:27:11    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:28:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:28:42    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:28:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:28:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:29:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:29:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:29:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:29:17    INFO]  -----------------------------------------------------------------------------------------------------------
[22:29:17    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:29:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:29:48    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:29:48    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:29:48    INFO]  -----------------------------------------------------------------------------------------------------------
[22:29:48    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:29:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:29:49    INFO]  - will try to derive a bias correction ... 
[22:29:49    INFO]  - will validate that training produced an XML file for later ... 
[22:29:49    INFO]  - starting ANNZ::loadReaders() ... 
[22:29:51    INFO]  - will validate that the training was not a complete failure ... 
[22:29:51    INFO]  - training seems to have been successful! will move on ...
[22:29:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:29:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:29:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:29:56    INFO] ----------------------------------------------------------------------------------------------------
[22:29:56    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:29:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:29:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:29:56    INFO]    - weights:            1
[22:29:56    INFO] ----------------------------------------------------------------------------------------------------
[22:29:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:30:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[22:30:06    INFO]  - Will gen. input-parameter errors ...
[22:30:08    INFO]  - starting ANNZ::loadReaders() ... 
[22:30:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:32:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:32:00    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:32:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:32:00    INFO]  -----------------------------------------------------------------------------------------------------------
[22:32:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:32:36    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:32:36    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:32:36    INFO]  -----------------------------------------------------------------------------------------------------------
[22:32:36    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:33:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:33:22    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:33:22    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:33:22    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:23    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:33:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:33:24    INFO]  - will validate that the bias-correction actually improved the result ...
[22:33:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:33:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[22:33:33    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_4/plots/
[22:33:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_4/plots output/PAUS_advanced12/regres/train/ANNZ_4/plots_biasCor_before
[22:33:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:33:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[22:33:59    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_4/plots/
[22:34:16        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_4/plots output/PAUS_advanced12/regres/train/ANNZ_4/plots_biasCor_after
[22:34:16    INFO]  - Got original [KS-test,N_poiss]: [0.0470478 , 5.03644] , after the bias-correction: [0.0242288 , 4.12677] --> will KEEP the correction !

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:20    INFO]  -----------------------------------------------------
[22:34:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:20    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:21    INFO]  - starting ANNZ::Init()  ... 
[22:34:23    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_5/saveOpt.txt ...
[22:34:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:34:37    INFO] ----------------------------------------------------------------------------------------------------
[22:34:37    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N
[22:34:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:34:37    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:34:37    INFO]      cuts (train):        ,
[22:34:37    INFO]      cuts (valid):       
[22:34:37    INFO]    - weights:            1
[22:34:37    INFO] ----------------------------------------------------------------------------------------------------
[22:34:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:35:25    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[22:35:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[22:35:30    INFO]  - Will gen. input-parameter errors ...
[22:35:32    INFO]  - starting ANNZ::loadReaders() ... 
[22:35:43    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:37:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:37:30    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:37:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:37:30    INFO]  -----------------------------------------------------------------------------------------------------------
[22:38:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:38:07    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:38:07    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:38:07    INFO]  -----------------------------------------------------------------------------------------------------------
[22:38:07    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:38:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:38:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:38:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:38:47    INFO]  -----------------------------------------------------------------------------------------------------------
[22:38:48    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:38:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:38:50    INFO]  - will try to derive a bias correction ... 
[22:38:50    INFO]  - will validate that training produced an XML file for later ... 
[22:38:50    INFO]  - starting ANNZ::loadReaders() ... 
[22:38:55    INFO]  - will validate that the training was not a complete failure ... 
[22:38:55    INFO]  - training seems to have been successful! will move on ...
[22:38:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:39:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:39:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:39:02    INFO] ----------------------------------------------------------------------------------------------------
[22:39:02    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:39:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:39:02    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:39:02    INFO]    - weights:            1
[22:39:02    INFO] ----------------------------------------------------------------------------------------------------
[22:39:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:39:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[22:39:16    INFO]  - Will gen. input-parameter errors ...
[22:39:18    INFO]  - starting ANNZ::loadReaders() ... 
[22:39:28    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:41:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:41:32    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:41:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:41:32    INFO]  -----------------------------------------------------------------------------------------------------------
[22:42:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:42:17    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:42:17    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:42:17    INFO]  -----------------------------------------------------------------------------------------------------------
[22:42:17    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:43:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:43:01    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:43:01    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:43:01    INFO]  -----------------------------------------------------------------------------------------------------------
[22:43:01    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:43:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:43:03    INFO]  - will validate that the bias-correction actually improved the result ...
[22:43:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:43:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[22:43:09    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_5/plots/
[22:43:24        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_5/plots output/PAUS_advanced12/regres/train/ANNZ_5/plots_biasCor_before
[22:43:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:43:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[22:43:32    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_5/plots/
[22:43:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_5/plots output/PAUS_advanced12/regres/train/ANNZ_5/plots_biasCor_after
[22:43:53    INFO]  - Got original [KS-test,N_poiss]: [0.0410191 , 4.63287] , after the bias-correction: [0.0261596 , 3.66187] --> will KEEP the correction !

(22:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:43 INFO) 
[22:43:59    INFO]  -----------------------------------------------------
[22:43:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:43:59    INFO]  -----------------------------------------------------------------------------------------------------------
[22:44:01    INFO]  - starting ANNZ::Init()  ... 
[22:44:02    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_6/saveOpt.txt ...
[22:44:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:44:23    INFO] ----------------------------------------------------------------------------------------------------
[22:44:23    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=450:BoostType=AdaBoost:VarTransform=N
[22:44:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:44:23    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:44:23    INFO]      cuts (train):        ,
[22:44:23    INFO]      cuts (valid):       
[22:44:23    INFO]    - weights:            1
[22:44:23    INFO] ----------------------------------------------------------------------------------------------------
[22:44:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:45:10    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[22:45:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[22:45:13    INFO]  - Will gen. input-parameter errors ...
[22:45:14    INFO]  - starting ANNZ::loadReaders() ... 
[22:45:21    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:47:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:47:16    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:47:16    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:47:16    INFO]  -----------------------------------------------------------------------------------------------------------
[22:47:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:47:52    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:47:52    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:47:52    INFO]  -----------------------------------------------------------------------------------------------------------
[22:47:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:48:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:48:31    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:48:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:48:31    INFO]  -----------------------------------------------------------------------------------------------------------
[22:48:31    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:48:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:48:32    INFO]  - will try to derive a bias correction ... 
[22:48:32    INFO]  - will validate that training produced an XML file for later ... 
[22:48:32    INFO]  - starting ANNZ::loadReaders() ... 
[22:48:34    INFO]  - will validate that the training was not a complete failure ... 
[22:48:34    INFO]  - training seems to have been successful! will move on ...
[22:48:34    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:48:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:48:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:48:40    INFO] ----------------------------------------------------------------------------------------------------
[22:48:40    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:48:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:48:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[22:48:40    INFO]    - weights:            1
[22:48:40    INFO] ----------------------------------------------------------------------------------------------------
[22:48:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:48:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[22:48:50    INFO]  - Will gen. input-parameter errors ...
[22:48:52    INFO]  - starting ANNZ::loadReaders() ... 
[22:48:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[22:50:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:50:50    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:50:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:50:50    INFO]  -----------------------------------------------------------------------------------------------------------
[22:51:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:51:26    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:51:26    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[22:51:26    INFO]  -----------------------------------------------------------------------------------------------------------
[22:51:27    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[22:52:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:52:02    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[22:52:02    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[22:52:02    INFO]  -----------------------------------------------------------------------------------------------------------
[22:52:03    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:52:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:52:04    INFO]  - will validate that the bias-correction actually improved the result ...
[22:52:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:52:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
Warning in <Fit>: Fit data is empty 
[22:52:10    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_6/plots/
[22:52:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_6/plots output/PAUS_advanced12/regres/train/ANNZ_6/plots_biasCor_before
[22:52:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:52:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
Warning in <Fit>: Fit data is empty 
[22:52:26    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_6/plots/
[22:52:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_6/plots output/PAUS_advanced12/regres/train/ANNZ_6/plots_biasCor_after
[22:52:39    INFO]  - Got original [KS-test,N_poiss]: [0.0471963 , 5.05311] , after the bias-correction: [0.0246761 , 4.04574] --> will KEEP the correction !

(22:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:52 INFO) 
[22:52:43    INFO]  -----------------------------------------------------
[22:52:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:52:43    INFO]  -----------------------------------------------------------------------------------------------------------
[22:52:45    INFO]  - starting ANNZ::Init()  ... 
[22:52:46    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_7/saveOpt.txt ...
[22:53:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:53:01    INFO] ----------------------------------------------------------------------------------------------------
[22:53:01    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=460:BoostType=AdaBoostR2:VarTransform=N
[22:53:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:53:01    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[22:53:01    INFO]      cuts (train):        ,
[22:53:01    INFO]      cuts (valid):       
[22:53:01    INFO]    - weights:            1
[22:53:01    INFO] ----------------------------------------------------------------------------------------------------
[22:53:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:53:49    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[22:53:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[22:53:52    INFO]  - Will gen. input-parameter errors ...
[22:53:54    INFO]  - starting ANNZ::loadReaders() ... 
[22:54:11    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[23:03:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:03:52    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:03:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:03:52    INFO]  -----------------------------------------------------------------------------------------------------------
[23:06:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:06:58    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:06:58    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:06:58    INFO]  -----------------------------------------------------------------------------------------------------------
[23:06:58    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[23:09:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:09:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:09:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:09:47    INFO]  -----------------------------------------------------------------------------------------------------------
[23:09:47    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:09:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:09:49    INFO]  - will try to derive a bias correction ... 
[23:09:49    INFO]  - will validate that training produced an XML file for later ... 
[23:09:49    INFO]  - starting ANNZ::loadReaders() ... 
[23:09:51    INFO]  - will validate that the training was not a complete failure ... 
[23:09:51    INFO]  - training seems to have been successful! will move on ...
[23:09:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:09:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:09:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:09:58    INFO] ----------------------------------------------------------------------------------------------------
[23:09:58    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:09:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:09:58    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:09:58    INFO]    - weights:            1
[23:09:58    INFO] ----------------------------------------------------------------------------------------------------
[23:09:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:10:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[23:10:12    INFO]  - Will gen. input-parameter errors ...
[23:10:14    INFO]  - starting ANNZ::loadReaders() ... 
[23:10:32    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[23:17:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:17:48    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:17:48    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:17:48    INFO]  -----------------------------------------------------------------------------------------------------------
[23:20:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:20:20    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:20:20    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:20:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:20:20    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[23:22:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:22:55    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:22:55    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:22:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:22:55    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:22:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:22:56    INFO]  - will validate that the bias-correction actually improved the result ...
[23:22:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:22:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[23:23:02    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_7/plots/
[23:23:14        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_7/plots output/PAUS_advanced12/regres/train/ANNZ_7/plots_biasCor_before
[23:23:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:23:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[23:23:19    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_7/plots/
[23:23:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_7/plots output/PAUS_advanced12/regres/train/ANNZ_7/plots_biasCor_after
[23:23:30    INFO]  - Got original [KS-test,N_poiss]: [0.0638581 , 5.17441] , after the bias-correction: [0.0185137 , 4.02551] --> will KEEP the correction !

(23:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:23 INFO) 
[23:23:34    INFO]  -----------------------------------------------------
[23:23:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:23:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:23:36    INFO]  - starting ANNZ::Init()  ... 
[23:23:37    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_8/saveOpt.txt ...
[23:23:52    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:23:52    INFO] ----------------------------------------------------------------------------------------------------
[23:23:52    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=310:BoostType=Bagging:VarTransform=N
[23:23:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:23:52    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:23:52    INFO]      cuts (train):        ,
[23:23:52    INFO]      cuts (valid):       
[23:23:52    INFO]    - weights:            1
[23:23:52    INFO] ----------------------------------------------------------------------------------------------------
[23:23:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:24:31    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[23:24:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[23:24:35    INFO]  - Will gen. input-parameter errors ...
[23:24:37    INFO]  - starting ANNZ::loadReaders() ... 
[23:24:45    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[23:26:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:26:16    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:26:16    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:26:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:26:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:26:48    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:26:48    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:26:48    INFO]  -----------------------------------------------------------------------------------------------------------
[23:26:48    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[23:27:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:27:26    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:27:26    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:27:26    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:26    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:27:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:27:28    INFO]  - will try to derive a bias correction ... 
[23:27:28    INFO]  - will validate that training produced an XML file for later ... 
[23:27:28    INFO]  - starting ANNZ::loadReaders() ... 
[23:27:31    INFO]  - will validate that the training was not a complete failure ... 
[23:27:31    INFO]  - training seems to have been successful! will move on ...
[23:27:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:27:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:27:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:27:37    INFO] ----------------------------------------------------------------------------------------------------
[23:27:37    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:27:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:27:37    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:27:37    INFO]    - weights:            1
[23:27:37    INFO] ----------------------------------------------------------------------------------------------------
[23:27:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:27:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[23:27:50    INFO]  - Will gen. input-parameter errors ...
[23:27:52    INFO]  - starting ANNZ::loadReaders() ... 
[23:28:00    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[23:29:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:29:39    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:29:39    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:29:39    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:11    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:30:11    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:30:11    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:11    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[23:30:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:43    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:30:43    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:30:43    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:43    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:30:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:30:44    INFO]  - will validate that the bias-correction actually improved the result ...
[23:30:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:30:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[23:30:50    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_8/plots/
[23:31:01        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_8/plots output/PAUS_advanced12/regres/train/ANNZ_8/plots_biasCor_before
[23:31:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:31:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[23:31:07    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_8/plots/
[23:31:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_8/plots output/PAUS_advanced12/regres/train/ANNZ_8/plots_biasCor_after
[23:31:18    INFO]  - Got original [KS-test,N_poiss]: [0.0410191 , 4.63169] , after the bias-correction: [0.0260834 , 3.69454] --> will KEEP the correction !

(23:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:31 INFO) 
[23:31:23    INFO]  -----------------------------------------------------
[23:31:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:31:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:31:24    INFO]  - starting ANNZ::Init()  ... 
[23:31:25    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_9/saveOpt.txt ...
[23:31:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:31:40    INFO] ----------------------------------------------------------------------------------------------------
[23:31:40    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=330:BoostType=AdaBoostR2:VarTransform=N
[23:31:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:31:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:31:40    INFO]      cuts (train):        ,
[23:31:40    INFO]      cuts (valid):       
[23:31:40    INFO]    - weights:            1
[23:31:40    INFO] ----------------------------------------------------------------------------------------------------
[23:31:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:32:17    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[23:32:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[23:32:21    INFO]  - Will gen. input-parameter errors ...
[23:32:23    INFO]  - starting ANNZ::loadReaders() ... 
[23:32:34    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[23:37:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:37:48    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:37:48    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:37:48    INFO]  -----------------------------------------------------------------------------------------------------------
[23:39:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:39:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:39:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:39:35    INFO]  -----------------------------------------------------------------------------------------------------------
[23:39:35    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[23:41:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:41:06    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:41:06    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:41:06    INFO]  -----------------------------------------------------------------------------------------------------------
[23:41:06    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:41:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:41:07    INFO]  - will try to derive a bias correction ... 
[23:41:07    INFO]  - will validate that training produced an XML file for later ... 
[23:41:07    INFO]  - starting ANNZ::loadReaders() ... 
[23:41:09    INFO]  - will validate that the training was not a complete failure ... 
[23:41:09    INFO]  - training seems to have been successful! will move on ...
[23:41:09    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:41:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:41:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:41:15    INFO] ----------------------------------------------------------------------------------------------------
[23:41:15    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:41:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:41:15    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:41:15    INFO]    - weights:            1
[23:41:15    INFO] ----------------------------------------------------------------------------------------------------
[23:41:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:41:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[23:41:26    INFO]  - Will gen. input-parameter errors ...
[23:41:28    INFO]  - starting ANNZ::loadReaders() ... 
[23:41:38    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[23:46:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:46:28    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:46:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:46:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:48:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:48:02    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:48:02    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:48:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:48:02    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[23:49:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:49:34    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:49:34    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:49:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:49:34    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:49:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:49:35    INFO]  - will validate that the bias-correction actually improved the result ...
[23:49:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:49:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[23:49:41    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_9/plots/
[23:49:59        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_9/plots output/PAUS_advanced12/regres/train/ANNZ_9/plots_biasCor_before
[23:49:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:49:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[23:50:04    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_9/plots/
[23:50:16        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_9/plots output/PAUS_advanced12/regres/train/ANNZ_9/plots_biasCor_after
[23:50:16    INFO]  - Got original [KS-test,N_poiss]: [0.0627441 , 5.25935] , after the bias-correction: [0.0197762 , 4.09969] --> will KEEP the correction !

(23:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:50 INFO) 
[23:50:20    INFO]  -----------------------------------------------------
[23:50:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:50:20    INFO]  -----------------------------------------------------------------------------------------------------------
[23:50:21    INFO]  - starting ANNZ::Init()  ... 
[23:50:22    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_10/saveOpt.txt ...
[23:50:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:50:36    INFO] ----------------------------------------------------------------------------------------------------
[23:50:36    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[23:50:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:50:36    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:50:36    INFO]      cuts (train):        ,
[23:50:36    INFO]      cuts (valid):       
[23:50:36    INFO]    - weights:            1
[23:50:36    INFO] ----------------------------------------------------------------------------------------------------
[23:50:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:51:01    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[23:51:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[23:51:03    INFO]  - Will gen. input-parameter errors ...
[23:51:05    INFO]  - starting ANNZ::loadReaders() ... 
[23:51:09    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[23:52:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:52:47    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:52:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:52:47    INFO]  -----------------------------------------------------------------------------------------------------------
[23:53:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:53:23    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:53:23    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:53:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:53:23    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[23:53:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:53:57    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:53:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:53:57    INFO]  -----------------------------------------------------------------------------------------------------------
[23:53:57    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:53:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:53:58    INFO]  - will try to derive a bias correction ... 
[23:53:58    INFO]  - will validate that training produced an XML file for later ... 
[23:53:58    INFO]  - starting ANNZ::loadReaders() ... 
[23:53:59    INFO]  - will validate that the training was not a complete failure ... 
[23:54:00    INFO]  - training seems to have been successful! will move on ...
[23:54:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:54:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:54:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:54:05    INFO] ----------------------------------------------------------------------------------------------------
[23:54:05    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:54:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:54:05    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[23:54:05    INFO]    - weights:            1
[23:54:05    INFO] ----------------------------------------------------------------------------------------------------
[23:54:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:54:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[23:54:15    INFO]  - Will gen. input-parameter errors ...
[23:54:17    INFO]  - starting ANNZ::loadReaders() ... 
[23:54:23    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[23:56:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:56:28    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:56:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:56:28    INFO]  -----------------------------------------------------------------------------------------------------------
[23:57:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:57:12    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:57:12    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[23:57:12    INFO]  -----------------------------------------------------------------------------------------------------------
[23:57:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[23:57:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:57:54    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[23:57:54    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[23:57:54    INFO]  -----------------------------------------------------------------------------------------------------------
[23:57:55    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:57:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:57:56    INFO]  - will validate that the bias-correction actually improved the result ...
[23:57:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:57:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
Warning in <Fit>: Fit data is empty 
[23:58:02    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_10/plots/
[23:58:13        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_10/plots output/PAUS_advanced12/regres/train/ANNZ_10/plots_biasCor_before
[23:58:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:58:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[23:58:17    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_10/plots/
[23:58:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_10/plots output/PAUS_advanced12/regres/train/ANNZ_10/plots_biasCor_after
[23:58:28    INFO]  - Got original [KS-test,N_poiss]: [0.0381206 , 3.87193] , after the bias-correction: [0.0219234 , 3.46819] --> will KEEP the correction !

(23:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:58 INFO) 
[23:58:32    INFO]  -----------------------------------------------------
[23:58:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:58:32    INFO]  -----------------------------------------------------------------------------------------------------------
[23:58:33    INFO]  - starting ANNZ::Init()  ... 
[23:58:34    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_11/saveOpt.txt ...
[23:58:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:58:50    INFO] ----------------------------------------------------------------------------------------------------
[23:58:50    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P
[23:58:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:58:50    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[23:58:50    INFO]      cuts (train):        ,
[23:58:50    INFO]      cuts (valid):       
[23:58:50    INFO]    - weights:            1
[23:58:50    INFO] ----------------------------------------------------------------------------------------------------
[23:58:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:00:58    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[00:01:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[00:01:04    INFO]  - Will gen. input-parameter errors ...
[00:01:07    INFO]  - starting ANNZ::loadReaders() ... 
[00:01:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[00:47:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:47:18    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[00:47:18    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:47:18    INFO]  -----------------------------------------------------------------------------------------------------------
[01:02:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:02:51    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:02:51    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[01:02:51    INFO]  -----------------------------------------------------------------------------------------------------------
[01:02:51    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[01:18:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:18:11    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[01:18:11    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[01:18:11    INFO]  -----------------------------------------------------------------------------------------------------------
[01:18:14    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:18:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:18:16    INFO]  - will try to derive a bias correction ... 
[01:18:16    INFO]  - will validate that training produced an XML file for later ... 
[01:18:16    INFO]  - starting ANNZ::loadReaders() ... 
[01:18:22    INFO]  - will validate that the training was not a complete failure ... 
[01:18:23    INFO]  - training seems to have been successful! will move on ...
[01:18:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:18:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:18:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:18:30    INFO] ----------------------------------------------------------------------------------------------------
[01:18:30    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:18:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:18:30    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[01:18:30    INFO]    - weights:            1
[01:18:30    INFO] ----------------------------------------------------------------------------------------------------
[01:18:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:18:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[01:18:42    INFO]  - Will gen. input-parameter errors ...
[01:18:45    INFO]  - starting ANNZ::loadReaders() ... 
[01:19:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[02:03:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:03:10    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:03:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:03:10    INFO]  -----------------------------------------------------------------------------------------------------------
[02:18:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:18:29    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:18:29    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[02:18:29    INFO]  -----------------------------------------------------------------------------------------------------------
[02:18:29    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[02:33:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:33:05    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[02:33:05    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[02:33:05    INFO]  -----------------------------------------------------------------------------------------------------------
[02:33:08    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:33:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:33:10    INFO]  - will validate that the bias-correction actually improved the result ...
[02:33:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:33:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[02:33:17    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_11/plots/
[02:33:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_11/plots output/PAUS_advanced12/regres/train/ANNZ_11/plots_biasCor_before
[02:33:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:33:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[02:33:33    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_11/plots/
[02:33:43        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_11/plots output/PAUS_advanced12/regres/train/ANNZ_11/plots_biasCor_after
[02:33:44    INFO]  - Got original [KS-test,N_poiss]: [0.0294309 , 4.8763] , after the bias-correction: [0.015543 , 3.81412] --> will KEEP the correction !

(02:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:33 INFO) 
[02:33:49    INFO]  -----------------------------------------------------
[02:33:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:33:49    INFO]  -----------------------------------------------------------------------------------------------------------
[02:33:50    INFO]  - starting ANNZ::Init()  ... 
[02:33:51    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_12/saveOpt.txt ...
[02:34:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:34:06    INFO] ----------------------------------------------------------------------------------------------------
[02:34:06    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=1030:BoostType=AdaBoostR2:VarTransform=N,P
[02:34:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:34:06    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[02:34:06    INFO]      cuts (train):        ,
[02:34:06    INFO]      cuts (valid):       
[02:34:06    INFO]    - weights:            1
[02:34:06    INFO] ----------------------------------------------------------------------------------------------------
[02:34:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:36:20    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[02:36:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[02:36:26    INFO]  - Will gen. input-parameter errors ...
[02:36:28    INFO]  - starting ANNZ::loadReaders() ... 
[02:37:18    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[03:23:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:23:03    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:23:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[03:23:03    INFO]  -----------------------------------------------------------------------------------------------------------
[03:38:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:38:50    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:38:50    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[03:38:50    INFO]  -----------------------------------------------------------------------------------------------------------
[03:38:50    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[03:54:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:54:18    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[03:54:18    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[03:54:18    INFO]  -----------------------------------------------------------------------------------------------------------
[03:54:18    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:54:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:54:21    INFO]  - will try to derive a bias correction ... 
[03:54:21    INFO]  - will validate that training produced an XML file for later ... 
[03:54:21    INFO]  - starting ANNZ::loadReaders() ... 
[03:54:27    INFO]  - will validate that the training was not a complete failure ... 
[03:54:27    INFO]  - training seems to have been successful! will move on ...
[03:54:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:54:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:54:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:54:34    INFO] ----------------------------------------------------------------------------------------------------
[03:54:34    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:54:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:54:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[03:54:34    INFO]    - weights:            1
[03:54:34    INFO] ----------------------------------------------------------------------------------------------------
[03:54:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:54:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[03:54:47    INFO]  - Will gen. input-parameter errors ...
[03:54:50    INFO]  - starting ANNZ::loadReaders() ... 
[03:55:38    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[04:38:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:38:21    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:38:21    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[04:38:21    INFO]  -----------------------------------------------------------------------------------------------------------
[04:52:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:52:18    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[04:52:18    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[04:52:18    INFO]  -----------------------------------------------------------------------------------------------------------
[04:52:18    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[05:06:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:06:07    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:06:07    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:06:07    INFO]  -----------------------------------------------------------------------------------------------------------
[05:06:10    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:06:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:06:12    INFO]  - will validate that the bias-correction actually improved the result ...
[05:06:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:06:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[05:06:18    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_12/plots/
[05:06:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_12/plots output/PAUS_advanced12/regres/train/ANNZ_12/plots_biasCor_before
[05:06:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:06:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[05:06:34    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_12/plots/
[05:06:45        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_12/plots output/PAUS_advanced12/regres/train/ANNZ_12/plots_biasCor_after
[05:06:45    INFO]  - Got original [KS-test,N_poiss]: [0.0294309 , 4.8763] , after the bias-correction: [0.015543 , 3.81412] --> will KEEP the correction !

(05:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:06 INFO) 
[05:06:50    INFO]  -----------------------------------------------------
[05:06:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:06:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:06:52    INFO]  - starting ANNZ::Init()  ... 
[05:06:53    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_13/saveOpt.txt ...
[05:07:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:07:07    INFO] ----------------------------------------------------------------------------------------------------
[05:07:07    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[05:07:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:07:07    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:07:07    INFO]      cuts (train):        ,
[05:07:07    INFO]      cuts (valid):       
[05:07:07    INFO]    - weights:            1
[05:07:07    INFO] ----------------------------------------------------------------------------------------------------
[05:07:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:07:52    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[05:07:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[05:07:57    INFO]  - Will gen. input-parameter errors ...
[05:07:59    INFO]  - starting ANNZ::loadReaders() ... 
[05:08:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[05:10:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:10:07    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:10:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:10:07    INFO]  -----------------------------------------------------------------------------------------------------------
[05:10:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:10:52    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:10:52    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:10:52    INFO]  -----------------------------------------------------------------------------------------------------------
[05:10:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[05:11:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:11:34    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:11:34    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:11:34    INFO]  -----------------------------------------------------------------------------------------------------------
[05:11:34    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:11:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:11:36    INFO]  - will try to derive a bias correction ... 
[05:11:36    INFO]  - will validate that training produced an XML file for later ... 
[05:11:36    INFO]  - starting ANNZ::loadReaders() ... 
[05:11:40    INFO]  - will validate that the training was not a complete failure ... 
[05:11:41    INFO]  - training seems to have been successful! will move on ...
[05:11:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:11:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:11:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:11:47    INFO] ----------------------------------------------------------------------------------------------------
[05:11:47    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:11:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:11:47    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[05:11:47    INFO]    - weights:            1
[05:11:47    INFO] ----------------------------------------------------------------------------------------------------
[05:11:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:12:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[05:12:00    INFO]  - Will gen. input-parameter errors ...
[05:12:02    INFO]  - starting ANNZ::loadReaders() ... 
[05:12:15    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[05:14:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:14:35    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:14:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:14:35    INFO]  -----------------------------------------------------------------------------------------------------------
[05:15:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:15:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:15:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:15:21    INFO]  -----------------------------------------------------------------------------------------------------------
[05:15:21    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[05:16:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:16:09    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:16:09    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:16:09    INFO]  -----------------------------------------------------------------------------------------------------------
[05:16:09    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:16:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:16:11    INFO]  - will validate that the bias-correction actually improved the result ...
[05:16:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:16:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[05:16:17    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_13/plots/
[05:16:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_13/plots output/PAUS_advanced12/regres/train/ANNZ_13/plots_biasCor_before
[05:16:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:16:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[05:16:34    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_13/plots/
[05:16:46        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_13/plots output/PAUS_advanced12/regres/train/ANNZ_13/plots_biasCor_after
[05:16:46    INFO]  - Got original [KS-test,N_poiss]: [0.0409427 , 4.66358] , after the bias-correction: [0.0261596 , 3.7274] --> will KEEP the correction !

(05:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=730:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:16 INFO) 
[05:16:50    INFO]  -----------------------------------------------------
[05:16:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:16:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:16:52    INFO]  - starting ANNZ::Init()  ... 
[05:16:53    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_14/saveOpt.txt ...
[05:17:08    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:17:08    INFO] ----------------------------------------------------------------------------------------------------
[05:17:08    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=730:BoostType=AdaBoost:VarTransform=N,P
[05:17:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:17:08    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:17:08    INFO]      cuts (train):        ,
[05:17:08    INFO]      cuts (valid):       
[05:17:08    INFO]    - weights:            1
[05:17:08    INFO] ----------------------------------------------------------------------------------------------------
[05:17:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:18:06    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[05:18:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[05:18:10    INFO]  - Will gen. input-parameter errors ...
[05:18:12    INFO]  - starting ANNZ::loadReaders() ... 
[05:18:26    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[05:22:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:22:35    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:22:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:22:35    INFO]  -----------------------------------------------------------------------------------------------------------
[05:23:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:23:59    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:23:59    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:23:59    INFO]  -----------------------------------------------------------------------------------------------------------
[05:23:59    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[05:25:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:25:12    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:25:12    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:25:12    INFO]  -----------------------------------------------------------------------------------------------------------
[05:25:12    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:25:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:25:14    INFO]  - will try to derive a bias correction ... 
[05:25:14    INFO]  - will validate that training produced an XML file for later ... 
[05:25:14    INFO]  - starting ANNZ::loadReaders() ... 
[05:25:17    INFO]  - will validate that the training was not a complete failure ... 
[05:25:17    INFO]  - training seems to have been successful! will move on ...
[05:25:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:25:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:25:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:25:23    INFO] ----------------------------------------------------------------------------------------------------
[05:25:23    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:25:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:25:23    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[05:25:23    INFO]    - weights:            1
[05:25:23    INFO] ----------------------------------------------------------------------------------------------------
[05:25:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:25:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[05:25:36    INFO]  - Will gen. input-parameter errors ...
[05:25:38    INFO]  - starting ANNZ::loadReaders() ... 
[05:25:47    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[05:28:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:28:24    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:28:24    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:28:24    INFO]  -----------------------------------------------------------------------------------------------------------
[05:29:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:29:18    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:29:18    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:29:18    INFO]  -----------------------------------------------------------------------------------------------------------
[05:29:18    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[05:30:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:30:10    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:30:10    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:30:10    INFO]  -----------------------------------------------------------------------------------------------------------
[05:30:11    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:30:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:30:12    INFO]  - will validate that the bias-correction actually improved the result ...
[05:30:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:30:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[05:30:18    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_14/plots/
[05:30:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_14/plots output/PAUS_advanced12/regres/train/ANNZ_14/plots_biasCor_before
[05:30:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:30:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[05:30:35    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_14/plots/
[05:30:45        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_14/plots output/PAUS_advanced12/regres/train/ANNZ_14/plots_biasCor_after
[05:30:46    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.90461] , after the bias-correction: [0.0222222 , 3.42033] --> will KEEP the correction !

(05:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:30 INFO) 
[05:30:50    INFO]  -----------------------------------------------------
[05:30:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:30:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:30:51    INFO]  - starting ANNZ::Init()  ... 
[05:30:52    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_15/saveOpt.txt ...
[05:31:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:31:07    INFO] ----------------------------------------------------------------------------------------------------
[05:31:07    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=260:BoostType=Bagging:VarTransform=N
[05:31:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:31:07    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:31:07    INFO]      cuts (train):        ,
[05:31:07    INFO]      cuts (valid):       
[05:31:07    INFO]    - weights:            1
[05:31:07    INFO] ----------------------------------------------------------------------------------------------------
[05:31:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:31:37    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[05:31:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[05:31:40    INFO]  - Will gen. input-parameter errors ...
[05:31:42    INFO]  - starting ANNZ::loadReaders() ... 
[05:31:49    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[05:33:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:33:04    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:33:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:33:04    INFO]  -----------------------------------------------------------------------------------------------------------
[05:33:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:33:31    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:33:31    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:33:31    INFO]  -----------------------------------------------------------------------------------------------------------
[05:33:31    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[05:33:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:33:57    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:33:57    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:33:57    INFO]  -----------------------------------------------------------------------------------------------------------
[05:33:57    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:33:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:33:59    INFO]  - will try to derive a bias correction ... 
[05:33:59    INFO]  - will validate that training produced an XML file for later ... 
[05:33:59    INFO]  - starting ANNZ::loadReaders() ... 
[05:34:01    INFO]  - will validate that the training was not a complete failure ... 
[05:34:01    INFO]  - training seems to have been successful! will move on ...
[05:34:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:34:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:34:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:34:07    INFO] ----------------------------------------------------------------------------------------------------
[05:34:07    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:34:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:34:07    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[05:34:07    INFO]    - weights:            1
[05:34:07    INFO] ----------------------------------------------------------------------------------------------------
[05:34:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:34:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[05:34:18    INFO]  - Will gen. input-parameter errors ...
[05:34:20    INFO]  - starting ANNZ::loadReaders() ... 
[05:34:26    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[05:35:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:35:52    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:35:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:35:52    INFO]  -----------------------------------------------------------------------------------------------------------
[05:36:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:36:20    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:36:20    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:36:20    INFO]  -----------------------------------------------------------------------------------------------------------
[05:36:20    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[05:36:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:36:49    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:36:49    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:36:49    INFO]  -----------------------------------------------------------------------------------------------------------
[05:36:49    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:36:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:36:51    INFO]  - will validate that the bias-correction actually improved the result ...
[05:36:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:36:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[05:36:56    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_15/plots/
[05:37:07        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_15/plots output/PAUS_advanced12/regres/train/ANNZ_15/plots_biasCor_before
[05:37:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:37:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[05:37:12    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_15/plots/
[05:37:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_15/plots output/PAUS_advanced12/regres/train/ANNZ_15/plots_biasCor_after
[05:37:22    INFO]  - Got original [KS-test,N_poiss]: [0.0412419 , 4.63326] , after the bias-correction: [0.0262339 , 3.72912] --> will KEEP the correction !

(05:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:37 INFO) 
[05:37:27    INFO]  -----------------------------------------------------
[05:37:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:37:27    INFO]  -----------------------------------------------------------------------------------------------------------
[05:37:28    INFO]  - starting ANNZ::Init()  ... 
[05:37:29    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_16/saveOpt.txt ...
[05:37:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:37:44    INFO] ----------------------------------------------------------------------------------------------------
[05:37:44    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=510:BoostType=AdaBoostR2:VarTransform=N
[05:37:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:37:44    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[05:37:44    INFO]      cuts (train):        ,
[05:37:44    INFO]      cuts (valid):       
[05:37:44    INFO]    - weights:            1
[05:37:44    INFO] ----------------------------------------------------------------------------------------------------
[05:37:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:38:36    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[05:38:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[05:38:39    INFO]  - Will gen. input-parameter errors ...
[05:38:41    INFO]  - starting ANNZ::loadReaders() ... 
[05:38:56    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[05:48:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:48:18    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:48:18    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[05:48:18    INFO]  -----------------------------------------------------------------------------------------------------------
[05:51:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:51:20    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:51:20    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[05:51:20    INFO]  -----------------------------------------------------------------------------------------------------------
[05:51:20    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[05:54:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:54:26    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[05:54:26    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[05:54:26    INFO]  -----------------------------------------------------------------------------------------------------------
[05:54:29    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:54:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:54:30    INFO]  - will try to derive a bias correction ... 
[05:54:30    INFO]  - will validate that training produced an XML file for later ... 
[05:54:30    INFO]  - starting ANNZ::loadReaders() ... 
[05:54:33    INFO]  - will validate that the training was not a complete failure ... 
[05:54:33    INFO]  - training seems to have been successful! will move on ...
[05:54:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:54:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:54:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:54:39    INFO] ----------------------------------------------------------------------------------------------------
[05:54:39    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:54:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:54:39    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[05:54:39    INFO]    - weights:            1
[05:54:39    INFO] ----------------------------------------------------------------------------------------------------
[05:54:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:54:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[05:54:49    INFO]  - Will gen. input-parameter errors ...
[05:54:51    INFO]  - starting ANNZ::loadReaders() ... 
[05:55:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[06:05:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:05:50    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:05:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:05:50    INFO]  -----------------------------------------------------------------------------------------------------------
[06:09:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:09:32    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:09:32    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:09:32    INFO]  -----------------------------------------------------------------------------------------------------------
[06:09:32    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[06:13:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:13:05    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:13:05    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:13:05    INFO]  -----------------------------------------------------------------------------------------------------------
[06:13:08    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:13:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:13:10    INFO]  - will validate that the bias-correction actually improved the result ...
[06:13:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:13:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[06:13:15    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_16/plots/
[06:13:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_16/plots output/PAUS_advanced12/regres/train/ANNZ_16/plots_biasCor_before
[06:13:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:13:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[06:13:31    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_16/plots/
[06:13:41        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_16/plots output/PAUS_advanced12/regres/train/ANNZ_16/plots_biasCor_after
[06:13:41    INFO]  - Got original [KS-test,N_poiss]: [0.0640066 , 5.21331] , after the bias-correction: [0.0188108 , 4.08228] --> will KEEP the correction !

(06:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(06:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(06:13 INFO) 
[06:13:45    INFO]  -----------------------------------------------------
[06:13:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[06:13:45    INFO]  -----------------------------------------------------------------------------------------------------------
[06:13:47    INFO]  - starting ANNZ::Init()  ... 
[06:13:48    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_17/saveOpt.txt ...
[06:14:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[06:14:03    INFO] ----------------------------------------------------------------------------------------------------
[06:14:03    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P
[06:14:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:14:03    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[06:14:03    INFO]      cuts (train):        ,
[06:14:03    INFO]      cuts (valid):       
[06:14:03    INFO]    - weights:            1
[06:14:03    INFO] ----------------------------------------------------------------------------------------------------
[06:14:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:14:43    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[06:14:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[06:14:46    INFO]  - Will gen. input-parameter errors ...
[06:14:48    INFO]  - starting ANNZ::loadReaders() ... 
[06:15:00    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[06:21:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:21:43    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:21:43    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:21:43    INFO]  -----------------------------------------------------------------------------------------------------------
[06:24:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:24:14    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:24:14    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:24:14    INFO]  -----------------------------------------------------------------------------------------------------------
[06:24:14    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[06:26:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:26:33    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:26:33    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:26:33    INFO]  -----------------------------------------------------------------------------------------------------------
[06:26:33    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:26:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:26:35    INFO]  - will try to derive a bias correction ... 
[06:26:35    INFO]  - will validate that training produced an XML file for later ... 
[06:26:35    INFO]  - starting ANNZ::loadReaders() ... 
[06:26:37    INFO]  - will validate that the training was not a complete failure ... 
[06:26:37    INFO]  - training seems to have been successful! will move on ...
[06:26:37    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[06:26:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:26:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:26:43    INFO] ----------------------------------------------------------------------------------------------------
[06:26:43    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[06:26:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:26:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[06:26:43    INFO]    - weights:            1
[06:26:43    INFO] ----------------------------------------------------------------------------------------------------
[06:26:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:26:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[06:26:52    INFO]  - Will gen. input-parameter errors ...
[06:26:54    INFO]  - starting ANNZ::loadReaders() ... 
[06:27:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[06:33:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:33:15    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:33:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:33:15    INFO]  -----------------------------------------------------------------------------------------------------------
[06:35:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:35:25    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:35:25    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:35:25    INFO]  -----------------------------------------------------------------------------------------------------------
[06:35:25    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[06:37:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:37:33    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:37:33    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:37:33    INFO]  -----------------------------------------------------------------------------------------------------------
[06:37:33    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:37:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:37:35    INFO]  - will validate that the bias-correction actually improved the result ...
[06:37:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:37:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[06:37:40    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_17/plots/
[06:37:52        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_17/plots output/PAUS_advanced12/regres/train/ANNZ_17/plots_biasCor_before
[06:37:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:37:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[06:37:56    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_17/plots/
[06:38:07        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_17/plots output/PAUS_advanced12/regres/train/ANNZ_17/plots_biasCor_after
[06:38:07    INFO]  - Got original [KS-test,N_poiss]: [0.0292824 , 4.91066] , after the bias-correction: [0.0173254 , 4.08487] --> will KEEP the correction !

(06:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(06:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(06:38 INFO) 
[06:38:11    INFO]  -----------------------------------------------------
[06:38:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[06:38:11    INFO]  -----------------------------------------------------------------------------------------------------------
[06:38:12    INFO]  - starting ANNZ::Init()  ... 
[06:38:13    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_18/saveOpt.txt ...
[06:38:27    INFO]  - starting ANNZ::Train_singleReg() ... 
[06:38:28    INFO] ----------------------------------------------------------------------------------------------------
[06:38:28    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N
[06:38:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:38:28    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[06:38:28    INFO]      cuts (train):        ,
[06:38:28    INFO]      cuts (valid):       
[06:38:28    INFO]    - weights:            1
[06:38:28    INFO] ----------------------------------------------------------------------------------------------------
[06:38:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:39:21    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[06:39:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[06:39:26    INFO]  - Will gen. input-parameter errors ...
[06:39:28    INFO]  - starting ANNZ::loadReaders() ... 
[06:39:42    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[06:41:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:41:59    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:41:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:41:59    INFO]  -----------------------------------------------------------------------------------------------------------
[06:42:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:42:46    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:42:46    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:42:46    INFO]  -----------------------------------------------------------------------------------------------------------
[06:42:46    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[06:43:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:43:33    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:43:33    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:43:33    INFO]  -----------------------------------------------------------------------------------------------------------
[06:43:33    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:43:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:43:36    INFO]  - will try to derive a bias correction ... 
[06:43:36    INFO]  - will validate that training produced an XML file for later ... 
[06:43:36    INFO]  - starting ANNZ::loadReaders() ... 
[06:43:41    INFO]  - will validate that the training was not a complete failure ... 
[06:43:41    INFO]  - training seems to have been successful! will move on ...
[06:43:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[06:43:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:43:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:43:48    INFO] ----------------------------------------------------------------------------------------------------
[06:43:48    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[06:43:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:43:48    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[06:43:48    INFO]    - weights:            1
[06:43:48    INFO] ----------------------------------------------------------------------------------------------------
[06:43:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:44:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[06:44:01    INFO]  - Will gen. input-parameter errors ...
[06:44:03    INFO]  - starting ANNZ::loadReaders() ... 
[06:44:18    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[06:46:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:46:57    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:46:57    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:46:57    INFO]  -----------------------------------------------------------------------------------------------------------
[06:47:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:47:52    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:47:52    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:47:52    INFO]  -----------------------------------------------------------------------------------------------------------
[06:47:52    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[06:48:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:48:47    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:48:47    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:48:47    INFO]  -----------------------------------------------------------------------------------------------------------
[06:48:47    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:48:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:48:50    INFO]  - will validate that the bias-correction actually improved the result ...
[06:48:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:48:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[06:48:55    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_18/plots/
[06:49:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_18/plots output/PAUS_advanced12/regres/train/ANNZ_18/plots_biasCor_before
[06:49:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:49:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[06:49:11    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_18/plots/
[06:49:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_18/plots output/PAUS_advanced12/regres/train/ANNZ_18/plots_biasCor_after
[06:49:22    INFO]  - Got original [KS-test,N_poiss]: [0.0411676 , 4.64383] , after the bias-correction: [0.0260854 , 3.64063] --> will KEEP the correction !

(06:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(06:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(06:49 INFO) 
[06:49:28    INFO]  -----------------------------------------------------
[06:49:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[06:49:28    INFO]  -----------------------------------------------------------------------------------------------------------
[06:49:29    INFO]  - starting ANNZ::Init()  ... 
[06:49:30    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_19/saveOpt.txt ...
[06:49:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[06:49:45    INFO] ----------------------------------------------------------------------------------------------------
[06:49:45    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[06:49:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:49:45    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[06:49:45    INFO]      cuts (train):        ,
[06:49:45    INFO]      cuts (valid):       
[06:49:45    INFO]    - weights:            1
[06:49:45    INFO] ----------------------------------------------------------------------------------------------------
[06:49:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:50:27    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[06:50:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[06:50:32    INFO]  - Will gen. input-parameter errors ...
[06:50:35    INFO]  - starting ANNZ::loadReaders() ... 
[06:50:44    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[06:53:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:53:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:53:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:53:08    INFO]  -----------------------------------------------------------------------------------------------------------
[06:53:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:53:58    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:53:58    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:53:58    INFO]  -----------------------------------------------------------------------------------------------------------
[06:53:58    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[06:54:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:54:46    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:54:46    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:54:46    INFO]  -----------------------------------------------------------------------------------------------------------
[06:54:46    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:54:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:54:48    INFO]  - will try to derive a bias correction ... 
[06:54:48    INFO]  - will validate that training produced an XML file for later ... 
[06:54:48    INFO]  - starting ANNZ::loadReaders() ... 
[06:54:52    INFO]  - will validate that the training was not a complete failure ... 
[06:54:52    INFO]  - training seems to have been successful! will move on ...
[06:54:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[06:54:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:54:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[06:54:58    INFO] ----------------------------------------------------------------------------------------------------
[06:54:58    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[06:54:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[06:54:58    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[06:54:58    INFO]    - weights:            1
[06:54:58    INFO] ----------------------------------------------------------------------------------------------------
[06:54:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[06:55:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[06:55:11    INFO]  - Will gen. input-parameter errors ...
[06:55:13    INFO]  - starting ANNZ::loadReaders() ... 
[06:55:24    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[06:57:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:57:50    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:57:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[06:57:50    INFO]  -----------------------------------------------------------------------------------------------------------
[06:58:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:58:39    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:58:39    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[06:58:39    INFO]  -----------------------------------------------------------------------------------------------------------
[06:58:39    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[06:59:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[06:59:29    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[06:59:29    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[06:59:29    INFO]  -----------------------------------------------------------------------------------------------------------
[06:59:29    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[06:59:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[06:59:31    INFO]  - will validate that the bias-correction actually improved the result ...
[06:59:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:59:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[06:59:37    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_19/plots/
[06:59:48        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_19/plots output/PAUS_advanced12/regres/train/ANNZ_19/plots_biasCor_before
[06:59:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[06:59:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[06:59:53    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_19/plots/
[07:00:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_19/plots output/PAUS_advanced12/regres/train/ANNZ_19/plots_biasCor_after
[07:00:04    INFO]  - Got original [KS-test,N_poiss]: [0.0260889 , 4.15205] , after the bias-correction: [0.0178401 , 3.29091] --> will KEEP the correction !

(07:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:00 INFO) 
[07:00:08    INFO]  -----------------------------------------------------
[07:00:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:00:08    INFO]  -----------------------------------------------------------------------------------------------------------
[07:00:09    INFO]  - starting ANNZ::Init()  ... 
[07:00:10    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_20/saveOpt.txt ...
[07:00:26    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:00:26    INFO] ----------------------------------------------------------------------------------------------------
[07:00:26    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N,P
[07:00:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:00:26    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:00:26    INFO]      cuts (train):        ,
[07:00:26    INFO]      cuts (valid):       
[07:00:26    INFO]    - weights:            1
[07:00:26    INFO] ----------------------------------------------------------------------------------------------------
[07:00:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:00:59    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[07:01:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[07:01:02    INFO]  - Will gen. input-parameter errors ...
[07:01:03    INFO]  - starting ANNZ::loadReaders() ... 
[07:01:10    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:03:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:03:08    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:03:08    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:03:08    INFO]  -----------------------------------------------------------------------------------------------------------
[07:03:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:03:49    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:03:49    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:03:49    INFO]  -----------------------------------------------------------------------------------------------------------
[07:03:49    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:04:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:04:31    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:04:31    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:04:31    INFO]  -----------------------------------------------------------------------------------------------------------
[07:04:31    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:04:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:04:32    INFO]  - will try to derive a bias correction ... 
[07:04:32    INFO]  - will validate that training produced an XML file for later ... 
[07:04:32    INFO]  - starting ANNZ::loadReaders() ... 
[07:04:34    INFO]  - will validate that the training was not a complete failure ... 
[07:04:34    INFO]  - training seems to have been successful! will move on ...
[07:04:34    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:04:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:04:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:04:40    INFO] ----------------------------------------------------------------------------------------------------
[07:04:40    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:04:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:04:40    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:04:40    INFO]    - weights:            1
[07:04:40    INFO] ----------------------------------------------------------------------------------------------------
[07:04:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:04:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[07:04:50    INFO]  - Will gen. input-parameter errors ...
[07:04:52    INFO]  - starting ANNZ::loadReaders() ... 
[07:04:59    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:07:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:07:18    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:07:18    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:07:18    INFO]  -----------------------------------------------------------------------------------------------------------
[07:08:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:08:03    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:08:03    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:08:03    INFO]  -----------------------------------------------------------------------------------------------------------
[07:08:03    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:08:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:08:48    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:08:48    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:08:48    INFO]  -----------------------------------------------------------------------------------------------------------
[07:08:48    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:08:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:08:49    INFO]  - will validate that the bias-correction actually improved the result ...
[07:08:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:08:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
Warning in <Fit>: Fit data is empty 
[07:08:55    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_20/plots/
[07:09:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_20/plots output/PAUS_advanced12/regres/train/ANNZ_20/plots_biasCor_before
[07:09:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:09:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[07:09:10    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_20/plots/
[07:09:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_20/plots output/PAUS_advanced12/regres/train/ANNZ_20/plots_biasCor_after
[07:09:21    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.897] , after the bias-correction: [0.0219252 , 3.42443] --> will KEEP the correction !

(07:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:09 INFO) 
[07:09:25    INFO]  -----------------------------------------------------
[07:09:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:09:25    INFO]  -----------------------------------------------------------------------------------------------------------
[07:09:26    INFO]  - starting ANNZ::Init()  ... 
[07:09:28    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_21/saveOpt.txt ...
[07:09:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:09:42    INFO] ----------------------------------------------------------------------------------------------------
[07:09:42    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N,P
[07:09:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:09:42    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:09:42    INFO]      cuts (train):        ,
[07:09:42    INFO]      cuts (valid):       
[07:09:42    INFO]    - weights:            1
[07:09:42    INFO] ----------------------------------------------------------------------------------------------------
[07:09:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:10:22    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[07:10:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[07:10:26    INFO]  - Will gen. input-parameter errors ...
[07:10:27    INFO]  - starting ANNZ::loadReaders() ... 
[07:10:36    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:13:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:13:00    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:13:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:13:00    INFO]  -----------------------------------------------------------------------------------------------------------
[07:13:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:13:46    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:13:46    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:13:46    INFO]  -----------------------------------------------------------------------------------------------------------
[07:13:46    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:14:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:14:33    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:14:33    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:14:33    INFO]  -----------------------------------------------------------------------------------------------------------
[07:14:33    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:14:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:14:35    INFO]  - will try to derive a bias correction ... 
[07:14:35    INFO]  - will validate that training produced an XML file for later ... 
[07:14:35    INFO]  - starting ANNZ::loadReaders() ... 
[07:14:37    INFO]  - will validate that the training was not a complete failure ... 
[07:14:37    INFO]  - training seems to have been successful! will move on ...
[07:14:37    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:14:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:14:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:14:43    INFO] ----------------------------------------------------------------------------------------------------
[07:14:43    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:14:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:14:43    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:14:43    INFO]    - weights:            1
[07:14:43    INFO] ----------------------------------------------------------------------------------------------------
[07:14:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:14:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[07:14:54    INFO]  - Will gen. input-parameter errors ...
[07:14:56    INFO]  - starting ANNZ::loadReaders() ... 
[07:15:04    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:17:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:17:22    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:17:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:17:22    INFO]  -----------------------------------------------------------------------------------------------------------
[07:18:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:18:10    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:18:10    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:18:10    INFO]  -----------------------------------------------------------------------------------------------------------
[07:18:10    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:18:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:18:58    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:18:58    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:18:58    INFO]  -----------------------------------------------------------------------------------------------------------
[07:18:58    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:19:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:19:00    INFO]  - will validate that the bias-correction actually improved the result ...
[07:19:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:19:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
Warning in <Fit>: Fit data is empty 
[07:19:05    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_21/plots/
[07:19:16        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_21/plots output/PAUS_advanced12/regres/train/ANNZ_21/plots_biasCor_before
[07:19:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:19:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[07:19:21    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_21/plots/
[07:19:32        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_21/plots output/PAUS_advanced12/regres/train/ANNZ_21/plots_biasCor_after
[07:19:32    INFO]  - Got original [KS-test,N_poiss]: [0.0386405 , 3.89511] , after the bias-correction: [0.0219994 , 3.47426] --> will KEEP the correction !

(07:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:19 INFO) 
[07:19:36    INFO]  -----------------------------------------------------
[07:19:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:19:36    INFO]  -----------------------------------------------------------------------------------------------------------
[07:19:38    INFO]  - starting ANNZ::Init()  ... 
[07:19:39    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_22/saveOpt.txt ...
[07:19:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:19:56    INFO] ----------------------------------------------------------------------------------------------------
[07:19:56    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[07:19:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:19:56    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:19:56    INFO]      cuts (train):        ,
[07:19:56    INFO]      cuts (valid):       
[07:19:56    INFO]    - weights:            1
[07:19:56    INFO] ----------------------------------------------------------------------------------------------------
[07:19:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:20:20    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[07:20:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[07:20:22    INFO]  - Will gen. input-parameter errors ...
[07:20:24    INFO]  - starting ANNZ::loadReaders() ... 
[07:20:29    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:22:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:22:03    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:22:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:22:03    INFO]  -----------------------------------------------------------------------------------------------------------
[07:22:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:22:35    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:22:35    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:22:35    INFO]  -----------------------------------------------------------------------------------------------------------
[07:22:35    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:23:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:23:09    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:23:09    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:23:09    INFO]  -----------------------------------------------------------------------------------------------------------
[07:23:09    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:23:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:23:10    INFO]  - will try to derive a bias correction ... 
[07:23:10    INFO]  - will validate that training produced an XML file for later ... 
[07:23:10    INFO]  - starting ANNZ::loadReaders() ... 
[07:23:12    INFO]  - will validate that the training was not a complete failure ... 
[07:23:12    INFO]  - training seems to have been successful! will move on ...
[07:23:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:23:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:23:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:23:17    INFO] ----------------------------------------------------------------------------------------------------
[07:23:17    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:23:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:23:17    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:23:17    INFO]    - weights:            1
[07:23:17    INFO] ----------------------------------------------------------------------------------------------------
[07:23:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:23:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[07:23:27    INFO]  - Will gen. input-parameter errors ...
[07:23:29    INFO]  - starting ANNZ::loadReaders() ... 
[07:23:34    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:25:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:25:40    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:25:40    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:25:40    INFO]  -----------------------------------------------------------------------------------------------------------
[07:26:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:26:21    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:26:21    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:26:21    INFO]  -----------------------------------------------------------------------------------------------------------
[07:26:21    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:27:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:27:03    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:27:03    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:27:03    INFO]  -----------------------------------------------------------------------------------------------------------
[07:27:04    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:27:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:27:05    INFO]  - will validate that the bias-correction actually improved the result ...
[07:27:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:27:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
Warning in <Fit>: Fit data is empty 
[07:27:11    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_22/plots/
[07:27:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_22/plots output/PAUS_advanced12/regres/train/ANNZ_22/plots_biasCor_before
[07:27:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:27:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[07:27:27    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_22/plots/
[07:27:38        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_22/plots output/PAUS_advanced12/regres/train/ANNZ_22/plots_biasCor_after
[07:27:38    INFO]  - Got original [KS-test,N_poiss]: [0.0381206 , 3.87193] , after the bias-correction: [0.0219234 , 3.46819] --> will KEEP the correction !

(07:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:27 INFO) 
[07:27:42    INFO]  -----------------------------------------------------
[07:27:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:27:42    INFO]  -----------------------------------------------------------------------------------------------------------
[07:27:44    INFO]  - starting ANNZ::Init()  ... 
[07:27:45    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_23/saveOpt.txt ...
[07:27:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:27:59    INFO] ----------------------------------------------------------------------------------------------------
[07:27:59    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=300:BoostType=AdaBoost:VarTransform=N
[07:27:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:27:59    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:27:59    INFO]      cuts (train):        ,
[07:27:59    INFO]      cuts (valid):       
[07:27:59    INFO]    - weights:            1
[07:27:59    INFO] ----------------------------------------------------------------------------------------------------
[07:28:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:28:22    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[07:28:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[07:28:25    INFO]  - Will gen. input-parameter errors ...
[07:28:26    INFO]  - starting ANNZ::loadReaders() ... 
[07:28:31    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:29:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:29:48    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:29:48    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:29:48    INFO]  -----------------------------------------------------------------------------------------------------------
[07:30:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:30:12    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:30:12    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:30:12    INFO]  -----------------------------------------------------------------------------------------------------------
[07:30:12    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:30:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:30:36    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:30:36    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:30:36    INFO]  -----------------------------------------------------------------------------------------------------------
[07:30:37    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:30:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:30:38    INFO]  - will try to derive a bias correction ... 
[07:30:38    INFO]  - will validate that training produced an XML file for later ... 
[07:30:38    INFO]  - starting ANNZ::loadReaders() ... 
[07:30:39    INFO]  - will validate that the training was not a complete failure ... 
[07:30:39    INFO]  - training seems to have been successful! will move on ...
[07:30:39    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:30:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:30:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:30:44    INFO] ----------------------------------------------------------------------------------------------------
[07:30:44    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:30:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:30:44    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:30:44    INFO]    - weights:            1
[07:30:44    INFO] ----------------------------------------------------------------------------------------------------
[07:30:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:30:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[07:30:53    INFO]  - Will gen. input-parameter errors ...
[07:30:55    INFO]  - starting ANNZ::loadReaders() ... 
[07:31:01    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:32:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:32:34    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:32:34    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:32:34    INFO]  -----------------------------------------------------------------------------------------------------------
[07:33:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:33:06    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:33:06    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:33:06    INFO]  -----------------------------------------------------------------------------------------------------------
[07:33:06    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:33:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:33:38    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:33:38    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:33:38    INFO]  -----------------------------------------------------------------------------------------------------------
[07:33:38    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:33:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:33:39    INFO]  - will validate that the bias-correction actually improved the result ...
[07:33:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:33:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
Warning in <Fit>: Fit data is empty 
[07:33:45    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_23/plots/
[07:33:56        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_23/plots output/PAUS_advanced12/regres/train/ANNZ_23/plots_biasCor_before
[07:33:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:33:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
Warning in <Fit>: Fit data is empty 
[07:34:03    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_23/plots/
[07:34:13        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_23/plots output/PAUS_advanced12/regres/train/ANNZ_23/plots_biasCor_after
[07:34:13    INFO]  - Got original [KS-test,N_poiss]: [0.0466765 , 5.00639] , after the bias-correction: [0.0241562 , 4.0594] --> will KEEP the correction !

(07:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(07:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(07:34 INFO) 
[07:34:17    INFO]  -----------------------------------------------------
[07:34:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[07:34:17    INFO]  -----------------------------------------------------------------------------------------------------------
[07:34:18    INFO]  - starting ANNZ::Init()  ... 
[07:34:20    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/train/ANNZ_24/saveOpt.txt ...
[07:34:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[07:34:34    INFO] ----------------------------------------------------------------------------------------------------
[07:34:34    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=290:BoostType=AdaBoost:VarTransform=N
[07:34:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:34:34    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000) ,
[07:34:34    INFO]      cuts (train):        ,
[07:34:34    INFO]      cuts (valid):       
[07:34:34    INFO]    - weights:            1
[07:34:34    INFO] ----------------------------------------------------------------------------------------------------
[07:34:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:34:57    INFO]  - Saving MLM information in ./output/PAUS_advanced12/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[07:34:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[07:34:59    INFO]  - Will gen. input-parameter errors ...
[07:35:01    INFO]  - starting ANNZ::loadReaders() ... 
[07:35:05    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:36:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:36:15    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:36:15    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:36:15    INFO]  -----------------------------------------------------------------------------------------------------------
[07:36:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:36:39    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:36:39    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:36:39    INFO]  -----------------------------------------------------------------------------------------------------------
[07:36:39    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:37:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:37:02    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:37:02    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:37:02    INFO]  -----------------------------------------------------------------------------------------------------------
[07:37:02    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:37:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:37:03    INFO]  - will try to derive a bias correction ... 
[07:37:03    INFO]  - will validate that training produced an XML file for later ... 
[07:37:03    INFO]  - starting ANNZ::loadReaders() ... 
[07:37:04    INFO]  - will validate that the training was not a complete failure ... 
[07:37:04    INFO]  - training seems to have been successful! will move on ...
[07:37:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[07:37:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:37:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[07:37:10    INFO] ----------------------------------------------------------------------------------------------------
[07:37:10    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[07:37:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[07:37:10    INFO]    - cuts (all):         (zb >= 0.000000)&&(zb <= 1.200000)
[07:37:10    INFO]    - weights:            1
[07:37:10    INFO] ----------------------------------------------------------------------------------------------------
[07:37:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[07:37:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[07:37:18    INFO]  - Will gen. input-parameter errors ...
[07:37:20    INFO]  - starting ANNZ::loadReaders() ... 
[07:37:25    INFO]  - added chain ANNZ_tree_train(13465) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_train*.root
[07:38:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:38:56    INFO]  -- ANNZ_tree_train .................................... 4  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:38:56    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[07:38:56    INFO]  -----------------------------------------------------------------------------------------------------------
[07:39:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:39:30    INFO]  -- ANNZ_tree_train .................................... 6  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:39:30    INFO]  -- ANNZ_tree_train ................................ 13465  nObj
[07:39:30    INFO]  -----------------------------------------------------------------------------------------------------------
[07:39:30    INFO]  - added chain ANNZ_tree_valid(3366) from ./output/PAUS_advanced12/rootIn/ANNZ_tree_valid*.root
[07:40:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[07:40:01    INFO]  -- ANNZ_tree_valid .................................... 1  failedCut: _comn [ (zb >= 0.000000)&&(zb <= 1.200000) ]
[07:40:01    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[07:40:01    INFO]  -----------------------------------------------------------------------------------------------------------
[07:40:01    INFO]  - Saving file ./output/PAUS_advanced12/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[07:40:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[07:40:03    INFO]  - will validate that the bias-correction actually improved the result ...
[07:40:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:40:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
Warning in <Fit>: Fit data is empty 
[07:40:08    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_24/plots/
[07:40:20        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_24/plots output/PAUS_advanced12/regres/train/ANNZ_24/plots_biasCor_before
[07:40:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[07:40:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
Warning in <Fit>: Fit data is empty 
[07:40:25    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/train/ANNZ_24/plots/
[07:40:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced12/regres/train/ANNZ_24/plots output/PAUS_advanced12/regres/train/ANNZ_24/plots_biasCor_after
[07:40:36    INFO]  - Got original [KS-test,N_poiss]: [0.0466765 , 5.00705] , after the bias-correction: [0.0241562 , 4.06804] --> will KEEP the correction !

(07:40 INFO) [40;37;1m - 13/02/19 07:40:40 - finished running ANNZ ![0m
(09:54 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:54 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:54 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:54 INFO) [40;37;1m - 13/02/19 09:54:30 - starting ANNZ[0m
(09:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:54 INFO) 
[09:54:30    INFO]  -----------------------------------------------------
[09:54:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:54:30    INFO]  -----------------------------------------------------------------------------------------------------------
[09:54:31    INFO]  - starting ANNZ::Init()  ... 
[09:54:31    INFO]  - Will generate 1 PDFs ... 
[09:54:44    INFO] --------------------------------------------------------
[09:54:44    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[09:54:44    INFO]  - All REJECTED MLMs: 
[09:54:44    INFO] ----------------------------------------------------------------------------------------------------------------
[09:54:46    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/optim/saveOpt.txt ...
[09:55:55    INFO]  - starting ANNZ::Optim() ... 
[09:55:55    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[09:55:55    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[09:56:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:16    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced12/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[09:56:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:33    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced12/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[09:56:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:49    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/PAUS_advanced12/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[09:56:49    INFO]  - Saving file ./output/PAUS_advanced12/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[09:56:49    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[09:56:50    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced12/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[09:56:50    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[09:56:50    INFO]  - ending makeTreeRegClsAllMLM() ... 
[09:56:50    INFO]  - starting ANNZ::optimReg() ... 
[09:56:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:54    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced12/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[09:56:54    INFO]  - starting ANNZ::fillColosureV() ... 
[09:56:55    INFO]  ---------------------------------------------------------------------------------- 
[09:56:55    INFO]  - Got the following average properties: 
[09:56:55    INFO]  --------------------------------------- 
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00393251 	 0.0386633 	 0.0837717
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.0068409 	 0.0514583 	 0.0873204
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00387319 	 0.0385566 	 0.0841739
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00650889 	 0.0351196 	 0.0777867
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00442802 	 0.0513221 	 0.0766498
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.00671792 	 0.0355359 	 0.0753359
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.00490963 	 0.0514477 	 0.0762525
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00599805 	 0.0391441 	 0.038086
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00664914 	 0.0360132 	 0.0751448
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00617842 	 0.0390978 	 0.0370147
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00392601 	 0.0383685 	 0.0855588
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00557804 	 0.0323109 	 0.0348102
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00557804 	 0.0323109 	 0.0348102
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.00633836 	 0.035546 	 0.0756296
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00390044 	 0.038555 	 0.0840874
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00657076 	 0.0355402 	 0.0764719
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00561946 	 0.0392352 	 0.0371572
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00568231 	 0.0322361 	 0.0358728
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.0065026 	 0.0354237 	 0.0769379
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.00367045 	 0.0284335 	 0.0825211
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00383746 	 0.0386812 	 0.083148
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.0038566 	 0.0386002 	 0.0840756
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00392601 	 0.0383685 	 0.0855588
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00485633 	 0.0512763 	 0.0773564
[09:56:55    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00485435 	 0.0514614 	 0.0769253
[09:56:55    INFO]  ------------------------------------------------------------------------------------------------- 
[09:56:55    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[09:56:55    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[09:56:55    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[09:56:55    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 10% of the [sig68] dist.
[09:56:55    INFO]  - The "best" MLM is: ANNZ_19
[09:56:55    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[09:56:55    INFO]  - initial PDF weights: ANNZ_19:0.095 ANNZ_20:0.090 ANNZ_21:0.086 ANNZ_2:0.081 ANNZ_22:0.076 ANNZ_10:0.071 ANNZ_14:0.067 ANNZ_0:0.062 ANNZ_11:0.057 ANNZ_12:0.052 ANNZ_17:0.048 ANNZ_16:0.043 ANNZ_13:0.038 ANNZ_7:0.033 ANNZ_3:0.029 ANNZ_18:0.024 ANNZ_15:0.019 ANNZ_9:0.014 ANNZ_8:0.010 ANNZ_23:0.005 
[09:56:55    INFO]  - will loop on the input trees ...
[09:56:56    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.45612e-01
[09:56:56    INFO]  - nTry: 1 - min-param best/prev/now: 2.45612e-01 / 2.45612e-01 / 2.46770e-01
[09:56:56    INFO]  - nTry: 2 - min-param best/prev/now: 2.45612e-01 / 2.45612e-01 / 2.46961e-01
[09:56:56    INFO]  - nTry: 3 - min-param best/prev/now: 2.45612e-01 / 2.45612e-01 / 2.47221e-01
[09:56:56    INFO]  - nTry: 4 - min-param best/prev/now: 2.45612e-01 / 2.45612e-01 / 2.46382e-01
[09:56:57    INFO]  - nTry: 5 - min-param best/prev/now: 2.45612e-01 / 2.46382e-01 / 2.46792e-01
[09:56:57    INFO]  - nTry: 6 - min-param best/prev/now: 2.45612e-01 / 2.46382e-01 / 2.47136e-01
[09:56:57    INFO]  - nTry: 7 - min-param best/prev/now: 2.45612e-01 / 2.46382e-01 / 2.47413e-01
[09:56:57    INFO]  - nTry: 8 - min-param best/prev/now: 2.45612e-01 / 2.46382e-01 / 2.46893e-01
[09:56:57    INFO]  - nTry: 9 - min-param best/prev/now: 2.45612e-01 / 2.46382e-01 / 2.47137e-01
[09:56:57    INFO]  - nTry: 10 - min-param best/prev/now: 2.45612e-01 / 2.46382e-01 / 2.47196e-01
[09:56:58    INFO]  - nTry: 20 - min-param best/prev/now: 2.45612e-01 / 2.47134e-01 / 2.47592e-01
[09:56:59    INFO]  - nTry: 30 - min-param best/prev/now: 2.45612e-01 / 2.47197e-01 / 2.47531e-01
[09:57:00    INFO]  - nTry: 40 - min-param best/prev/now: 2.45612e-01 / 2.47690e-01 / 2.47671e-01
[09:57:01    INFO]  - nTry: 50 - min-param best/prev/now: 2.45612e-01 / 2.47696e-01 / 2.47830e-01
[09:57:02    INFO]  - nTry: 60 - min-param best/prev/now: 2.45612e-01 / 2.47910e-01 / 2.47895e-01
[09:57:03    INFO]  - nTry: 70 - min-param best/prev/now: 2.45612e-01 / 2.48062e-01 / 2.48102e-01
[09:57:04    INFO]  - nTry: 80 - min-param best/prev/now: 2.45612e-01 / 2.47912e-01 / 2.47940e-01
[09:57:05    INFO]  - nTry: 90 - min-param best/prev/now: 2.45612e-01 / 2.48001e-01 / 2.48041e-01
[09:57:06    INFO]  - nTry: 100 - min-param best/prev/now: 2.45612e-01 / 2.47953e-01 / 2.47960e-01
[09:57:08    INFO]  - nTry: 120 - min-param best/prev/now: 2.45612e-01 / 2.47976e-01 / 2.47975e-01
[09:57:09    INFO]  - nTry: 140 - min-param best/prev/now: 2.45612e-01 / 2.47885e-01 / 2.47901e-01
[09:57:10    INFO]  - nTry: 150 - min-param best/prev/now: 2.45612e-01 / 2.47886e-01 / 2.47903e-01
[09:57:11    INFO]  - nTry: 160 - min-param best/prev/now: 2.45612e-01 / 2.47931e-01 / 2.47936e-01
[09:57:13    INFO]  - nTry: 180 - min-param best/prev/now: 2.45612e-01 / 2.48083e-01 / 2.48073e-01
[09:57:15    INFO]  - nTry: 200 - min-param best/prev/now: 2.45612e-01 / 2.48142e-01 / 2.48177e-01
[09:57:17    INFO]  - nTry: 220 - min-param best/prev/now: 2.45612e-01 / 2.48158e-01 / 2.48146e-01
[09:57:19    INFO]  - nTry: 240 - min-param best/prev/now: 2.45612e-01 / 2.48158e-01 / 2.48247e-01
[09:57:20    INFO]  - nTry: 250 - min-param best/prev/now: 2.45612e-01 / 2.48247e-01 / 2.48259e-01
[09:57:20    INFO]  - finished PDF optimization! - final minimization parameter: 2.45612e-01 , PDF weights: ANNZ_19:0.095 ANNZ_20:0.090 ANNZ_21:0.086 ANNZ_2:0.081 ANNZ_22:0.076 ANNZ_10:0.071 ANNZ_14:0.067 ANNZ_0:0.062 ANNZ_11:0.057 ANNZ_12:0.052 ANNZ_17:0.048 ANNZ_16:0.043 ANNZ_13:0.038 ANNZ_7:0.033 ANNZ_3:0.029 ANNZ_18:0.024 ANNZ_15:0.019 ANNZ_9:0.014 ANNZ_8:0.010 ANNZ_23:0.005 
[09:57:20    INFO]  - will derive the bias correction for the pdf ... 
[09:57:21    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.061905, ANNZ_1:0.000000, ANNZ_2:0.080952, ANNZ_3:0.028571, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.000000, ANNZ_7:0.033333, ANNZ_8:0.009524, ANNZ_9:0.014286, ANNZ_10:0.071429, ANNZ_11:0.057143, ANNZ_12:0.052381, ANNZ_13:0.038095, ANNZ_14:0.066667, ANNZ_15:0.019048, ANNZ_16:0.042857, ANNZ_17:0.047619, ANNZ_18:0.023810, ANNZ_19:0.095238, ANNZ_20:0.090476, ANNZ_21:0.085714, ANNZ_22:0.076190, ANNZ_23:0.004762, ANNZ_24:0.000000, 
[09:57:21    INFO]  - Saving optimization results in ./output/PAUS_advanced12/regres/optim/saveOptimOpt.txt ...
[09:57:23    INFO]  - Saving bias-correction results in ./output/PAUS_advanced12/regres/optim/saveOptimObj.root ...
[09:57:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:57:26    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced12/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[09:57:29    INFO]  - starting ANNZ::doEvalReg() ... 
[09:57:29    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[09:57:29    INFO]  - Reading bias-correction results from ./output/PAUS_advanced12/regres/optim/saveOptimObj.root ...
[09:57:29    INFO]  - Getting optimization results from ./output/PAUS_advanced12/regres/optim/saveOptimOpt.txt ...
[09:57:29    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[09:57:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:57:30    INFO]  -- ANNZ_tree_valid ................................. 3366  nObj
[09:57:30    INFO]  -----------------------------------------------------------------------------------------------------------
[09:57:30    INFO]  - starting storeTreeToAscii() ... 
[09:57:30    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[09:57:30    INFO]  - Will parse  ANNZ_tree_randomReg(3366)... Now in ./output/PAUS_advanced12/regres/optim/eval/ANNZ_randomReg_0000.csv
[09:57:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:57:31    INFO]  -- ANNZ_randomReg .................................. 3366  nObj
[09:57:31    INFO]  -----------------------------------------------------------------------------------------------------------
[09:57:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:57:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[09:57:31    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[09:57:40    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/optim/eval/plots/

(09:57 INFO) [40;37;1m - 13/02/19 09:57:46 - finished running ANNZ ![0m
(10:02 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(10:02 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(10:02 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(10:02 INFO) [40;37;1m - 13/02/19 10:02:47 - starting ANNZ[0m
(10:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced12[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data8c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzb[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(10:02 INFO) 
[10:02:47    INFO]  -----------------------------------------------------
[10:02:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:02:47    INFO]  -----------------------------------------------------------------------------------------------------------
[10:02:49    INFO]  - starting ANNZ::Init()  ... 
[10:02:49    INFO]  - Will generate 1 PDFs ... 
[10:03:01    INFO] --------------------------------------------------------
[10:03:01    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[10:03:01    INFO]  - All REJECTED MLMs: 
[10:03:01    INFO] ----------------------------------------------------------------------------------------------------------------
[10:03:04    INFO]  - Saving run information in ./output/PAUS_advanced12/regres/eval_nFile0/saveOpt.txt ...
[10:03:59    INFO]  - starting inputToFullTree(ANNz_data8c.csv) ... 
[10:04:00    INFO]  - Found 3367 lines in file PAUS/ANNz_data8c.csv -> total so far = 3367 ... 
[10:04:00    INFO]  - Now reading-in PAUS/ANNz_data8c.csv ... 
[10:04:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:04:00    INFO]  -- ANNZ_tree_eval .................................. 3367  nLine
[10:04:00    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[10:04:00    INFO]  -----------------------------------------------------------------------------------------------------------
[10:04:00    INFO]  - starting ANNZ::Eval() ... 
[10:04:00    INFO]  - starting ANNZ::doEvalReg() ... 
[10:04:00    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[10:04:00    INFO]  - Reading bias-correction results from ./output/PAUS_advanced12/regres/optim/saveOptimObj.root ...
[10:04:00    INFO]  - Getting optimization results from ./output/PAUS_advanced12/regres/optim/saveOptimOpt.txt ...
[10:04:00    INFO]  - creating MLM trees from input ...
[10:04:00    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,ANNZ_2,ANNZ_3,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,
[10:04:00    INFO]  - starting ANNZ::loadReaders() ... 
[10:43:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:43:08    INFO]  -- ANNZ_tree_eval .................................. 3367  nObj
[10:43:08    INFO]  -----------------------------------------------------------------------------------------------------------
[10:43:09    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[10:43:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:43:10    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 3367  nObj
[10:43:10    INFO]  -----------------------------------------------------------------------------------------------------------
[10:43:10    INFO]  - starting storeTreeToAscii() ... 
[10:43:10    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[10:43:10    INFO]  - Will parse  ANNZ_tree_randomReg(3367)... Now in ./output/PAUS_advanced12/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[10:43:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:43:10    INFO]  -- ANNZ_randomReg .................................. 3367  nObj
[10:43:10    INFO]  -----------------------------------------------------------------------------------------------------------
[10:43:12    INFO]  - detected the target,zb in the evaluated sample - Will create performance plots ...
[10:43:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:43:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[10:43:12    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[10:43:19    INFO]  - Writing to plotting directory output/PAUS_advanced12/regres/eval_nFile0/plots/

(10:43 INFO) [40;37;1m - 13/02/19 10:43:24 - finished running ANNZ ![0m
