(11:33 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:33 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:33 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:33 INFO) [40;37;1m - 29/03/19 11:33:16 - starting ANNZ[0m
(11:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:33 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:33 INFO) 
[11:33:16    INFO]  -----------------------------------------------------
[11:33:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:33:16    INFO]  -----------------------------------------------------------------------------------------------------------
[11:33:18    INFO]  - starting inputToSplitTree() ... 
[11:33:18    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[11:33:18    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[11:33:18    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[11:33:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:33:19    INFO]  -- ANNZ_tree .......................................... 0  index
[11:33:19    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[11:33:19    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[11:33:19    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[11:33:19    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:33:19    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:33:19    INFO]  -----------------------------------------------------------------------------------------------------------
[11:33:19    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[11:33:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:33:19    INFO]  -- ANNZ_tree .......................................... 0  index
[11:33:19    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[11:33:19    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[11:33:19    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[11:33:19    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[11:33:19    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:33:19    INFO]  -----------------------------------------------------------------------------------------------------------
[11:33:19    INFO]  - Writing to plotting directory output/SPEC_advanced22/rootIn/plots/
[11:33:21    INFO]  - Writing to plotting directory output/SPEC_advanced22/rootIn/plots/

(11:33 INFO) [40;37;1m - 29/03/19 11:33:22 - finished running ANNZ ![0m
(11:33 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:33 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:33 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:33 INFO) [40;37;1m - 29/03/19 11:33:22 - starting ANNZ[0m
(11:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:33 INFO) 
[11:33:22    INFO]  -----------------------------------------------------
[11:33:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:33:22    INFO]  -----------------------------------------------------------------------------------------------------------
[11:33:23    INFO]  - starting ANNZ::Init()  ... 
[11:33:24    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_0/saveOpt.txt ...
[11:33:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:33:29    INFO] ----------------------------------------------------------------------------------------------------
[11:33:29    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=540:BoostType=AdaBoost:VarTransform=N,P
[11:33:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:33:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:33:29    INFO]      cuts (train):        ,
[11:33:29    INFO]      cuts (valid):       
[11:33:29    INFO]    - weights:            1
[11:33:29    INFO] ----------------------------------------------------------------------------------------------------
[11:33:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:33:58    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[11:34:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:34:00    INFO]  - Will gen. input-parameter errors ...
[11:34:01    INFO]  - starting ANNZ::loadReaders() ... 
[11:34:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:37:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:37:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:37:30    INFO]  -----------------------------------------------------------------------------------------------------------
[11:37:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:38:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:38:20    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:38:20    INFO]  -----------------------------------------------------------------------------------------------------------
[11:38:20    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:38:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:38:21    INFO]  - will try to derive a bias correction ... 
[11:38:21    INFO]  - will validate that training produced an XML file for later ... 
[11:38:21    INFO]  - starting ANNZ::loadReaders() ... 
[11:38:23    INFO]  - will validate that the training was not a complete failure ... 
[11:38:23    INFO]  - training seems to have been successful! will move on ...
[11:38:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:38:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:38:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:38:27    INFO] ----------------------------------------------------------------------------------------------------
[11:38:27    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:38:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:38:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:38:27    INFO]    - weights:            1
[11:38:27    INFO] ----------------------------------------------------------------------------------------------------
[11:38:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:38:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:38:34    INFO]  - Will gen. input-parameter errors ...
[11:38:35    INFO]  - starting ANNZ::loadReaders() ... 
[11:38:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:41:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:41:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:41:47    INFO]  -----------------------------------------------------------------------------------------------------------
[11:41:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:42:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:42:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:42:34    INFO]  -----------------------------------------------------------------------------------------------------------
[11:42:34    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:42:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:42:35    INFO]  - will validate that the bias-correction actually improved the result ...
[11:42:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:42:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
Warning in <Fit>: Fit data is empty 
[11:42:40    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_0/plots/
[11:42:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_0/plots output/SPEC_advanced22/regres/train/ANNZ_0/plots_biasCor_before
[11:42:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:42:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[11:42:56    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_0/plots/
[11:43:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_0/plots output/SPEC_advanced22/regres/train/ANNZ_0/plots_biasCor_after
[11:43:07    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43565] , after the bias-correction: [0.0444768 , 5.70774] --> will KEEP the correction !

(11:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:43 INFO) 
[11:43:10    INFO]  -----------------------------------------------------
[11:43:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:43:10    INFO]  -----------------------------------------------------------------------------------------------------------
[11:43:11    INFO]  - starting ANNZ::Init()  ... 
[11:43:12    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_1/saveOpt.txt ...
[11:43:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:43:17    INFO] ----------------------------------------------------------------------------------------------------
[11:43:17    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N,P
[11:43:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:43:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:43:17    INFO]      cuts (train):        ,
[11:43:17    INFO]      cuts (valid):       
[11:43:17    INFO]    - weights:            1
[11:43:17    INFO] ----------------------------------------------------------------------------------------------------
[11:43:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:43:43    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[11:43:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:43:45    INFO]  - Will gen. input-parameter errors ...
[11:43:47    INFO]  - starting ANNZ::loadReaders() ... 
[11:43:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:46:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:46:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:46:55    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:47:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:47:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:47:41    INFO]  -----------------------------------------------------------------------------------------------------------
[11:47:41    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:47:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:47:42    INFO]  - will try to derive a bias correction ... 
[11:47:42    INFO]  - will validate that training produced an XML file for later ... 
[11:47:42    INFO]  - starting ANNZ::loadReaders() ... 
[11:47:43    INFO]  - will validate that the training was not a complete failure ... 
[11:47:43    INFO]  - training seems to have been successful! will move on ...
[11:47:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:47:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:47:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:47:48    INFO] ----------------------------------------------------------------------------------------------------
[11:47:48    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:47:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:47:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:47:48    INFO]    - weights:            1
[11:47:48    INFO] ----------------------------------------------------------------------------------------------------
[11:47:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:47:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:47:55    INFO]  - Will gen. input-parameter errors ...
[11:47:56    INFO]  - starting ANNZ::loadReaders() ... 
[11:48:01    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:51:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:51:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:51:12    INFO]  -----------------------------------------------------------------------------------------------------------
[11:51:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:51:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:51:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:51:55    INFO]  -----------------------------------------------------------------------------------------------------------
[11:51:55    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:51:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:51:56    INFO]  - will validate that the bias-correction actually improved the result ...
[11:51:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:51:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
Warning in <Fit>: Fit data is empty 
[11:52:02    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_1/plots/
[11:52:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_1/plots output/SPEC_advanced22/regres/train/ANNZ_1/plots_biasCor_before
[11:52:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:52:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[11:52:20    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_1/plots/
[11:52:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_1/plots output/SPEC_advanced22/regres/train/ANNZ_1/plots_biasCor_after
[11:52:31    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40555] , after the bias-correction: [0.0442528 , 5.7589] --> will KEEP the correction !

(11:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:52 INFO) 
[11:52:34    INFO]  -----------------------------------------------------
[11:52:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:52:34    INFO]  -----------------------------------------------------------------------------------------------------------
[11:52:35    INFO]  - starting ANNZ::Init()  ... 
[11:52:36    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_2/saveOpt.txt ...
[11:52:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:52:41    INFO] ----------------------------------------------------------------------------------------------------
[11:52:41    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=410:BoostType=Bagging:VarTransform=N,P
[11:52:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:52:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:52:41    INFO]      cuts (train):        ,
[11:52:41    INFO]      cuts (valid):       
[11:52:41    INFO]    - weights:            1
[11:52:41    INFO] ----------------------------------------------------------------------------------------------------
[11:52:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:53:22    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[11:53:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[11:53:26    INFO]  - Will gen. input-parameter errors ...
[11:53:28    INFO]  - starting ANNZ::loadReaders() ... 
[11:53:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:57:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:57:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:57:45    INFO]  -----------------------------------------------------------------------------------------------------------
[11:57:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:58:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:58:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:58:46    INFO]  -----------------------------------------------------------------------------------------------------------
[11:58:46    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:58:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:58:47    INFO]  - will try to derive a bias correction ... 
[11:58:47    INFO]  - will validate that training produced an XML file for later ... 
[11:58:47    INFO]  - starting ANNZ::loadReaders() ... 
[11:58:52    INFO]  - will validate that the training was not a complete failure ... 
[11:58:52    INFO]  - training seems to have been successful! will move on ...
[11:58:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:58:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:58:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:58:57    INFO] ----------------------------------------------------------------------------------------------------
[11:58:57    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:58:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:58:57    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:58:57    INFO]    - weights:            1
[11:58:57    INFO] ----------------------------------------------------------------------------------------------------
[11:58:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:59:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[11:59:06    INFO]  - Will gen. input-parameter errors ...
[11:59:08    INFO]  - starting ANNZ::loadReaders() ... 
[11:59:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:03:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:03:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:03:47    INFO]  -----------------------------------------------------------------------------------------------------------
[12:03:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:04:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:04:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:04:46    INFO]  -----------------------------------------------------------------------------------------------------------
[12:04:46    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:04:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:04:48    INFO]  - will validate that the bias-correction actually improved the result ...
[12:04:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:04:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[12:04:53    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_2/plots/
[12:05:04        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_2/plots output/SPEC_advanced22/regres/train/ANNZ_2/plots_biasCor_before
[12:05:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:05:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[12:05:09    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_2/plots/
[12:05:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_2/plots output/SPEC_advanced22/regres/train/ANNZ_2/plots_biasCor_after
[12:05:20    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.90556] , after the bias-correction: [0.0445889 , 5.68766] --> will KEEP the correction !

(12:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:05 INFO) 
[12:05:23    INFO]  -----------------------------------------------------
[12:05:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:05:23    INFO]  -----------------------------------------------------------------------------------------------------------
[12:05:24    INFO]  - starting ANNZ::Init()  ... 
[12:05:25    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_3/saveOpt.txt ...
[12:05:30    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:05:30    INFO] ----------------------------------------------------------------------------------------------------
[12:05:30    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=270:BoostType=Bagging:VarTransform=N
[12:05:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:05:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:05:30    INFO]      cuts (train):        ,
[12:05:30    INFO]      cuts (valid):       
[12:05:30    INFO]    - weights:            1
[12:05:30    INFO] ----------------------------------------------------------------------------------------------------
[12:05:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:05:56    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[12:05:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[12:05:59    INFO]  - Will gen. input-parameter errors ...
[12:06:01    INFO]  - starting ANNZ::loadReaders() ... 
[12:06:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:07:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:07:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:07:39    INFO]  -----------------------------------------------------------------------------------------------------------
[12:07:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:08:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:08:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:08:02    INFO]  -----------------------------------------------------------------------------------------------------------
[12:08:02    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:08:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:08:03    INFO]  - will try to derive a bias correction ... 
[12:08:03    INFO]  - will validate that training produced an XML file for later ... 
[12:08:03    INFO]  - starting ANNZ::loadReaders() ... 
[12:08:06    INFO]  - will validate that the training was not a complete failure ... 
[12:08:06    INFO]  - training seems to have been successful! will move on ...
[12:08:06    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:08:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:08:10    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:08:11    INFO] ----------------------------------------------------------------------------------------------------
[12:08:11    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:08:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:08:11    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:08:11    INFO]    - weights:            1
[12:08:11    INFO] ----------------------------------------------------------------------------------------------------
[12:08:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:08:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[12:08:18    INFO]  - Will gen. input-parameter errors ...
[12:08:20    INFO]  - starting ANNZ::loadReaders() ... 
[12:08:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:09:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:09:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:09:58    INFO]  -----------------------------------------------------------------------------------------------------------
[12:09:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:10:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:10:21    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:10:21    INFO]  -----------------------------------------------------------------------------------------------------------
[12:10:21    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:10:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:10:22    INFO]  - will validate that the bias-correction actually improved the result ...
[12:10:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:10:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[12:10:28    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_3/plots/
[12:10:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_3/plots output/SPEC_advanced22/regres/train/ANNZ_3/plots_biasCor_before
[12:10:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:10:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[12:10:43    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_3/plots/
[12:10:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_3/plots output/SPEC_advanced22/regres/train/ANNZ_3/plots_biasCor_after
[12:10:54    INFO]  - Got original [KS-test,N_poiss]: [0.0841362 , 6.65828] , after the bias-correction: [0.0457092 , 5.60337] --> will KEEP the correction !

(12:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:10 INFO) 
[12:10:57    INFO]  -----------------------------------------------------
[12:10:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:10:57    INFO]  -----------------------------------------------------------------------------------------------------------
[12:10:58    INFO]  - starting ANNZ::Init()  ... 
[12:10:59    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_4/saveOpt.txt ...
[12:11:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:11:04    INFO] ----------------------------------------------------------------------------------------------------
[12:11:04    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=850:BoostType=Bagging:VarTransform=N
[12:11:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:11:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:11:04    INFO]      cuts (train):        ,
[12:11:04    INFO]      cuts (valid):       
[12:11:04    INFO]    - weights:            1
[12:11:04    INFO] ----------------------------------------------------------------------------------------------------
[12:11:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:12:30    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[12:12:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[12:12:37    INFO]  - Will gen. input-parameter errors ...
[12:12:40    INFO]  - starting ANNZ::loadReaders() ... 
[12:13:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:22:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:22:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:22:18    INFO]  -----------------------------------------------------------------------------------------------------------
[12:22:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:24:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:24:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:24:45    INFO]  -----------------------------------------------------------------------------------------------------------
[12:24:46    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:24:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:24:49    INFO]  - will try to derive a bias correction ... 
[12:24:49    INFO]  - will validate that training produced an XML file for later ... 
[12:24:49    INFO]  - starting ANNZ::loadReaders() ... 
[12:24:58    INFO]  - will validate that the training was not a complete failure ... 
[12:24:58    INFO]  - training seems to have been successful! will move on ...
[12:24:58    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:25:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:25:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:25:08    INFO] ----------------------------------------------------------------------------------------------------
[12:25:08    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:25:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:25:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:25:08    INFO]    - weights:            1
[12:25:08    INFO] ----------------------------------------------------------------------------------------------------
[12:25:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:25:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[12:25:18    INFO]  - Will gen. input-parameter errors ...
[12:25:21    INFO]  - starting ANNZ::loadReaders() ... 
[12:25:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:35:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:35:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:35:30    INFO]  -----------------------------------------------------------------------------------------------------------
[12:35:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:38:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:38:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:38:02    INFO]  -----------------------------------------------------------------------------------------------------------
[12:38:02    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:38:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:38:05    INFO]  - will validate that the bias-correction actually improved the result ...
[12:38:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:38:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[12:38:11    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_4/plots/
[12:38:23        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_4/plots output/SPEC_advanced22/regres/train/ANNZ_4/plots_biasCor_before
[12:38:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:38:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[12:38:28    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_4/plots/
[12:38:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_4/plots output/SPEC_advanced22/regres/train/ANNZ_4/plots_biasCor_after
[12:38:39    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.6893] , after the bias-correction: [0.0480618 , 5.67327] --> will KEEP the correction !

(12:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:38 INFO) 
[12:38:44    INFO]  -----------------------------------------------------
[12:38:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:38:44    INFO]  -----------------------------------------------------------------------------------------------------------
[12:38:44    INFO]  - starting ANNZ::Init()  ... 
[12:38:46    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_5/saveOpt.txt ...
[12:38:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:38:51    INFO] ----------------------------------------------------------------------------------------------------
[12:38:51    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=370:BoostType=AdaBoost:VarTransform=N,P
[12:38:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:38:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:38:51    INFO]      cuts (train):        ,
[12:38:51    INFO]      cuts (valid):       
[12:38:51    INFO]    - weights:            1
[12:38:51    INFO] ----------------------------------------------------------------------------------------------------
[12:38:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:39:12    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[12:39:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[12:39:14    INFO]  - Will gen. input-parameter errors ...
[12:39:15    INFO]  - starting ANNZ::loadReaders() ... 
[12:39:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:41:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:41:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:41:47    INFO]  -----------------------------------------------------------------------------------------------------------
[12:41:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:42:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:42:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:42:24    INFO]  -----------------------------------------------------------------------------------------------------------
[12:42:24    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:42:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:42:25    INFO]  - will try to derive a bias correction ... 
[12:42:25    INFO]  - will validate that training produced an XML file for later ... 
[12:42:25    INFO]  - starting ANNZ::loadReaders() ... 
[12:42:26    INFO]  - will validate that the training was not a complete failure ... 
[12:42:26    INFO]  - training seems to have been successful! will move on ...
[12:42:26    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:42:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:42:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:42:30    INFO] ----------------------------------------------------------------------------------------------------
[12:42:30    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:42:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:42:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:42:30    INFO]    - weights:            1
[12:42:30    INFO] ----------------------------------------------------------------------------------------------------
[12:42:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:42:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[12:42:37    INFO]  - Will gen. input-parameter errors ...
[12:42:38    INFO]  - starting ANNZ::loadReaders() ... 
[12:42:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:45:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:45:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:45:33    INFO]  -----------------------------------------------------------------------------------------------------------
[12:45:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:46:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:46:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:46:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:46:17    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:46:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:46:18    INFO]  - will validate that the bias-correction actually improved the result ...
[12:46:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:46:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
Warning in <Fit>: Fit data is empty 
[12:46:23    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_5/plots/
[12:46:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_5/plots output/SPEC_advanced22/regres/train/ANNZ_5/plots_biasCor_before
[12:46:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:46:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[12:46:39    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_5/plots/
[12:46:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_5/plots output/SPEC_advanced22/regres/train/ANNZ_5/plots_biasCor_after
[12:46:50    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40218] , after the bias-correction: [0.0448129 , 5.80394] --> will KEEP the correction !

(12:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:46 INFO) 
[12:46:54    INFO]  -----------------------------------------------------
[12:46:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:46:54    INFO]  -----------------------------------------------------------------------------------------------------------
[12:46:54    INFO]  - starting ANNZ::Init()  ... 
[12:46:55    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_6/saveOpt.txt ...
[12:47:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:47:00    INFO] ----------------------------------------------------------------------------------------------------
[12:47:00    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=N,P
[12:47:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:47:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:47:00    INFO]      cuts (train):        ,
[12:47:00    INFO]      cuts (valid):       
[12:47:00    INFO]    - weights:            1
[12:47:00    INFO] ----------------------------------------------------------------------------------------------------
[12:47:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:47:42    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[12:47:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[12:47:45    INFO]  - Will gen. input-parameter errors ...
[12:47:47    INFO]  - starting ANNZ::loadReaders() ... 
[12:47:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:51:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:51:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:51:40    INFO]  -----------------------------------------------------------------------------------------------------------
[12:51:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:52:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:52:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:52:36    INFO]  -----------------------------------------------------------------------------------------------------------
[12:52:36    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:52:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:52:38    INFO]  - will try to derive a bias correction ... 
[12:52:38    INFO]  - will validate that training produced an XML file for later ... 
[12:52:38    INFO]  - starting ANNZ::loadReaders() ... 
[12:52:42    INFO]  - will validate that the training was not a complete failure ... 
[12:52:42    INFO]  - training seems to have been successful! will move on ...
[12:52:42    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:52:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:52:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:52:47    INFO] ----------------------------------------------------------------------------------------------------
[12:52:47    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:52:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:52:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:52:47    INFO]    - weights:            1
[12:52:47    INFO] ----------------------------------------------------------------------------------------------------
[12:52:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:52:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[12:52:56    INFO]  - Will gen. input-parameter errors ...
[12:52:58    INFO]  - starting ANNZ::loadReaders() ... 
[12:53:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:56:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:56:58    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:57:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:57:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:57:58    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:58    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:58:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:58:00    INFO]  - will validate that the bias-correction actually improved the result ...
[12:58:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:58:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[12:58:05    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_6/plots/
[12:58:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_6/plots output/SPEC_advanced22/regres/train/ANNZ_6/plots_biasCor_before
[12:58:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:58:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[12:58:22    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_6/plots/
[12:58:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_6/plots output/SPEC_advanced22/regres/train/ANNZ_6/plots_biasCor_after
[12:58:33    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.91132] , after the bias-correction: [0.0448129 , 5.66772] --> will KEEP the correction !

(12:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:58 INFO) 
[12:58:37    INFO]  -----------------------------------------------------
[12:58:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:58:37    INFO]  -----------------------------------------------------------------------------------------------------------
[12:58:37    INFO]  - starting ANNZ::Init()  ... 
[12:58:38    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_7/saveOpt.txt ...
[12:58:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:58:44    INFO] ----------------------------------------------------------------------------------------------------
[12:58:44    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=N
[12:58:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:58:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:58:44    INFO]      cuts (train):        ,
[12:58:44    INFO]      cuts (valid):       
[12:58:44    INFO]    - weights:            1
[12:58:44    INFO] ----------------------------------------------------------------------------------------------------
[12:58:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:59:27    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[12:59:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[12:59:32    INFO]  - Will gen. input-parameter errors ...
[12:59:34    INFO]  - starting ANNZ::loadReaders() ... 
[12:59:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:02:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:02:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:02:02    INFO]  -----------------------------------------------------------------------------------------------------------
[13:02:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:02:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:02:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:02:38    INFO]  -----------------------------------------------------------------------------------------------------------
[13:02:38    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:02:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:02:40    INFO]  - will try to derive a bias correction ... 
[13:02:40    INFO]  - will validate that training produced an XML file for later ... 
[13:02:40    INFO]  - starting ANNZ::loadReaders() ... 
[13:02:44    INFO]  - will validate that the training was not a complete failure ... 
[13:02:44    INFO]  - training seems to have been successful! will move on ...
[13:02:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:02:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:02:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:02:49    INFO] ----------------------------------------------------------------------------------------------------
[13:02:49    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:02:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:02:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:02:49    INFO]    - weights:            1
[13:02:49    INFO] ----------------------------------------------------------------------------------------------------
[13:02:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:02:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[13:02:58    INFO]  - Will gen. input-parameter errors ...
[13:03:00    INFO]  - starting ANNZ::loadReaders() ... 
[13:03:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:05:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:05:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:05:43    INFO]  -----------------------------------------------------------------------------------------------------------
[13:05:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:06:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:06:21    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:06:21    INFO]  -----------------------------------------------------------------------------------------------------------
[13:06:21    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:06:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:06:23    INFO]  - will validate that the bias-correction actually improved the result ...
[13:06:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:06:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[13:06:29    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_7/plots/
[13:06:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_7/plots output/SPEC_advanced22/regres/train/ANNZ_7/plots_biasCor_before
[13:06:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:06:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[13:06:45    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_7/plots/
[13:06:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_7/plots output/SPEC_advanced22/regres/train/ANNZ_7/plots_biasCor_after
[13:06:57    INFO]  - Got original [KS-test,N_poiss]: [0.0842483 , 6.64052] , after the bias-correction: [0.0462694 , 5.67737] --> will KEEP the correction !

(13:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:07 INFO) 
[13:07:00    INFO]  -----------------------------------------------------
[13:07:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:07:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:07:01    INFO]  - starting ANNZ::Init()  ... 
[13:07:02    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_8/saveOpt.txt ...
[13:07:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:07:07    INFO] ----------------------------------------------------------------------------------------------------
[13:07:07    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=320:BoostType=Bagging:VarTransform=N
[13:07:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:07:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:07:07    INFO]      cuts (train):        ,
[13:07:07    INFO]      cuts (valid):       
[13:07:07    INFO]    - weights:            1
[13:07:07    INFO] ----------------------------------------------------------------------------------------------------
[13:07:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:07:39    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[13:07:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[13:07:42    INFO]  - Will gen. input-parameter errors ...
[13:07:44    INFO]  - starting ANNZ::loadReaders() ... 
[13:07:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:09:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:09:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:09:44    INFO]  -----------------------------------------------------------------------------------------------------------
[13:09:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:10:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:10:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:10:11    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:11    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:10:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:10:13    INFO]  - will try to derive a bias correction ... 
[13:10:13    INFO]  - will validate that training produced an XML file for later ... 
[13:10:13    INFO]  - starting ANNZ::loadReaders() ... 
[13:10:16    INFO]  - will validate that the training was not a complete failure ... 
[13:10:16    INFO]  - training seems to have been successful! will move on ...
[13:10:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:10:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:10:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:10:21    INFO] ----------------------------------------------------------------------------------------------------
[13:10:21    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:10:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:10:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:10:21    INFO]    - weights:            1
[13:10:21    INFO] ----------------------------------------------------------------------------------------------------
[13:10:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:10:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[13:10:30    INFO]  - Will gen. input-parameter errors ...
[13:10:31    INFO]  - starting ANNZ::loadReaders() ... 
[13:10:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:12:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:12:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:12:34    INFO]  -----------------------------------------------------------------------------------------------------------
[13:12:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:13:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:13:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:13:03    INFO]  -----------------------------------------------------------------------------------------------------------
[13:13:04    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:13:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:13:05    INFO]  - will validate that the bias-correction actually improved the result ...
[13:13:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:13:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[13:13:11    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_8/plots/
[13:13:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_8/plots output/SPEC_advanced22/regres/train/ANNZ_8/plots_biasCor_before
[13:13:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:13:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[13:13:26    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_8/plots/
[13:13:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_8/plots output/SPEC_advanced22/regres/train/ANNZ_8/plots_biasCor_after
[13:13:38    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.65061] , after the bias-correction: [0.0469415 , 5.92683] --> will KEEP the correction !

(13:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:13 INFO) 
[13:13:42    INFO]  -----------------------------------------------------
[13:13:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:13:42    INFO]  -----------------------------------------------------------------------------------------------------------
[13:13:42    INFO]  - starting ANNZ::Init()  ... 
[13:13:43    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_9/saveOpt.txt ...
[13:13:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:13:49    INFO] ----------------------------------------------------------------------------------------------------
[13:13:49    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=540:BoostType=AdaBoost:VarTransform=N,P
[13:13:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:13:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:13:49    INFO]      cuts (train):        ,
[13:13:49    INFO]      cuts (valid):       
[13:13:49    INFO]    - weights:            1
[13:13:49    INFO] ----------------------------------------------------------------------------------------------------
[13:13:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:14:20    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[13:14:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[13:14:22    INFO]  - Will gen. input-parameter errors ...
[13:14:23    INFO]  - starting ANNZ::loadReaders() ... 
[13:14:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:18:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:18:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:18:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:18:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:18:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:18:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:18:52    INFO]  -----------------------------------------------------------------------------------------------------------
[13:18:52    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:18:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:18:53    INFO]  - will try to derive a bias correction ... 
[13:18:53    INFO]  - will validate that training produced an XML file for later ... 
[13:18:53    INFO]  - starting ANNZ::loadReaders() ... 
[13:18:55    INFO]  - will validate that the training was not a complete failure ... 
[13:18:55    INFO]  - training seems to have been successful! will move on ...
[13:18:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:18:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:18:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:18:59    INFO] ----------------------------------------------------------------------------------------------------
[13:18:59    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:18:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:18:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:18:59    INFO]    - weights:            1
[13:18:59    INFO] ----------------------------------------------------------------------------------------------------
[13:18:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:19:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[13:19:06    INFO]  - Will gen. input-parameter errors ...
[13:19:08    INFO]  - starting ANNZ::loadReaders() ... 
[13:19:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:22:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:22:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:22:18    INFO]  -----------------------------------------------------------------------------------------------------------
[13:22:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:23:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:23:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:23:06    INFO]  -----------------------------------------------------------------------------------------------------------
[13:23:06    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:23:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:23:07    INFO]  - will validate that the bias-correction actually improved the result ...
[13:23:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:23:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
Warning in <Fit>: Fit data is empty 
[13:23:13    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_9/plots/
[13:23:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_9/plots output/SPEC_advanced22/regres/train/ANNZ_9/plots_biasCor_before
[13:23:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:23:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[13:23:29    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_9/plots/
[13:23:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_9/plots output/SPEC_advanced22/regres/train/ANNZ_9/plots_biasCor_after
[13:23:40    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43565] , after the bias-correction: [0.0444768 , 5.70774] --> will KEEP the correction !

(13:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:23 INFO) 
[13:23:43    INFO]  -----------------------------------------------------
[13:23:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:23:43    INFO]  -----------------------------------------------------------------------------------------------------------
[13:23:44    INFO]  - starting ANNZ::Init()  ... 
[13:23:45    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_10/saveOpt.txt ...
[13:23:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:23:50    INFO] ----------------------------------------------------------------------------------------------------
[13:23:50    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=260:BoostType=Bagging:VarTransform=N
[13:23:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:23:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:23:50    INFO]      cuts (train):        ,
[13:23:50    INFO]      cuts (valid):       
[13:23:50    INFO]    - weights:            1
[13:23:50    INFO] ----------------------------------------------------------------------------------------------------
[13:23:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:24:15    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[13:24:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[13:24:18    INFO]  - Will gen. input-parameter errors ...
[13:24:19    INFO]  - starting ANNZ::loadReaders() ... 
[13:24:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:25:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:25:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:25:55    INFO]  -----------------------------------------------------------------------------------------------------------
[13:25:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:26:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:26:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:26:17    INFO]  -----------------------------------------------------------------------------------------------------------
[13:26:17    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:26:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:26:18    INFO]  - will try to derive a bias correction ... 
[13:26:18    INFO]  - will validate that training produced an XML file for later ... 
[13:26:18    INFO]  - starting ANNZ::loadReaders() ... 
[13:26:21    INFO]  - will validate that the training was not a complete failure ... 
[13:26:21    INFO]  - training seems to have been successful! will move on ...
[13:26:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:26:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:26:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:26:25    INFO] ----------------------------------------------------------------------------------------------------
[13:26:25    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:26:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:26:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:26:25    INFO]    - weights:            1
[13:26:25    INFO] ----------------------------------------------------------------------------------------------------
[13:26:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:26:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[13:26:33    INFO]  - Will gen. input-parameter errors ...
[13:26:35    INFO]  - starting ANNZ::loadReaders() ... 
[13:26:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:28:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:28:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:28:11    INFO]  -----------------------------------------------------------------------------------------------------------
[13:28:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:28:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:28:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:28:41    INFO]  -----------------------------------------------------------------------------------------------------------
[13:28:41    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:28:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:28:42    INFO]  - will validate that the bias-correction actually improved the result ...
[13:28:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:28:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[13:28:49    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_10/plots/
[13:29:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_10/plots output/SPEC_advanced22/regres/train/ANNZ_10/plots_biasCor_before
[13:29:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:29:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[13:29:09    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_10/plots/
[13:29:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_10/plots output/SPEC_advanced22/regres/train/ANNZ_10/plots_biasCor_after
[13:29:21    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.67957] , after the bias-correction: [0.0479499 , 5.67869] --> will KEEP the correction !

(13:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=970:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:29 INFO) 
[13:29:24    INFO]  -----------------------------------------------------
[13:29:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:29:24    INFO]  -----------------------------------------------------------------------------------------------------------
[13:29:25    INFO]  - starting ANNZ::Init()  ... 
[13:29:26    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_11/saveOpt.txt ...
[13:29:31    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:29:31    INFO] ----------------------------------------------------------------------------------------------------
[13:29:31    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=970:BoostType=Bagging:VarTransform=N,P
[13:29:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:29:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:29:31    INFO]      cuts (train):        ,
[13:29:31    INFO]      cuts (valid):       
[13:29:31    INFO]    - weights:            1
[13:29:31    INFO] ----------------------------------------------------------------------------------------------------
[13:29:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:31:14    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[13:31:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[13:31:23    INFO]  - Will gen. input-parameter errors ...
[13:31:26    INFO]  - starting ANNZ::loadReaders() ... 
[13:31:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:49:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:49:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:49:12    INFO]  -----------------------------------------------------------------------------------------------------------
[13:49:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:53:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:53:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:53:34    INFO]  -----------------------------------------------------------------------------------------------------------
[13:53:34    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:53:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:53:38    INFO]  - will try to derive a bias correction ... 
[13:53:38    INFO]  - will validate that training produced an XML file for later ... 
[13:53:38    INFO]  - starting ANNZ::loadReaders() ... 
[13:53:48    INFO]  - will validate that the training was not a complete failure ... 
[13:53:49    INFO]  - training seems to have been successful! will move on ...
[13:53:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:53:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:53:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:53:56    INFO] ----------------------------------------------------------------------------------------------------
[13:53:56    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:53:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:53:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:53:56    INFO]    - weights:            1
[13:53:56    INFO] ----------------------------------------------------------------------------------------------------
[13:53:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:54:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[13:54:07    INFO]  - Will gen. input-parameter errors ...
[13:54:10    INFO]  - starting ANNZ::loadReaders() ... 
[13:54:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[14:11:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:11:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:11:54    INFO]  -----------------------------------------------------------------------------------------------------------
[14:11:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[14:16:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:16:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:16:13    INFO]  -----------------------------------------------------------------------------------------------------------
[14:16:13    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:16:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:16:17    INFO]  - will validate that the bias-correction actually improved the result ...
[14:16:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:16:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[14:16:23    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_11/plots/
[14:16:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_11/plots output/SPEC_advanced22/regres/train/ANNZ_11/plots_biasCor_before
[14:16:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:16:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[14:16:39    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_11/plots/
[14:16:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_11/plots output/SPEC_advanced22/regres/train/ANNZ_11/plots_biasCor_after
[14:16:54    INFO]  - Got original [KS-test,N_poiss]: [0.0933229 , 6.87448] , after the bias-correction: [0.0439166 , 5.69175] --> will KEEP the correction !

(14:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:17 INFO) 
[14:17:00    INFO]  -----------------------------------------------------
[14:17:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:17:00    INFO]  -----------------------------------------------------------------------------------------------------------
[14:17:01    INFO]  - starting ANNZ::Init()  ... 
[14:17:02    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_12/saveOpt.txt ...
[14:17:08    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:17:08    INFO] ----------------------------------------------------------------------------------------------------
[14:17:08    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=380:BoostType=AdaBoostR2:VarTransform=N
[14:17:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:17:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:17:08    INFO]      cuts (train):        ,
[14:17:08    INFO]      cuts (valid):       
[14:17:08    INFO]    - weights:            1
[14:17:08    INFO] ----------------------------------------------------------------------------------------------------
[14:17:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:17:41    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[14:17:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[14:17:44    INFO]  - Will gen. input-parameter errors ...
[14:17:45    INFO]  - starting ANNZ::loadReaders() ... 
[14:17:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[14:24:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:24:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:24:42    INFO]  -----------------------------------------------------------------------------------------------------------
[14:24:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[14:26:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:26:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:26:29    INFO]  -----------------------------------------------------------------------------------------------------------
[14:26:29    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:26:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:26:30    INFO]  - will try to derive a bias correction ... 
[14:26:30    INFO]  - will validate that training produced an XML file for later ... 
[14:26:30    INFO]  - starting ANNZ::loadReaders() ... 
[14:26:32    INFO]  - will validate that the training was not a complete failure ... 
[14:26:32    INFO]  - training seems to have been successful! will move on ...
[14:26:32    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:26:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:26:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:26:37    INFO] ----------------------------------------------------------------------------------------------------
[14:26:37    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:26:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:26:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:26:37    INFO]    - weights:            1
[14:26:37    INFO] ----------------------------------------------------------------------------------------------------
[14:26:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:26:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[14:26:44    INFO]  - Will gen. input-parameter errors ...
[14:26:46    INFO]  - starting ANNZ::loadReaders() ... 
[14:26:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[14:32:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:32:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:32:47    INFO]  -----------------------------------------------------------------------------------------------------------
[14:32:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[14:34:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:34:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:34:14    INFO]  -----------------------------------------------------------------------------------------------------------
[14:34:15    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:34:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:34:16    INFO]  - will validate that the bias-correction actually improved the result ...
[14:34:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:34:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
Warning in <Fit>: Fit data is empty 
[14:34:21    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_12/plots/
[14:34:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_12/plots output/SPEC_advanced22/regres/train/ANNZ_12/plots_biasCor_before
[14:34:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:34:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[14:34:37    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_12/plots/
[14:34:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_12/plots output/SPEC_advanced22/regres/train/ANNZ_12/plots_biasCor_after
[14:34:48    INFO]  - Got original [KS-test,N_poiss]: [0.0619538 , 6.59597] , after the bias-correction: [0.0338337 , 5.55518] --> will KEEP the correction !

(14:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:34 INFO) 
[14:34:51    INFO]  -----------------------------------------------------
[14:34:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:34:51    INFO]  -----------------------------------------------------------------------------------------------------------
[14:34:52    INFO]  - starting ANNZ::Init()  ... 
[14:34:53    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_13/saveOpt.txt ...
[14:34:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:34:58    INFO] ----------------------------------------------------------------------------------------------------
[14:34:58    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=270:BoostType=Bagging:VarTransform=N
[14:34:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:34:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:34:58    INFO]      cuts (train):        ,
[14:34:58    INFO]      cuts (valid):       
[14:34:58    INFO]    - weights:            1
[14:34:58    INFO] ----------------------------------------------------------------------------------------------------
[14:34:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:35:24    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[14:35:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[14:35:27    INFO]  - Will gen. input-parameter errors ...
[14:35:29    INFO]  - starting ANNZ::loadReaders() ... 
[14:35:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[14:37:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:37:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:37:08    INFO]  -----------------------------------------------------------------------------------------------------------
[14:37:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[14:37:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:37:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:37:30    INFO]  -----------------------------------------------------------------------------------------------------------
[14:37:30    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:37:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:37:31    INFO]  - will try to derive a bias correction ... 
[14:37:31    INFO]  - will validate that training produced an XML file for later ... 
[14:37:31    INFO]  - starting ANNZ::loadReaders() ... 
[14:37:34    INFO]  - will validate that the training was not a complete failure ... 
[14:37:34    INFO]  - training seems to have been successful! will move on ...
[14:37:34    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:37:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:37:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:37:39    INFO] ----------------------------------------------------------------------------------------------------
[14:37:39    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:37:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:37:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:37:39    INFO]    - weights:            1
[14:37:39    INFO] ----------------------------------------------------------------------------------------------------
[14:37:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:37:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[14:37:47    INFO]  - Will gen. input-parameter errors ...
[14:37:48    INFO]  - starting ANNZ::loadReaders() ... 
[14:37:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[14:39:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:39:27    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:39:27    INFO]  -----------------------------------------------------------------------------------------------------------
[14:39:27    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[14:39:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:39:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:39:50    INFO]  -----------------------------------------------------------------------------------------------------------
[14:39:50    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:39:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:39:51    INFO]  - will validate that the bias-correction actually improved the result ...
[14:39:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:39:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[14:39:57    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_13/plots/
[14:40:08        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_13/plots output/SPEC_advanced22/regres/train/ANNZ_13/plots_biasCor_before
[14:40:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:40:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[14:40:12    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_13/plots/
[14:40:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_13/plots output/SPEC_advanced22/regres/train/ANNZ_13/plots_biasCor_after
[14:40:24    INFO]  - Got original [KS-test,N_poiss]: [0.0841362 , 6.65828] , after the bias-correction: [0.0457092 , 5.60337] --> will KEEP the correction !

(14:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:40 INFO) 
[14:40:27    INFO]  -----------------------------------------------------
[14:40:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:40:27    INFO]  -----------------------------------------------------------------------------------------------------------
[14:40:28    INFO]  - starting ANNZ::Init()  ... 
[14:40:29    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_14/saveOpt.txt ...
[14:40:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:40:34    INFO] ----------------------------------------------------------------------------------------------------
[14:40:34    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=850:BoostType=AdaBoostR2:VarTransform=N,P
[14:40:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:40:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:40:34    INFO]      cuts (train):        ,
[14:40:34    INFO]      cuts (valid):       
[14:40:34    INFO]    - weights:            1
[14:40:34    INFO] ----------------------------------------------------------------------------------------------------
[14:40:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:42:05    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[14:42:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[14:42:10    INFO]  - Will gen. input-parameter errors ...
[14:42:13    INFO]  - starting ANNZ::loadReaders() ... 
[14:42:39    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[15:25:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:25:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:25:15    INFO]  -----------------------------------------------------------------------------------------------------------
[15:25:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[15:36:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:36:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:36:06    INFO]  -----------------------------------------------------------------------------------------------------------
[15:36:06    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:36:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:36:09    INFO]  - will try to derive a bias correction ... 
[15:36:09    INFO]  - will validate that training produced an XML file for later ... 
[15:36:09    INFO]  - starting ANNZ::loadReaders() ... 
[15:36:15    INFO]  - will validate that the training was not a complete failure ... 
[15:36:15    INFO]  - training seems to have been successful! will move on ...
[15:36:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:36:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:36:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:36:22    INFO] ----------------------------------------------------------------------------------------------------
[15:36:22    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:36:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:36:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:36:22    INFO]    - weights:            1
[15:36:22    INFO] ----------------------------------------------------------------------------------------------------
[15:36:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:36:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[15:36:31    INFO]  - Will gen. input-parameter errors ...
[15:36:34    INFO]  - starting ANNZ::loadReaders() ... 
[15:37:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:10:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:10:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:10:30    INFO]  -----------------------------------------------------------------------------------------------------------
[16:10:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:18:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:18:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:18:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:18:37    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:18:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:18:39    INFO]  - will validate that the bias-correction actually improved the result ...
[16:18:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:18:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[16:18:45    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_14/plots/
[16:18:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_14/plots output/SPEC_advanced22/regres/train/ANNZ_14/plots_biasCor_before
[16:18:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:18:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[16:19:01    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_14/plots/
[16:19:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_14/plots output/SPEC_advanced22/regres/train/ANNZ_14/plots_biasCor_after
[16:19:12    INFO]  - Got original [KS-test,N_poiss]: [0.0697961 , 6.68945] , after the bias-correction: [0.0319292 , 5.49654] --> will KEEP the correction !

(16:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:19 INFO) 
[16:19:16    INFO]  -----------------------------------------------------
[16:19:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:19:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:19:17    INFO]  - starting ANNZ::Init()  ... 
[16:19:18    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_15/saveOpt.txt ...
[16:19:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:19:23    INFO] ----------------------------------------------------------------------------------------------------
[16:19:23    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N,P
[16:19:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:19:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:19:23    INFO]      cuts (train):        ,
[16:19:23    INFO]      cuts (valid):       
[16:19:23    INFO]    - weights:            1
[16:19:23    INFO] ----------------------------------------------------------------------------------------------------
[16:19:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:19:45    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[16:19:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[16:19:47    INFO]  - Will gen. input-parameter errors ...
[16:19:48    INFO]  - starting ANNZ::loadReaders() ... 
[16:19:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:22:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:22:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:22:22    INFO]  -----------------------------------------------------------------------------------------------------------
[16:22:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:22:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:22:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:22:59    INFO]  -----------------------------------------------------------------------------------------------------------
[16:22:59    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:23:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:23:00    INFO]  - will try to derive a bias correction ... 
[16:23:00    INFO]  - will validate that training produced an XML file for later ... 
[16:23:00    INFO]  - starting ANNZ::loadReaders() ... 
[16:23:01    INFO]  - will validate that the training was not a complete failure ... 
[16:23:01    INFO]  - training seems to have been successful! will move on ...
[16:23:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:23:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:23:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:23:05    INFO] ----------------------------------------------------------------------------------------------------
[16:23:05    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:23:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:23:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:23:05    INFO]    - weights:            1
[16:23:05    INFO] ----------------------------------------------------------------------------------------------------
[16:23:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:23:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[16:23:12    INFO]  - Will gen. input-parameter errors ...
[16:23:13    INFO]  - starting ANNZ::loadReaders() ... 
[16:23:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:25:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:25:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:25:59    INFO]  -----------------------------------------------------------------------------------------------------------
[16:25:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:26:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:26:38    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:38    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:26:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:26:39    INFO]  - will validate that the bias-correction actually improved the result ...
[16:26:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:26:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
Warning in <Fit>: Fit data is empty 
[16:26:44    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_15/plots/
[16:26:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_15/plots output/SPEC_advanced22/regres/train/ANNZ_15/plots_biasCor_before
[16:26:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:26:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
Warning in <Fit>: Fit data is empty 
[16:27:00    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_15/plots/
[16:27:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_15/plots output/SPEC_advanced22/regres/train/ANNZ_15/plots_biasCor_after
[16:27:11    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40441] , after the bias-correction: [0.0434685 , 5.7773] --> will KEEP the correction !

(16:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:27 INFO) 
[16:27:14    INFO]  -----------------------------------------------------
[16:27:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:27:14    INFO]  -----------------------------------------------------------------------------------------------------------
[16:27:15    INFO]  - starting ANNZ::Init()  ... 
[16:27:16    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_16/saveOpt.txt ...
[16:27:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:27:21    INFO] ----------------------------------------------------------------------------------------------------
[16:27:21    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N,P
[16:27:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:27:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:27:21    INFO]      cuts (train):        ,
[16:27:21    INFO]      cuts (valid):       
[16:27:21    INFO]    - weights:            1
[16:27:21    INFO] ----------------------------------------------------------------------------------------------------
[16:27:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:28:15    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[16:28:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[16:28:20    INFO]  - Will gen. input-parameter errors ...
[16:28:23    INFO]  - starting ANNZ::loadReaders() ... 
[16:28:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:33:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:33:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:33:52    INFO]  -----------------------------------------------------------------------------------------------------------
[16:33:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:35:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:35:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:35:14    INFO]  -----------------------------------------------------------------------------------------------------------
[16:35:14    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:35:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:35:16    INFO]  - will try to derive a bias correction ... 
[16:35:16    INFO]  - will validate that training produced an XML file for later ... 
[16:35:16    INFO]  - starting ANNZ::loadReaders() ... 
[16:35:21    INFO]  - will validate that the training was not a complete failure ... 
[16:35:22    INFO]  - training seems to have been successful! will move on ...
[16:35:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:35:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:35:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:35:31    INFO] ----------------------------------------------------------------------------------------------------
[16:35:31    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:35:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:35:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:35:31    INFO]    - weights:            1
[16:35:31    INFO] ----------------------------------------------------------------------------------------------------
[16:35:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:35:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[16:35:40    INFO]  - Will gen. input-parameter errors ...
[16:35:43    INFO]  - starting ANNZ::loadReaders() ... 
[16:35:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:41:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:41:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:41:28    INFO]  -----------------------------------------------------------------------------------------------------------
[16:41:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:42:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:42:50    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:50    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:42:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:42:52    INFO]  - will validate that the bias-correction actually improved the result ...
[16:42:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:42:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[16:42:58    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_16/plots/
[16:43:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_16/plots output/SPEC_advanced22/regres/train/ANNZ_16/plots_biasCor_before
[16:43:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:43:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[16:43:14    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_16/plots/
[16:43:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_16/plots output/SPEC_advanced22/regres/train/ANNZ_16/plots_biasCor_after
[16:43:25    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.8969] , after the bias-correction: [0.0439166 , 5.81088] --> will KEEP the correction !

(16:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:43 INFO) 
[16:43:29    INFO]  -----------------------------------------------------
[16:43:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:43:29    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:30    INFO]  - starting ANNZ::Init()  ... 
[16:43:31    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_17/saveOpt.txt ...
[16:43:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:43:36    INFO] ----------------------------------------------------------------------------------------------------
[16:43:36    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=270:BoostType=AdaBoost:VarTransform=N,P
[16:43:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:43:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:43:36    INFO]      cuts (train):        ,
[16:43:36    INFO]      cuts (valid):       
[16:43:36    INFO]    - weights:            1
[16:43:36    INFO] ----------------------------------------------------------------------------------------------------
[16:43:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:43:53    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[16:43:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[16:43:55    INFO]  - Will gen. input-parameter errors ...
[16:43:56    INFO]  - starting ANNZ::loadReaders() ... 
[16:43:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:45:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:45:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:45:58    INFO]  -----------------------------------------------------------------------------------------------------------
[16:45:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:46:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:46:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:46:30    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:30    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:46:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:46:31    INFO]  - will try to derive a bias correction ... 
[16:46:31    INFO]  - will validate that training produced an XML file for later ... 
[16:46:31    INFO]  - starting ANNZ::loadReaders() ... 
[16:46:32    INFO]  - will validate that the training was not a complete failure ... 
[16:46:32    INFO]  - training seems to have been successful! will move on ...
[16:46:32    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:46:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:46:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:46:36    INFO] ----------------------------------------------------------------------------------------------------
[16:46:36    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:46:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:46:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:46:36    INFO]    - weights:            1
[16:46:36    INFO] ----------------------------------------------------------------------------------------------------
[16:46:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:46:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[16:46:42    INFO]  - Will gen. input-parameter errors ...
[16:46:44    INFO]  - starting ANNZ::loadReaders() ... 
[16:46:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:49:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:49:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:49:19    INFO]  -----------------------------------------------------------------------------------------------------------
[16:49:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:49:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:49:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:49:57    INFO]  -----------------------------------------------------------------------------------------------------------
[16:49:57    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:49:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:49:58    INFO]  - will validate that the bias-correction actually improved the result ...
[16:49:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:49:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
Warning in <Fit>: Fit data is empty 
[16:50:03    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_17/plots/
[16:50:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_17/plots output/SPEC_advanced22/regres/train/ANNZ_17/plots_biasCor_before
[16:50:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:50:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[16:50:19    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_17/plots/
[16:50:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_17/plots output/SPEC_advanced22/regres/train/ANNZ_17/plots_biasCor_after
[16:50:30    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.39951] , after the bias-correction: [0.0438046 , 5.81269] --> will KEEP the correction !

(16:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:50 INFO) 
[16:50:33    INFO]  -----------------------------------------------------
[16:50:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:50:33    INFO]  -----------------------------------------------------------------------------------------------------------
[16:50:34    INFO]  - starting ANNZ::Init()  ... 
[16:50:35    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_18/saveOpt.txt ...
[16:50:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:50:40    INFO] ----------------------------------------------------------------------------------------------------
[16:50:40    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[16:50:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:50:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:50:40    INFO]      cuts (train):        ,
[16:50:40    INFO]      cuts (valid):       
[16:50:40    INFO]    - weights:            1
[16:50:40    INFO] ----------------------------------------------------------------------------------------------------
[16:50:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:51:23    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[16:51:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[16:51:27    INFO]  - Will gen. input-parameter errors ...
[16:51:30    INFO]  - starting ANNZ::loadReaders() ... 
[16:51:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:54:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:54:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:54:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:54:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:54:55    INFO]  -----------------------------------------------------------------------------------------------------------
[16:54:56    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:54:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:54:57    INFO]  - will try to derive a bias correction ... 
[16:54:57    INFO]  - will validate that training produced an XML file for later ... 
[16:54:57    INFO]  - starting ANNZ::loadReaders() ... 
[16:55:02    INFO]  - will validate that the training was not a complete failure ... 
[16:55:02    INFO]  - training seems to have been successful! will move on ...
[16:55:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:55:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:55:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:55:07    INFO] ----------------------------------------------------------------------------------------------------
[16:55:07    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:55:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:55:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:55:07    INFO]    - weights:            1
[16:55:07    INFO] ----------------------------------------------------------------------------------------------------
[16:55:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:55:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[16:55:16    INFO]  - Will gen. input-parameter errors ...
[16:55:18    INFO]  - starting ANNZ::loadReaders() ... 
[16:55:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[16:58:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:58:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:58:18    INFO]  -----------------------------------------------------------------------------------------------------------
[16:58:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[16:59:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:59:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:59:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:59:03    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:59:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:59:05    INFO]  - will validate that the bias-correction actually improved the result ...
[16:59:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:59:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[16:59:11    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_18/plots/
[16:59:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_18/plots output/SPEC_advanced22/regres/train/ANNZ_18/plots_biasCor_before
[16:59:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:59:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[16:59:27    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_18/plots/
[16:59:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_18/plots output/SPEC_advanced22/regres/train/ANNZ_18/plots_biasCor_after
[16:59:38    INFO]  - Got original [KS-test,N_poiss]: [0.0844724 , 6.62039] , after the bias-correction: [0.0454851 , 5.53294] --> will KEEP the correction !

(16:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:59 INFO) 
[16:59:42    INFO]  -----------------------------------------------------
[16:59:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:59:42    INFO]  -----------------------------------------------------------------------------------------------------------
[16:59:43    INFO]  - starting ANNZ::Init()  ... 
[16:59:44    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_19/saveOpt.txt ...
[16:59:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:59:49    INFO] ----------------------------------------------------------------------------------------------------
[16:59:49    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N,P
[16:59:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:59:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:59:49    INFO]      cuts (train):        ,
[16:59:49    INFO]      cuts (valid):       
[16:59:49    INFO]    - weights:            1
[16:59:49    INFO] ----------------------------------------------------------------------------------------------------
[16:59:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:00:41    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[17:00:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[17:00:45    INFO]  - Will gen. input-parameter errors ...
[17:00:48    INFO]  - starting ANNZ::loadReaders() ... 
[17:00:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:06:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:06:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:06:26    INFO]  -----------------------------------------------------------------------------------------------------------
[17:06:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:07:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:07:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:07:47    INFO]  -----------------------------------------------------------------------------------------------------------
[17:07:47    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:07:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:07:50    INFO]  - will try to derive a bias correction ... 
[17:07:50    INFO]  - will validate that training produced an XML file for later ... 
[17:07:50    INFO]  - starting ANNZ::loadReaders() ... 
[17:07:56    INFO]  - will validate that the training was not a complete failure ... 
[17:07:57    INFO]  - training seems to have been successful! will move on ...
[17:07:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:08:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:08:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:08:04    INFO] ----------------------------------------------------------------------------------------------------
[17:08:04    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:08:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:08:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:08:04    INFO]    - weights:            1
[17:08:04    INFO] ----------------------------------------------------------------------------------------------------
[17:08:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:08:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[17:08:14    INFO]  - Will gen. input-parameter errors ...
[17:08:16    INFO]  - starting ANNZ::loadReaders() ... 
[17:08:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:13:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:13:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:13:28    INFO]  -----------------------------------------------------------------------------------------------------------
[17:13:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:14:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:14:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:14:42    INFO]  -----------------------------------------------------------------------------------------------------------
[17:14:42    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:14:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:14:44    INFO]  - will validate that the bias-correction actually improved the result ...
[17:14:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:14:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[17:14:50    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_19/plots/
[17:15:01        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_19/plots output/SPEC_advanced22/regres/train/ANNZ_19/plots_biasCor_before
[17:15:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:15:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[17:15:06    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_19/plots/
[17:15:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_19/plots output/SPEC_advanced22/regres/train/ANNZ_19/plots_biasCor_after
[17:15:17    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.8969] , after the bias-correction: [0.0439166 , 5.81088] --> will KEEP the correction !

(17:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:15 INFO) 
[17:15:21    INFO]  -----------------------------------------------------
[17:15:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:15:21    INFO]  -----------------------------------------------------------------------------------------------------------
[17:15:22    INFO]  - starting ANNZ::Init()  ... 
[17:15:26    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_20/saveOpt.txt ...
[17:15:30    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:15:31    INFO] ----------------------------------------------------------------------------------------------------
[17:15:31    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N
[17:15:31    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:15:31    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:15:31    INFO]      cuts (train):        ,
[17:15:31    INFO]      cuts (valid):       
[17:15:31    INFO]    - weights:            1
[17:15:31    INFO] ----------------------------------------------------------------------------------------------------
[17:15:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:16:24    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[17:16:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[17:16:29    INFO]  - Will gen. input-parameter errors ...
[17:16:31    INFO]  - starting ANNZ::loadReaders() ... 
[17:16:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:20:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:20:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:20:03    INFO]  -----------------------------------------------------------------------------------------------------------
[17:20:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:20:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:20:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:20:52    INFO]  -----------------------------------------------------------------------------------------------------------
[17:20:52    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:20:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:20:55    INFO]  - will try to derive a bias correction ... 
[17:20:55    INFO]  - will validate that training produced an XML file for later ... 
[17:20:55    INFO]  - starting ANNZ::loadReaders() ... 
[17:21:00    INFO]  - will validate that the training was not a complete failure ... 
[17:21:00    INFO]  - training seems to have been successful! will move on ...
[17:21:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:21:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:21:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:21:06    INFO] ----------------------------------------------------------------------------------------------------
[17:21:06    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:21:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:21:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:21:06    INFO]    - weights:            1
[17:21:06    INFO] ----------------------------------------------------------------------------------------------------
[17:21:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:21:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[17:21:16    INFO]  - Will gen. input-parameter errors ...
[17:21:18    INFO]  - starting ANNZ::loadReaders() ... 
[17:21:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:25:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:25:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:25:18    INFO]  -----------------------------------------------------------------------------------------------------------
[17:25:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:26:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:26:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:26:14    INFO]  -----------------------------------------------------------------------------------------------------------
[17:26:14    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:26:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:26:16    INFO]  - will validate that the bias-correction actually improved the result ...
[17:26:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:26:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[17:26:22    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_20/plots/
[17:26:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_20/plots output/SPEC_advanced22/regres/train/ANNZ_20/plots_biasCor_before
[17:26:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:26:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[17:26:38    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_20/plots/
[17:26:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_20/plots output/SPEC_advanced22/regres/train/ANNZ_20/plots_biasCor_after
[17:26:49    INFO]  - Got original [KS-test,N_poiss]: [0.0845844 , 6.74033] , after the bias-correction: [0.0500785 , 5.6416] --> will KEEP the correction !

(17:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:26 INFO) 
[17:26:53    INFO]  -----------------------------------------------------
[17:26:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:26:53    INFO]  -----------------------------------------------------------------------------------------------------------
[17:26:54    INFO]  - starting ANNZ::Init()  ... 
[17:26:55    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_21/saveOpt.txt ...
[17:27:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:27:00    INFO] ----------------------------------------------------------------------------------------------------
[17:27:00    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=310:BoostType=Bagging:VarTransform=N
[17:27:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:27:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:27:00    INFO]      cuts (train):        ,
[17:27:00    INFO]      cuts (valid):       
[17:27:00    INFO]    - weights:            1
[17:27:00    INFO] ----------------------------------------------------------------------------------------------------
[17:27:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:27:30    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[17:27:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[17:27:33    INFO]  - Will gen. input-parameter errors ...
[17:27:35    INFO]  - starting ANNZ::loadReaders() ... 
[17:27:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:29:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:29:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:29:30    INFO]  -----------------------------------------------------------------------------------------------------------
[17:29:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:29:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:29:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:29:56    INFO]  -----------------------------------------------------------------------------------------------------------
[17:29:57    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:29:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:29:58    INFO]  - will try to derive a bias correction ... 
[17:29:58    INFO]  - will validate that training produced an XML file for later ... 
[17:29:58    INFO]  - starting ANNZ::loadReaders() ... 
[17:30:01    INFO]  - will validate that the training was not a complete failure ... 
[17:30:01    INFO]  - training seems to have been successful! will move on ...
[17:30:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:30:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:30:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:30:06    INFO] ----------------------------------------------------------------------------------------------------
[17:30:06    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:30:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:30:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:30:06    INFO]    - weights:            1
[17:30:06    INFO] ----------------------------------------------------------------------------------------------------
[17:30:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:30:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[17:30:14    INFO]  - Will gen. input-parameter errors ...
[17:30:16    INFO]  - starting ANNZ::loadReaders() ... 
[17:30:23    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:32:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:32:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:32:11    INFO]  -----------------------------------------------------------------------------------------------------------
[17:32:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:32:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:32:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:32:38    INFO]  -----------------------------------------------------------------------------------------------------------
[17:32:38    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:32:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:32:40    INFO]  - will validate that the bias-correction actually improved the result ...
[17:32:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:32:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[17:32:45    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_21/plots/
[17:32:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_21/plots output/SPEC_advanced22/regres/train/ANNZ_21/plots_biasCor_before
[17:32:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:32:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[17:33:01    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_21/plots/
[17:33:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_21/plots output/SPEC_advanced22/regres/train/ANNZ_21/plots_biasCor_after
[17:33:13    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.64743] , after the bias-correction: [0.0479499 , 5.6192] --> will KEEP the correction !

(17:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:33 INFO) 
[17:33:16    INFO]  -----------------------------------------------------
[17:33:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:33:16    INFO]  -----------------------------------------------------------------------------------------------------------
[17:33:17    INFO]  - starting ANNZ::Init()  ... 
[17:33:18    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_22/saveOpt.txt ...
[17:33:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:33:23    INFO] ----------------------------------------------------------------------------------------------------
[17:33:23    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=N,P
[17:33:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:33:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:33:23    INFO]      cuts (train):        ,
[17:33:23    INFO]      cuts (valid):       
[17:33:23    INFO]    - weights:            1
[17:33:23    INFO] ----------------------------------------------------------------------------------------------------
[17:33:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:34:03    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[17:34:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[17:34:07    INFO]  - Will gen. input-parameter errors ...
[17:34:09    INFO]  - starting ANNZ::loadReaders() ... 
[17:34:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:37:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:37:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:37:54    INFO]  -----------------------------------------------------------------------------------------------------------
[17:37:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:38:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:38:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:38:50    INFO]  -----------------------------------------------------------------------------------------------------------
[17:38:51    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:38:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:38:52    INFO]  - will try to derive a bias correction ... 
[17:38:52    INFO]  - will validate that training produced an XML file for later ... 
[17:38:52    INFO]  - starting ANNZ::loadReaders() ... 
[17:38:56    INFO]  - will validate that the training was not a complete failure ... 
[17:38:56    INFO]  - training seems to have been successful! will move on ...
[17:38:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:39:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:39:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:39:02    INFO] ----------------------------------------------------------------------------------------------------
[17:39:02    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:39:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:39:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:39:02    INFO]    - weights:            1
[17:39:02    INFO] ----------------------------------------------------------------------------------------------------
[17:39:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:39:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[17:39:10    INFO]  - Will gen. input-parameter errors ...
[17:39:12    INFO]  - starting ANNZ::loadReaders() ... 
[17:39:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:43:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:43:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:43:31    INFO]  -----------------------------------------------------------------------------------------------------------
[17:43:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:44:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:44:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:44:31    INFO]  -----------------------------------------------------------------------------------------------------------
[17:44:31    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:44:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:44:32    INFO]  - will validate that the bias-correction actually improved the result ...
[17:44:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:44:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[17:44:38    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_22/plots/
[17:44:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_22/plots output/SPEC_advanced22/regres/train/ANNZ_22/plots_biasCor_before
[17:44:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:44:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[17:44:56    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_22/plots/
[17:45:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_22/plots output/SPEC_advanced22/regres/train/ANNZ_22/plots_biasCor_after
[17:45:07    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.91132] , after the bias-correction: [0.0448129 , 5.66772] --> will KEEP the correction !

(17:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:45 INFO) 
[17:45:11    INFO]  -----------------------------------------------------
[17:45:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:45:11    INFO]  -----------------------------------------------------------------------------------------------------------
[17:45:12    INFO]  - starting ANNZ::Init()  ... 
[17:45:13    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_23/saveOpt.txt ...
[17:45:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:45:18    INFO] ----------------------------------------------------------------------------------------------------
[17:45:18    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=260:BoostType=Bagging:VarTransform=N,P
[17:45:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:45:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:45:18    INFO]      cuts (train):        ,
[17:45:18    INFO]      cuts (valid):       
[17:45:18    INFO]    - weights:            1
[17:45:18    INFO] ----------------------------------------------------------------------------------------------------
[17:45:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:45:44    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[17:45:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[17:45:47    INFO]  - Will gen. input-parameter errors ...
[17:45:49    INFO]  - starting ANNZ::loadReaders() ... 
[17:45:54    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:48:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:48:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:48:21    INFO]  -----------------------------------------------------------------------------------------------------------
[17:48:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:49:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:49:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:49:07    INFO]  -----------------------------------------------------------------------------------------------------------
[17:49:07    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:49:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:49:09    INFO]  - will try to derive a bias correction ... 
[17:49:09    INFO]  - will validate that training produced an XML file for later ... 
[17:49:09    INFO]  - starting ANNZ::loadReaders() ... 
[17:49:12    INFO]  - will validate that the training was not a complete failure ... 
[17:49:12    INFO]  - training seems to have been successful! will move on ...
[17:49:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:49:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:49:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:49:18    INFO] ----------------------------------------------------------------------------------------------------
[17:49:18    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:49:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:49:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:49:18    INFO]    - weights:            1
[17:49:18    INFO] ----------------------------------------------------------------------------------------------------
[17:49:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:49:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[17:49:27    INFO]  - Will gen. input-parameter errors ...
[17:49:29    INFO]  - starting ANNZ::loadReaders() ... 
[17:49:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[17:51:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:51:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:51:53    INFO]  -----------------------------------------------------------------------------------------------------------
[17:51:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[17:52:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:52:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:52:26    INFO]  -----------------------------------------------------------------------------------------------------------
[17:52:26    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:52:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:52:27    INFO]  - will validate that the bias-correction actually improved the result ...
[17:52:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:52:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[17:52:34    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_23/plots/
[17:52:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_23/plots output/SPEC_advanced22/regres/train/ANNZ_23/plots_biasCor_before
[17:52:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:52:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[17:52:50    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_23/plots/
[17:53:01        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_23/plots output/SPEC_advanced22/regres/train/ANNZ_23/plots_biasCor_after
[17:53:01    INFO]  - Got original [KS-test,N_poiss]: [0.0939951 , 6.8305] , after the bias-correction: [0.0427963 , 5.53889] --> will KEEP the correction !

(17:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:53 INFO) 
[17:53:04    INFO]  -----------------------------------------------------
[17:53:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:53:04    INFO]  -----------------------------------------------------------------------------------------------------------
[17:53:05    INFO]  - starting ANNZ::Init()  ... 
[17:53:06    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_24/saveOpt.txt ...
[17:53:11    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:53:11    INFO] ----------------------------------------------------------------------------------------------------
[17:53:11    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=320:BoostType=AdaBoostR2:VarTransform=N,P
[17:53:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:53:11    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:53:11    INFO]      cuts (train):        ,
[17:53:11    INFO]      cuts (valid):       
[17:53:11    INFO]    - weights:            1
[17:53:11    INFO] ----------------------------------------------------------------------------------------------------
[17:53:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:53:44    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[17:53:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[17:53:47    INFO]  - Will gen. input-parameter errors ...
[17:53:48    INFO]  - starting ANNZ::loadReaders() ... 
[17:53:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:00:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:00:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:00:23    INFO]  -----------------------------------------------------------------------------------------------------------
[18:00:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:01:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:01:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:01:59    INFO]  -----------------------------------------------------------------------------------------------------------
[18:01:59    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:02:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:02:00    INFO]  - will try to derive a bias correction ... 
[18:02:00    INFO]  - will validate that training produced an XML file for later ... 
[18:02:00    INFO]  - starting ANNZ::loadReaders() ... 
[18:02:03    INFO]  - will validate that the training was not a complete failure ... 
[18:02:03    INFO]  - training seems to have been successful! will move on ...
[18:02:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:02:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:02:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:02:07    INFO] ----------------------------------------------------------------------------------------------------
[18:02:07    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:02:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:02:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:02:07    INFO]    - weights:            1
[18:02:07    INFO] ----------------------------------------------------------------------------------------------------
[18:02:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:02:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[18:02:15    INFO]  - Will gen. input-parameter errors ...
[18:02:16    INFO]  - starting ANNZ::loadReaders() ... 
[18:02:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:07:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:07:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:07:51    INFO]  -----------------------------------------------------------------------------------------------------------
[18:07:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:09:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:09:15    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:15    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:09:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:09:16    INFO]  - will validate that the bias-correction actually improved the result ...
[18:09:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:09:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[18:09:22    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_24/plots/
[18:09:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_24/plots output/SPEC_advanced22/regres/train/ANNZ_24/plots_biasCor_before
[18:09:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:09:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[18:09:38    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_24/plots/
[18:09:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_24/plots output/SPEC_advanced22/regres/train/ANNZ_24/plots_biasCor_after
[18:09:49    INFO]  - Got original [KS-test,N_poiss]: [0.069572 , 6.68335] , after the bias-correction: [0.0349541 , 5.56307] --> will KEEP the correction !

(18:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:09 INFO) 
[18:09:53    INFO]  -----------------------------------------------------
[18:09:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:09:53    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:53    INFO]  - starting ANNZ::Init()  ... 
[18:09:55    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_25/saveOpt.txt ...
[18:10:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:10:00    INFO] ----------------------------------------------------------------------------------------------------
[18:10:00    INFO]  - will book (ANNZ_25) method(BDT) with options: :NTrees=250:BoostType=AdaBoost:VarTransform=N,P
[18:10:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:10:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:10:00    INFO]      cuts (train):        ,
[18:10:00    INFO]      cuts (valid):       
[18:10:00    INFO]    - weights:            1
[18:10:00    INFO] ----------------------------------------------------------------------------------------------------
[18:10:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:10:17    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_25/ANNZ_25_weights/saveTrainOpt_ANNZ_25.txt ...
[18:10:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[18:10:18    INFO]  - Will gen. input-parameter errors ...
[18:10:19    INFO]  - starting ANNZ::loadReaders() ... 
[18:10:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:12:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:12:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:12:14    INFO]  -----------------------------------------------------------------------------------------------------------
[18:12:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:12:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:12:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:12:42    INFO]  -----------------------------------------------------------------------------------------------------------
[18:12:42    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:12:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:12:42    INFO]  - will try to derive a bias correction ... 
[18:12:42    INFO]  - will validate that training produced an XML file for later ... 
[18:12:42    INFO]  - starting ANNZ::loadReaders() ... 
[18:12:43    INFO]  - will validate that the training was not a complete failure ... 
[18:12:43    INFO]  - training seems to have been successful! will move on ...
[18:12:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:12:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:12:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:12:48    INFO] ----------------------------------------------------------------------------------------------------
[18:12:48    INFO]  - will book (ANNZ_25_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:12:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:12:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:12:48    INFO]    - weights:            1
[18:12:48    INFO] ----------------------------------------------------------------------------------------------------
[18:12:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:12:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[18:12:54    INFO]  - Will gen. input-parameter errors ...
[18:12:55    INFO]  - starting ANNZ::loadReaders() ... 
[18:12:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:15:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:15:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:15:33    INFO]  -----------------------------------------------------------------------------------------------------------
[18:15:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:16:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:16:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:16:10    INFO]  -----------------------------------------------------------------------------------------------------------
[18:16:10    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:16:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:16:11    INFO]  - will validate that the bias-correction actually improved the result ...
[18:16:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:16:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
Warning in <Fit>: Fit data is empty 
[18:16:16    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_25/plots/
[18:16:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_25/plots output/SPEC_advanced22/regres/train/ANNZ_25/plots_biasCor_before
[18:16:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:16:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
Warning in <Fit>: Fit data is empty 
[18:16:32    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_25/plots/
[18:16:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_25/plots output/SPEC_advanced22/regres/train/ANNZ_25/plots_biasCor_after
[18:16:43    INFO]  - Got original [KS-test,N_poiss]: [0.100941 , 6.44299] , after the bias-correction: [0.0448129 , 5.75736] --> will KEEP the correction !

(18:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:16 INFO) 
[18:16:46    INFO]  -----------------------------------------------------
[18:16:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:16:46    INFO]  -----------------------------------------------------------------------------------------------------------
[18:16:47    INFO]  - starting ANNZ::Init()  ... 
[18:16:48    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_26/saveOpt.txt ...
[18:16:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:16:53    INFO] ----------------------------------------------------------------------------------------------------
[18:16:53    INFO]  - will book (ANNZ_26) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[18:16:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:16:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:16:53    INFO]      cuts (train):        ,
[18:16:53    INFO]      cuts (valid):       
[18:16:53    INFO]    - weights:            1
[18:16:53    INFO] ----------------------------------------------------------------------------------------------------
[18:16:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:17:42    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_26/ANNZ_26_weights/saveTrainOpt_ANNZ_26.txt ...
[18:17:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[18:17:46    INFO]  - Will gen. input-parameter errors ...
[18:17:49    INFO]  - starting ANNZ::loadReaders() ... 
[18:17:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:21:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:21:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:21:19    INFO]  -----------------------------------------------------------------------------------------------------------
[18:21:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:22:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:22:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:22:08    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:08    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:22:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:22:10    INFO]  - will try to derive a bias correction ... 
[18:22:10    INFO]  - will validate that training produced an XML file for later ... 
[18:22:10    INFO]  - starting ANNZ::loadReaders() ... 
[18:22:15    INFO]  - will validate that the training was not a complete failure ... 
[18:22:15    INFO]  - training seems to have been successful! will move on ...
[18:22:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:22:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:22:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:22:21    INFO] ----------------------------------------------------------------------------------------------------
[18:22:21    INFO]  - will book (ANNZ_26_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:22:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:22:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:22:21    INFO]    - weights:            1
[18:22:21    INFO] ----------------------------------------------------------------------------------------------------
[18:22:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:22:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[18:22:31    INFO]  - Will gen. input-parameter errors ...
[18:22:33    INFO]  - starting ANNZ::loadReaders() ... 
[18:22:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:26:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:26:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:26:19    INFO]  -----------------------------------------------------------------------------------------------------------
[18:26:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:27:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:27:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:27:13    INFO]  -----------------------------------------------------------------------------------------------------------
[18:27:13    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:27:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:27:15    INFO]  - will validate that the bias-correction actually improved the result ...
[18:27:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:27:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[18:27:21    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_26/plots/
[18:27:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_26/plots output/SPEC_advanced22/regres/train/ANNZ_26/plots_biasCor_before
[18:27:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:27:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[18:27:38    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_26/plots/
[18:27:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_26/plots output/SPEC_advanced22/regres/train/ANNZ_26/plots_biasCor_after
[18:27:49    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(18:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:27 INFO) 
[18:27:53    INFO]  -----------------------------------------------------
[18:27:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:27:53    INFO]  -----------------------------------------------------------------------------------------------------------
[18:27:54    INFO]  - starting ANNZ::Init()  ... 
[18:27:56    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_27/saveOpt.txt ...
[18:28:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:28:01    INFO] ----------------------------------------------------------------------------------------------------
[18:28:01    INFO]  - will book (ANNZ_27) method(BDT) with options: :NTrees=790:BoostType=Bagging:VarTransform=N
[18:28:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:28:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:28:01    INFO]      cuts (train):        ,
[18:28:01    INFO]      cuts (valid):       
[18:28:01    INFO]    - weights:            1
[18:28:01    INFO] ----------------------------------------------------------------------------------------------------
[18:28:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:29:25    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_27/ANNZ_27_weights/saveTrainOpt_ANNZ_27.txt ...
[18:29:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[18:29:32    INFO]  - Will gen. input-parameter errors ...
[18:29:35    INFO]  - starting ANNZ::loadReaders() ... 
[18:29:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:37:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:37:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:37:44    INFO]  -----------------------------------------------------------------------------------------------------------
[18:37:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:39:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:39:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:39:41    INFO]  -----------------------------------------------------------------------------------------------------------
[18:39:41    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:39:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:39:44    INFO]  - will try to derive a bias correction ... 
[18:39:44    INFO]  - will validate that training produced an XML file for later ... 
[18:39:44    INFO]  - starting ANNZ::loadReaders() ... 
[18:39:52    INFO]  - will validate that the training was not a complete failure ... 
[18:39:53    INFO]  - training seems to have been successful! will move on ...
[18:39:53    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:39:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:40:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:40:00    INFO] ----------------------------------------------------------------------------------------------------
[18:40:00    INFO]  - will book (ANNZ_27_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:40:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:40:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:40:00    INFO]    - weights:            1
[18:40:00    INFO] ----------------------------------------------------------------------------------------------------
[18:40:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:40:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[18:40:10    INFO]  - Will gen. input-parameter errors ...
[18:40:13    INFO]  - starting ANNZ::loadReaders() ... 
[18:40:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:48:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:48:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:48:56    INFO]  -----------------------------------------------------------------------------------------------------------
[18:48:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:51:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:51:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:51:00    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:01    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:51:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:51:04    INFO]  - will validate that the bias-correction actually improved the result ...
[18:51:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:51:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
[18:51:10    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_27/plots/
[18:51:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_27/plots output/SPEC_advanced22/regres/train/ANNZ_27/plots_biasCor_before
[18:51:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:51:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
Warning in <Fit>: Fit data is empty 
[18:51:26    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_27/plots/
[18:51:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_27/plots output/SPEC_advanced22/regres/train/ANNZ_27/plots_biasCor_after
[18:51:38    INFO]  - Got original [KS-test,N_poiss]: [0.0842483 , 6.68919] , after the bias-correction: [0.0462694 , 5.69709] --> will KEEP the correction !

(18:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:51 INFO) 
[18:51:43    INFO]  -----------------------------------------------------
[18:51:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:51:43    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:43    INFO]  - starting ANNZ::Init()  ... 
[18:51:47    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_28/saveOpt.txt ...
[18:51:52    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:51:52    INFO] ----------------------------------------------------------------------------------------------------
[18:51:52    INFO]  - will book (ANNZ_28) method(BDT) with options: :NTrees=300:BoostType=AdaBoostR2:VarTransform=N,P
[18:51:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:51:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:51:52    INFO]      cuts (train):        ,
[18:51:52    INFO]      cuts (valid):       
[18:51:52    INFO]    - weights:            1
[18:51:52    INFO] ----------------------------------------------------------------------------------------------------
[18:51:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:52:22    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_28/ANNZ_28_weights/saveTrainOpt_ANNZ_28.txt ...
[18:52:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[18:52:24    INFO]  - Will gen. input-parameter errors ...
[18:52:26    INFO]  - starting ANNZ::loadReaders() ... 
[18:52:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[18:58:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:58:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:58:03    INFO]  -----------------------------------------------------------------------------------------------------------
[18:58:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[18:59:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:59:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:59:24    INFO]  -----------------------------------------------------------------------------------------------------------
[18:59:24    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:59:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:59:25    INFO]  - will try to derive a bias correction ... 
[18:59:25    INFO]  - will validate that training produced an XML file for later ... 
[18:59:25    INFO]  - starting ANNZ::loadReaders() ... 
[18:59:27    INFO]  - will validate that the training was not a complete failure ... 
[18:59:27    INFO]  - training seems to have been successful! will move on ...
[18:59:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:59:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:59:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:59:33    INFO] ----------------------------------------------------------------------------------------------------
[18:59:33    INFO]  - will book (ANNZ_28_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:59:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:59:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:59:33    INFO]    - weights:            1
[18:59:33    INFO] ----------------------------------------------------------------------------------------------------
[18:59:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:59:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[18:59:40    INFO]  - Will gen. input-parameter errors ...
[18:59:42    INFO]  - starting ANNZ::loadReaders() ... 
[18:59:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:04:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:04:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:04:43    INFO]  -----------------------------------------------------------------------------------------------------------
[19:04:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:05:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:05:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:05:57    INFO]  -----------------------------------------------------------------------------------------------------------
[19:05:57    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:05:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:05:58    INFO]  - will validate that the bias-correction actually improved the result ...
[19:05:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:05:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
[19:06:04    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_28/plots/
[19:06:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_28/plots output/SPEC_advanced22/regres/train/ANNZ_28/plots_biasCor_before
[19:06:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:06:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
[19:06:19    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_28/plots/
[19:06:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_28/plots output/SPEC_advanced22/regres/train/ANNZ_28/plots_biasCor_after
[19:06:31    INFO]  - Got original [KS-test,N_poiss]: [0.0691239 , 6.6966] , after the bias-correction: [0.0321533 , 5.63052] --> will KEEP the correction !

(19:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:06 INFO) 
[19:06:34    INFO]  -----------------------------------------------------
[19:06:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:06:34    INFO]  -----------------------------------------------------------------------------------------------------------
[19:06:35    INFO]  - starting ANNZ::Init()  ... 
[19:06:39    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_29/saveOpt.txt ...
[19:06:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:06:44    INFO] ----------------------------------------------------------------------------------------------------
[19:06:44    INFO]  - will book (ANNZ_29) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N,P
[19:06:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:06:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:06:44    INFO]      cuts (train):        ,
[19:06:44    INFO]      cuts (valid):       
[19:06:44    INFO]    - weights:            1
[19:06:44    INFO] ----------------------------------------------------------------------------------------------------
[19:06:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:07:06    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_29/ANNZ_29_weights/saveTrainOpt_ANNZ_29.txt ...
[19:07:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[19:07:07    INFO]  - Will gen. input-parameter errors ...
[19:07:09    INFO]  - starting ANNZ::loadReaders() ... 
[19:07:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:09:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:09:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:09:52    INFO]  -----------------------------------------------------------------------------------------------------------
[19:09:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:10:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:10:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:10:31    INFO]  -----------------------------------------------------------------------------------------------------------
[19:10:31    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:10:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:10:31    INFO]  - will try to derive a bias correction ... 
[19:10:31    INFO]  - will validate that training produced an XML file for later ... 
[19:10:31    INFO]  - starting ANNZ::loadReaders() ... 
[19:10:33    INFO]  - will validate that the training was not a complete failure ... 
[19:10:33    INFO]  - training seems to have been successful! will move on ...
[19:10:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:10:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:10:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:10:37    INFO] ----------------------------------------------------------------------------------------------------
[19:10:37    INFO]  - will book (ANNZ_29_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:10:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:10:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:10:37    INFO]    - weights:            1
[19:10:37    INFO] ----------------------------------------------------------------------------------------------------
[19:10:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:10:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[19:10:44    INFO]  - Will gen. input-parameter errors ...
[19:10:45    INFO]  - starting ANNZ::loadReaders() ... 
[19:10:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:13:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:13:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:13:47    INFO]  -----------------------------------------------------------------------------------------------------------
[19:13:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:14:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:14:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:14:32    INFO]  -----------------------------------------------------------------------------------------------------------
[19:14:32    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:14:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:14:33    INFO]  - will validate that the bias-correction actually improved the result ...
[19:14:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:14:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
Warning in <Fit>: Fit data is empty 
[19:14:39    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_29/plots/
[19:14:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_29/plots output/SPEC_advanced22/regres/train/ANNZ_29/plots_biasCor_before
[19:14:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:14:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
[19:14:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_29/plots/
[19:15:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_29/plots output/SPEC_advanced22/regres/train/ANNZ_29/plots_biasCor_after
[19:15:07    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.39991] , after the bias-correction: [0.0448129 , 5.80394] --> will KEEP the correction !

(19:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:15 INFO) 
[19:15:10    INFO]  -----------------------------------------------------
[19:15:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:15:10    INFO]  -----------------------------------------------------------------------------------------------------------
[19:15:10    INFO]  - starting ANNZ::Init()  ... 
[19:15:12    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_30/saveOpt.txt ...
[19:15:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:15:17    INFO] ----------------------------------------------------------------------------------------------------
[19:15:17    INFO]  - will book (ANNZ_30) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N
[19:15:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:15:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:15:17    INFO]      cuts (train):        ,
[19:15:17    INFO]      cuts (valid):       
[19:15:17    INFO]    - weights:            1
[19:15:17    INFO] ----------------------------------------------------------------------------------------------------
[19:15:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:15:52    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_30/ANNZ_30_weights/saveTrainOpt_ANNZ_30.txt ...
[19:15:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[19:15:55    INFO]  - Will gen. input-parameter errors ...
[19:15:57    INFO]  - starting ANNZ::loadReaders() ... 
[19:16:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:18:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:18:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:18:39    INFO]  -----------------------------------------------------------------------------------------------------------
[19:18:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:19:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:19:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:19:19    INFO]  -----------------------------------------------------------------------------------------------------------
[19:19:19    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:19:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:19:20    INFO]  - will try to derive a bias correction ... 
[19:19:20    INFO]  - will validate that training produced an XML file for later ... 
[19:19:20    INFO]  - starting ANNZ::loadReaders() ... 
[19:19:23    INFO]  - will validate that the training was not a complete failure ... 
[19:19:23    INFO]  - training seems to have been successful! will move on ...
[19:19:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:19:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:19:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:19:30    INFO] ----------------------------------------------------------------------------------------------------
[19:19:30    INFO]  - will book (ANNZ_30_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:19:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:19:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:19:30    INFO]    - weights:            1
[19:19:30    INFO] ----------------------------------------------------------------------------------------------------
[19:19:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:19:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[19:19:39    INFO]  - Will gen. input-parameter errors ...
[19:19:41    INFO]  - starting ANNZ::loadReaders() ... 
[19:19:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:21:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:21:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:21:54    INFO]  -----------------------------------------------------------------------------------------------------------
[19:21:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:22:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:22:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:22:27    INFO]  -----------------------------------------------------------------------------------------------------------
[19:22:27    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:22:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:22:28    INFO]  - will validate that the bias-correction actually improved the result ...
[19:22:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:22:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
Warning in <Fit>: Fit data is empty 
[19:22:33    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_30/plots/
[19:22:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_30/plots output/SPEC_advanced22/regres/train/ANNZ_30/plots_biasCor_before
[19:22:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:22:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
Warning in <Fit>: Fit data is empty 
[19:22:49    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_30/plots/
[19:23:01        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_30/plots output/SPEC_advanced22/regres/train/ANNZ_30/plots_biasCor_after
[19:23:01    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.14175] , after the bias-correction: [0.0498544 , 6.10283] --> will KEEP the correction !

(19:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:23 INFO) 
[19:23:05    INFO]  -----------------------------------------------------
[19:23:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:23:05    INFO]  -----------------------------------------------------------------------------------------------------------
[19:23:05    INFO]  - starting ANNZ::Init()  ... 
[19:23:07    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_31/saveOpt.txt ...
[19:23:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:23:12    INFO] ----------------------------------------------------------------------------------------------------
[19:23:12    INFO]  - will book (ANNZ_31) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N
[19:23:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:23:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:23:12    INFO]      cuts (train):        ,
[19:23:12    INFO]      cuts (valid):       
[19:23:12    INFO]    - weights:            1
[19:23:12    INFO] ----------------------------------------------------------------------------------------------------
[19:23:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:23:46    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_31/ANNZ_31_weights/saveTrainOpt_ANNZ_31.txt ...
[19:23:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[19:23:48    INFO]  - Will gen. input-parameter errors ...
[19:23:50    INFO]  - starting ANNZ::loadReaders() ... 
[19:23:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:26:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:26:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:26:34    INFO]  -----------------------------------------------------------------------------------------------------------
[19:26:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:27:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:27:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:27:11    INFO]  -----------------------------------------------------------------------------------------------------------
[19:27:12    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:27:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:27:13    INFO]  - will try to derive a bias correction ... 
[19:27:13    INFO]  - will validate that training produced an XML file for later ... 
[19:27:13    INFO]  - starting ANNZ::loadReaders() ... 
[19:27:15    INFO]  - will validate that the training was not a complete failure ... 
[19:27:15    INFO]  - training seems to have been successful! will move on ...
[19:27:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:27:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:27:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:27:20    INFO] ----------------------------------------------------------------------------------------------------
[19:27:20    INFO]  - will book (ANNZ_31_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:27:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:27:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:27:20    INFO]    - weights:            1
[19:27:20    INFO] ----------------------------------------------------------------------------------------------------
[19:27:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:27:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[19:27:28    INFO]  - Will gen. input-parameter errors ...
[19:27:29    INFO]  - starting ANNZ::loadReaders() ... 
[19:27:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:29:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:29:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:29:42    INFO]  -----------------------------------------------------------------------------------------------------------
[19:29:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:30:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:30:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:30:14    INFO]  -----------------------------------------------------------------------------------------------------------
[19:30:14    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:30:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:30:15    INFO]  - will validate that the bias-correction actually improved the result ...
[19:30:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:30:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
Warning in <Fit>: Fit data is empty 
[19:30:21    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_31/plots/
[19:30:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_31/plots output/SPEC_advanced22/regres/train/ANNZ_31/plots_biasCor_before
[19:30:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:30:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
Warning in <Fit>: Fit data is empty 
[19:30:37    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_31/plots/
[19:30:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_31/plots output/SPEC_advanced22/regres/train/ANNZ_31/plots_biasCor_after
[19:30:49    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.14175] , after the bias-correction: [0.0498544 , 6.10283] --> will KEEP the correction !

(19:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:30 INFO) 
[19:30:52    INFO]  -----------------------------------------------------
[19:30:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:30:52    INFO]  -----------------------------------------------------------------------------------------------------------
[19:30:53    INFO]  - starting ANNZ::Init()  ... 
[19:30:54    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_32/saveOpt.txt ...
[19:30:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:31:00    INFO] ----------------------------------------------------------------------------------------------------
[19:31:00    INFO]  - will book (ANNZ_32) method(BDT) with options: :NTrees=310:BoostType=Bagging:VarTransform=N,P
[19:31:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:31:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:31:00    INFO]      cuts (train):        ,
[19:31:00    INFO]      cuts (valid):       
[19:31:00    INFO]    - weights:            1
[19:31:00    INFO] ----------------------------------------------------------------------------------------------------
[19:31:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:31:32    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_32/ANNZ_32_weights/saveTrainOpt_ANNZ_32.txt ...
[19:31:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[19:31:35    INFO]  - Will gen. input-parameter errors ...
[19:31:37    INFO]  - starting ANNZ::loadReaders() ... 
[19:31:44    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:34:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:34:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:34:45    INFO]  -----------------------------------------------------------------------------------------------------------
[19:34:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:35:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:35:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:35:28    INFO]  -----------------------------------------------------------------------------------------------------------
[19:35:29    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:35:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:35:30    INFO]  - will try to derive a bias correction ... 
[19:35:30    INFO]  - will validate that training produced an XML file for later ... 
[19:35:30    INFO]  - starting ANNZ::loadReaders() ... 
[19:35:33    INFO]  - will validate that the training was not a complete failure ... 
[19:35:33    INFO]  - training seems to have been successful! will move on ...
[19:35:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:35:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:35:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:35:38    INFO] ----------------------------------------------------------------------------------------------------
[19:35:38    INFO]  - will book (ANNZ_32_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:35:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:35:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:35:38    INFO]    - weights:            1
[19:35:38    INFO] ----------------------------------------------------------------------------------------------------
[19:35:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:35:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[19:35:47    INFO]  - Will gen. input-parameter errors ...
[19:35:49    INFO]  - starting ANNZ::loadReaders() ... 
[19:35:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:38:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:38:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:38:51    INFO]  -----------------------------------------------------------------------------------------------------------
[19:38:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:39:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:39:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:39:37    INFO]  -----------------------------------------------------------------------------------------------------------
[19:39:37    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:39:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:39:39    INFO]  - will validate that the bias-correction actually improved the result ...
[19:39:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:39:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
[19:39:45    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_32/plots/
[19:39:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_32/plots output/SPEC_advanced22/regres/train/ANNZ_32/plots_biasCor_before
[19:39:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:39:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
[19:40:00    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_32/plots/
[19:40:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_32/plots output/SPEC_advanced22/regres/train/ANNZ_32/plots_biasCor_after
[19:40:12    INFO]  - Got original [KS-test,N_poiss]: [0.093547 , 6.79085] , after the bias-correction: [0.0432445 , 5.43382] --> will KEEP the correction !

(19:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:40 INFO) 
[19:40:16    INFO]  -----------------------------------------------------
[19:40:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:40:16    INFO]  -----------------------------------------------------------------------------------------------------------
[19:40:16    INFO]  - starting ANNZ::Init()  ... 
[19:40:18    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_33/saveOpt.txt ...
[19:40:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:40:23    INFO] ----------------------------------------------------------------------------------------------------
[19:40:23    INFO]  - will book (ANNZ_33) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N,P
[19:40:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:40:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:40:23    INFO]      cuts (train):        ,
[19:40:23    INFO]      cuts (valid):       
[19:40:23    INFO]    - weights:            1
[19:40:23    INFO] ----------------------------------------------------------------------------------------------------
[19:40:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:41:07    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_33/ANNZ_33_weights/saveTrainOpt_ANNZ_33.txt ...
[19:41:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[19:41:11    INFO]  - Will gen. input-parameter errors ...
[19:41:13    INFO]  - starting ANNZ::loadReaders() ... 
[19:41:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:45:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:45:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:45:37    INFO]  -----------------------------------------------------------------------------------------------------------
[19:45:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:46:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:46:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:46:39    INFO]  -----------------------------------------------------------------------------------------------------------
[19:46:39    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:46:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:46:41    INFO]  - will try to derive a bias correction ... 
[19:46:41    INFO]  - will validate that training produced an XML file for later ... 
[19:46:41    INFO]  - starting ANNZ::loadReaders() ... 
[19:46:45    INFO]  - will validate that the training was not a complete failure ... 
[19:46:45    INFO]  - training seems to have been successful! will move on ...
[19:46:45    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:46:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:46:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:46:51    INFO] ----------------------------------------------------------------------------------------------------
[19:46:51    INFO]  - will book (ANNZ_33_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:46:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:46:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:46:51    INFO]    - weights:            1
[19:46:51    INFO] ----------------------------------------------------------------------------------------------------
[19:46:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:47:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[19:47:00    INFO]  - Will gen. input-parameter errors ...
[19:47:02    INFO]  - starting ANNZ::loadReaders() ... 
[19:47:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:51:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:51:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:51:26    INFO]  -----------------------------------------------------------------------------------------------------------
[19:51:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:52:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:52:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:52:31    INFO]  -----------------------------------------------------------------------------------------------------------
[19:52:31    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:52:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:52:33    INFO]  - will validate that the bias-correction actually improved the result ...
[19:52:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:52:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
[19:52:38    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_33/plots/
[19:52:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_33/plots output/SPEC_advanced22/regres/train/ANNZ_33/plots_biasCor_before
[19:52:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:52:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
[19:52:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_33/plots/
[19:53:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_33/plots output/SPEC_advanced22/regres/train/ANNZ_33/plots_biasCor_after
[19:53:07    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.89108] , after the bias-correction: [0.0442528 , 5.55252] --> will KEEP the correction !

(19:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:53 INFO) 
[19:53:11    INFO]  -----------------------------------------------------
[19:53:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:53:11    INFO]  -----------------------------------------------------------------------------------------------------------
[19:53:11    INFO]  - starting ANNZ::Init()  ... 
[19:53:12    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_34/saveOpt.txt ...
[19:53:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:53:18    INFO] ----------------------------------------------------------------------------------------------------
[19:53:18    INFO]  - will book (ANNZ_34) method(BDT) with options: :NTrees=510:BoostType=Bagging:VarTransform=N
[19:53:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:53:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:53:18    INFO]      cuts (train):        ,
[19:53:18    INFO]      cuts (valid):       
[19:53:18    INFO]    - weights:            1
[19:53:18    INFO] ----------------------------------------------------------------------------------------------------
[19:53:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:54:10    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_34/ANNZ_34_weights/saveTrainOpt_ANNZ_34.txt ...
[19:54:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[19:54:15    INFO]  - Will gen. input-parameter errors ...
[19:54:18    INFO]  - starting ANNZ::loadReaders() ... 
[19:54:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[19:57:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:57:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:57:47    INFO]  -----------------------------------------------------------------------------------------------------------
[19:57:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[19:58:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:58:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:58:39    INFO]  -----------------------------------------------------------------------------------------------------------
[19:58:40    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:58:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:58:42    INFO]  - will try to derive a bias correction ... 
[19:58:42    INFO]  - will validate that training produced an XML file for later ... 
[19:58:42    INFO]  - starting ANNZ::loadReaders() ... 
[19:58:47    INFO]  - will validate that the training was not a complete failure ... 
[19:58:47    INFO]  - training seems to have been successful! will move on ...
[19:58:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:58:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:58:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:58:53    INFO] ----------------------------------------------------------------------------------------------------
[19:58:53    INFO]  - will book (ANNZ_34_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:58:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:58:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:58:53    INFO]    - weights:            1
[19:58:53    INFO] ----------------------------------------------------------------------------------------------------
[19:58:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:59:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[19:59:02    INFO]  - Will gen. input-parameter errors ...
[19:59:04    INFO]  - starting ANNZ::loadReaders() ... 
[19:59:16    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[20:03:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:03:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:03:26    INFO]  -----------------------------------------------------------------------------------------------------------
[20:03:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[20:04:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:04:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:04:29    INFO]  -----------------------------------------------------------------------------------------------------------
[20:04:30    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:04:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:04:32    INFO]  - will validate that the bias-correction actually improved the result ...
[20:04:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:04:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[20:04:38    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_34/plots/
[20:04:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_34/plots output/SPEC_advanced22/regres/train/ANNZ_34/plots_biasCor_before
[20:04:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:04:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[20:04:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_34/plots/
[20:05:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_34/plots output/SPEC_advanced22/regres/train/ANNZ_34/plots_biasCor_after
[20:05:07    INFO]  - Got original [KS-test,N_poiss]: [0.0845844 , 6.6471] , after the bias-correction: [0.048622 , 5.72208] --> will KEEP the correction !

(20:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=730:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:05 INFO) 
[20:05:11    INFO]  -----------------------------------------------------
[20:05:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:05:11    INFO]  -----------------------------------------------------------------------------------------------------------
[20:05:11    INFO]  - starting ANNZ::Init()  ... 
[20:05:13    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_35/saveOpt.txt ...
[20:05:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:05:18    INFO] ----------------------------------------------------------------------------------------------------
[20:05:18    INFO]  - will book (ANNZ_35) method(BDT) with options: :NTrees=730:BoostType=AdaBoost:VarTransform=N,D
[20:05:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:05:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:05:18    INFO]      cuts (train):        ,
[20:05:18    INFO]      cuts (valid):       
[20:05:18    INFO]    - weights:            1
[20:05:18    INFO] ----------------------------------------------------------------------------------------------------
[20:05:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:06:04    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_35/ANNZ_35_weights/saveTrainOpt_ANNZ_35.txt ...
[20:06:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[20:06:07    INFO]  - Will gen. input-parameter errors ...
[20:06:08    INFO]  - starting ANNZ::loadReaders() ... 
[20:06:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[20:12:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:12:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:12:35    INFO]  -----------------------------------------------------------------------------------------------------------
[20:12:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[20:14:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:14:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:14:23    INFO]  -----------------------------------------------------------------------------------------------------------
[20:14:23    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:14:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:14:25    INFO]  - will try to derive a bias correction ... 
[20:14:25    INFO]  - will validate that training produced an XML file for later ... 
[20:14:25    INFO]  - starting ANNZ::loadReaders() ... 
[20:14:27    INFO]  - will validate that the training was not a complete failure ... 
[20:14:27    INFO]  - training seems to have been successful! will move on ...
[20:14:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:14:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:14:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:14:32    INFO] ----------------------------------------------------------------------------------------------------
[20:14:32    INFO]  - will book (ANNZ_35_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:14:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:14:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:14:32    INFO]    - weights:            1
[20:14:32    INFO] ----------------------------------------------------------------------------------------------------
[20:14:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:14:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[20:14:41    INFO]  - Will gen. input-parameter errors ...
[20:14:42    INFO]  - starting ANNZ::loadReaders() ... 
[20:14:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[20:17:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:17:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:17:58    INFO]  -----------------------------------------------------------------------------------------------------------
[20:17:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[20:18:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:18:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:18:47    INFO]  -----------------------------------------------------------------------------------------------------------
[20:18:47    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:18:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:18:48    INFO]  - will validate that the bias-correction actually improved the result ...
[20:18:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:18:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
[20:18:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_35/plots/
[20:19:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_35/plots output/SPEC_advanced22/regres/train/ANNZ_35/plots_biasCor_before
[20:19:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:19:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
[20:19:11    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_35/plots/
[20:19:23        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_35/plots output/SPEC_advanced22/regres/train/ANNZ_35/plots_biasCor_after
[20:19:23    INFO]  - Got original [KS-test,N_poiss]: [0.0945553 , 7.38882] , after the bias-correction: [0.0449413 , 5.9654] --> will KEEP the correction !

(20:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:19 INFO) 
[20:19:26    INFO]  -----------------------------------------------------
[20:19:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:19:26    INFO]  -----------------------------------------------------------------------------------------------------------
[20:19:27    INFO]  - starting ANNZ::Init()  ... 
[20:19:28    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_36/saveOpt.txt ...
[20:19:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:19:33    INFO] ----------------------------------------------------------------------------------------------------
[20:19:33    INFO]  - will book (ANNZ_36) method(BDT) with options: :NTrees=380:BoostType=AdaBoostR2:VarTransform=N
[20:19:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:19:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:19:33    INFO]      cuts (train):        ,
[20:19:33    INFO]      cuts (valid):       
[20:19:33    INFO]    - weights:            1
[20:19:33    INFO] ----------------------------------------------------------------------------------------------------
[20:19:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:20:10    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_36/ANNZ_36_weights/saveTrainOpt_ANNZ_36.txt ...
[20:20:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[20:20:12    INFO]  - Will gen. input-parameter errors ...
[20:20:14    INFO]  - starting ANNZ::loadReaders() ... 
[20:20:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[20:27:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:27:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:27:06    INFO]  -----------------------------------------------------------------------------------------------------------
[20:27:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[20:28:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:28:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:28:46    INFO]  -----------------------------------------------------------------------------------------------------------
[20:28:46    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:28:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:28:47    INFO]  - will try to derive a bias correction ... 
[20:28:47    INFO]  - will validate that training produced an XML file for later ... 
[20:28:47    INFO]  - starting ANNZ::loadReaders() ... 
[20:28:50    INFO]  - will validate that the training was not a complete failure ... 
[20:28:50    INFO]  - training seems to have been successful! will move on ...
[20:28:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:28:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:28:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:28:55    INFO] ----------------------------------------------------------------------------------------------------
[20:28:55    INFO]  - will book (ANNZ_36_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:28:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:28:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:28:55    INFO]    - weights:            1
[20:28:55    INFO] ----------------------------------------------------------------------------------------------------
[20:28:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:29:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[20:29:02    INFO]  - Will gen. input-parameter errors ...
[20:29:04    INFO]  - starting ANNZ::loadReaders() ... 
[20:29:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[20:35:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:35:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:35:06    INFO]  -----------------------------------------------------------------------------------------------------------
[20:35:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[20:36:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:36:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:36:32    INFO]  -----------------------------------------------------------------------------------------------------------
[20:36:32    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:36:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:36:33    INFO]  - will validate that the bias-correction actually improved the result ...
[20:36:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:36:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
Warning in <Fit>: Fit data is empty 
[20:36:39    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_36/plots/
[20:36:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_36/plots output/SPEC_advanced22/regres/train/ANNZ_36/plots_biasCor_before
[20:36:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:36:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
[20:36:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_36/plots/
[20:37:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_36/plots output/SPEC_advanced22/regres/train/ANNZ_36/plots_biasCor_after
[20:37:06    INFO]  - Got original [KS-test,N_poiss]: [0.0619538 , 6.59597] , after the bias-correction: [0.0338337 , 5.55518] --> will KEEP the correction !

(20:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:37 INFO) 
[20:37:10    INFO]  -----------------------------------------------------
[20:37:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:37:10    INFO]  -----------------------------------------------------------------------------------------------------------
[20:37:10    INFO]  - starting ANNZ::Init()  ... 
[20:37:11    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_37/saveOpt.txt ...
[20:37:16    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:37:17    INFO] ----------------------------------------------------------------------------------------------------
[20:37:17    INFO]  - will book (ANNZ_37) method(BDT) with options: :NTrees=480:BoostType=AdaBoostR2:VarTransform=N,P
[20:37:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:37:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:37:17    INFO]      cuts (train):        ,
[20:37:17    INFO]      cuts (valid):       
[20:37:17    INFO]    - weights:            1
[20:37:17    INFO] ----------------------------------------------------------------------------------------------------
[20:37:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:38:05    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_37/ANNZ_37_weights/saveTrainOpt_ANNZ_37.txt ...
[20:38:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[20:38:08    INFO]  - Will gen. input-parameter errors ...
[20:38:10    INFO]  - starting ANNZ::loadReaders() ... 
[20:38:23    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[20:50:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:50:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:50:15    INFO]  -----------------------------------------------------------------------------------------------------------
[20:50:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[20:53:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:53:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:53:02    INFO]  -----------------------------------------------------------------------------------------------------------
[20:53:02    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:53:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:53:04    INFO]  - will try to derive a bias correction ... 
[20:53:04    INFO]  - will validate that training produced an XML file for later ... 
[20:53:04    INFO]  - starting ANNZ::loadReaders() ... 
[20:53:08    INFO]  - will validate that the training was not a complete failure ... 
[20:53:08    INFO]  - training seems to have been successful! will move on ...
[20:53:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:53:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:53:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:53:13    INFO] ----------------------------------------------------------------------------------------------------
[20:53:13    INFO]  - will book (ANNZ_37_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:53:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:53:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:53:13    INFO]    - weights:            1
[20:53:13    INFO] ----------------------------------------------------------------------------------------------------
[20:53:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:53:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[20:53:21    INFO]  - Will gen. input-parameter errors ...
[20:53:23    INFO]  - starting ANNZ::loadReaders() ... 
[20:53:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:04:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:04:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:04:41    INFO]  -----------------------------------------------------------------------------------------------------------
[21:04:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:07:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:07:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:07:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:07:23    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:07:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:07:25    INFO]  - will validate that the bias-correction actually improved the result ...
[21:07:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:07:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
[21:07:30    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_37/plots/
[21:07:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_37/plots output/SPEC_advanced22/regres/train/ANNZ_37/plots_biasCor_before
[21:07:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:07:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
[21:07:46    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_37/plots/
[21:07:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_37/plots output/SPEC_advanced22/regres/train/ANNZ_37/plots_biasCor_after
[21:07:57    INFO]  - Got original [KS-test,N_poiss]: [0.0696841 , 6.59718] , after the bias-correction: [0.0314811 , 5.44343] --> will KEEP the correction !

(21:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:08 INFO) 
[21:08:01    INFO]  -----------------------------------------------------
[21:08:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:08:01    INFO]  -----------------------------------------------------------------------------------------------------------
[21:08:02    INFO]  - starting ANNZ::Init()  ... 
[21:08:03    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_38/saveOpt.txt ...
[21:08:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:08:09    INFO] ----------------------------------------------------------------------------------------------------
[21:08:09    INFO]  - will book (ANNZ_38) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N
[21:08:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:08:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:08:09    INFO]      cuts (train):        ,
[21:08:09    INFO]      cuts (valid):       
[21:08:09    INFO]    - weights:            1
[21:08:09    INFO] ----------------------------------------------------------------------------------------------------
[21:08:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:08:46    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_38/ANNZ_38_weights/saveTrainOpt_ANNZ_38.txt ...
[21:08:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[21:08:49    INFO]  - Will gen. input-parameter errors ...
[21:08:51    INFO]  - starting ANNZ::loadReaders() ... 
[21:08:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:11:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:11:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:11:07    INFO]  -----------------------------------------------------------------------------------------------------------
[21:11:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:11:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:11:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:11:39    INFO]  -----------------------------------------------------------------------------------------------------------
[21:11:39    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:11:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:11:41    INFO]  - will try to derive a bias correction ... 
[21:11:41    INFO]  - will validate that training produced an XML file for later ... 
[21:11:41    INFO]  - starting ANNZ::loadReaders() ... 
[21:11:44    INFO]  - will validate that the training was not a complete failure ... 
[21:11:44    INFO]  - training seems to have been successful! will move on ...
[21:11:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:11:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:11:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:11:50    INFO] ----------------------------------------------------------------------------------------------------
[21:11:50    INFO]  - will book (ANNZ_38_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:11:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:11:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:11:50    INFO]    - weights:            1
[21:11:50    INFO] ----------------------------------------------------------------------------------------------------
[21:11:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:11:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[21:11:59    INFO]  - Will gen. input-parameter errors ...
[21:12:00    INFO]  - starting ANNZ::loadReaders() ... 
[21:12:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:14:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:14:32    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:14:32    INFO]  -----------------------------------------------------------------------------------------------------------
[21:14:32    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:15:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:15:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:15:07    INFO]  -----------------------------------------------------------------------------------------------------------
[21:15:07    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:15:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:15:09    INFO]  - will validate that the bias-correction actually improved the result ...
[21:15:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:15:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
[21:15:14    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_38/plots/
[21:15:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_38/plots output/SPEC_advanced22/regres/train/ANNZ_38/plots_biasCor_before
[21:15:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:15:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
[21:15:30    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_38/plots/
[21:15:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_38/plots output/SPEC_advanced22/regres/train/ANNZ_38/plots_biasCor_after
[21:15:41    INFO]  - Got original [KS-test,N_poiss]: [0.0841362 , 6.65154] , after the bias-correction: [0.04851 , 5.52609] --> will KEEP the correction !

(21:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:15 INFO) 
[21:15:45    INFO]  -----------------------------------------------------
[21:15:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:15:45    INFO]  -----------------------------------------------------------------------------------------------------------
[21:15:45    INFO]  - starting ANNZ::Init()  ... 
[21:15:46    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_39/saveOpt.txt ...
[21:15:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:15:52    INFO] ----------------------------------------------------------------------------------------------------
[21:15:52    INFO]  - will book (ANNZ_39) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N
[21:15:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:15:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:15:52    INFO]      cuts (train):        ,
[21:15:52    INFO]      cuts (valid):       
[21:15:52    INFO]    - weights:            1
[21:15:52    INFO] ----------------------------------------------------------------------------------------------------
[21:15:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:16:44    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_39/ANNZ_39_weights/saveTrainOpt_ANNZ_39.txt ...
[21:16:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[21:16:49    INFO]  - Will gen. input-parameter errors ...
[21:16:51    INFO]  - starting ANNZ::loadReaders() ... 
[21:17:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:21:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:21:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:21:00    INFO]  -----------------------------------------------------------------------------------------------------------
[21:21:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:21:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:21:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:21:59    INFO]  -----------------------------------------------------------------------------------------------------------
[21:21:59    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:22:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:22:02    INFO]  - will try to derive a bias correction ... 
[21:22:02    INFO]  - will validate that training produced an XML file for later ... 
[21:22:02    INFO]  - starting ANNZ::loadReaders() ... 
[21:22:08    INFO]  - will validate that the training was not a complete failure ... 
[21:22:09    INFO]  - training seems to have been successful! will move on ...
[21:22:09    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:22:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:22:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:22:16    INFO] ----------------------------------------------------------------------------------------------------
[21:22:16    INFO]  - will book (ANNZ_39_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:22:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:22:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:22:16    INFO]    - weights:            1
[21:22:16    INFO] ----------------------------------------------------------------------------------------------------
[21:22:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:22:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[21:22:26    INFO]  - Will gen. input-parameter errors ...
[21:22:28    INFO]  - starting ANNZ::loadReaders() ... 
[21:22:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:27:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:27:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:27:00    INFO]  -----------------------------------------------------------------------------------------------------------
[21:27:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:28:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:28:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:28:06    INFO]  -----------------------------------------------------------------------------------------------------------
[21:28:06    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:28:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:28:09    INFO]  - will validate that the bias-correction actually improved the result ...
[21:28:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:28:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
[21:28:14    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_39/plots/
[21:28:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_39/plots output/SPEC_advanced22/regres/train/ANNZ_39/plots_biasCor_before
[21:28:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:28:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
[21:28:32    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_39/plots/
[21:28:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_39/plots output/SPEC_advanced22/regres/train/ANNZ_39/plots_biasCor_after
[21:28:49    INFO]  - Got original [KS-test,N_poiss]: [0.0845844 , 6.74033] , after the bias-correction: [0.0500785 , 5.6416] --> will KEEP the correction !

(21:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:28 INFO) 
[21:28:54    INFO]  -----------------------------------------------------
[21:28:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:28:54    INFO]  -----------------------------------------------------------------------------------------------------------
[21:28:54    INFO]  - starting ANNZ::Init()  ... 
[21:28:56    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_40/saveOpt.txt ...
[21:29:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:29:02    INFO] ----------------------------------------------------------------------------------------------------
[21:29:02    INFO]  - will book (ANNZ_40) method(BDT) with options: :NTrees=440:BoostType=AdaBoostR2:VarTransform=N
[21:29:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:29:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:29:02    INFO]      cuts (train):        ,
[21:29:02    INFO]      cuts (valid):       
[21:29:02    INFO]    - weights:            1
[21:29:02    INFO] ----------------------------------------------------------------------------------------------------
[21:29:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:29:42    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_40/ANNZ_40_weights/saveTrainOpt_ANNZ_40.txt ...
[21:29:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_40 ... 
[21:29:45    INFO]  - Will gen. input-parameter errors ...
[21:29:47    INFO]  - starting ANNZ::loadReaders() ... 
[21:29:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:38:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:38:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:38:47    INFO]  -----------------------------------------------------------------------------------------------------------
[21:38:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:40:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:40:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:40:57    INFO]  -----------------------------------------------------------------------------------------------------------
[21:40:57    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_40/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:40:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:40:58    INFO]  - will try to derive a bias correction ... 
[21:40:58    INFO]  - will validate that training produced an XML file for later ... 
[21:40:58    INFO]  - starting ANNZ::loadReaders() ... 
[21:41:01    INFO]  - will validate that the training was not a complete failure ... 
[21:41:01    INFO]  - training seems to have been successful! will move on ...
[21:41:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:41:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:41:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:41:06    INFO] ----------------------------------------------------------------------------------------------------
[21:41:06    INFO]  - will book (ANNZ_40_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:41:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:41:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:41:06    INFO]    - weights:            1
[21:41:06    INFO] ----------------------------------------------------------------------------------------------------
[21:41:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:41:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_40 ... 
[21:41:14    INFO]  - Will gen. input-parameter errors ...
[21:41:16    INFO]  - starting ANNZ::loadReaders() ... 
[21:41:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:48:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:48:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:48:45    INFO]  -----------------------------------------------------------------------------------------------------------
[21:48:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:50:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:50:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:50:44    INFO]  -----------------------------------------------------------------------------------------------------------
[21:50:44    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_40/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:50:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:50:45    INFO]  - will validate that the bias-correction actually improved the result ...
[21:50:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:50:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_40,
Warning in <Fit>: Fit data is empty 
[21:50:51    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_40/plots/
[21:51:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_40/plots output/SPEC_advanced22/regres/train/ANNZ_40/plots_biasCor_before
[21:51:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:51:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_40,
Warning in <Fit>: Fit data is empty 
[21:51:07    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_40/plots/
[21:51:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_40/plots output/SPEC_advanced22/regres/train/ANNZ_40/plots_biasCor_after
[21:51:18    INFO]  - Got original [KS-test,N_poiss]: [0.0628501 , 6.64436] , after the bias-correction: [0.0333856 , 5.54031] --> will KEEP the correction !

(21:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:51 INFO) 
[21:51:22    INFO]  -----------------------------------------------------
[21:51:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:51:22    INFO]  -----------------------------------------------------------------------------------------------------------
[21:51:22    INFO]  - starting ANNZ::Init()  ... 
[21:51:24    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_41/saveOpt.txt ...
[21:51:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:51:29    INFO] ----------------------------------------------------------------------------------------------------
[21:51:29    INFO]  - will book (ANNZ_41) method(BDT) with options: :NTrees=390:BoostType=AdaBoost:VarTransform=P
[21:51:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:51:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:51:29    INFO]      cuts (train):        ,
[21:51:29    INFO]      cuts (valid):       
[21:51:29    INFO]    - weights:            1
[21:51:29    INFO] ----------------------------------------------------------------------------------------------------
[21:51:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:51:54    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_41/ANNZ_41_weights/saveTrainOpt_ANNZ_41.txt ...
[21:51:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_41 ... 
[21:51:56    INFO]  - Will gen. input-parameter errors ...
[21:51:58    INFO]  - starting ANNZ::loadReaders() ... 
[21:52:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:54:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:54:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:54:26    INFO]  -----------------------------------------------------------------------------------------------------------
[21:54:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:55:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:55:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:55:01    INFO]  -----------------------------------------------------------------------------------------------------------
[21:55:01    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_41/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:55:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:55:02    INFO]  - will try to derive a bias correction ... 
[21:55:02    INFO]  - will validate that training produced an XML file for later ... 
[21:55:02    INFO]  - starting ANNZ::loadReaders() ... 
[21:55:03    INFO]  - will validate that the training was not a complete failure ... 
[21:55:03    INFO]  - training seems to have been successful! will move on ...
[21:55:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:55:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:55:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:55:07    INFO] ----------------------------------------------------------------------------------------------------
[21:55:07    INFO]  - will book (ANNZ_41_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:55:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:55:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:55:07    INFO]    - weights:            1
[21:55:07    INFO] ----------------------------------------------------------------------------------------------------
[21:55:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:55:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_41 ... 
[21:55:15    INFO]  - Will gen. input-parameter errors ...
[21:55:16    INFO]  - starting ANNZ::loadReaders() ... 
[21:55:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[21:57:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:57:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:57:48    INFO]  -----------------------------------------------------------------------------------------------------------
[21:57:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[21:58:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:58:25    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:58:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:58:25    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_41/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:58:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:58:26    INFO]  - will validate that the bias-correction actually improved the result ...
[21:58:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:58:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_41,
Warning in <Fit>: Fit data is empty 
[21:58:32    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_41/plots/
[21:58:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_41/plots output/SPEC_advanced22/regres/train/ANNZ_41/plots_biasCor_before
[21:58:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:58:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_41,
Warning in <Fit>: Fit data is empty 
[21:58:47    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_41/plots/
[21:58:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_41/plots output/SPEC_advanced22/regres/train/ANNZ_41/plots_biasCor_after
[21:58:59    INFO]  - Got original [KS-test,N_poiss]: [0.0725969 , 6.16479] , after the bias-correction: [0.0338066 , 5.3535] --> will KEEP the correction !

(21:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:59 INFO) 
[21:59:02    INFO]  -----------------------------------------------------
[21:59:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:59:02    INFO]  -----------------------------------------------------------------------------------------------------------
[21:59:02    INFO]  - starting ANNZ::Init()  ... 
[21:59:04    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_42/saveOpt.txt ...
[21:59:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:59:09    INFO] ----------------------------------------------------------------------------------------------------
[21:59:09    INFO]  - will book (ANNZ_42) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N
[21:59:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:59:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:59:09    INFO]      cuts (train):        ,
[21:59:09    INFO]      cuts (valid):       
[21:59:09    INFO]    - weights:            1
[21:59:09    INFO] ----------------------------------------------------------------------------------------------------
[21:59:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:59:44    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_42/ANNZ_42_weights/saveTrainOpt_ANNZ_42.txt ...
[21:59:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_42 ... 
[21:59:46    INFO]  - Will gen. input-parameter errors ...
[21:59:48    INFO]  - starting ANNZ::loadReaders() ... 
[21:59:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[22:02:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:02:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:02:31    INFO]  -----------------------------------------------------------------------------------------------------------
[22:02:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[22:03:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:03:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:03:12    INFO]  -----------------------------------------------------------------------------------------------------------
[22:03:12    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_42/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:03:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:03:13    INFO]  - will try to derive a bias correction ... 
[22:03:13    INFO]  - will validate that training produced an XML file for later ... 
[22:03:13    INFO]  - starting ANNZ::loadReaders() ... 
[22:03:15    INFO]  - will validate that the training was not a complete failure ... 
[22:03:15    INFO]  - training seems to have been successful! will move on ...
[22:03:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:03:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:03:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:03:20    INFO] ----------------------------------------------------------------------------------------------------
[22:03:20    INFO]  - will book (ANNZ_42_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:03:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:03:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[22:03:20    INFO]    - weights:            1
[22:03:20    INFO] ----------------------------------------------------------------------------------------------------
[22:03:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:03:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_42 ... 
[22:03:28    INFO]  - Will gen. input-parameter errors ...
[22:03:30    INFO]  - starting ANNZ::loadReaders() ... 
[22:03:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[22:05:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:05:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:05:41    INFO]  -----------------------------------------------------------------------------------------------------------
[22:05:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[22:06:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:06:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:06:14    INFO]  -----------------------------------------------------------------------------------------------------------
[22:06:14    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_42/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:06:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:06:16    INFO]  - will validate that the bias-correction actually improved the result ...
[22:06:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:06:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_42,
Warning in <Fit>: Fit data is empty 
[22:06:21    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_42/plots/
[22:06:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_42/plots output/SPEC_advanced22/regres/train/ANNZ_42/plots_biasCor_before
[22:06:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:06:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_42,
Warning in <Fit>: Fit data is empty 
[22:06:37    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_42/plots/
[22:06:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_42/plots output/SPEC_advanced22/regres/train/ANNZ_42/plots_biasCor_after
[22:06:48    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.14175] , after the bias-correction: [0.0498544 , 6.10283] --> will KEEP the correction !

(22:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:06 INFO) 
[22:06:52    INFO]  -----------------------------------------------------
[22:06:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:06:52    INFO]  -----------------------------------------------------------------------------------------------------------
[22:06:52    INFO]  - starting ANNZ::Init()  ... 
[22:06:53    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_43/saveOpt.txt ...
[22:06:58    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:06:58    INFO] ----------------------------------------------------------------------------------------------------
[22:06:58    INFO]  - will book (ANNZ_43) method(BDT) with options: :NTrees=350:BoostType=AdaBoost:VarTransform=N
[22:06:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:06:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[22:06:58    INFO]      cuts (train):        ,
[22:06:58    INFO]      cuts (valid):       
[22:06:58    INFO]    - weights:            1
[22:06:58    INFO] ----------------------------------------------------------------------------------------------------
[22:06:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:07:21    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_43/ANNZ_43_weights/saveTrainOpt_ANNZ_43.txt ...
[22:07:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_43 ... 
[22:07:24    INFO]  - Will gen. input-parameter errors ...
[22:07:25    INFO]  - starting ANNZ::loadReaders() ... 
[22:07:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[22:08:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:08:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:08:59    INFO]  -----------------------------------------------------------------------------------------------------------
[22:08:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[22:09:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:09:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:09:22    INFO]  -----------------------------------------------------------------------------------------------------------
[22:09:22    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_43/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:09:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:09:23    INFO]  - will try to derive a bias correction ... 
[22:09:23    INFO]  - will validate that training produced an XML file for later ... 
[22:09:23    INFO]  - starting ANNZ::loadReaders() ... 
[22:09:24    INFO]  - will validate that the training was not a complete failure ... 
[22:09:25    INFO]  - training seems to have been successful! will move on ...
[22:09:25    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:09:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:09:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:09:29    INFO] ----------------------------------------------------------------------------------------------------
[22:09:29    INFO]  - will book (ANNZ_43_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:09:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:09:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[22:09:29    INFO]    - weights:            1
[22:09:29    INFO] ----------------------------------------------------------------------------------------------------
[22:09:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:09:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_43 ... 
[22:09:37    INFO]  - Will gen. input-parameter errors ...
[22:09:39    INFO]  - starting ANNZ::loadReaders() ... 
[22:09:44    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[22:11:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:11:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:11:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[22:12:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:12:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:12:13    INFO]  -----------------------------------------------------------------------------------------------------------
[22:12:13    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_43/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:12:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:12:14    INFO]  - will validate that the bias-correction actually improved the result ...
[22:12:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:12:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_43,
Warning in <Fit>: Fit data is empty 
[22:12:21    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_43/plots/
[22:12:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_43/plots output/SPEC_advanced22/regres/train/ANNZ_43/plots_biasCor_before
[22:12:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:12:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_43,
Warning in <Fit>: Fit data is empty 
[22:12:45    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_43/plots/
[22:13:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_43/plots output/SPEC_advanced22/regres/train/ANNZ_43/plots_biasCor_after
[22:13:00    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11438] , after the bias-correction: [0.0498544 , 6.03095] --> will KEEP the correction !

(22:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoostR2:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:13 INFO) 
[22:13:03    INFO]  -----------------------------------------------------
[22:13:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:13:03    INFO]  -----------------------------------------------------------------------------------------------------------
[22:13:04    INFO]  - starting ANNZ::Init()  ... 
[22:13:05    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_44/saveOpt.txt ...
[22:13:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:13:10    INFO] ----------------------------------------------------------------------------------------------------
[22:13:10    INFO]  - will book (ANNZ_44) method(BDT) with options: :NTrees=530:BoostType=AdaBoostR2:VarTransform=P
[22:13:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:13:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[22:13:10    INFO]      cuts (train):        ,
[22:13:10    INFO]      cuts (valid):       
[22:13:10    INFO]    - weights:            1
[22:13:10    INFO] ----------------------------------------------------------------------------------------------------
[22:13:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.17646
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(22:13 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(22:13 CRITICAL) [41;37;1mWill terminate !!!![0m
(22:33 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(22:33 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(22:33 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(22:33 INFO) [40;37;1m - 29/03/19 22:33:20 - starting ANNZ[0m
(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:20    INFO]  -----------------------------------------------------
[22:33:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:20    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:22    INFO]  - starting inputToSplitTree() ... 
[22:33:22    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[22:33:22    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[22:33:22    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[22:33:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:33:23    INFO]  -- ANNZ_tree .......................................... 0  index
[22:33:23    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[22:33:23    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[22:33:23    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[22:33:23    INFO]  -- ANNZ_tree .......................................... 0  nTest
[22:33:23    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[22:33:23    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:23    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[22:33:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:33:23    INFO]  -- ANNZ_tree .......................................... 0  index
[22:33:23    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[22:33:23    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[22:33:23    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[22:33:23    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[22:33:23    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[22:33:23    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:24    INFO]  - Writing to plotting directory output/SPEC_advanced22/rootIn/plots/
[22:33:25    INFO]  - Writing to plotting directory output/SPEC_advanced22/rootIn/plots/

(22:33 INFO) [40;37;1m - 29/03/19 22:33:27 - finished running ANNZ ![0m
(22:33 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(22:33 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(22:33 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(22:33 INFO) [40;37;1m - 29/03/19 22:33:27 - starting ANNZ[0m
(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:27    INFO]  -----------------------------------------------------
[22:33:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:27    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:27    INFO]  - starting ANNZ::Init()  ... 
[22:33:28    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced22/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[22:33:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:28    INFO]  -----------------------------------------------------
[22:33:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:28    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:28    INFO]  - starting ANNZ::Init()  ... 
[22:33:29    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced22/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[22:33:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:29    INFO]  -----------------------------------------------------
[22:33:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:29    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:29    INFO]  - starting ANNZ::Init()  ... 
[22:33:30    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced22/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[22:33:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:30    INFO]  -----------------------------------------------------
[22:33:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:30    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:31    INFO]  - starting ANNZ::Init()  ... 
[22:33:31    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced22/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[22:33:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:31    INFO]  -----------------------------------------------------
[22:33:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:31    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:32    INFO]  - starting ANNZ::Init()  ... 
[22:33:33    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced22/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[22:33:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:33    INFO]  -----------------------------------------------------
[22:33:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:33    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:34    INFO]  - starting ANNZ::Init()  ... 
[22:33:34    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced22/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[22:33:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:34    INFO]  -----------------------------------------------------
[22:33:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:34    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:34    INFO]  - starting ANNZ::Init()  ... 
[22:33:35    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced22/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[22:33:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:35    INFO]  -----------------------------------------------------
[22:33:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:35    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:36    INFO]  - starting ANNZ::Init()  ... 
[22:33:37    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced22/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[22:33:37    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:37    INFO]  -----------------------------------------------------
[22:33:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:37    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:37    INFO]  - starting ANNZ::Init()  ... 
[22:33:38    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced22/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[22:33:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:38    INFO]  -----------------------------------------------------
[22:33:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:38    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:38    INFO]  - starting ANNZ::Init()  ... 
[22:33:39    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced22/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[22:33:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:39    INFO]  -----------------------------------------------------
[22:33:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:39    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:39    INFO]  - starting ANNZ::Init()  ... 
[22:33:40    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced22/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[22:33:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:40    INFO]  -----------------------------------------------------
[22:33:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:40    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:40    INFO]  - starting ANNZ::Init()  ... 
[22:33:42    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced22/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[22:33:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:42    INFO]  -----------------------------------------------------
[22:33:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:42    INFO]  - starting ANNZ::Init()  ... 
[22:33:43    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced22/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[22:33:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:43    INFO]  -----------------------------------------------------
[22:33:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:43    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:43    INFO]  - starting ANNZ::Init()  ... 
[22:33:44    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced22/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[22:33:44    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:44    INFO]  -----------------------------------------------------
[22:33:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:44    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:45    INFO]  - starting ANNZ::Init()  ... 
[22:33:46    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced22/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[22:33:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:46    INFO]  -----------------------------------------------------
[22:33:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:46    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:46    INFO]  - starting ANNZ::Init()  ... 
[22:33:46    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced22/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[22:33:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:46    INFO]  -----------------------------------------------------
[22:33:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:46    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:47    INFO]  - starting ANNZ::Init()  ... 
[22:33:48    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced22/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[22:33:48    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:48    INFO]  -----------------------------------------------------
[22:33:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:48    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:49    INFO]  - starting ANNZ::Init()  ... 
[22:33:49    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced22/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[22:33:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:49    INFO]  -----------------------------------------------------
[22:33:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:49    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:49    INFO]  - starting ANNZ::Init()  ... 
[22:33:50    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced22/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[22:33:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:50    INFO]  -----------------------------------------------------
[22:33:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:50    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:51    INFO]  - starting ANNZ::Init()  ... 
[22:33:52    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced22/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[22:33:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:52    INFO]  -----------------------------------------------------
[22:33:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:52    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:52    INFO]  - starting ANNZ::Init()  ... 
[22:33:53    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced22/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[22:33:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:53    INFO]  -----------------------------------------------------
[22:33:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:53    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:54    INFO]  - starting ANNZ::Init()  ... 
[22:33:54    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced22/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[22:33:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:54    INFO]  -----------------------------------------------------
[22:33:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:54    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:55    INFO]  - starting ANNZ::Init()  ... 
[22:33:55    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced22/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[22:33:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:55    INFO]  -----------------------------------------------------
[22:33:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:56    INFO]  - starting ANNZ::Init()  ... 
[22:33:56    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced22/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[22:33:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:57    INFO]  -----------------------------------------------------
[22:33:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:57    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:57    INFO]  - starting ANNZ::Init()  ... 
[22:33:57    INFO]  - found trained "ANNZ_24" (./output/SPEC_advanced22/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[22:33:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:58    INFO]  -----------------------------------------------------
[22:33:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:58    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:58    INFO]  - starting ANNZ::Init()  ... 
[22:33:58    INFO]  - found trained "ANNZ_25" (./output/SPEC_advanced22/regres/train/ANNZ_25/ANNZ_25_weights/randomReg_ANNZ_25.weights.xml)
[22:33:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:33 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:33 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:33 INFO) 
[22:33:58    INFO]  -----------------------------------------------------
[22:33:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:33:58    INFO]  -----------------------------------------------------------------------------------------------------------
[22:33:59    INFO]  - starting ANNZ::Init()  ... 
[22:34:00    INFO]  - found trained "ANNZ_26" (./output/SPEC_advanced22/regres/train/ANNZ_26/ANNZ_26_weights/randomReg_ANNZ_26.weights.xml)
[22:34:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:00    INFO]  -----------------------------------------------------
[22:34:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:00    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:00    INFO]  - starting ANNZ::Init()  ... 
[22:34:02    INFO]  - found trained "ANNZ_27" (./output/SPEC_advanced22/regres/train/ANNZ_27/ANNZ_27_weights/randomReg_ANNZ_27.weights.xml)
[22:34:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:02    INFO]  -----------------------------------------------------
[22:34:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:02    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:02    INFO]  - starting ANNZ::Init()  ... 
[22:34:03    INFO]  - found trained "ANNZ_28" (./output/SPEC_advanced22/regres/train/ANNZ_28/ANNZ_28_weights/randomReg_ANNZ_28.weights.xml)
[22:34:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:03    INFO]  -----------------------------------------------------
[22:34:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:03    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:03    INFO]  - starting ANNZ::Init()  ... 
[22:34:03    INFO]  - found trained "ANNZ_29" (./output/SPEC_advanced22/regres/train/ANNZ_29/ANNZ_29_weights/randomReg_ANNZ_29.weights.xml)
[22:34:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:03    INFO]  -----------------------------------------------------
[22:34:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:03    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:04    INFO]  - starting ANNZ::Init()  ... 
[22:34:04    INFO]  - found trained "ANNZ_30" (./output/SPEC_advanced22/regres/train/ANNZ_30/ANNZ_30_weights/randomReg_ANNZ_30.weights.xml)
[22:34:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:04    INFO]  -----------------------------------------------------
[22:34:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:04    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:05    INFO]  - starting ANNZ::Init()  ... 
[22:34:05    INFO]  - found trained "ANNZ_31" (./output/SPEC_advanced22/regres/train/ANNZ_31/ANNZ_31_weights/randomReg_ANNZ_31.weights.xml)
[22:34:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:05    INFO]  -----------------------------------------------------
[22:34:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:05    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:06    INFO]  - starting ANNZ::Init()  ... 
[22:34:06    INFO]  - found trained "ANNZ_32" (./output/SPEC_advanced22/regres/train/ANNZ_32/ANNZ_32_weights/randomReg_ANNZ_32.weights.xml)
[22:34:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:06    INFO]  -----------------------------------------------------
[22:34:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:06    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:07    INFO]  - starting ANNZ::Init()  ... 
[22:34:08    INFO]  - found trained "ANNZ_33" (./output/SPEC_advanced22/regres/train/ANNZ_33/ANNZ_33_weights/randomReg_ANNZ_33.weights.xml)
[22:34:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:08    INFO]  -----------------------------------------------------
[22:34:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:08    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:08    INFO]  - starting ANNZ::Init()  ... 
[22:34:09    INFO]  - found trained "ANNZ_34" (./output/SPEC_advanced22/regres/train/ANNZ_34/ANNZ_34_weights/randomReg_ANNZ_34.weights.xml)
[22:34:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:09    INFO]  -----------------------------------------------------
[22:34:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:09    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:10    INFO]  - starting ANNZ::Init()  ... 
[22:34:10    INFO]  - found trained "ANNZ_35" (./output/SPEC_advanced22/regres/train/ANNZ_35/ANNZ_35_weights/randomReg_ANNZ_35.weights.xml)
[22:34:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:10    INFO]  -----------------------------------------------------
[22:34:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:10    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:11    INFO]  - starting ANNZ::Init()  ... 
[22:34:11    INFO]  - found trained "ANNZ_36" (./output/SPEC_advanced22/regres/train/ANNZ_36/ANNZ_36_weights/randomReg_ANNZ_36.weights.xml)
[22:34:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:11    INFO]  -----------------------------------------------------
[22:34:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:11    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:12    INFO]  - starting ANNZ::Init()  ... 
[22:34:13    INFO]  - found trained "ANNZ_37" (./output/SPEC_advanced22/regres/train/ANNZ_37/ANNZ_37_weights/randomReg_ANNZ_37.weights.xml)
[22:34:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:13    INFO]  -----------------------------------------------------
[22:34:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:13    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:13    INFO]  - starting ANNZ::Init()  ... 
[22:34:14    INFO]  - found trained "ANNZ_38" (./output/SPEC_advanced22/regres/train/ANNZ_38/ANNZ_38_weights/randomReg_ANNZ_38.weights.xml)
[22:34:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:14    INFO]  -----------------------------------------------------
[22:34:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:14    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:14    INFO]  - starting ANNZ::Init()  ... 
[22:34:15    INFO]  - found trained "ANNZ_39" (./output/SPEC_advanced22/regres/train/ANNZ_39/ANNZ_39_weights/randomReg_ANNZ_39.weights.xml)
[22:34:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:15    INFO]  -----------------------------------------------------
[22:34:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:15    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:16    INFO]  - starting ANNZ::Init()  ... 
[22:34:16    INFO]  - found trained "ANNZ_40" (./output/SPEC_advanced22/regres/train/ANNZ_40/ANNZ_40_weights/randomReg_ANNZ_40.weights.xml)
[22:34:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:16    INFO]  -----------------------------------------------------
[22:34:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:16    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:17    INFO]  - starting ANNZ::Init()  ... 
[22:34:17    INFO]  - found trained "ANNZ_41" (./output/SPEC_advanced22/regres/train/ANNZ_41/ANNZ_41_weights/randomReg_ANNZ_41.weights.xml)
[22:34:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:17    INFO]  -----------------------------------------------------
[22:34:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:17    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:18    INFO]  - starting ANNZ::Init()  ... 
[22:34:18    INFO]  - found trained "ANNZ_42" (./output/SPEC_advanced22/regres/train/ANNZ_42/ANNZ_42_weights/randomReg_ANNZ_42.weights.xml)
[22:34:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:18    INFO]  -----------------------------------------------------
[22:34:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:18    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:19    INFO]  - starting ANNZ::Init()  ... 
[22:34:19    INFO]  - found trained "ANNZ_43" (./output/SPEC_advanced22/regres/train/ANNZ_43/ANNZ_43_weights/randomReg_ANNZ_43.weights.xml)
[22:34:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(22:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:34 INFO) 
[22:34:19    INFO]  -----------------------------------------------------
[22:34:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:34:19    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:19    INFO]  - starting ANNZ::Init()  ... 
[22:34:20    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_44/saveOpt.txt ...
[22:34:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:34:26    INFO] ----------------------------------------------------------------------------------------------------
[22:34:26    INFO]  - will book (ANNZ_44) method(BDT) with options: :NTrees=1050:BoostType=AdaBoostR2:VarTransform=N
[22:34:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:34:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[22:34:26    INFO]      cuts (train):        ,
[22:34:26    INFO]      cuts (valid):       
[22:34:26    INFO]    - weights:            1
[22:34:26    INFO] ----------------------------------------------------------------------------------------------------
[22:34:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:36:12    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_44/ANNZ_44_weights/saveTrainOpt_ANNZ_44.txt ...
[22:36:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_44 ... 
[22:36:18    INFO]  - Will gen. input-parameter errors ...
[22:36:21    INFO]  - starting ANNZ::loadReaders() ... 
[22:36:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[23:27:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:27:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:27:01    INFO]  -----------------------------------------------------------------------------------------------------------
[23:27:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[23:38:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:38:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:31    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_44/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:38:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:38:34    INFO]  - will try to derive a bias correction ... 
[23:38:34    INFO]  - will validate that training produced an XML file for later ... 
[23:38:34    INFO]  - starting ANNZ::loadReaders() ... 
[23:38:41    INFO]  - will validate that the training was not a complete failure ... 
[23:38:41    INFO]  - training seems to have been successful! will move on ...
[23:38:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:38:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:38:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:38:50    INFO] ----------------------------------------------------------------------------------------------------
[23:38:50    INFO]  - will book (ANNZ_44_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:38:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:38:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:38:50    INFO]    - weights:            1
[23:38:50    INFO] ----------------------------------------------------------------------------------------------------
[23:38:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:38:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_44 ... 
[23:38:59    INFO]  - Will gen. input-parameter errors ...
[23:39:03    INFO]  - starting ANNZ::loadReaders() ... 
[23:39:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[00:23:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:23:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:23:46    INFO]  -----------------------------------------------------------------------------------------------------------
[00:23:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[00:34:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:34:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:34:02    INFO]  -----------------------------------------------------------------------------------------------------------
[00:34:02    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_44/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:34:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:34:04    INFO]  - will validate that the bias-correction actually improved the result ...
[00:34:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:34:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_44,
Warning in <Fit>: Fit data is empty 
[00:34:10    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_44/plots/
[00:34:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_44/plots output/SPEC_advanced22/regres/train/ANNZ_44/plots_biasCor_before
[00:34:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:34:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_44,
[00:34:26    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_44/plots/
[00:34:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_44/plots output/SPEC_advanced22/regres/train/ANNZ_44/plots_biasCor_after
[00:34:37    INFO]  - Got original [KS-test,N_poiss]: [0.0634103 , 6.60477] , after the bias-correction: [0.0334977 , 5.72767] --> will KEEP the correction !

(00:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m45[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:34 INFO) 
[00:34:41    INFO]  -----------------------------------------------------
[00:34:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:34:41    INFO]  -----------------------------------------------------------------------------------------------------------
[00:34:42    INFO]  - starting ANNZ::Init()  ... 
[00:34:45    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_45/saveOpt.txt ...
[00:34:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:34:50    INFO] ----------------------------------------------------------------------------------------------------
[00:34:50    INFO]  - will book (ANNZ_45) method(BDT) with options: :NTrees=260:BoostType=Bagging:VarTransform=N
[00:34:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:34:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:34:50    INFO]      cuts (train):        ,
[00:34:50    INFO]      cuts (valid):       
[00:34:50    INFO]    - weights:            1
[00:34:50    INFO] ----------------------------------------------------------------------------------------------------
[00:34:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:35:14    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_45/ANNZ_45_weights/saveTrainOpt_ANNZ_45.txt ...
[00:35:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_45 ... 
[00:35:17    INFO]  - Will gen. input-parameter errors ...
[00:35:19    INFO]  - starting ANNZ::loadReaders() ... 
[00:35:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[00:36:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:36:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:36:50    INFO]  -----------------------------------------------------------------------------------------------------------
[00:36:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[00:37:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:37:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:37:11    INFO]  -----------------------------------------------------------------------------------------------------------
[00:37:11    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_45/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:37:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:37:12    INFO]  - will try to derive a bias correction ... 
[00:37:12    INFO]  - will validate that training produced an XML file for later ... 
[00:37:12    INFO]  - starting ANNZ::loadReaders() ... 
[00:37:15    INFO]  - will validate that the training was not a complete failure ... 
[00:37:15    INFO]  - training seems to have been successful! will move on ...
[00:37:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:37:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:37:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:37:20    INFO] ----------------------------------------------------------------------------------------------------
[00:37:20    INFO]  - will book (ANNZ_45_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:37:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:37:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:37:20    INFO]    - weights:            1
[00:37:20    INFO] ----------------------------------------------------------------------------------------------------
[00:37:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:37:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_45 ... 
[00:37:27    INFO]  - Will gen. input-parameter errors ...
[00:37:28    INFO]  - starting ANNZ::loadReaders() ... 
[00:37:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[00:39:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:39:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:39:01    INFO]  -----------------------------------------------------------------------------------------------------------
[00:39:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[00:39:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:39:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:39:22    INFO]  -----------------------------------------------------------------------------------------------------------
[00:39:23    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_45/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:39:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:39:24    INFO]  - will validate that the bias-correction actually improved the result ...
[00:39:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:39:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_45,
[00:39:29    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_45/plots/
[00:39:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_45/plots output/SPEC_advanced22/regres/train/ANNZ_45/plots_biasCor_before
[00:39:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:39:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_45,
[00:39:44    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_45/plots/
[00:39:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_45/plots output/SPEC_advanced22/regres/train/ANNZ_45/plots_biasCor_after
[00:39:55    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.67957] , after the bias-correction: [0.0479499 , 5.67869] --> will KEEP the correction !

(00:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m46[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=670:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:39 INFO) 
[00:39:59    INFO]  -----------------------------------------------------
[00:39:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:39:59    INFO]  -----------------------------------------------------------------------------------------------------------
[00:39:59    INFO]  - starting ANNZ::Init()  ... 
[00:40:00    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_46/saveOpt.txt ...
[00:40:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:40:06    INFO] ----------------------------------------------------------------------------------------------------
[00:40:06    INFO]  - will book (ANNZ_46) method(BDT) with options: :NTrees=670:BoostType=AdaBoostR2:VarTransform=N
[00:40:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:40:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:40:06    INFO]      cuts (train):        ,
[00:40:06    INFO]      cuts (valid):       
[00:40:06    INFO]    - weights:            1
[00:40:06    INFO] ----------------------------------------------------------------------------------------------------
[00:40:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:41:03    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_46/ANNZ_46_weights/saveTrainOpt_ANNZ_46.txt ...
[00:41:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_46 ... 
[00:41:07    INFO]  - Will gen. input-parameter errors ...
[00:41:09    INFO]  - starting ANNZ::loadReaders() ... 
[00:41:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[00:57:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:57:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:57:36    INFO]  -----------------------------------------------------------------------------------------------------------
[00:57:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[01:01:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:01:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:01:39    INFO]  -----------------------------------------------------------------------------------------------------------
[01:01:40    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_46/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:01:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:01:41    INFO]  - will try to derive a bias correction ... 
[01:01:41    INFO]  - will validate that training produced an XML file for later ... 
[01:01:41    INFO]  - starting ANNZ::loadReaders() ... 
[01:01:46    INFO]  - will validate that the training was not a complete failure ... 
[01:01:46    INFO]  - training seems to have been successful! will move on ...
[01:01:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:01:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:01:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:01:54    INFO] ----------------------------------------------------------------------------------------------------
[01:01:54    INFO]  - will book (ANNZ_46_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:01:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:01:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:01:54    INFO]    - weights:            1
[01:01:54    INFO] ----------------------------------------------------------------------------------------------------
[01:01:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:02:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_46 ... 
[01:02:02    INFO]  - Will gen. input-parameter errors ...
[01:02:04    INFO]  - starting ANNZ::loadReaders() ... 
[01:02:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[01:18:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:18:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:18:08    INFO]  -----------------------------------------------------------------------------------------------------------
[01:18:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[01:22:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:22:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:22:04    INFO]  -----------------------------------------------------------------------------------------------------------
[01:22:04    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_46/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:22:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:22:06    INFO]  - will validate that the bias-correction actually improved the result ...
[01:22:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:22:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_46,
Warning in <Fit>: Fit data is empty 
[01:22:11    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_46/plots/
[01:22:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_46/plots output/SPEC_advanced22/regres/train/ANNZ_46/plots_biasCor_before
[01:22:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:22:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_46,
[01:22:27    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_46/plots/
[01:22:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_46/plots output/SPEC_advanced22/regres/train/ANNZ_46/plots_biasCor_after
[01:22:38    INFO]  - Got original [KS-test,N_poiss]: [0.0630742 , 6.64913] , after the bias-correction: [0.0365225 , 5.56134] --> will KEEP the correction !

(01:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m47[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:22 INFO) 
[01:22:41    INFO]  -----------------------------------------------------
[01:22:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:22:41    INFO]  -----------------------------------------------------------------------------------------------------------
[01:22:42    INFO]  - starting ANNZ::Init()  ... 
[01:22:46    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_47/saveOpt.txt ...
[01:22:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:22:51    INFO] ----------------------------------------------------------------------------------------------------
[01:22:51    INFO]  - will book (ANNZ_47) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[01:22:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:22:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:22:51    INFO]      cuts (train):        ,
[01:22:51    INFO]      cuts (valid):       
[01:22:51    INFO]    - weights:            1
[01:22:51    INFO] ----------------------------------------------------------------------------------------------------
[01:22:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:23:24    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_47/ANNZ_47_weights/saveTrainOpt_ANNZ_47.txt ...
[01:23:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_47 ... 
[01:23:27    INFO]  - Will gen. input-parameter errors ...
[01:23:29    INFO]  - starting ANNZ::loadReaders() ... 
[01:23:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[01:26:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:26:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:26:30    INFO]  -----------------------------------------------------------------------------------------------------------
[01:26:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[01:27:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:27:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:27:14    INFO]  -----------------------------------------------------------------------------------------------------------
[01:27:14    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_47/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:27:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:27:16    INFO]  - will try to derive a bias correction ... 
[01:27:16    INFO]  - will validate that training produced an XML file for later ... 
[01:27:16    INFO]  - starting ANNZ::loadReaders() ... 
[01:27:19    INFO]  - will validate that the training was not a complete failure ... 
[01:27:19    INFO]  - training seems to have been successful! will move on ...
[01:27:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:27:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:27:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:27:24    INFO] ----------------------------------------------------------------------------------------------------
[01:27:24    INFO]  - will book (ANNZ_47_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:27:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:27:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:27:24    INFO]    - weights:            1
[01:27:24    INFO] ----------------------------------------------------------------------------------------------------
[01:27:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:27:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_47 ... 
[01:27:32    INFO]  - Will gen. input-parameter errors ...
[01:27:33    INFO]  - starting ANNZ::loadReaders() ... 
[01:27:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[01:30:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:30:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:30:42    INFO]  -----------------------------------------------------------------------------------------------------------
[01:30:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[01:31:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:31:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:31:27    INFO]  -----------------------------------------------------------------------------------------------------------
[01:31:28    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_47/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:31:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:31:29    INFO]  - will validate that the bias-correction actually improved the result ...
[01:31:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:31:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_47,
[01:31:34    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_47/plots/
[01:31:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_47/plots output/SPEC_advanced22/regres/train/ANNZ_47/plots_biasCor_before
[01:31:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:31:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_47,
[01:31:50    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_47/plots/
[01:32:01        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_47/plots output/SPEC_advanced22/regres/train/ANNZ_47/plots_biasCor_after
[01:32:01    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.86915] , after the bias-correction: [0.0444768 , 5.62586] --> will KEEP the correction !

(01:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m48[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=730:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:32 INFO) 
[01:32:05    INFO]  -----------------------------------------------------
[01:32:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:32:05    INFO]  -----------------------------------------------------------------------------------------------------------
[01:32:05    INFO]  - starting ANNZ::Init()  ... 
[01:32:06    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_48/saveOpt.txt ...
[01:32:11    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:32:11    INFO] ----------------------------------------------------------------------------------------------------
[01:32:11    INFO]  - will book (ANNZ_48) method(BDT) with options: :NTrees=730:BoostType=AdaBoostR2:VarTransform=N
[01:32:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:32:11    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[01:32:11    INFO]      cuts (train):        ,
[01:32:11    INFO]      cuts (valid):       
[01:32:11    INFO]    - weights:            1
[01:32:11    INFO] ----------------------------------------------------------------------------------------------------
[01:32:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:33:14    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_48/ANNZ_48_weights/saveTrainOpt_ANNZ_48.txt ...
[01:33:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_48 ... 
[01:33:19    INFO]  - Will gen. input-parameter errors ...
[01:33:21    INFO]  - starting ANNZ::loadReaders() ... 
[01:33:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[01:52:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:52:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[01:52:45    INFO]  -----------------------------------------------------------------------------------------------------------
[01:52:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[01:57:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:57:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[01:57:31    INFO]  -----------------------------------------------------------------------------------------------------------
[01:57:31    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_48/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:57:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:57:33    INFO]  - will try to derive a bias correction ... 
[01:57:33    INFO]  - will validate that training produced an XML file for later ... 
[01:57:33    INFO]  - starting ANNZ::loadReaders() ... 
[01:57:37    INFO]  - will validate that the training was not a complete failure ... 
[01:57:38    INFO]  - training seems to have been successful! will move on ...
[01:57:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:57:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:57:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:57:45    INFO] ----------------------------------------------------------------------------------------------------
[01:57:45    INFO]  - will book (ANNZ_48_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:57:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:57:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[01:57:45    INFO]    - weights:            1
[01:57:45    INFO] ----------------------------------------------------------------------------------------------------
[01:57:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:57:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_48 ... 
[01:57:53    INFO]  - Will gen. input-parameter errors ...
[01:57:55    INFO]  - starting ANNZ::loadReaders() ... 
[01:58:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[02:16:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:16:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:16:55    INFO]  -----------------------------------------------------------------------------------------------------------
[02:16:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[02:21:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:21:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:21:35    INFO]  -----------------------------------------------------------------------------------------------------------
[02:21:36    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_48/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:21:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:21:37    INFO]  - will validate that the bias-correction actually improved the result ...
[02:21:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:21:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_48,
[02:21:43    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_48/plots/
[02:21:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_48/plots output/SPEC_advanced22/regres/train/ANNZ_48/plots_biasCor_before
[02:21:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:21:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_48,
[02:21:59    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_48/plots/
[02:22:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_48/plots output/SPEC_advanced22/regres/train/ANNZ_48/plots_biasCor_after
[02:22:09    INFO]  - Got original [KS-test,N_poiss]: [0.0631862 , 6.59463] , after the bias-correction: [0.0356263 , 5.63101] --> will KEEP the correction !

(02:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m49[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:22 INFO) 
[02:22:13    INFO]  -----------------------------------------------------
[02:22:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:22:13    INFO]  -----------------------------------------------------------------------------------------------------------
[02:22:14    INFO]  - starting ANNZ::Init()  ... 
[02:22:18    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_49/saveOpt.txt ...
[02:22:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:22:23    INFO] ----------------------------------------------------------------------------------------------------
[02:22:23    INFO]  - will book (ANNZ_49) method(BDT) with options: :NTrees=520:BoostType=AdaBoost:VarTransform=N
[02:22:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:22:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:22:23    INFO]      cuts (train):        ,
[02:22:23    INFO]      cuts (valid):       
[02:22:23    INFO]    - weights:            1
[02:22:23    INFO] ----------------------------------------------------------------------------------------------------
[02:22:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:22:52    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_49/ANNZ_49_weights/saveTrainOpt_ANNZ_49.txt ...
[02:22:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_49 ... 
[02:22:55    INFO]  - Will gen. input-parameter errors ...
[02:22:56    INFO]  - starting ANNZ::loadReaders() ... 
[02:23:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[02:25:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:25:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:25:15    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[02:25:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:25:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:25:48    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:48    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_49/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:25:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:25:49    INFO]  - will try to derive a bias correction ... 
[02:25:49    INFO]  - will validate that training produced an XML file for later ... 
[02:25:49    INFO]  - starting ANNZ::loadReaders() ... 
[02:25:51    INFO]  - will validate that the training was not a complete failure ... 
[02:25:51    INFO]  - training seems to have been successful! will move on ...
[02:25:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:25:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:25:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:25:56    INFO] ----------------------------------------------------------------------------------------------------
[02:25:56    INFO]  - will book (ANNZ_49_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:25:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:25:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:25:56    INFO]    - weights:            1
[02:25:56    INFO] ----------------------------------------------------------------------------------------------------
[02:25:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:26:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_49 ... 
[02:26:03    INFO]  - Will gen. input-parameter errors ...
[02:26:05    INFO]  - starting ANNZ::loadReaders() ... 
[02:26:10    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[02:28:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:28:05    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:28:05    INFO]  -----------------------------------------------------------------------------------------------------------
[02:28:05    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[02:28:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:28:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:28:33    INFO]  -----------------------------------------------------------------------------------------------------------
[02:28:33    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_49/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:28:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:28:34    INFO]  - will validate that the bias-correction actually improved the result ...
[02:28:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:28:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_49,
Warning in <Fit>: Fit data is empty 
[02:28:40    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_49/plots/
[02:28:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_49/plots output/SPEC_advanced22/regres/train/ANNZ_49/plots_biasCor_before
[02:28:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:28:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_49,
[02:28:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_49/plots/
[02:29:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_49/plots output/SPEC_advanced22/regres/train/ANNZ_49/plots_biasCor_after
[02:29:06    INFO]  - Got original [KS-test,N_poiss]: [0.0823438 , 6.13976] , after the bias-correction: [0.0497423 , 6.09046] --> will KEEP the correction !

(02:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m50[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:29 INFO) 
[02:29:09    INFO]  -----------------------------------------------------
[02:29:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:29:09    INFO]  -----------------------------------------------------------------------------------------------------------
[02:29:10    INFO]  - starting ANNZ::Init()  ... 
[02:29:11    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_50/saveOpt.txt ...
[02:29:16    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:29:16    INFO] ----------------------------------------------------------------------------------------------------
[02:29:16    INFO]  - will book (ANNZ_50) method(BDT) with options: :NTrees=510:BoostType=Bagging:VarTransform=N
[02:29:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:29:16    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:29:16    INFO]      cuts (train):        ,
[02:29:16    INFO]      cuts (valid):       
[02:29:16    INFO]    - weights:            1
[02:29:16    INFO] ----------------------------------------------------------------------------------------------------
[02:29:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:30:04    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_50/ANNZ_50_weights/saveTrainOpt_ANNZ_50.txt ...
[02:30:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_50 ... 
[02:30:09    INFO]  - Will gen. input-parameter errors ...
[02:30:11    INFO]  - starting ANNZ::loadReaders() ... 
[02:30:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[02:33:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:33:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:33:17    INFO]  -----------------------------------------------------------------------------------------------------------
[02:33:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[02:34:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:34:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:34:00    INFO]  -----------------------------------------------------------------------------------------------------------
[02:34:01    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_50/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:34:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:34:03    INFO]  - will try to derive a bias correction ... 
[02:34:03    INFO]  - will validate that training produced an XML file for later ... 
[02:34:03    INFO]  - starting ANNZ::loadReaders() ... 
[02:34:08    INFO]  - will validate that the training was not a complete failure ... 
[02:34:08    INFO]  - training seems to have been successful! will move on ...
[02:34:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:34:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:34:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:34:14    INFO] ----------------------------------------------------------------------------------------------------
[02:34:14    INFO]  - will book (ANNZ_50_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:34:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:34:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:34:14    INFO]    - weights:            1
[02:34:14    INFO] ----------------------------------------------------------------------------------------------------
[02:34:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:34:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_50 ... 
[02:34:22    INFO]  - Will gen. input-parameter errors ...
[02:34:24    INFO]  - starting ANNZ::loadReaders() ... 
[02:34:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[02:37:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:37:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:37:47    INFO]  -----------------------------------------------------------------------------------------------------------
[02:37:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[02:38:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:38:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:38:35    INFO]  -----------------------------------------------------------------------------------------------------------
[02:38:35    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_50/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:38:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:38:37    INFO]  - will validate that the bias-correction actually improved the result ...
[02:38:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:38:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_50,
[02:38:42    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_50/plots/
[02:38:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_50/plots output/SPEC_advanced22/regres/train/ANNZ_50/plots_biasCor_before
[02:38:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:38:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_50,
[02:38:58    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_50/plots/
[02:39:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_50/plots output/SPEC_advanced22/regres/train/ANNZ_50/plots_biasCor_after
[02:39:09    INFO]  - Got original [KS-test,N_poiss]: [0.0845844 , 6.6471] , after the bias-correction: [0.048622 , 5.72208] --> will KEEP the correction !

(02:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m51[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:39 INFO) 
[02:39:13    INFO]  -----------------------------------------------------
[02:39:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:39:13    INFO]  -----------------------------------------------------------------------------------------------------------
[02:39:13    INFO]  - starting ANNZ::Init()  ... 
[02:39:15    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_51/saveOpt.txt ...
[02:39:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:39:20    INFO] ----------------------------------------------------------------------------------------------------
[02:39:20    INFO]  - will book (ANNZ_51) method(BDT) with options: :NTrees=490:BoostType=AdaBoostR2:VarTransform=N
[02:39:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:39:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[02:39:20    INFO]      cuts (train):        ,
[02:39:20    INFO]      cuts (valid):       
[02:39:20    INFO]    - weights:            1
[02:39:20    INFO] ----------------------------------------------------------------------------------------------------
[02:39:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:40:00    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_51/ANNZ_51_weights/saveTrainOpt_ANNZ_51.txt ...
[02:40:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_51 ... 
[02:40:03    INFO]  - Will gen. input-parameter errors ...
[02:40:05    INFO]  - starting ANNZ::loadReaders() ... 
[02:40:16    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[02:49:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:49:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[02:49:50    INFO]  -----------------------------------------------------------------------------------------------------------
[02:49:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[02:52:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:52:05    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[02:52:05    INFO]  -----------------------------------------------------------------------------------------------------------
[02:52:05    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_51/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:52:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:52:07    INFO]  - will try to derive a bias correction ... 
[02:52:07    INFO]  - will validate that training produced an XML file for later ... 
[02:52:07    INFO]  - starting ANNZ::loadReaders() ... 
[02:52:10    INFO]  - will validate that the training was not a complete failure ... 
[02:52:10    INFO]  - training seems to have been successful! will move on ...
[02:52:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:52:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:52:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:52:17    INFO] ----------------------------------------------------------------------------------------------------
[02:52:17    INFO]  - will book (ANNZ_51_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:52:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:52:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[02:52:17    INFO]    - weights:            1
[02:52:17    INFO] ----------------------------------------------------------------------------------------------------
[02:52:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:52:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_51 ... 
[02:52:25    INFO]  - Will gen. input-parameter errors ...
[02:52:26    INFO]  - starting ANNZ::loadReaders() ... 
[02:52:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[03:00:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:00:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:00:59    INFO]  -----------------------------------------------------------------------------------------------------------
[03:00:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[03:03:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:03:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:03:04    INFO]  -----------------------------------------------------------------------------------------------------------
[03:03:04    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_51/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:03:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:03:06    INFO]  - will validate that the bias-correction actually improved the result ...
[03:03:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:03:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_51,
Warning in <Fit>: Fit data is empty 
[03:03:11    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_51/plots/
[03:03:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_51/plots output/SPEC_advanced22/regres/train/ANNZ_51/plots_biasCor_before
[03:03:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:03:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_51,
Warning in <Fit>: Fit data is empty 
[03:03:26    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_51/plots/
[03:03:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_51/plots output/SPEC_advanced22/regres/train/ANNZ_51/plots_biasCor_after
[03:03:37    INFO]  - Got original [KS-test,N_poiss]: [0.0628501 , 6.49305] , after the bias-correction: [0.034618 , 5.67832] --> will KEEP the correction !

(03:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m52[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:03 INFO) 
[03:03:41    INFO]  -----------------------------------------------------
[03:03:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:03:41    INFO]  -----------------------------------------------------------------------------------------------------------
[03:03:41    INFO]  - starting ANNZ::Init()  ... 
[03:03:44    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_52/saveOpt.txt ...
[03:03:49    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:03:49    INFO] ----------------------------------------------------------------------------------------------------
[03:03:49    INFO]  - will book (ANNZ_52) method(BDT) with options: :NTrees=460:BoostType=Bagging:VarTransform=N,P
[03:03:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:03:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:03:49    INFO]      cuts (train):        ,
[03:03:49    INFO]      cuts (valid):       
[03:03:49    INFO]    - weights:            1
[03:03:49    INFO] ----------------------------------------------------------------------------------------------------
[03:03:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:04:34    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_52/ANNZ_52_weights/saveTrainOpt_ANNZ_52.txt ...
[03:04:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_52 ... 
[03:04:38    INFO]  - Will gen. input-parameter errors ...
[03:04:40    INFO]  - starting ANNZ::loadReaders() ... 
[03:04:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[03:08:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:08:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:08:49    INFO]  -----------------------------------------------------------------------------------------------------------
[03:08:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[03:09:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:09:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:09:49    INFO]  -----------------------------------------------------------------------------------------------------------
[03:09:50    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_52/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:09:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:09:52    INFO]  - will try to derive a bias correction ... 
[03:09:52    INFO]  - will validate that training produced an XML file for later ... 
[03:09:52    INFO]  - starting ANNZ::loadReaders() ... 
[03:09:56    INFO]  - will validate that the training was not a complete failure ... 
[03:09:56    INFO]  - training seems to have been successful! will move on ...
[03:09:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:10:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:10:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:10:02    INFO] ----------------------------------------------------------------------------------------------------
[03:10:02    INFO]  - will book (ANNZ_52_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:10:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:10:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:10:02    INFO]    - weights:            1
[03:10:02    INFO] ----------------------------------------------------------------------------------------------------
[03:10:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:10:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_52 ... 
[03:10:10    INFO]  - Will gen. input-parameter errors ...
[03:10:12    INFO]  - starting ANNZ::loadReaders() ... 
[03:10:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[03:14:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:14:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:14:43    INFO]  -----------------------------------------------------------------------------------------------------------
[03:14:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[03:15:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:15:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:15:47    INFO]  -----------------------------------------------------------------------------------------------------------
[03:15:47    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_52/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:15:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:15:49    INFO]  - will validate that the bias-correction actually improved the result ...
[03:15:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:15:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_52,
[03:15:54    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_52/plots/
[03:16:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_52/plots output/SPEC_advanced22/regres/train/ANNZ_52/plots_biasCor_before
[03:16:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:16:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_52,
[03:16:10    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_52/plots/
[03:16:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_52/plots output/SPEC_advanced22/regres/train/ANNZ_52/plots_biasCor_after
[03:16:21    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.86009] , after the bias-correction: [0.0441408 , 5.6268] --> will KEEP the correction !

(03:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m53[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:16 INFO) 
[03:16:25    INFO]  -----------------------------------------------------
[03:16:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:16:25    INFO]  -----------------------------------------------------------------------------------------------------------
[03:16:25    INFO]  - starting ANNZ::Init()  ... 
[03:16:31    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_53/saveOpt.txt ...
[03:16:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:16:36    INFO] ----------------------------------------------------------------------------------------------------
[03:16:36    INFO]  - will book (ANNZ_53) method(BDT) with options: :NTrees=340:BoostType=AdaBoost:VarTransform=N
[03:16:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:16:36    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:16:36    INFO]      cuts (train):        ,
[03:16:36    INFO]      cuts (valid):       
[03:16:36    INFO]    - weights:            1
[03:16:36    INFO] ----------------------------------------------------------------------------------------------------
[03:16:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:16:56    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_53/ANNZ_53_weights/saveTrainOpt_ANNZ_53.txt ...
[03:16:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_53 ... 
[03:16:58    INFO]  - Will gen. input-parameter errors ...
[03:16:59    INFO]  - starting ANNZ::loadReaders() ... 
[03:17:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[03:18:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:18:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:18:24    INFO]  -----------------------------------------------------------------------------------------------------------
[03:18:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[03:18:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:18:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:18:45    INFO]  -----------------------------------------------------------------------------------------------------------
[03:18:45    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_53/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:18:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:18:46    INFO]  - will try to derive a bias correction ... 
[03:18:46    INFO]  - will validate that training produced an XML file for later ... 
[03:18:46    INFO]  - starting ANNZ::loadReaders() ... 
[03:18:47    INFO]  - will validate that the training was not a complete failure ... 
[03:18:47    INFO]  - training seems to have been successful! will move on ...
[03:18:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:18:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:18:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:18:51    INFO] ----------------------------------------------------------------------------------------------------
[03:18:51    INFO]  - will book (ANNZ_53_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:18:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:18:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:18:51    INFO]    - weights:            1
[03:18:51    INFO] ----------------------------------------------------------------------------------------------------
[03:18:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:18:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_53 ... 
[03:18:58    INFO]  - Will gen. input-parameter errors ...
[03:19:00    INFO]  - starting ANNZ::loadReaders() ... 
[03:19:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[03:20:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:20:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:20:51    INFO]  -----------------------------------------------------------------------------------------------------------
[03:20:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[03:21:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:21:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:21:18    INFO]  -----------------------------------------------------------------------------------------------------------
[03:21:18    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_53/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:21:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:21:19    INFO]  - will validate that the bias-correction actually improved the result ...
[03:21:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:21:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_53,
Warning in <Fit>: Fit data is empty 
[03:21:24    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_53/plots/
[03:21:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_53/plots output/SPEC_advanced22/regres/train/ANNZ_53/plots_biasCor_before
[03:21:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:21:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_53,
Warning in <Fit>: Fit data is empty 
[03:21:39    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_53/plots/
[03:21:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_53/plots output/SPEC_advanced22/regres/train/ANNZ_53/plots_biasCor_after
[03:21:50    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.1138] , after the bias-correction: [0.0495183 , 6.05583] --> will KEEP the correction !

(03:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m54[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:21 INFO) 
[03:21:53    INFO]  -----------------------------------------------------
[03:21:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:21:53    INFO]  -----------------------------------------------------------------------------------------------------------
[03:21:54    INFO]  - starting ANNZ::Init()  ... 
[03:21:55    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_54/saveOpt.txt ...
[03:22:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:22:00    INFO] ----------------------------------------------------------------------------------------------------
[03:22:00    INFO]  - will book (ANNZ_54) method(BDT) with options: :NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P
[03:22:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:22:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:22:00    INFO]      cuts (train):        ,
[03:22:00    INFO]      cuts (valid):       
[03:22:00    INFO]    - weights:            1
[03:22:00    INFO] ----------------------------------------------------------------------------------------------------
[03:22:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:22:37    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_54/ANNZ_54_weights/saveTrainOpt_ANNZ_54.txt ...
[03:22:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_54 ... 
[03:22:40    INFO]  - Will gen. input-parameter errors ...
[03:22:41    INFO]  - starting ANNZ::loadReaders() ... 
[03:22:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[03:30:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:30:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:30:31    INFO]  -----------------------------------------------------------------------------------------------------------
[03:30:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[03:32:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:32:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:32:26    INFO]  -----------------------------------------------------------------------------------------------------------
[03:32:26    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_54/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:32:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:32:28    INFO]  - will try to derive a bias correction ... 
[03:32:28    INFO]  - will validate that training produced an XML file for later ... 
[03:32:28    INFO]  - starting ANNZ::loadReaders() ... 
[03:32:31    INFO]  - will validate that the training was not a complete failure ... 
[03:32:31    INFO]  - training seems to have been successful! will move on ...
[03:32:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:32:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:32:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:32:37    INFO] ----------------------------------------------------------------------------------------------------
[03:32:37    INFO]  - will book (ANNZ_54_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:32:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:32:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:32:37    INFO]    - weights:            1
[03:32:37    INFO] ----------------------------------------------------------------------------------------------------
[03:32:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:32:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_54 ... 
[03:32:44    INFO]  - Will gen. input-parameter errors ...
[03:32:46    INFO]  - starting ANNZ::loadReaders() ... 
[03:32:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[03:40:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:40:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:40:04    INFO]  -----------------------------------------------------------------------------------------------------------
[03:40:05    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[03:41:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:41:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:41:52    INFO]  -----------------------------------------------------------------------------------------------------------
[03:41:52    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_54/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:41:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:41:53    INFO]  - will validate that the bias-correction actually improved the result ...
[03:41:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:41:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_54,
[03:41:59    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_54/plots/
[03:42:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_54/plots output/SPEC_advanced22/regres/train/ANNZ_54/plots_biasCor_before
[03:42:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[03:42:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_54,
[03:42:14    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_54/plots/
[03:42:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_54/plots output/SPEC_advanced22/regres/train/ANNZ_54/plots_biasCor_after
[03:42:25    INFO]  - Got original [KS-test,N_poiss]: [0.069572 , 6.56503] , after the bias-correction: [0.031369 , 5.59157] --> will KEEP the correction !

(03:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(03:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m55[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(03:42 INFO) 
[03:42:28    INFO]  -----------------------------------------------------
[03:42:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[03:42:28    INFO]  -----------------------------------------------------------------------------------------------------------
[03:42:29    INFO]  - starting ANNZ::Init()  ... 
[03:42:32    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_55/saveOpt.txt ...
[03:42:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[03:42:37    INFO] ----------------------------------------------------------------------------------------------------
[03:42:37    INFO]  - will book (ANNZ_55) method(BDT) with options: :NTrees=530:BoostType=AdaBoostR2:VarTransform=N,P
[03:42:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:42:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[03:42:37    INFO]      cuts (train):        ,
[03:42:37    INFO]      cuts (valid):       
[03:42:37    INFO]    - weights:            1
[03:42:37    INFO] ----------------------------------------------------------------------------------------------------
[03:42:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:43:26    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_55/ANNZ_55_weights/saveTrainOpt_ANNZ_55.txt ...
[03:43:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_55 ... 
[03:43:30    INFO]  - Will gen. input-parameter errors ...
[03:43:32    INFO]  - starting ANNZ::loadReaders() ... 
[03:43:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[03:55:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:55:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[03:55:43    INFO]  -----------------------------------------------------------------------------------------------------------
[03:55:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[03:58:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[03:58:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[03:58:44    INFO]  -----------------------------------------------------------------------------------------------------------
[03:58:44    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_55/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[03:58:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[03:58:46    INFO]  - will try to derive a bias correction ... 
[03:58:46    INFO]  - will validate that training produced an XML file for later ... 
[03:58:46    INFO]  - starting ANNZ::loadReaders() ... 
[03:58:49    INFO]  - will validate that the training was not a complete failure ... 
[03:58:50    INFO]  - training seems to have been successful! will move on ...
[03:58:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[03:58:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:58:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[03:58:58    INFO] ----------------------------------------------------------------------------------------------------
[03:58:58    INFO]  - will book (ANNZ_55_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[03:58:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[03:58:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[03:58:58    INFO]    - weights:            1
[03:58:58    INFO] ----------------------------------------------------------------------------------------------------
[03:58:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[03:59:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_55 ... 
[03:59:05    INFO]  - Will gen. input-parameter errors ...
[03:59:07    INFO]  - starting ANNZ::loadReaders() ... 
[03:59:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:13:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:13:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:13:56    INFO]  -----------------------------------------------------------------------------------------------------------
[04:13:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:16:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:16:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:16:56    INFO]  -----------------------------------------------------------------------------------------------------------
[04:16:56    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_55/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:16:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:16:58    INFO]  - will validate that the bias-correction actually improved the result ...
[04:16:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:16:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_55,
[04:17:03    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_55/plots/
[04:17:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_55/plots output/SPEC_advanced22/regres/train/ANNZ_55/plots_biasCor_before
[04:17:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:17:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_55,
[04:17:19    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_55/plots/
[04:17:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_55/plots output/SPEC_advanced22/regres/train/ANNZ_55/plots_biasCor_after
[04:17:30    INFO]  - Got original [KS-test,N_poiss]: [0.0700202 , 6.51708] , after the bias-correction: [0.0317051 , 5.55774] --> will KEEP the correction !

(04:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m56[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:17 INFO) 
[04:17:33    INFO]  -----------------------------------------------------
[04:17:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:17:33    INFO]  -----------------------------------------------------------------------------------------------------------
[04:17:34    INFO]  - starting ANNZ::Init()  ... 
[04:17:38    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_56/saveOpt.txt ...
[04:17:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:17:43    INFO] ----------------------------------------------------------------------------------------------------
[04:17:43    INFO]  - will book (ANNZ_56) method(BDT) with options: :NTrees=460:BoostType=AdaBoost:VarTransform=N,P
[04:17:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:17:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:17:43    INFO]      cuts (train):        ,
[04:17:43    INFO]      cuts (valid):       
[04:17:43    INFO]    - weights:            1
[04:17:43    INFO] ----------------------------------------------------------------------------------------------------
[04:17:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:18:07    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_56/ANNZ_56_weights/saveTrainOpt_ANNZ_56.txt ...
[04:18:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_56 ... 
[04:18:09    INFO]  - Will gen. input-parameter errors ...
[04:18:10    INFO]  - starting ANNZ::loadReaders() ... 
[04:18:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:20:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:20:58    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:20:58    INFO]  -----------------------------------------------------------------------------------------------------------
[04:20:58    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:21:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:21:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:21:39    INFO]  -----------------------------------------------------------------------------------------------------------
[04:21:39    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_56/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:21:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:21:40    INFO]  - will try to derive a bias correction ... 
[04:21:40    INFO]  - will validate that training produced an XML file for later ... 
[04:21:40    INFO]  - starting ANNZ::loadReaders() ... 
[04:21:41    INFO]  - will validate that the training was not a complete failure ... 
[04:21:41    INFO]  - training seems to have been successful! will move on ...
[04:21:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:21:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:21:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:21:45    INFO] ----------------------------------------------------------------------------------------------------
[04:21:45    INFO]  - will book (ANNZ_56_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:21:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:21:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:21:45    INFO]    - weights:            1
[04:21:45    INFO] ----------------------------------------------------------------------------------------------------
[04:21:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:21:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_56 ... 
[04:21:52    INFO]  - Will gen. input-parameter errors ...
[04:21:53    INFO]  - starting ANNZ::loadReaders() ... 
[04:21:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:24:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:24:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:24:39    INFO]  -----------------------------------------------------------------------------------------------------------
[04:24:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:25:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:25:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:25:19    INFO]  -----------------------------------------------------------------------------------------------------------
[04:25:19    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_56/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:25:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:25:20    INFO]  - will validate that the bias-correction actually improved the result ...
[04:25:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:25:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_56,
Warning in <Fit>: Fit data is empty 
[04:25:26    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_56/plots/
[04:25:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_56/plots output/SPEC_advanced22/regres/train/ANNZ_56/plots_biasCor_before
[04:25:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:25:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_56,
[04:25:41    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_56/plots/
[04:25:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_56/plots output/SPEC_advanced22/regres/train/ANNZ_56/plots_biasCor_after
[04:25:52    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40365] , after the bias-correction: [0.0442528 , 5.77607] --> will KEEP the correction !

(04:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m57[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:25 INFO) 
[04:25:55    INFO]  -----------------------------------------------------
[04:25:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:25:55    INFO]  -----------------------------------------------------------------------------------------------------------
[04:25:56    INFO]  - starting ANNZ::Init()  ... 
[04:25:57    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_57/saveOpt.txt ...
[04:26:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:26:02    INFO] ----------------------------------------------------------------------------------------------------
[04:26:02    INFO]  - will book (ANNZ_57) method(BDT) with options: :NTrees=540:BoostType=Bagging:VarTransform=N
[04:26:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:26:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:26:02    INFO]      cuts (train):        ,
[04:26:02    INFO]      cuts (valid):       
[04:26:02    INFO]    - weights:            1
[04:26:02    INFO] ----------------------------------------------------------------------------------------------------
[04:26:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:26:53    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_57/ANNZ_57_weights/saveTrainOpt_ANNZ_57.txt ...
[04:26:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_57 ... 
[04:26:58    INFO]  - Will gen. input-parameter errors ...
[04:27:00    INFO]  - starting ANNZ::loadReaders() ... 
[04:27:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:30:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:30:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:30:23    INFO]  -----------------------------------------------------------------------------------------------------------
[04:30:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:31:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:31:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:31:11    INFO]  -----------------------------------------------------------------------------------------------------------
[04:31:11    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_57/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:31:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:31:14    INFO]  - will try to derive a bias correction ... 
[04:31:14    INFO]  - will validate that training produced an XML file for later ... 
[04:31:14    INFO]  - starting ANNZ::loadReaders() ... 
[04:31:19    INFO]  - will validate that the training was not a complete failure ... 
[04:31:19    INFO]  - training seems to have been successful! will move on ...
[04:31:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:31:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:31:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:31:25    INFO] ----------------------------------------------------------------------------------------------------
[04:31:25    INFO]  - will book (ANNZ_57_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:31:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:31:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:31:25    INFO]    - weights:            1
[04:31:25    INFO] ----------------------------------------------------------------------------------------------------
[04:31:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:31:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_57 ... 
[04:31:34    INFO]  - Will gen. input-parameter errors ...
[04:31:36    INFO]  - starting ANNZ::loadReaders() ... 
[04:31:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:35:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:35:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:35:18    INFO]  -----------------------------------------------------------------------------------------------------------
[04:35:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:36:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:36:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:36:10    INFO]  -----------------------------------------------------------------------------------------------------------
[04:36:10    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_57/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:36:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:36:12    INFO]  - will validate that the bias-correction actually improved the result ...
[04:36:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:36:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_57,
[04:36:18    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_57/plots/
[04:36:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_57/plots output/SPEC_advanced22/regres/train/ANNZ_57/plots_biasCor_before
[04:36:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:36:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_57,
[04:36:33    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_57/plots/
[04:36:44        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_57/plots output/SPEC_advanced22/regres/train/ANNZ_57/plots_biasCor_after
[04:36:44    INFO]  - Got original [KS-test,N_poiss]: [0.0845844 , 6.74033] , after the bias-correction: [0.0500785 , 5.6416] --> will KEEP the correction !

(04:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m58[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:36 INFO) 
[04:36:49    INFO]  -----------------------------------------------------
[04:36:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:36:49    INFO]  -----------------------------------------------------------------------------------------------------------
[04:36:49    INFO]  - starting ANNZ::Init()  ... 
[04:36:50    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_58/saveOpt.txt ...
[04:36:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:36:55    INFO] ----------------------------------------------------------------------------------------------------
[04:36:55    INFO]  - will book (ANNZ_58) method(BDT) with options: :NTrees=310:BoostType=AdaBoost:VarTransform=N
[04:36:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:36:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:36:55    INFO]      cuts (train):        ,
[04:36:55    INFO]      cuts (valid):       
[04:36:55    INFO]    - weights:            1
[04:36:55    INFO] ----------------------------------------------------------------------------------------------------
[04:36:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:37:13    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_58/ANNZ_58_weights/saveTrainOpt_ANNZ_58.txt ...
[04:37:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_58 ... 
[04:37:15    INFO]  - Will gen. input-parameter errors ...
[04:37:16    INFO]  - starting ANNZ::loadReaders() ... 
[04:37:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:38:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:38:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:38:36    INFO]  -----------------------------------------------------------------------------------------------------------
[04:38:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:38:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:38:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:38:55    INFO]  -----------------------------------------------------------------------------------------------------------
[04:38:55    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_58/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:38:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:38:56    INFO]  - will try to derive a bias correction ... 
[04:38:56    INFO]  - will validate that training produced an XML file for later ... 
[04:38:56    INFO]  - starting ANNZ::loadReaders() ... 
[04:38:57    INFO]  - will validate that the training was not a complete failure ... 
[04:38:57    INFO]  - training seems to have been successful! will move on ...
[04:38:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:39:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:39:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:39:09    INFO] ----------------------------------------------------------------------------------------------------
[04:39:09    INFO]  - will book (ANNZ_58_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:39:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:39:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:39:09    INFO]    - weights:            1
[04:39:09    INFO] ----------------------------------------------------------------------------------------------------
[04:39:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:39:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_58 ... 
[04:39:15    INFO]  - Will gen. input-parameter errors ...
[04:39:18    INFO]  - starting ANNZ::loadReaders() ... 
[04:39:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:41:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:41:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:41:06    INFO]  -----------------------------------------------------------------------------------------------------------
[04:41:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:41:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:41:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:41:31    INFO]  -----------------------------------------------------------------------------------------------------------
[04:41:31    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_58/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:41:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:41:32    INFO]  - will validate that the bias-correction actually improved the result ...
[04:41:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:41:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_58,
Warning in <Fit>: Fit data is empty 
[04:41:37    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_58/plots/
[04:41:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_58/plots output/SPEC_advanced22/regres/train/ANNZ_58/plots_biasCor_before
[04:41:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:41:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_58,
Warning in <Fit>: Fit data is empty 
[04:41:53    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_58/plots/
[04:42:04        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_58/plots output/SPEC_advanced22/regres/train/ANNZ_58/plots_biasCor_after
[04:42:04    INFO]  - Got original [KS-test,N_poiss]: [0.0821196 , 6.1111] , after the bias-correction: [0.0492942 , 6.06745] --> will KEEP the correction !

(04:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m59[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:42 INFO) 
[04:42:07    INFO]  -----------------------------------------------------
[04:42:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:42:07    INFO]  -----------------------------------------------------------------------------------------------------------
[04:42:07    INFO]  - starting ANNZ::Init()  ... 
[04:42:08    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_59/saveOpt.txt ...
[04:42:13    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:42:14    INFO] ----------------------------------------------------------------------------------------------------
[04:42:14    INFO]  - will book (ANNZ_59) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N
[04:42:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:42:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:42:14    INFO]      cuts (train):        ,
[04:42:14    INFO]      cuts (valid):       
[04:42:14    INFO]    - weights:            1
[04:42:14    INFO] ----------------------------------------------------------------------------------------------------
[04:42:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:42:58    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_59/ANNZ_59_weights/saveTrainOpt_ANNZ_59.txt ...
[04:43:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_59 ... 
[04:43:02    INFO]  - Will gen. input-parameter errors ...
[04:43:04    INFO]  - starting ANNZ::loadReaders() ... 
[04:43:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:45:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:45:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:45:52    INFO]  -----------------------------------------------------------------------------------------------------------
[04:45:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:46:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:46:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:46:31    INFO]  -----------------------------------------------------------------------------------------------------------
[04:46:32    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_59/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:46:33    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:46:33    INFO]  - will try to derive a bias correction ... 
[04:46:33    INFO]  - will validate that training produced an XML file for later ... 
[04:46:33    INFO]  - starting ANNZ::loadReaders() ... 
[04:46:38    INFO]  - will validate that the training was not a complete failure ... 
[04:46:38    INFO]  - training seems to have been successful! will move on ...
[04:46:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:46:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:46:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:46:45    INFO] ----------------------------------------------------------------------------------------------------
[04:46:45    INFO]  - will book (ANNZ_59_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:46:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:46:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:46:45    INFO]    - weights:            1
[04:46:45    INFO] ----------------------------------------------------------------------------------------------------
[04:46:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:46:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_59 ... 
[04:46:53    INFO]  - Will gen. input-parameter errors ...
[04:46:55    INFO]  - starting ANNZ::loadReaders() ... 
[04:47:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:50:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:50:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:50:00    INFO]  -----------------------------------------------------------------------------------------------------------
[04:50:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:50:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:50:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:50:44    INFO]  -----------------------------------------------------------------------------------------------------------
[04:50:44    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_59/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:50:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:50:46    INFO]  - will validate that the bias-correction actually improved the result ...
[04:50:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:50:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_59,
[04:50:51    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_59/plots/
[04:51:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_59/plots output/SPEC_advanced22/regres/train/ANNZ_59/plots_biasCor_before
[04:51:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:51:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_59,
[04:51:07    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_59/plots/
[04:51:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_59/plots output/SPEC_advanced22/regres/train/ANNZ_59/plots_biasCor_after
[04:51:17    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.69238] , after the bias-correction: [0.0466055 , 5.74079] --> will KEEP the correction !

(04:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m60[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:51 INFO) 
[04:51:22    INFO]  -----------------------------------------------------
[04:51:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:51:22    INFO]  -----------------------------------------------------------------------------------------------------------
[04:51:22    INFO]  - starting ANNZ::Init()  ... 
[04:51:23    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_60/saveOpt.txt ...
[04:51:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:51:28    INFO] ----------------------------------------------------------------------------------------------------
[04:51:28    INFO]  - will book (ANNZ_60) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N
[04:51:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:51:28    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:51:28    INFO]      cuts (train):        ,
[04:51:28    INFO]      cuts (valid):       
[04:51:28    INFO]    - weights:            1
[04:51:28    INFO] ----------------------------------------------------------------------------------------------------
[04:51:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:52:00    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_60/ANNZ_60_weights/saveTrainOpt_ANNZ_60.txt ...
[04:52:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_60 ... 
[04:52:03    INFO]  - Will gen. input-parameter errors ...
[04:52:05    INFO]  - starting ANNZ::loadReaders() ... 
[04:52:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:54:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:54:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:54:04    INFO]  -----------------------------------------------------------------------------------------------------------
[04:54:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:54:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:54:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:54:32    INFO]  -----------------------------------------------------------------------------------------------------------
[04:54:32    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_60/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:54:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:54:34    INFO]  - will try to derive a bias correction ... 
[04:54:34    INFO]  - will validate that training produced an XML file for later ... 
[04:54:34    INFO]  - starting ANNZ::loadReaders() ... 
[04:54:37    INFO]  - will validate that the training was not a complete failure ... 
[04:54:37    INFO]  - training seems to have been successful! will move on ...
[04:54:37    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[04:54:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:54:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[04:54:42    INFO] ----------------------------------------------------------------------------------------------------
[04:54:42    INFO]  - will book (ANNZ_60_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[04:54:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:54:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[04:54:42    INFO]    - weights:            1
[04:54:42    INFO] ----------------------------------------------------------------------------------------------------
[04:54:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:54:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_60 ... 
[04:54:50    INFO]  - Will gen. input-parameter errors ...
[04:54:51    INFO]  - starting ANNZ::loadReaders() ... 
[04:54:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[04:56:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:56:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[04:56:55    INFO]  -----------------------------------------------------------------------------------------------------------
[04:56:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[04:57:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[04:57:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[04:57:24    INFO]  -----------------------------------------------------------------------------------------------------------
[04:57:24    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_60/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[04:57:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[04:57:25    INFO]  - will validate that the bias-correction actually improved the result ...
[04:57:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:57:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_60,
[04:57:30    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_60/plots/
[04:57:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_60/plots output/SPEC_advanced22/regres/train/ANNZ_60/plots_biasCor_before
[04:57:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[04:57:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_60,
[04:57:46    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_60/plots/
[04:57:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_60/plots output/SPEC_advanced22/regres/train/ANNZ_60/plots_biasCor_after
[04:57:57    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.67735] , after the bias-correction: [0.0459332 , 5.6142] --> will KEEP the correction !

(04:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(04:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m61[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(04:58 INFO) 
[04:58:01    INFO]  -----------------------------------------------------
[04:58:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[04:58:01    INFO]  -----------------------------------------------------------------------------------------------------------
[04:58:01    INFO]  - starting ANNZ::Init()  ... 
[04:58:02    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_61/saveOpt.txt ...
[04:58:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[04:58:07    INFO] ----------------------------------------------------------------------------------------------------
[04:58:07    INFO]  - will book (ANNZ_61) method(BDT) with options: :NTrees=310:BoostType=Bagging:VarTransform=N
[04:58:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[04:58:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[04:58:07    INFO]      cuts (train):        ,
[04:58:07    INFO]      cuts (valid):       
[04:58:07    INFO]    - weights:            1
[04:58:07    INFO] ----------------------------------------------------------------------------------------------------
[04:58:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[04:58:36    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_61/ANNZ_61_weights/saveTrainOpt_ANNZ_61.txt ...
[04:58:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_61 ... 
[04:58:39    INFO]  - Will gen. input-parameter errors ...
[04:58:41    INFO]  - starting ANNZ::loadReaders() ... 
[04:58:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[05:00:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:00:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:00:29    INFO]  -----------------------------------------------------------------------------------------------------------
[05:00:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[05:00:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:00:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:00:55    INFO]  -----------------------------------------------------------------------------------------------------------
[05:00:55    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_61/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:00:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:00:56    INFO]  - will try to derive a bias correction ... 
[05:00:56    INFO]  - will validate that training produced an XML file for later ... 
[05:00:56    INFO]  - starting ANNZ::loadReaders() ... 
[05:00:59    INFO]  - will validate that the training was not a complete failure ... 
[05:00:59    INFO]  - training seems to have been successful! will move on ...
[05:00:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:01:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:01:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:01:04    INFO] ----------------------------------------------------------------------------------------------------
[05:01:04    INFO]  - will book (ANNZ_61_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:01:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:01:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:01:04    INFO]    - weights:            1
[05:01:04    INFO] ----------------------------------------------------------------------------------------------------
[05:01:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:01:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_61 ... 
[05:01:11    INFO]  - Will gen. input-parameter errors ...
[05:01:13    INFO]  - starting ANNZ::loadReaders() ... 
[05:01:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[05:03:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:03:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:03:04    INFO]  -----------------------------------------------------------------------------------------------------------
[05:03:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[05:03:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:03:31    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:03:31    INFO]  -----------------------------------------------------------------------------------------------------------
[05:03:31    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_61/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:03:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:03:32    INFO]  - will validate that the bias-correction actually improved the result ...
[05:03:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:03:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_61,
[05:03:37    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_61/plots/
[05:03:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_61/plots output/SPEC_advanced22/regres/train/ANNZ_61/plots_biasCor_before
[05:03:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:03:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_61,
[05:03:53    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_61/plots/
[05:04:04        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_61/plots output/SPEC_advanced22/regres/train/ANNZ_61/plots_biasCor_after
[05:04:04    INFO]  - Got original [KS-test,N_poiss]: [0.0840242 , 6.64743] , after the bias-correction: [0.0479499 , 5.6192] --> will KEEP the correction !

(05:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m62[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:04 INFO) 
[05:04:07    INFO]  -----------------------------------------------------
[05:04:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:04:07    INFO]  -----------------------------------------------------------------------------------------------------------
[05:04:08    INFO]  - starting ANNZ::Init()  ... 
[05:04:09    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_62/saveOpt.txt ...
[05:04:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:04:14    INFO] ----------------------------------------------------------------------------------------------------
[05:04:14    INFO]  - will book (ANNZ_62) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N
[05:04:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:04:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:04:14    INFO]      cuts (train):        ,
[05:04:14    INFO]      cuts (valid):       
[05:04:14    INFO]    - weights:            1
[05:04:14    INFO] ----------------------------------------------------------------------------------------------------
[05:04:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:04:41    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_62/ANNZ_62_weights/saveTrainOpt_ANNZ_62.txt ...
[05:04:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_62 ... 
[05:04:43    INFO]  - Will gen. input-parameter errors ...
[05:04:45    INFO]  - starting ANNZ::loadReaders() ... 
[05:04:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[05:06:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:06:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:06:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:06:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[05:07:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:07:20    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:07:20    INFO]  -----------------------------------------------------------------------------------------------------------
[05:07:20    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_62/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:07:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:07:21    INFO]  - will try to derive a bias correction ... 
[05:07:21    INFO]  - will validate that training produced an XML file for later ... 
[05:07:21    INFO]  - starting ANNZ::loadReaders() ... 
[05:07:23    INFO]  - will validate that the training was not a complete failure ... 
[05:07:23    INFO]  - training seems to have been successful! will move on ...
[05:07:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:07:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:07:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:07:27    INFO] ----------------------------------------------------------------------------------------------------
[05:07:27    INFO]  - will book (ANNZ_62_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:07:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:07:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:07:27    INFO]    - weights:            1
[05:07:27    INFO] ----------------------------------------------------------------------------------------------------
[05:07:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:07:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_62 ... 
[05:07:34    INFO]  - Will gen. input-parameter errors ...
[05:07:36    INFO]  - starting ANNZ::loadReaders() ... 
[05:07:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[05:09:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:09:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:09:34    INFO]  -----------------------------------------------------------------------------------------------------------
[05:09:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[05:10:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:10:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:10:02    INFO]  -----------------------------------------------------------------------------------------------------------
[05:10:02    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_62/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:10:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:10:03    INFO]  - will validate that the bias-correction actually improved the result ...
[05:10:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:10:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_62,
Warning in <Fit>: Fit data is empty 
[05:10:08    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_62/plots/
[05:10:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_62/plots output/SPEC_advanced22/regres/train/ANNZ_62/plots_biasCor_before
[05:10:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:10:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_62,
Warning in <Fit>: Fit data is empty 
[05:10:24    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_62/plots/
[05:10:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_62/plots output/SPEC_advanced22/regres/train/ANNZ_62/plots_biasCor_after
[05:10:35    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12581] , after the bias-correction: [0.0494062 , 5.95035] --> will KEEP the correction !

(05:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m63[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:10 INFO) 
[05:10:38    INFO]  -----------------------------------------------------
[05:10:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:10:38    INFO]  -----------------------------------------------------------------------------------------------------------
[05:10:39    INFO]  - starting ANNZ::Init()  ... 
[05:10:40    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_63/saveOpt.txt ...
[05:10:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:10:45    INFO] ----------------------------------------------------------------------------------------------------
[05:10:45    INFO]  - will book (ANNZ_63) method(BDT) with options: :NTrees=330:BoostType=AdaBoost:VarTransform=N
[05:10:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:10:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:10:45    INFO]      cuts (train):        ,
[05:10:45    INFO]      cuts (valid):       
[05:10:45    INFO]    - weights:            1
[05:10:45    INFO] ----------------------------------------------------------------------------------------------------
[05:10:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:11:04    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_63/ANNZ_63_weights/saveTrainOpt_ANNZ_63.txt ...
[05:11:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_63 ... 
[05:11:06    INFO]  - Will gen. input-parameter errors ...
[05:11:07    INFO]  - starting ANNZ::loadReaders() ... 
[05:11:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[05:12:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:12:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:12:31    INFO]  -----------------------------------------------------------------------------------------------------------
[05:12:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[05:12:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:12:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:12:51    INFO]  -----------------------------------------------------------------------------------------------------------
[05:12:51    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_63/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:12:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:12:52    INFO]  - will try to derive a bias correction ... 
[05:12:52    INFO]  - will validate that training produced an XML file for later ... 
[05:12:52    INFO]  - starting ANNZ::loadReaders() ... 
[05:12:54    INFO]  - will validate that the training was not a complete failure ... 
[05:12:54    INFO]  - training seems to have been successful! will move on ...
[05:12:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:12:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:12:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:12:58    INFO] ----------------------------------------------------------------------------------------------------
[05:12:58    INFO]  - will book (ANNZ_63_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:12:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:12:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:12:58    INFO]    - weights:            1
[05:12:58    INFO] ----------------------------------------------------------------------------------------------------
[05:12:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:13:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_63 ... 
[05:13:04    INFO]  - Will gen. input-parameter errors ...
[05:13:06    INFO]  - starting ANNZ::loadReaders() ... 
[05:13:10    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[05:14:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:14:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:14:54    INFO]  -----------------------------------------------------------------------------------------------------------
[05:14:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[05:15:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:15:20    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:15:20    INFO]  -----------------------------------------------------------------------------------------------------------
[05:15:20    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_63/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:15:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:15:21    INFO]  - will validate that the bias-correction actually improved the result ...
[05:15:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:15:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_63,
Warning in <Fit>: Fit data is empty 
[05:15:26    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_63/plots/
[05:15:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_63/plots output/SPEC_advanced22/regres/train/ANNZ_63/plots_biasCor_before
[05:15:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:15:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_63,
Warning in <Fit>: Fit data is empty 
[05:15:41    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_63/plots/
[05:15:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_63/plots output/SPEC_advanced22/regres/train/ANNZ_63/plots_biasCor_after
[05:15:52    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11135] , after the bias-correction: [0.0496303 , 6.0437] --> will KEEP the correction !

(05:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m64[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:15 INFO) 
[05:15:55    INFO]  -----------------------------------------------------
[05:15:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:15:55    INFO]  -----------------------------------------------------------------------------------------------------------
[05:15:56    INFO]  - starting ANNZ::Init()  ... 
[05:15:57    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_64/saveOpt.txt ...
[05:16:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:16:02    INFO] ----------------------------------------------------------------------------------------------------
[05:16:02    INFO]  - will book (ANNZ_64) method(BDT) with options: :NTrees=490:BoostType=AdaBoostR2:VarTransform=N
[05:16:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:16:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:16:02    INFO]      cuts (train):        ,
[05:16:02    INFO]      cuts (valid):       
[05:16:02    INFO]    - weights:            1
[05:16:02    INFO] ----------------------------------------------------------------------------------------------------
[05:16:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:16:43    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_64/ANNZ_64_weights/saveTrainOpt_ANNZ_64.txt ...
[05:16:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_64 ... 
[05:16:46    INFO]  - Will gen. input-parameter errors ...
[05:16:48    INFO]  - starting ANNZ::loadReaders() ... 
[05:16:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[05:26:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:26:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:26:00    INFO]  -----------------------------------------------------------------------------------------------------------
[05:26:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[05:28:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:28:16    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:28:16    INFO]  -----------------------------------------------------------------------------------------------------------
[05:28:16    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_64/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:28:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:28:17    INFO]  - will try to derive a bias correction ... 
[05:28:17    INFO]  - will validate that training produced an XML file for later ... 
[05:28:17    INFO]  - starting ANNZ::loadReaders() ... 
[05:28:20    INFO]  - will validate that the training was not a complete failure ... 
[05:28:21    INFO]  - training seems to have been successful! will move on ...
[05:28:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[05:28:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:28:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[05:28:27    INFO] ----------------------------------------------------------------------------------------------------
[05:28:27    INFO]  - will book (ANNZ_64_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[05:28:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:28:27    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[05:28:27    INFO]    - weights:            1
[05:28:27    INFO] ----------------------------------------------------------------------------------------------------
[05:28:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[05:28:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_64 ... 
[05:28:34    INFO]  - Will gen. input-parameter errors ...
[05:28:36    INFO]  - starting ANNZ::loadReaders() ... 
[05:28:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[05:37:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:37:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[05:37:07    INFO]  -----------------------------------------------------------------------------------------------------------
[05:37:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[05:39:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[05:39:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[05:39:13    INFO]  -----------------------------------------------------------------------------------------------------------
[05:39:13    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_64/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[05:39:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[05:39:14    INFO]  - will validate that the bias-correction actually improved the result ...
[05:39:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:39:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_64,
Warning in <Fit>: Fit data is empty 
[05:39:19    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_64/plots/
[05:39:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_64/plots output/SPEC_advanced22/regres/train/ANNZ_64/plots_biasCor_before
[05:39:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[05:39:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_64,
Warning in <Fit>: Fit data is empty 
[05:39:36    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_64/plots/
[05:39:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_64/plots output/SPEC_advanced22/regres/train/ANNZ_64/plots_biasCor_after
[05:39:47    INFO]  - Got original [KS-test,N_poiss]: [0.0628501 , 6.49305] , after the bias-correction: [0.034618 , 5.67832] --> will KEEP the correction !

(05:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(05:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m65[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(05:39 INFO) 
[05:39:50    INFO]  -----------------------------------------------------
[05:39:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[05:39:50    INFO]  -----------------------------------------------------------------------------------------------------------
[05:39:51    INFO]  - starting ANNZ::Init()  ... 
[05:39:55    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_65/saveOpt.txt ...
[05:40:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[05:40:00    INFO] ----------------------------------------------------------------------------------------------------
[05:40:00    INFO]  - will book (ANNZ_65) method(BDT) with options: :NTrees=250:BoostType=Bagging:VarTransform=P
[05:40:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[05:40:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[05:40:00    INFO]      cuts (train):        ,
[05:40:00    INFO]      cuts (valid):       
[05:40:00    INFO]    - weights:            1
[05:40:00    INFO] ----------------------------------------------------------------------------------------------------
[05:40:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.101365
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(05:40 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(05:40 CRITICAL) [41;37;1mWill terminate !!!![0m
(08:54 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:54 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:54 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:54 INFO) [40;37;1m - 30/03/19 08:54:41 - starting ANNZ[0m
(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:41    INFO]  -----------------------------------------------------
[08:54:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:41    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:45    INFO]  - starting inputToSplitTree() ... 
[08:54:45    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[08:54:45    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[08:54:45    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[08:54:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:54:46    INFO]  -- ANNZ_tree .......................................... 0  index
[08:54:46    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[08:54:46    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[08:54:46    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[08:54:46    INFO]  -- ANNZ_tree .......................................... 0  nTest
[08:54:46    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[08:54:46    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:46    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[08:54:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:54:46    INFO]  -- ANNZ_tree .......................................... 0  index
[08:54:46    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[08:54:46    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[08:54:46    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[08:54:46    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[08:54:46    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[08:54:46    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:47    INFO]  - Writing to plotting directory output/SPEC_advanced22/rootIn/plots/
[08:54:48    INFO]  - Writing to plotting directory output/SPEC_advanced22/rootIn/plots/

(08:54 INFO) [40;37;1m - 30/03/19 08:54:49 - finished running ANNZ ![0m
(08:54 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:54 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:54 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:54 INFO) [40;37;1m - 30/03/19 08:54:49 - starting ANNZ[0m
(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:49    INFO]  -----------------------------------------------------
[08:54:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:49    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:50    INFO]  - starting ANNZ::Init()  ... 
[08:54:50    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced22/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:54:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:50    INFO]  -----------------------------------------------------
[08:54:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:50    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:51    INFO]  - starting ANNZ::Init()  ... 
[08:54:51    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced22/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:54:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:51    INFO]  -----------------------------------------------------
[08:54:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:51    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:52    INFO]  - starting ANNZ::Init()  ... 
[08:54:52    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced22/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[08:54:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:53    INFO]  -----------------------------------------------------
[08:54:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:53    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:53    INFO]  - starting ANNZ::Init()  ... 
[08:54:54    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced22/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[08:54:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:54    INFO]  -----------------------------------------------------
[08:54:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:54    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:54    INFO]  - starting ANNZ::Init()  ... 
[08:54:55    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced22/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[08:54:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:56    INFO]  -----------------------------------------------------
[08:54:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:56    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:56    INFO]  - starting ANNZ::Init()  ... 
[08:54:56    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced22/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[08:54:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:56    INFO]  -----------------------------------------------------
[08:54:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:56    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:57    INFO]  - starting ANNZ::Init()  ... 
[08:54:58    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced22/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[08:54:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:58    INFO]  -----------------------------------------------------
[08:54:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:58    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:58    INFO]  - starting ANNZ::Init()  ... 
[08:54:59    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced22/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[08:54:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:59    INFO]  -----------------------------------------------------
[08:54:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:59    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:00    INFO]  - starting ANNZ::Init()  ... 
[08:55:00    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced22/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[08:55:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:00    INFO]  -----------------------------------------------------
[08:55:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:00    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:01    INFO]  - starting ANNZ::Init()  ... 
[08:55:01    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced22/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[08:55:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:01    INFO]  -----------------------------------------------------
[08:55:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:01    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:02    INFO]  - starting ANNZ::Init()  ... 
[08:55:02    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced22/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[08:55:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:02    INFO]  -----------------------------------------------------
[08:55:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:02    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:03    INFO]  - starting ANNZ::Init()  ... 
[08:55:04    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced22/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[08:55:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:04    INFO]  -----------------------------------------------------
[08:55:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:04    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:05    INFO]  - starting ANNZ::Init()  ... 
[08:55:05    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced22/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[08:55:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:05    INFO]  -----------------------------------------------------
[08:55:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:05    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:06    INFO]  - starting ANNZ::Init()  ... 
[08:55:06    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced22/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[08:55:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:07    INFO]  -----------------------------------------------------
[08:55:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:07    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:07    INFO]  - starting ANNZ::Init()  ... 
[08:55:08    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced22/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[08:55:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:08    INFO]  -----------------------------------------------------
[08:55:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:08    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:09    INFO]  - starting ANNZ::Init()  ... 
[08:55:09    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced22/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[08:55:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:09    INFO]  -----------------------------------------------------
[08:55:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:09    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:10    INFO]  - starting ANNZ::Init()  ... 
[08:55:11    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced22/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[08:55:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:11    INFO]  -----------------------------------------------------
[08:55:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:11    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:11    INFO]  - starting ANNZ::Init()  ... 
[08:55:11    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced22/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[08:55:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:11    INFO]  -----------------------------------------------------
[08:55:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:11    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:12    INFO]  - starting ANNZ::Init()  ... 
[08:55:13    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced22/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[08:55:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:13    INFO]  -----------------------------------------------------
[08:55:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:13    INFO]  - starting ANNZ::Init()  ... 
[08:55:14    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced22/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[08:55:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:14    INFO]  -----------------------------------------------------
[08:55:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:14    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:15    INFO]  - starting ANNZ::Init()  ... 
[08:55:16    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced22/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[08:55:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:16    INFO]  -----------------------------------------------------
[08:55:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:16    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:16    INFO]  - starting ANNZ::Init()  ... 
[08:55:17    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced22/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[08:55:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:17    INFO]  -----------------------------------------------------
[08:55:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:17    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:17    INFO]  - starting ANNZ::Init()  ... 
[08:55:18    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced22/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[08:55:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:18    INFO]  -----------------------------------------------------
[08:55:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:18    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:19    INFO]  - starting ANNZ::Init()  ... 
[08:55:19    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced22/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[08:55:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:19    INFO]  -----------------------------------------------------
[08:55:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:19    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:20    INFO]  - starting ANNZ::Init()  ... 
[08:55:20    INFO]  - found trained "ANNZ_24" (./output/SPEC_advanced22/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[08:55:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:20    INFO]  -----------------------------------------------------
[08:55:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:20    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:21    INFO]  - starting ANNZ::Init()  ... 
[08:55:21    INFO]  - found trained "ANNZ_25" (./output/SPEC_advanced22/regres/train/ANNZ_25/ANNZ_25_weights/randomReg_ANNZ_25.weights.xml)
[08:55:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=940:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:21    INFO]  -----------------------------------------------------
[08:55:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:21    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:21    INFO]  - starting ANNZ::Init()  ... 
[08:55:22    INFO]  - found trained "ANNZ_26" (./output/SPEC_advanced22/regres/train/ANNZ_26/ANNZ_26_weights/randomReg_ANNZ_26.weights.xml)
[08:55:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:22    INFO]  -----------------------------------------------------
[08:55:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:22    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:23    INFO]  - starting ANNZ::Init()  ... 
[08:55:24    INFO]  - found trained "ANNZ_27" (./output/SPEC_advanced22/regres/train/ANNZ_27/ANNZ_27_weights/randomReg_ANNZ_27.weights.xml)
[08:55:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:24    INFO]  -----------------------------------------------------
[08:55:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:24    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:25    INFO]  - starting ANNZ::Init()  ... 
[08:55:25    INFO]  - found trained "ANNZ_28" (./output/SPEC_advanced22/regres/train/ANNZ_28/ANNZ_28_weights/randomReg_ANNZ_28.weights.xml)
[08:55:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:25    INFO]  -----------------------------------------------------
[08:55:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:25    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:26    INFO]  - starting ANNZ::Init()  ... 
[08:55:26    INFO]  - found trained "ANNZ_29" (./output/SPEC_advanced22/regres/train/ANNZ_29/ANNZ_29_weights/randomReg_ANNZ_29.weights.xml)
[08:55:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:26    INFO]  -----------------------------------------------------
[08:55:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:26    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:27    INFO]  - starting ANNZ::Init()  ... 
[08:55:27    INFO]  - found trained "ANNZ_30" (./output/SPEC_advanced22/regres/train/ANNZ_30/ANNZ_30_weights/randomReg_ANNZ_30.weights.xml)
[08:55:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:27    INFO]  -----------------------------------------------------
[08:55:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:27    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:28    INFO]  - starting ANNZ::Init()  ... 
[08:55:28    INFO]  - found trained "ANNZ_31" (./output/SPEC_advanced22/regres/train/ANNZ_31/ANNZ_31_weights/randomReg_ANNZ_31.weights.xml)
[08:55:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:28    INFO]  -----------------------------------------------------
[08:55:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:28    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:29    INFO]  - starting ANNZ::Init()  ... 
[08:55:29    INFO]  - found trained "ANNZ_32" (./output/SPEC_advanced22/regres/train/ANNZ_32/ANNZ_32_weights/randomReg_ANNZ_32.weights.xml)
[08:55:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:29    INFO]  -----------------------------------------------------
[08:55:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:29    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:30    INFO]  - starting ANNZ::Init()  ... 
[08:55:31    INFO]  - found trained "ANNZ_33" (./output/SPEC_advanced22/regres/train/ANNZ_33/ANNZ_33_weights/randomReg_ANNZ_33.weights.xml)
[08:55:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:31    INFO]  -----------------------------------------------------
[08:55:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:31    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:31    INFO]  - starting ANNZ::Init()  ... 
[08:55:32    INFO]  - found trained "ANNZ_34" (./output/SPEC_advanced22/regres/train/ANNZ_34/ANNZ_34_weights/randomReg_ANNZ_34.weights.xml)
[08:55:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:32    INFO]  -----------------------------------------------------
[08:55:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:32    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:33    INFO]  - starting ANNZ::Init()  ... 
[08:55:33    INFO]  - found trained "ANNZ_35" (./output/SPEC_advanced22/regres/train/ANNZ_35/ANNZ_35_weights/randomReg_ANNZ_35.weights.xml)
[08:55:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:33    INFO]  -----------------------------------------------------
[08:55:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:33    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:34    INFO]  - starting ANNZ::Init()  ... 
[08:55:34    INFO]  - found trained "ANNZ_36" (./output/SPEC_advanced22/regres/train/ANNZ_36/ANNZ_36_weights/randomReg_ANNZ_36.weights.xml)
[08:55:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:34    INFO]  -----------------------------------------------------
[08:55:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:34    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:35    INFO]  - starting ANNZ::Init()  ... 
[08:55:35    INFO]  - found trained "ANNZ_37" (./output/SPEC_advanced22/regres/train/ANNZ_37/ANNZ_37_weights/randomReg_ANNZ_37.weights.xml)
[08:55:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:35    INFO]  -----------------------------------------------------
[08:55:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:35    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:36    INFO]  - starting ANNZ::Init()  ... 
[08:55:37    INFO]  - found trained "ANNZ_38" (./output/SPEC_advanced22/regres/train/ANNZ_38/ANNZ_38_weights/randomReg_ANNZ_38.weights.xml)
[08:55:37    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:37    INFO]  -----------------------------------------------------
[08:55:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:37    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:37    INFO]  - starting ANNZ::Init()  ... 
[08:55:38    INFO]  - found trained "ANNZ_39" (./output/SPEC_advanced22/regres/train/ANNZ_39/ANNZ_39_weights/randomReg_ANNZ_39.weights.xml)
[08:55:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:38    INFO]  -----------------------------------------------------
[08:55:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:38    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:39    INFO]  - starting ANNZ::Init()  ... 
[08:55:39    INFO]  - found trained "ANNZ_40" (./output/SPEC_advanced22/regres/train/ANNZ_40/ANNZ_40_weights/randomReg_ANNZ_40.weights.xml)
[08:55:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:39    INFO]  -----------------------------------------------------
[08:55:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:39    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:40    INFO]  - starting ANNZ::Init()  ... 
[08:55:40    INFO]  - found trained "ANNZ_41" (./output/SPEC_advanced22/regres/train/ANNZ_41/ANNZ_41_weights/randomReg_ANNZ_41.weights.xml)
[08:55:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:40    INFO]  -----------------------------------------------------
[08:55:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:40    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:41    INFO]  - starting ANNZ::Init()  ... 
[08:55:41    INFO]  - found trained "ANNZ_42" (./output/SPEC_advanced22/regres/train/ANNZ_42/ANNZ_42_weights/randomReg_ANNZ_42.weights.xml)
[08:55:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:41    INFO]  -----------------------------------------------------
[08:55:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:41    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:42    INFO]  - starting ANNZ::Init()  ... 
[08:55:42    INFO]  - found trained "ANNZ_43" (./output/SPEC_advanced22/regres/train/ANNZ_43/ANNZ_43_weights/randomReg_ANNZ_43.weights.xml)
[08:55:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:42    INFO]  -----------------------------------------------------
[08:55:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:42    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:42    INFO]  - starting ANNZ::Init()  ... 
[08:55:43    INFO]  - found trained "ANNZ_44" (./output/SPEC_advanced22/regres/train/ANNZ_44/ANNZ_44_weights/randomReg_ANNZ_44.weights.xml)
[08:55:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m45[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:44    INFO]  -----------------------------------------------------
[08:55:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:44    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:44    INFO]  - starting ANNZ::Init()  ... 
[08:55:45    INFO]  - found trained "ANNZ_45" (./output/SPEC_advanced22/regres/train/ANNZ_45/ANNZ_45_weights/randomReg_ANNZ_45.weights.xml)
[08:55:45    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m46[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:45    INFO]  -----------------------------------------------------
[08:55:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:45    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:45    INFO]  - starting ANNZ::Init()  ... 
[08:55:46    INFO]  - found trained "ANNZ_46" (./output/SPEC_advanced22/regres/train/ANNZ_46/ANNZ_46_weights/randomReg_ANNZ_46.weights.xml)
[08:55:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m47[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:46    INFO]  -----------------------------------------------------
[08:55:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:46    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:47    INFO]  - starting ANNZ::Init()  ... 
[08:55:47    INFO]  - found trained "ANNZ_47" (./output/SPEC_advanced22/regres/train/ANNZ_47/ANNZ_47_weights/randomReg_ANNZ_47.weights.xml)
[08:55:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m48[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:47    INFO]  -----------------------------------------------------
[08:55:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:47    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:48    INFO]  - starting ANNZ::Init()  ... 
[08:55:49    INFO]  - found trained "ANNZ_48" (./output/SPEC_advanced22/regres/train/ANNZ_48/ANNZ_48_weights/randomReg_ANNZ_48.weights.xml)
[08:55:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m49[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:49    INFO]  -----------------------------------------------------
[08:55:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:49    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:50    INFO]  - starting ANNZ::Init()  ... 
[08:55:50    INFO]  - found trained "ANNZ_49" (./output/SPEC_advanced22/regres/train/ANNZ_49/ANNZ_49_weights/randomReg_ANNZ_49.weights.xml)
[08:55:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m50[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:50    INFO]  -----------------------------------------------------
[08:55:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:50    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:51    INFO]  - starting ANNZ::Init()  ... 
[08:55:52    INFO]  - found trained "ANNZ_50" (./output/SPEC_advanced22/regres/train/ANNZ_50/ANNZ_50_weights/randomReg_ANNZ_50.weights.xml)
[08:55:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m51[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:52    INFO]  -----------------------------------------------------
[08:55:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:52    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:52    INFO]  - starting ANNZ::Init()  ... 
[08:55:53    INFO]  - found trained "ANNZ_51" (./output/SPEC_advanced22/regres/train/ANNZ_51/ANNZ_51_weights/randomReg_ANNZ_51.weights.xml)
[08:55:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m52[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:53    INFO]  -----------------------------------------------------
[08:55:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:53    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:54    INFO]  - starting ANNZ::Init()  ... 
[08:55:55    INFO]  - found trained "ANNZ_52" (./output/SPEC_advanced22/regres/train/ANNZ_52/ANNZ_52_weights/randomReg_ANNZ_52.weights.xml)
[08:55:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m53[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:55    INFO]  -----------------------------------------------------
[08:55:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:55    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:55    INFO]  - starting ANNZ::Init()  ... 
[08:55:56    INFO]  - found trained "ANNZ_53" (./output/SPEC_advanced22/regres/train/ANNZ_53/ANNZ_53_weights/randomReg_ANNZ_53.weights.xml)
[08:55:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m54[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:56    INFO]  -----------------------------------------------------
[08:55:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:56    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:56    INFO]  - starting ANNZ::Init()  ... 
[08:55:57    INFO]  - found trained "ANNZ_54" (./output/SPEC_advanced22/regres/train/ANNZ_54/ANNZ_54_weights/randomReg_ANNZ_54.weights.xml)
[08:55:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m55[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:57    INFO]  -----------------------------------------------------
[08:55:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:57    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:58    INFO]  - starting ANNZ::Init()  ... 
[08:55:59    INFO]  - found trained "ANNZ_55" (./output/SPEC_advanced22/regres/train/ANNZ_55/ANNZ_55_weights/randomReg_ANNZ_55.weights.xml)
[08:55:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m56[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:55 INFO) 
[08:55:59    INFO]  -----------------------------------------------------
[08:55:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:55:59    INFO]  -----------------------------------------------------------------------------------------------------------
[08:55:59    INFO]  - starting ANNZ::Init()  ... 
[08:56:00    INFO]  - found trained "ANNZ_56" (./output/SPEC_advanced22/regres/train/ANNZ_56/ANNZ_56_weights/randomReg_ANNZ_56.weights.xml)
[08:56:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m57[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:00    INFO]  -----------------------------------------------------
[08:56:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:00    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:00    INFO]  - starting ANNZ::Init()  ... 
[08:56:02    INFO]  - found trained "ANNZ_57" (./output/SPEC_advanced22/regres/train/ANNZ_57/ANNZ_57_weights/randomReg_ANNZ_57.weights.xml)
[08:56:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m58[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:02    INFO]  -----------------------------------------------------
[08:56:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:02    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:02    INFO]  - starting ANNZ::Init()  ... 
[08:56:03    INFO]  - found trained "ANNZ_58" (./output/SPEC_advanced22/regres/train/ANNZ_58/ANNZ_58_weights/randomReg_ANNZ_58.weights.xml)
[08:56:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m59[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:03    INFO]  -----------------------------------------------------
[08:56:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:03    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:03    INFO]  - starting ANNZ::Init()  ... 
[08:56:04    INFO]  - found trained "ANNZ_59" (./output/SPEC_advanced22/regres/train/ANNZ_59/ANNZ_59_weights/randomReg_ANNZ_59.weights.xml)
[08:56:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m60[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:04    INFO]  -----------------------------------------------------
[08:56:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:04    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:05    INFO]  - starting ANNZ::Init()  ... 
[08:56:06    INFO]  - found trained "ANNZ_60" (./output/SPEC_advanced22/regres/train/ANNZ_60/ANNZ_60_weights/randomReg_ANNZ_60.weights.xml)
[08:56:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m61[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:06    INFO]  -----------------------------------------------------
[08:56:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:06    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:07    INFO]  - starting ANNZ::Init()  ... 
[08:56:07    INFO]  - found trained "ANNZ_61" (./output/SPEC_advanced22/regres/train/ANNZ_61/ANNZ_61_weights/randomReg_ANNZ_61.weights.xml)
[08:56:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m62[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:07    INFO]  -----------------------------------------------------
[08:56:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:07    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:08    INFO]  - starting ANNZ::Init()  ... 
[08:56:08    INFO]  - found trained "ANNZ_62" (./output/SPEC_advanced22/regres/train/ANNZ_62/ANNZ_62_weights/randomReg_ANNZ_62.weights.xml)
[08:56:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m63[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:08    INFO]  -----------------------------------------------------
[08:56:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:08    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:09    INFO]  - starting ANNZ::Init()  ... 
[08:56:09    INFO]  - found trained "ANNZ_63" (./output/SPEC_advanced22/regres/train/ANNZ_63/ANNZ_63_weights/randomReg_ANNZ_63.weights.xml)
[08:56:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m64[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:09    INFO]  -----------------------------------------------------
[08:56:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:09    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:10    INFO]  - starting ANNZ::Init()  ... 
[08:56:11    INFO]  - found trained "ANNZ_64" (./output/SPEC_advanced22/regres/train/ANNZ_64/ANNZ_64_weights/randomReg_ANNZ_64.weights.xml)
[08:56:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m65[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:56 INFO) 
[08:56:11    INFO]  -----------------------------------------------------
[08:56:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:56:11    INFO]  -----------------------------------------------------------------------------------------------------------
[08:56:11    INFO]  - starting ANNZ::Init()  ... 
[08:56:13    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_65/saveOpt.txt ...
[08:56:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:56:18    INFO] ----------------------------------------------------------------------------------------------------
[08:56:18    INFO]  - will book (ANNZ_65) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N,P
[08:56:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:56:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:56:18    INFO]      cuts (train):        ,
[08:56:18    INFO]      cuts (valid):       
[08:56:18    INFO]    - weights:            1
[08:56:18    INFO] ----------------------------------------------------------------------------------------------------
[08:56:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:56:41    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_65/ANNZ_65_weights/saveTrainOpt_ANNZ_65.txt ...
[08:56:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_65 ... 
[08:56:43    INFO]  - Will gen. input-parameter errors ...
[08:56:45    INFO]  - starting ANNZ::loadReaders() ... 
[08:56:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[08:59:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:59:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:59:37    INFO]  -----------------------------------------------------------------------------------------------------------
[08:59:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:00:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:00:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:00:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:00:22    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_65/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:00:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:00:23    INFO]  - will try to derive a bias correction ... 
[09:00:23    INFO]  - will validate that training produced an XML file for later ... 
[09:00:23    INFO]  - starting ANNZ::loadReaders() ... 
[09:00:24    INFO]  - will validate that the training was not a complete failure ... 
[09:00:25    INFO]  - training seems to have been successful! will move on ...
[09:00:25    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:00:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:00:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:00:29    INFO] ----------------------------------------------------------------------------------------------------
[09:00:29    INFO]  - will book (ANNZ_65_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:00:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:00:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:00:29    INFO]    - weights:            1
[09:00:29    INFO] ----------------------------------------------------------------------------------------------------
[09:00:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:00:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_65 ... 
[09:00:35    INFO]  - Will gen. input-parameter errors ...
[09:00:37    INFO]  - starting ANNZ::loadReaders() ... 
[09:00:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:03:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:03:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:03:41    INFO]  -----------------------------------------------------------------------------------------------------------
[09:03:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:04:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:04:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:04:26    INFO]  -----------------------------------------------------------------------------------------------------------
[09:04:26    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_65/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:04:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:04:27    INFO]  - will validate that the bias-correction actually improved the result ...
[09:04:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:04:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_65,
Warning in <Fit>: Fit data is empty 
[09:04:33    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_65/plots/
[09:04:44        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_65/plots output/SPEC_advanced22/regres/train/ANNZ_65/plots_biasCor_before
[09:04:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:04:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_65,
Warning in <Fit>: Fit data is empty 
[09:04:48    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_65/plots/
[09:05:00        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_65/plots output/SPEC_advanced22/regres/train/ANNZ_65/plots_biasCor_after
[09:05:00    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40441] , after the bias-correction: [0.0434685 , 5.7773] --> will KEEP the correction !

(09:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m66[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:05 INFO) 
[09:05:03    INFO]  -----------------------------------------------------
[09:05:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:05:03    INFO]  -----------------------------------------------------------------------------------------------------------
[09:05:04    INFO]  - starting ANNZ::Init()  ... 
[09:05:05    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_66/saveOpt.txt ...
[09:05:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:05:10    INFO] ----------------------------------------------------------------------------------------------------
[09:05:10    INFO]  - will book (ANNZ_66) method(BDT) with options: :NTrees=440:BoostType=AdaBoost:VarTransform=P
[09:05:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:05:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:05:10    INFO]      cuts (train):        ,
[09:05:10    INFO]      cuts (valid):       
[09:05:10    INFO]    - weights:            1
[09:05:10    INFO] ----------------------------------------------------------------------------------------------------
[09:05:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:05:36    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_66/ANNZ_66_weights/saveTrainOpt_ANNZ_66.txt ...
[09:05:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_66 ... 
[09:05:38    INFO]  - Will gen. input-parameter errors ...
[09:05:39    INFO]  - starting ANNZ::loadReaders() ... 
[09:05:44    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:08:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:08:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:08:17    INFO]  -----------------------------------------------------------------------------------------------------------
[09:08:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:08:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:08:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:08:54    INFO]  -----------------------------------------------------------------------------------------------------------
[09:08:54    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_66/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:08:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:08:55    INFO]  - will try to derive a bias correction ... 
[09:08:55    INFO]  - will validate that training produced an XML file for later ... 
[09:08:55    INFO]  - starting ANNZ::loadReaders() ... 
[09:08:57    INFO]  - will validate that the training was not a complete failure ... 
[09:08:57    INFO]  - training seems to have been successful! will move on ...
[09:08:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:09:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:09:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:09:01    INFO] ----------------------------------------------------------------------------------------------------
[09:09:01    INFO]  - will book (ANNZ_66_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:09:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:09:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:09:01    INFO]    - weights:            1
[09:09:01    INFO] ----------------------------------------------------------------------------------------------------
[09:09:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:09:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_66 ... 
[09:09:09    INFO]  - Will gen. input-parameter errors ...
[09:09:11    INFO]  - starting ANNZ::loadReaders() ... 
[09:09:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:11:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:11:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:11:56    INFO]  -----------------------------------------------------------------------------------------------------------
[09:11:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:12:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:12:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:12:33    INFO]  -----------------------------------------------------------------------------------------------------------
[09:12:33    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_66/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:12:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:12:34    INFO]  - will validate that the bias-correction actually improved the result ...
[09:12:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:12:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_66,
Warning in <Fit>: Fit data is empty 
[09:12:39    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_66/plots/
[09:12:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_66/plots output/SPEC_advanced22/regres/train/ANNZ_66/plots_biasCor_before
[09:12:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:12:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_66,
Warning in <Fit>: Fit data is empty 
[09:12:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_66/plots/
[09:13:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_66/plots output/SPEC_advanced22/regres/train/ANNZ_66/plots_biasCor_after
[09:13:07    INFO]  - Got original [KS-test,N_poiss]: [0.079991 , 6.42299] , after the bias-correction: [0.0348152 , 5.51505] --> will KEEP the correction !

(09:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m67[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:13 INFO) 
[09:13:10    INFO]  -----------------------------------------------------
[09:13:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:13:10    INFO]  -----------------------------------------------------------------------------------------------------------
[09:13:10    INFO]  - starting ANNZ::Init()  ... 
[09:13:12    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_67/saveOpt.txt ...
[09:13:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:13:17    INFO] ----------------------------------------------------------------------------------------------------
[09:13:17    INFO]  - will book (ANNZ_67) method(BDT) with options: :NTrees=350:BoostType=AdaBoostR2:VarTransform=N,P
[09:13:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:13:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:13:17    INFO]      cuts (train):        ,
[09:13:17    INFO]      cuts (valid):       
[09:13:17    INFO]    - weights:            1
[09:13:17    INFO] ----------------------------------------------------------------------------------------------------
[09:13:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:13:50    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_67/ANNZ_67_weights/saveTrainOpt_ANNZ_67.txt ...
[09:13:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_67 ... 
[09:13:52    INFO]  - Will gen. input-parameter errors ...
[09:13:54    INFO]  - starting ANNZ::loadReaders() ... 
[09:14:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:21:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:21:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:21:04    INFO]  -----------------------------------------------------------------------------------------------------------
[09:21:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:22:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:22:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:22:45    INFO]  -----------------------------------------------------------------------------------------------------------
[09:22:45    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_67/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:22:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:22:46    INFO]  - will try to derive a bias correction ... 
[09:22:46    INFO]  - will validate that training produced an XML file for later ... 
[09:22:46    INFO]  - starting ANNZ::loadReaders() ... 
[09:22:49    INFO]  - will validate that the training was not a complete failure ... 
[09:22:49    INFO]  - training seems to have been successful! will move on ...
[09:22:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:22:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:22:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:22:54    INFO] ----------------------------------------------------------------------------------------------------
[09:22:54    INFO]  - will book (ANNZ_67_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:22:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:22:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:22:54    INFO]    - weights:            1
[09:22:54    INFO] ----------------------------------------------------------------------------------------------------
[09:22:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:23:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_67 ... 
[09:23:02    INFO]  - Will gen. input-parameter errors ...
[09:23:04    INFO]  - starting ANNZ::loadReaders() ... 
[09:23:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:29:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:29:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:29:40    INFO]  -----------------------------------------------------------------------------------------------------------
[09:29:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:31:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:31:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:31:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:31:22    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_67/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:31:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:31:23    INFO]  - will validate that the bias-correction actually improved the result ...
[09:31:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:31:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_67,
[09:31:29    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_67/plots/
[09:31:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_67/plots output/SPEC_advanced22/regres/train/ANNZ_67/plots_biasCor_before
[09:31:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:31:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_67,
[09:31:45    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_67/plots/
[09:31:57        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_67/plots output/SPEC_advanced22/regres/train/ANNZ_67/plots_biasCor_after
[09:31:57    INFO]  - Got original [KS-test,N_poiss]: [0.0696841 , 6.67721] , after the bias-correction: [0.0329375 , 5.85005] --> will KEEP the correction !

(09:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m68[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:32 INFO) 
[09:32:01    INFO]  -----------------------------------------------------
[09:32:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:32:01    INFO]  -----------------------------------------------------------------------------------------------------------
[09:32:01    INFO]  - starting ANNZ::Init()  ... 
[09:32:02    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_68/saveOpt.txt ...
[09:32:08    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:32:08    INFO] ----------------------------------------------------------------------------------------------------
[09:32:08    INFO]  - will book (ANNZ_68) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=N,P
[09:32:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:32:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:32:08    INFO]      cuts (train):        ,
[09:32:08    INFO]      cuts (valid):       
[09:32:08    INFO]    - weights:            1
[09:32:08    INFO] ----------------------------------------------------------------------------------------------------
[09:32:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:32:50    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_68/ANNZ_68_weights/saveTrainOpt_ANNZ_68.txt ...
[09:32:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_68 ... 
[09:32:54    INFO]  - Will gen. input-parameter errors ...
[09:32:56    INFO]  - starting ANNZ::loadReaders() ... 
[09:33:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:37:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:37:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:37:35    INFO]  -----------------------------------------------------------------------------------------------------------
[09:37:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:38:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:38:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:38:40    INFO]  -----------------------------------------------------------------------------------------------------------
[09:38:40    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_68/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:38:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:38:42    INFO]  - will try to derive a bias correction ... 
[09:38:42    INFO]  - will validate that training produced an XML file for later ... 
[09:38:42    INFO]  - starting ANNZ::loadReaders() ... 
[09:38:46    INFO]  - will validate that the training was not a complete failure ... 
[09:38:46    INFO]  - training seems to have been successful! will move on ...
[09:38:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:38:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:38:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:38:52    INFO] ----------------------------------------------------------------------------------------------------
[09:38:52    INFO]  - will book (ANNZ_68_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:38:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:38:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:38:52    INFO]    - weights:            1
[09:38:52    INFO] ----------------------------------------------------------------------------------------------------
[09:38:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:39:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_68 ... 
[09:39:01    INFO]  - Will gen. input-parameter errors ...
[09:39:03    INFO]  - starting ANNZ::loadReaders() ... 
[09:39:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:43:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:43:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:43:47    INFO]  -----------------------------------------------------------------------------------------------------------
[09:43:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:44:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:44:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:44:55    INFO]  -----------------------------------------------------------------------------------------------------------
[09:44:55    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_68/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:44:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:44:56    INFO]  - will validate that the bias-correction actually improved the result ...
[09:44:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:44:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_68,
[09:45:03    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_68/plots/
[09:45:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_68/plots output/SPEC_advanced22/regres/train/ANNZ_68/plots_biasCor_before
[09:45:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:45:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_68,
[09:45:19    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_68/plots/
[09:45:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_68/plots output/SPEC_advanced22/regres/train/ANNZ_68/plots_biasCor_after
[09:45:31    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.91132] , after the bias-correction: [0.0448129 , 5.66772] --> will KEEP the correction !

(09:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m69[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:45 INFO) 
[09:45:35    INFO]  -----------------------------------------------------
[09:45:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:45:35    INFO]  -----------------------------------------------------------------------------------------------------------
[09:45:35    INFO]  - starting ANNZ::Init()  ... 
[09:45:37    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_69/saveOpt.txt ...
[09:45:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:45:42    INFO] ----------------------------------------------------------------------------------------------------
[09:45:42    INFO]  - will book (ANNZ_69) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=P
[09:45:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:45:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:45:42    INFO]      cuts (train):        ,
[09:45:42    INFO]      cuts (valid):       
[09:45:42    INFO]    - weights:            1
[09:45:42    INFO] ----------------------------------------------------------------------------------------------------
[09:45:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:46:11    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_69/ANNZ_69_weights/saveTrainOpt_ANNZ_69.txt ...
[09:46:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_69 ... 
[09:46:14    INFO]  - Will gen. input-parameter errors ...
[09:46:15    INFO]  - starting ANNZ::loadReaders() ... 
[09:46:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:49:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:49:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:49:21    INFO]  -----------------------------------------------------------------------------------------------------------
[09:49:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:50:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:50:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:50:07    INFO]  -----------------------------------------------------------------------------------------------------------
[09:50:07    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_69/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:50:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:50:08    INFO]  - will try to derive a bias correction ... 
[09:50:08    INFO]  - will validate that training produced an XML file for later ... 
[09:50:08    INFO]  - starting ANNZ::loadReaders() ... 
[09:50:10    INFO]  - will validate that the training was not a complete failure ... 
[09:50:10    INFO]  - training seems to have been successful! will move on ...
[09:50:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:50:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:50:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:50:15    INFO] ----------------------------------------------------------------------------------------------------
[09:50:15    INFO]  - will book (ANNZ_69_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:50:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:50:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:50:15    INFO]    - weights:            1
[09:50:15    INFO] ----------------------------------------------------------------------------------------------------
[09:50:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:50:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_69 ... 
[09:50:22    INFO]  - Will gen. input-parameter errors ...
[09:50:24    INFO]  - starting ANNZ::loadReaders() ... 
[09:50:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:53:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:53:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:53:20    INFO]  -----------------------------------------------------------------------------------------------------------
[09:53:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:53:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:53:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:53:59    INFO]  -----------------------------------------------------------------------------------------------------------
[09:53:59    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_69/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:54:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:54:00    INFO]  - will validate that the bias-correction actually improved the result ...
[09:54:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:54:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_69,
Warning in <Fit>: Fit data is empty 
[09:54:06    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_69/plots/
[09:54:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_69/plots output/SPEC_advanced22/regres/train/ANNZ_69/plots_biasCor_before
[09:54:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:54:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_69,
Warning in <Fit>: Fit data is empty 
[09:54:22    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_69/plots/
[09:54:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_69/plots output/SPEC_advanced22/regres/train/ANNZ_69/plots_biasCor_after
[09:54:33    INFO]  - Got original [KS-test,N_poiss]: [0.0803272 , 6.43472] , after the bias-correction: [0.0352724 , 5.61646] --> will KEEP the correction !

(09:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m70[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:54 INFO) 
[09:54:37    INFO]  -----------------------------------------------------
[09:54:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:54:37    INFO]  -----------------------------------------------------------------------------------------------------------
[09:54:38    INFO]  - starting ANNZ::Init()  ... 
[09:54:39    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_70/saveOpt.txt ...
[09:54:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:54:44    INFO] ----------------------------------------------------------------------------------------------------
[09:54:44    INFO]  - will book (ANNZ_70) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N
[09:54:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:54:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:54:44    INFO]      cuts (train):        ,
[09:54:44    INFO]      cuts (valid):       
[09:54:44    INFO]    - weights:            1
[09:54:44    INFO] ----------------------------------------------------------------------------------------------------
[09:54:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:55:37    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_70/ANNZ_70_weights/saveTrainOpt_ANNZ_70.txt ...
[09:55:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_70 ... 
[09:55:42    INFO]  - Will gen. input-parameter errors ...
[09:55:44    INFO]  - starting ANNZ::loadReaders() ... 
[09:55:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[09:59:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:59:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:59:02    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[09:59:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:59:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:59:51    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:51    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_70/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:59:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:59:54    INFO]  - will try to derive a bias correction ... 
[09:59:54    INFO]  - will validate that training produced an XML file for later ... 
[09:59:54    INFO]  - starting ANNZ::loadReaders() ... 
[09:59:59    INFO]  - will validate that the training was not a complete failure ... 
[09:59:59    INFO]  - training seems to have been successful! will move on ...
[09:59:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:00:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:00:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:00:05    INFO] ----------------------------------------------------------------------------------------------------
[10:00:05    INFO]  - will book (ANNZ_70_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:00:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:00:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:00:05    INFO]    - weights:            1
[10:00:05    INFO] ----------------------------------------------------------------------------------------------------
[10:00:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:00:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_70 ... 
[10:00:15    INFO]  - Will gen. input-parameter errors ...
[10:00:17    INFO]  - starting ANNZ::loadReaders() ... 
[10:00:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[10:04:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:04:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:04:02    INFO]  -----------------------------------------------------------------------------------------------------------
[10:04:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[10:04:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:04:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:04:56    INFO]  -----------------------------------------------------------------------------------------------------------
[10:04:56    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_70/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:04:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:04:58    INFO]  - will validate that the bias-correction actually improved the result ...
[10:04:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:04:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_70,
[10:05:05    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_70/plots/
[10:05:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_70/plots output/SPEC_advanced22/regres/train/ANNZ_70/plots_biasCor_before
[10:05:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:05:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_70,
[10:05:21    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_70/plots/
[10:05:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_70/plots output/SPEC_advanced22/regres/train/ANNZ_70/plots_biasCor_after
[10:05:33    INFO]  - Got original [KS-test,N_poiss]: [0.0851445 , 6.71073] , after the bias-correction: [0.04851 , 5.7517] --> will KEEP the correction !

(10:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m71[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:05 INFO) 
[10:05:37    INFO]  -----------------------------------------------------
[10:05:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:05:37    INFO]  -----------------------------------------------------------------------------------------------------------
[10:05:38    INFO]  - starting ANNZ::Init()  ... 
[10:05:39    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_71/saveOpt.txt ...
[10:05:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:05:44    INFO] ----------------------------------------------------------------------------------------------------
[10:05:44    INFO]  - will book (ANNZ_71) method(BDT) with options: :NTrees=460:BoostType=AdaBoost:VarTransform=N,P
[10:05:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:05:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[10:05:44    INFO]      cuts (train):        ,
[10:05:44    INFO]      cuts (valid):       
[10:05:44    INFO]    - weights:            1
[10:05:44    INFO] ----------------------------------------------------------------------------------------------------
[10:05:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:06:12    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_71/ANNZ_71_weights/saveTrainOpt_ANNZ_71.txt ...
[10:06:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_71 ... 
[10:06:14    INFO]  - Will gen. input-parameter errors ...
[10:06:15    INFO]  - starting ANNZ::loadReaders() ... 
[10:06:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[10:09:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:09:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:09:36    INFO]  -----------------------------------------------------------------------------------------------------------
[10:09:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[10:10:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:10:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:10:27    INFO]  -----------------------------------------------------------------------------------------------------------
[10:10:27    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_71/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:10:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:10:28    INFO]  - will try to derive a bias correction ... 
[10:10:28    INFO]  - will validate that training produced an XML file for later ... 
[10:10:28    INFO]  - starting ANNZ::loadReaders() ... 
[10:10:30    INFO]  - will validate that the training was not a complete failure ... 
[10:10:30    INFO]  - training seems to have been successful! will move on ...
[10:10:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:10:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:10:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:10:34    INFO] ----------------------------------------------------------------------------------------------------
[10:10:34    INFO]  - will book (ANNZ_71_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:10:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:10:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:10:34    INFO]    - weights:            1
[10:10:34    INFO] ----------------------------------------------------------------------------------------------------
[10:10:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:10:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_71 ... 
[10:10:41    INFO]  - Will gen. input-parameter errors ...
[10:10:43    INFO]  - starting ANNZ::loadReaders() ... 
[10:10:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[10:14:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:14:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:14:00    INFO]  -----------------------------------------------------------------------------------------------------------
[10:14:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[10:14:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:14:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:14:46    INFO]  -----------------------------------------------------------------------------------------------------------
[10:14:46    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_71/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:14:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:14:47    INFO]  - will validate that the bias-correction actually improved the result ...
[10:14:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:14:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_71,
Warning in <Fit>: Fit data is empty 
[10:14:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_71/plots/
[10:15:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_71/plots output/SPEC_advanced22/regres/train/ANNZ_71/plots_biasCor_before
[10:15:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:15:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_71,
[10:15:13    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_71/plots/
[10:15:25        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_71/plots output/SPEC_advanced22/regres/train/ANNZ_71/plots_biasCor_after
[10:15:25    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40365] , after the bias-correction: [0.0442528 , 5.77607] --> will KEEP the correction !

(10:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m72[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=880:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:15 INFO) 
[10:15:28    INFO]  -----------------------------------------------------
[10:15:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:15:28    INFO]  -----------------------------------------------------------------------------------------------------------
[10:15:29    INFO]  - starting ANNZ::Init()  ... 
[10:15:30    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_72/saveOpt.txt ...
[10:15:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:15:35    INFO] ----------------------------------------------------------------------------------------------------
[10:15:35    INFO]  - will book (ANNZ_72) method(BDT) with options: :NTrees=880:BoostType=Bagging:VarTransform=N,P
[10:15:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:15:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[10:15:35    INFO]      cuts (train):        ,
[10:15:35    INFO]      cuts (valid):       
[10:15:35    INFO]    - weights:            1
[10:15:35    INFO] ----------------------------------------------------------------------------------------------------
[10:15:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:17:08    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_72/ANNZ_72_weights/saveTrainOpt_ANNZ_72.txt ...
[10:17:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_72 ... 
[10:17:16    INFO]  - Will gen. input-parameter errors ...
[10:17:19    INFO]  - starting ANNZ::loadReaders() ... 
[10:17:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[10:33:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:33:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:33:42    INFO]  -----------------------------------------------------------------------------------------------------------
[10:33:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[10:37:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:37:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:37:38    INFO]  -----------------------------------------------------------------------------------------------------------
[10:37:38    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_72/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:37:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:37:42    INFO]  - will try to derive a bias correction ... 
[10:37:42    INFO]  - will validate that training produced an XML file for later ... 
[10:37:42    INFO]  - starting ANNZ::loadReaders() ... 
[10:37:51    INFO]  - will validate that the training was not a complete failure ... 
[10:37:51    INFO]  - training seems to have been successful! will move on ...
[10:37:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:38:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:38:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:38:01    INFO] ----------------------------------------------------------------------------------------------------
[10:38:01    INFO]  - will book (ANNZ_72_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:38:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:38:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:38:01    INFO]    - weights:            1
[10:38:01    INFO] ----------------------------------------------------------------------------------------------------
[10:38:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:38:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_72 ... 
[10:38:12    INFO]  - Will gen. input-parameter errors ...
[10:38:15    INFO]  - starting ANNZ::loadReaders() ... 
[10:38:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[10:55:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:55:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:55:18    INFO]  -----------------------------------------------------------------------------------------------------------
[10:55:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[10:59:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:59:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:59:23    INFO]  -----------------------------------------------------------------------------------------------------------
[10:59:24    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_72/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:59:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:59:27    INFO]  - will validate that the bias-correction actually improved the result ...
[10:59:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:59:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_72,
[10:59:34    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_72/plots/
[10:59:46        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_72/plots output/SPEC_advanced22/regres/train/ANNZ_72/plots_biasCor_before
[10:59:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:59:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_72,
[10:59:51    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_72/plots/
[11:00:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_72/plots output/SPEC_advanced22/regres/train/ANNZ_72/plots_biasCor_after
[11:00:03    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.91667] , after the bias-correction: [0.0445889 , 5.6391] --> will KEEP the correction !

(11:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m73[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:00 INFO) 
[11:00:09    INFO]  -----------------------------------------------------
[11:00:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:00:09    INFO]  -----------------------------------------------------------------------------------------------------------
[11:00:11    INFO]  - starting ANNZ::Init()  ... 
[11:00:12    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_73/saveOpt.txt ...
[11:00:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:00:18    INFO] ----------------------------------------------------------------------------------------------------
[11:00:18    INFO]  - will book (ANNZ_73) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=P
[11:00:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:00:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:00:18    INFO]      cuts (train):        ,
[11:00:18    INFO]      cuts (valid):       
[11:00:18    INFO]    - weights:            1
[11:00:18    INFO] ----------------------------------------------------------------------------------------------------
[11:00:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:00:54    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_73/ANNZ_73_weights/saveTrainOpt_ANNZ_73.txt ...
[11:00:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_73 ... 
[11:00:56    INFO]  - Will gen. input-parameter errors ...
[11:00:58    INFO]  - starting ANNZ::loadReaders() ... 
[11:01:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:04:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:04:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:04:17    INFO]  -----------------------------------------------------------------------------------------------------------
[11:04:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:05:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:05:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:05:06    INFO]  -----------------------------------------------------------------------------------------------------------
[11:05:06    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_73/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:05:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:05:07    INFO]  - will try to derive a bias correction ... 
[11:05:07    INFO]  - will validate that training produced an XML file for later ... 
[11:05:07    INFO]  - starting ANNZ::loadReaders() ... 
[11:05:09    INFO]  - will validate that the training was not a complete failure ... 
[11:05:09    INFO]  - training seems to have been successful! will move on ...
[11:05:09    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:05:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:05:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:05:14    INFO] ----------------------------------------------------------------------------------------------------
[11:05:14    INFO]  - will book (ANNZ_73_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:05:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:05:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:05:14    INFO]    - weights:            1
[11:05:14    INFO] ----------------------------------------------------------------------------------------------------
[11:05:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:05:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_73 ... 
[11:05:21    INFO]  - Will gen. input-parameter errors ...
[11:05:23    INFO]  - starting ANNZ::loadReaders() ... 
[11:05:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:08:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:08:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:08:09    INFO]  -----------------------------------------------------------------------------------------------------------
[11:08:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:08:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:08:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:08:49    INFO]  -----------------------------------------------------------------------------------------------------------
[11:08:49    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_73/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:08:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:08:50    INFO]  - will validate that the bias-correction actually improved the result ...
[11:08:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:08:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_73,
Warning in <Fit>: Fit data is empty 
[11:08:56    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_73/plots/
[11:09:08        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_73/plots output/SPEC_advanced22/regres/train/ANNZ_73/plots_biasCor_before
[11:09:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:09:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_73,
Warning in <Fit>: Fit data is empty 
[11:09:12    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_73/plots/
[11:09:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_73/plots output/SPEC_advanced22/regres/train/ANNZ_73/plots_biasCor_after
[11:09:24    INFO]  - Got original [KS-test,N_poiss]: [0.0807753 , 6.47336] , after the bias-correction: [0.0349362 , 5.52482] --> will KEEP the correction !

(11:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m74[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:09 INFO) 
[11:09:27    INFO]  -----------------------------------------------------
[11:09:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:09:27    INFO]  -----------------------------------------------------------------------------------------------------------
[11:09:28    INFO]  - starting ANNZ::Init()  ... 
[11:09:29    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_74/saveOpt.txt ...
[11:09:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:09:35    INFO] ----------------------------------------------------------------------------------------------------
[11:09:35    INFO]  - will book (ANNZ_74) method(BDT) with options: :NTrees=280:BoostType=Bagging:VarTransform=N,P
[11:09:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:09:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:09:35    INFO]      cuts (train):        ,
[11:09:35    INFO]      cuts (valid):       
[11:09:35    INFO]    - weights:            1
[11:09:35    INFO] ----------------------------------------------------------------------------------------------------
[11:09:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:10:06    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_74/ANNZ_74_weights/saveTrainOpt_ANNZ_74.txt ...
[11:10:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_74 ... 
[11:10:09    INFO]  - Will gen. input-parameter errors ...
[11:10:11    INFO]  - starting ANNZ::loadReaders() ... 
[11:10:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:12:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:12:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:12:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:12:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:13:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:13:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:13:38    INFO]  -----------------------------------------------------------------------------------------------------------
[11:13:38    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_74/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:13:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:13:39    INFO]  - will try to derive a bias correction ... 
[11:13:39    INFO]  - will validate that training produced an XML file for later ... 
[11:13:39    INFO]  - starting ANNZ::loadReaders() ... 
[11:13:42    INFO]  - will validate that the training was not a complete failure ... 
[11:13:42    INFO]  - training seems to have been successful! will move on ...
[11:13:42    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:13:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:13:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:13:50    INFO] ----------------------------------------------------------------------------------------------------
[11:13:50    INFO]  - will book (ANNZ_74_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:13:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:13:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:13:50    INFO]    - weights:            1
[11:13:50    INFO] ----------------------------------------------------------------------------------------------------
[11:13:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:13:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_74 ... 
[11:13:58    INFO]  - Will gen. input-parameter errors ...
[11:14:00    INFO]  - starting ANNZ::loadReaders() ... 
[11:14:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:16:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:16:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:16:41    INFO]  -----------------------------------------------------------------------------------------------------------
[11:16:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:17:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:17:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:17:19    INFO]  -----------------------------------------------------------------------------------------------------------
[11:17:19    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_74/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:17:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:17:21    INFO]  - will validate that the bias-correction actually improved the result ...
[11:17:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:17:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_74,
[11:17:27    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_74/plots/
[11:17:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_74/plots output/SPEC_advanced22/regres/train/ANNZ_74/plots_biasCor_before
[11:17:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:17:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_74,
[11:17:43    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_74/plots/
[11:17:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_74/plots output/SPEC_advanced22/regres/train/ANNZ_74/plots_biasCor_after
[11:17:54    INFO]  - Got original [KS-test,N_poiss]: [0.093883 , 6.85735] , after the bias-correction: [0.041564 , 5.42448] --> will KEEP the correction !

(11:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m75[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:17 INFO) 
[11:17:58    INFO]  -----------------------------------------------------
[11:17:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:17:58    INFO]  -----------------------------------------------------------------------------------------------------------
[11:17:58    INFO]  - starting ANNZ::Init()  ... 
[11:18:00    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_75/saveOpt.txt ...
[11:18:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:18:05    INFO] ----------------------------------------------------------------------------------------------------
[11:18:05    INFO]  - will book (ANNZ_75) method(BDT) with options: :NTrees=280:BoostType=AdaBoostR2:VarTransform=N,P
[11:18:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:18:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:18:05    INFO]      cuts (train):        ,
[11:18:05    INFO]      cuts (valid):       
[11:18:05    INFO]    - weights:            1
[11:18:05    INFO] ----------------------------------------------------------------------------------------------------
[11:18:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:18:36    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_75/ANNZ_75_weights/saveTrainOpt_ANNZ_75.txt ...
[11:18:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_75 ... 
[11:18:38    INFO]  - Will gen. input-parameter errors ...
[11:18:40    INFO]  - starting ANNZ::loadReaders() ... 
[11:18:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:24:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:24:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:24:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:24:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:25:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:25:25    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:25:25    INFO]  -----------------------------------------------------------------------------------------------------------
[11:25:26    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_75/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:25:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:25:27    INFO]  - will try to derive a bias correction ... 
[11:25:27    INFO]  - will validate that training produced an XML file for later ... 
[11:25:27    INFO]  - starting ANNZ::loadReaders() ... 
[11:25:29    INFO]  - will validate that the training was not a complete failure ... 
[11:25:29    INFO]  - training seems to have been successful! will move on ...
[11:25:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:25:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:25:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:25:33    INFO] ----------------------------------------------------------------------------------------------------
[11:25:33    INFO]  - will book (ANNZ_75_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:25:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:25:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:25:33    INFO]    - weights:            1
[11:25:33    INFO] ----------------------------------------------------------------------------------------------------
[11:25:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:25:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_75 ... 
[11:25:40    INFO]  - Will gen. input-parameter errors ...
[11:25:42    INFO]  - starting ANNZ::loadReaders() ... 
[11:25:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:30:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:30:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:30:33    INFO]  -----------------------------------------------------------------------------------------------------------
[11:30:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:31:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:31:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:31:43    INFO]  -----------------------------------------------------------------------------------------------------------
[11:31:43    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_75/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:31:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:31:44    INFO]  - will validate that the bias-correction actually improved the result ...
[11:31:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:31:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_75,
[11:31:51    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_75/plots/
[11:32:03        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_75/plots output/SPEC_advanced22/regres/train/ANNZ_75/plots_biasCor_before
[11:32:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:32:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_75,
[11:32:08    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_75/plots/
[11:32:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_75/plots output/SPEC_advanced22/regres/train/ANNZ_75/plots_biasCor_after
[11:32:20    INFO]  - Got original [KS-test,N_poiss]: [0.0691239 , 6.68834] , after the bias-correction: [0.0327134 , 5.29252] --> will KEEP the correction !

(11:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m76[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:32 INFO) 
[11:32:23    INFO]  -----------------------------------------------------
[11:32:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:32:23    INFO]  -----------------------------------------------------------------------------------------------------------
[11:32:24    INFO]  - starting ANNZ::Init()  ... 
[11:32:25    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_76/saveOpt.txt ...
[11:32:30    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:32:30    INFO] ----------------------------------------------------------------------------------------------------
[11:32:30    INFO]  - will book (ANNZ_76) method(BDT) with options: :NTrees=330:BoostType=AdaBoost:VarTransform=N,P
[11:32:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:32:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:32:30    INFO]      cuts (train):        ,
[11:32:30    INFO]      cuts (valid):       
[11:32:30    INFO]    - weights:            1
[11:32:30    INFO] ----------------------------------------------------------------------------------------------------
[11:32:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:32:49    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_76/ANNZ_76_weights/saveTrainOpt_ANNZ_76.txt ...
[11:32:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_76 ... 
[11:32:51    INFO]  - Will gen. input-parameter errors ...
[11:32:52    INFO]  - starting ANNZ::loadReaders() ... 
[11:32:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:35:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:35:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:35:13    INFO]  -----------------------------------------------------------------------------------------------------------
[11:35:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:35:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:35:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:35:47    INFO]  -----------------------------------------------------------------------------------------------------------
[11:35:47    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_76/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:35:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:35:48    INFO]  - will try to derive a bias correction ... 
[11:35:48    INFO]  - will validate that training produced an XML file for later ... 
[11:35:48    INFO]  - starting ANNZ::loadReaders() ... 
[11:35:49    INFO]  - will validate that the training was not a complete failure ... 
[11:35:49    INFO]  - training seems to have been successful! will move on ...
[11:35:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:35:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:35:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:35:54    INFO] ----------------------------------------------------------------------------------------------------
[11:35:54    INFO]  - will book (ANNZ_76_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:35:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:35:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:35:54    INFO]    - weights:            1
[11:35:54    INFO] ----------------------------------------------------------------------------------------------------
[11:35:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:36:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_76 ... 
[11:36:00    INFO]  - Will gen. input-parameter errors ...
[11:36:02    INFO]  - starting ANNZ::loadReaders() ... 
[11:36:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:39:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:39:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:39:04    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:39:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:39:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:39:50    INFO]  -----------------------------------------------------------------------------------------------------------
[11:39:50    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_76/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:39:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:39:51    INFO]  - will validate that the bias-correction actually improved the result ...
[11:39:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:39:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_76,
Warning in <Fit>: Fit data is empty 
[11:39:56    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_76/plots/
[11:40:08        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_76/plots output/SPEC_advanced22/regres/train/ANNZ_76/plots_biasCor_before
[11:40:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:40:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_76,
Warning in <Fit>: Fit data is empty 
[11:40:13    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_76/plots/
[11:40:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_76/plots output/SPEC_advanced22/regres/train/ANNZ_76/plots_biasCor_after
[11:40:24    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40538] , after the bias-correction: [0.0435806 , 5.8054] --> will KEEP the correction !

(11:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m77[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:40 INFO) 
[11:40:27    INFO]  -----------------------------------------------------
[11:40:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:40:27    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:28    INFO]  - starting ANNZ::Init()  ... 
[11:40:29    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_77/saveOpt.txt ...
[11:40:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:40:34    INFO] ----------------------------------------------------------------------------------------------------
[11:40:34    INFO]  - will book (ANNZ_77) method(BDT) with options: :NTrees=290:BoostType=Bagging:VarTransform=N,P
[11:40:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:40:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:40:34    INFO]      cuts (train):        ,
[11:40:34    INFO]      cuts (valid):       
[11:40:34    INFO]    - weights:            1
[11:40:34    INFO] ----------------------------------------------------------------------------------------------------
[11:40:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:41:05    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_77/ANNZ_77_weights/saveTrainOpt_ANNZ_77.txt ...
[11:41:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_77 ... 
[11:41:07    INFO]  - Will gen. input-parameter errors ...
[11:41:09    INFO]  - starting ANNZ::loadReaders() ... 
[11:41:16    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:44:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:44:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:44:16    INFO]  -----------------------------------------------------------------------------------------------------------
[11:44:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:44:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:44:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:44:59    INFO]  -----------------------------------------------------------------------------------------------------------
[11:44:59    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_77/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:45:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:45:01    INFO]  - will try to derive a bias correction ... 
[11:45:01    INFO]  - will validate that training produced an XML file for later ... 
[11:45:01    INFO]  - starting ANNZ::loadReaders() ... 
[11:45:04    INFO]  - will validate that the training was not a complete failure ... 
[11:45:04    INFO]  - training seems to have been successful! will move on ...
[11:45:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:45:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:45:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:45:09    INFO] ----------------------------------------------------------------------------------------------------
[11:45:09    INFO]  - will book (ANNZ_77_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:45:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:45:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:45:09    INFO]    - weights:            1
[11:45:09    INFO] ----------------------------------------------------------------------------------------------------
[11:45:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:45:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_77 ... 
[11:45:17    INFO]  - Will gen. input-parameter errors ...
[11:45:19    INFO]  - starting ANNZ::loadReaders() ... 
[11:45:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:48:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:48:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:48:07    INFO]  -----------------------------------------------------------------------------------------------------------
[11:48:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:48:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:48:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:48:47    INFO]  -----------------------------------------------------------------------------------------------------------
[11:48:47    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_77/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:48:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:48:48    INFO]  - will validate that the bias-correction actually improved the result ...
[11:48:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:48:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_77,
[11:48:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_77/plots/
[11:49:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_77/plots output/SPEC_advanced22/regres/train/ANNZ_77/plots_biasCor_before
[11:49:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:49:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_77,
[11:49:11    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_77/plots/
[11:49:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_77/plots output/SPEC_advanced22/regres/train/ANNZ_77/plots_biasCor_after
[11:49:22    INFO]  - Got original [KS-test,N_poiss]: [0.093659 , 6.82626] , after the bias-correction: [0.0432445 , 5.54732] --> will KEEP the correction !

(11:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m78[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:49 INFO) 
[11:49:26    INFO]  -----------------------------------------------------
[11:49:26    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:49:26    INFO]  -----------------------------------------------------------------------------------------------------------
[11:49:27    INFO]  - starting ANNZ::Init()  ... 
[11:49:28    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_78/saveOpt.txt ...
[11:49:33    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:49:34    INFO] ----------------------------------------------------------------------------------------------------
[11:49:34    INFO]  - will book (ANNZ_78) method(BDT) with options: :NTrees=290:BoostType=AdaBoostR2:VarTransform=N
[11:49:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:49:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:49:34    INFO]      cuts (train):        ,
[11:49:34    INFO]      cuts (valid):       
[11:49:34    INFO]    - weights:            1
[11:49:34    INFO] ----------------------------------------------------------------------------------------------------
[11:49:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:50:01    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_78/ANNZ_78_weights/saveTrainOpt_ANNZ_78.txt ...
[11:50:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_78 ... 
[11:50:03    INFO]  - Will gen. input-parameter errors ...
[11:50:04    INFO]  - starting ANNZ::loadReaders() ... 
[11:50:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[11:54:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:54:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:54:35    INFO]  -----------------------------------------------------------------------------------------------------------
[11:54:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[11:55:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:55:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:55:44    INFO]  -----------------------------------------------------------------------------------------------------------
[11:55:44    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_78/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:55:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:55:45    INFO]  - will try to derive a bias correction ... 
[11:55:45    INFO]  - will validate that training produced an XML file for later ... 
[11:55:45    INFO]  - starting ANNZ::loadReaders() ... 
[11:55:47    INFO]  - will validate that the training was not a complete failure ... 
[11:55:47    INFO]  - training seems to have been successful! will move on ...
[11:55:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:55:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:55:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:55:52    INFO] ----------------------------------------------------------------------------------------------------
[11:55:52    INFO]  - will book (ANNZ_78_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:55:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:55:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:55:52    INFO]    - weights:            1
[11:55:52    INFO] ----------------------------------------------------------------------------------------------------
[11:55:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:55:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_78 ... 
[11:55:59    INFO]  - Will gen. input-parameter errors ...
[11:56:01    INFO]  - starting ANNZ::loadReaders() ... 
[11:56:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:00:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:00:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:00:14    INFO]  -----------------------------------------------------------------------------------------------------------
[12:00:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:01:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:01:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:01:13    INFO]  -----------------------------------------------------------------------------------------------------------
[12:01:13    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_78/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:01:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:01:14    INFO]  - will validate that the bias-correction actually improved the result ...
[12:01:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:01:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_78,
[12:01:20    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_78/plots/
[12:01:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_78/plots output/SPEC_advanced22/regres/train/ANNZ_78/plots_biasCor_before
[12:01:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:01:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_78,
[12:01:36    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_78/plots/
[12:01:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_78/plots output/SPEC_advanced22/regres/train/ANNZ_78/plots_biasCor_after
[12:01:48    INFO]  - Got original [KS-test,N_poiss]: [0.062514 , 6.49549] , after the bias-correction: [0.0330495 , 5.57559] --> will KEEP the correction !

(12:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m79[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:01 INFO) 
[12:01:51    INFO]  -----------------------------------------------------
[12:01:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:01:51    INFO]  -----------------------------------------------------------------------------------------------------------
[12:01:52    INFO]  - starting ANNZ::Init()  ... 
[12:01:54    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_79/saveOpt.txt ...
[12:01:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:02:00    INFO] ----------------------------------------------------------------------------------------------------
[12:02:00    INFO]  - will book (ANNZ_79) method(BDT) with options: :NTrees=250:BoostType=Bagging:VarTransform=N,P
[12:02:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:02:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:02:00    INFO]      cuts (train):        ,
[12:02:00    INFO]      cuts (valid):       
[12:02:00    INFO]    - weights:            1
[12:02:00    INFO] ----------------------------------------------------------------------------------------------------
[12:02:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:02:30    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_79/ANNZ_79_weights/saveTrainOpt_ANNZ_79.txt ...
[12:02:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_79 ... 
[12:02:33    INFO]  - Will gen. input-parameter errors ...
[12:02:35    INFO]  - starting ANNZ::loadReaders() ... 
[12:02:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:05:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:05:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:05:08    INFO]  -----------------------------------------------------------------------------------------------------------
[12:05:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:05:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:05:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:05:50    INFO]  -----------------------------------------------------------------------------------------------------------
[12:05:50    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_79/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:05:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:05:51    INFO]  - will try to derive a bias correction ... 
[12:05:51    INFO]  - will validate that training produced an XML file for later ... 
[12:05:51    INFO]  - starting ANNZ::loadReaders() ... 
[12:05:54    INFO]  - will validate that the training was not a complete failure ... 
[12:05:54    INFO]  - training seems to have been successful! will move on ...
[12:05:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:05:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:05:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:05:59    INFO] ----------------------------------------------------------------------------------------------------
[12:05:59    INFO]  - will book (ANNZ_79_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:05:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:05:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:05:59    INFO]    - weights:            1
[12:05:59    INFO] ----------------------------------------------------------------------------------------------------
[12:05:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:06:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_79 ... 
[12:06:06    INFO]  - Will gen. input-parameter errors ...
[12:06:08    INFO]  - starting ANNZ::loadReaders() ... 
[12:06:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:08:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:08:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:08:38    INFO]  -----------------------------------------------------------------------------------------------------------
[12:08:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:09:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:09:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:09:14    INFO]  -----------------------------------------------------------------------------------------------------------
[12:09:14    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_79/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:09:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:09:15    INFO]  - will validate that the bias-correction actually improved the result ...
[12:09:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:09:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_79,
[12:09:21    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_79/plots/
[12:09:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_79/plots output/SPEC_advanced22/regres/train/ANNZ_79/plots_biasCor_before
[12:09:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:09:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_79,
[12:09:38    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_79/plots/
[12:09:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_79/plots output/SPEC_advanced22/regres/train/ANNZ_79/plots_biasCor_after
[12:09:50    INFO]  - Got original [KS-test,N_poiss]: [0.0942191 , 6.79833] , after the bias-correction: [0.0434685 , 5.53739] --> will KEEP the correction !

(12:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m80[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:09 INFO) 
[12:09:54    INFO]  -----------------------------------------------------
[12:09:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:09:54    INFO]  -----------------------------------------------------------------------------------------------------------
[12:09:54    INFO]  - starting ANNZ::Init()  ... 
[12:09:56    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_80/saveOpt.txt ...
[12:10:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:10:01    INFO] ----------------------------------------------------------------------------------------------------
[12:10:01    INFO]  - will book (ANNZ_80) method(BDT) with options: :NTrees=460:BoostType=Bagging:VarTransform=N,P
[12:10:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:10:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:10:01    INFO]      cuts (train):        ,
[12:10:01    INFO]      cuts (valid):       
[12:10:01    INFO]    - weights:            1
[12:10:01    INFO] ----------------------------------------------------------------------------------------------------
[12:10:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:10:49    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_80/ANNZ_80_weights/saveTrainOpt_ANNZ_80.txt ...
[12:10:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_80 ... 
[12:10:54    INFO]  - Will gen. input-parameter errors ...
[12:10:56    INFO]  - starting ANNZ::loadReaders() ... 
[12:11:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:15:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:15:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:15:47    INFO]  -----------------------------------------------------------------------------------------------------------
[12:15:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:16:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:16:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:16:56    INFO]  -----------------------------------------------------------------------------------------------------------
[12:16:56    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_80/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:16:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:16:58    INFO]  - will try to derive a bias correction ... 
[12:16:58    INFO]  - will validate that training produced an XML file for later ... 
[12:16:58    INFO]  - starting ANNZ::loadReaders() ... 
[12:17:02    INFO]  - will validate that the training was not a complete failure ... 
[12:17:03    INFO]  - training seems to have been successful! will move on ...
[12:17:03    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:17:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:17:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:17:09    INFO] ----------------------------------------------------------------------------------------------------
[12:17:09    INFO]  - will book (ANNZ_80_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:17:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:17:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:17:09    INFO]    - weights:            1
[12:17:09    INFO] ----------------------------------------------------------------------------------------------------
[12:17:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:17:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_80 ... 
[12:17:18    INFO]  - Will gen. input-parameter errors ...
[12:17:20    INFO]  - starting ANNZ::loadReaders() ... 
[12:17:32    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:22:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:22:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:22:11    INFO]  -----------------------------------------------------------------------------------------------------------
[12:22:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:23:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:23:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:23:22    INFO]  -----------------------------------------------------------------------------------------------------------
[12:23:23    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_80/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:23:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:23:24    INFO]  - will validate that the bias-correction actually improved the result ...
[12:23:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:23:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_80,
[12:23:31    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_80/plots/
[12:23:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_80/plots output/SPEC_advanced22/regres/train/ANNZ_80/plots_biasCor_before
[12:23:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:23:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_80,
[12:23:47    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_80/plots/
[12:23:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_80/plots output/SPEC_advanced22/regres/train/ANNZ_80/plots_biasCor_after
[12:23:58    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.86009] , after the bias-correction: [0.0441408 , 5.6268] --> will KEEP the correction !

(12:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m81[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:24 INFO) 
[12:24:02    INFO]  -----------------------------------------------------
[12:24:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:24:02    INFO]  -----------------------------------------------------------------------------------------------------------
[12:24:03    INFO]  - starting ANNZ::Init()  ... 
[12:24:07    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_81/saveOpt.txt ...
[12:24:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:24:12    INFO] ----------------------------------------------------------------------------------------------------
[12:24:12    INFO]  - will book (ANNZ_81) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N
[12:24:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:24:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:24:12    INFO]      cuts (train):        ,
[12:24:12    INFO]      cuts (valid):       
[12:24:12    INFO]    - weights:            1
[12:24:12    INFO] ----------------------------------------------------------------------------------------------------
[12:24:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:24:42    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_81/ANNZ_81_weights/saveTrainOpt_ANNZ_81.txt ...
[12:24:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_81 ... 
[12:24:44    INFO]  - Will gen. input-parameter errors ...
[12:24:46    INFO]  - starting ANNZ::loadReaders() ... 
[12:24:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:26:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:26:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:26:55    INFO]  -----------------------------------------------------------------------------------------------------------
[12:26:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:27:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:27:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:27:27    INFO]  -----------------------------------------------------------------------------------------------------------
[12:27:27    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_81/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:27:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:27:28    INFO]  - will try to derive a bias correction ... 
[12:27:28    INFO]  - will validate that training produced an XML file for later ... 
[12:27:28    INFO]  - starting ANNZ::loadReaders() ... 
[12:27:30    INFO]  - will validate that the training was not a complete failure ... 
[12:27:30    INFO]  - training seems to have been successful! will move on ...
[12:27:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:27:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:27:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:27:35    INFO] ----------------------------------------------------------------------------------------------------
[12:27:35    INFO]  - will book (ANNZ_81_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:27:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:27:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:27:35    INFO]    - weights:            1
[12:27:35    INFO] ----------------------------------------------------------------------------------------------------
[12:27:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:27:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_81 ... 
[12:27:43    INFO]  - Will gen. input-parameter errors ...
[12:27:44    INFO]  - starting ANNZ::loadReaders() ... 
[12:27:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:29:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:29:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:29:51    INFO]  -----------------------------------------------------------------------------------------------------------
[12:29:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:30:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:30:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:30:22    INFO]  -----------------------------------------------------------------------------------------------------------
[12:30:22    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_81/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:30:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:30:23    INFO]  - will validate that the bias-correction actually improved the result ...
[12:30:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:30:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_81,
Warning in <Fit>: Fit data is empty 
[12:30:29    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_81/plots/
[12:30:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_81/plots output/SPEC_advanced22/regres/train/ANNZ_81/plots_biasCor_before
[12:30:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:30:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_81,
Warning in <Fit>: Fit data is empty 
[12:30:45    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_81/plots/
[12:30:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_81/plots output/SPEC_advanced22/regres/train/ANNZ_81/plots_biasCor_after
[12:30:56    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.12581] , after the bias-correction: [0.0494062 , 5.95035] --> will KEEP the correction !

(12:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m82[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:31 INFO) 
[12:31:00    INFO]  -----------------------------------------------------
[12:31:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:31:00    INFO]  -----------------------------------------------------------------------------------------------------------
[12:31:00    INFO]  - starting ANNZ::Init()  ... 
[12:31:02    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_82/saveOpt.txt ...
[12:31:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:31:07    INFO] ----------------------------------------------------------------------------------------------------
[12:31:07    INFO]  - will book (ANNZ_82) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N,P
[12:31:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:31:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:31:07    INFO]      cuts (train):        ,
[12:31:07    INFO]      cuts (valid):       
[12:31:07    INFO]    - weights:            1
[12:31:07    INFO] ----------------------------------------------------------------------------------------------------
[12:31:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:31:34    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_82/ANNZ_82_weights/saveTrainOpt_ANNZ_82.txt ...
[12:31:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_82 ... 
[12:31:36    INFO]  - Will gen. input-parameter errors ...
[12:31:38    INFO]  - starting ANNZ::loadReaders() ... 
[12:31:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:34:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:34:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:34:49    INFO]  -----------------------------------------------------------------------------------------------------------
[12:34:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:35:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:35:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:35:37    INFO]  -----------------------------------------------------------------------------------------------------------
[12:35:38    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_82/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:35:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:35:38    INFO]  - will try to derive a bias correction ... 
[12:35:38    INFO]  - will validate that training produced an XML file for later ... 
[12:35:38    INFO]  - starting ANNZ::loadReaders() ... 
[12:35:40    INFO]  - will validate that the training was not a complete failure ... 
[12:35:40    INFO]  - training seems to have been successful! will move on ...
[12:35:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:35:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:35:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:35:44    INFO] ----------------------------------------------------------------------------------------------------
[12:35:44    INFO]  - will book (ANNZ_82_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:35:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:35:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:35:44    INFO]    - weights:            1
[12:35:44    INFO] ----------------------------------------------------------------------------------------------------
[12:35:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:35:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_82 ... 
[12:35:51    INFO]  - Will gen. input-parameter errors ...
[12:35:53    INFO]  - starting ANNZ::loadReaders() ... 
[12:35:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:38:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:38:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:38:54    INFO]  -----------------------------------------------------------------------------------------------------------
[12:38:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:39:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:39:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:39:36    INFO]  -----------------------------------------------------------------------------------------------------------
[12:39:36    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_82/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:39:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:39:37    INFO]  - will validate that the bias-correction actually improved the result ...
[12:39:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:39:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_82,
[12:39:43    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_82/plots/
[12:39:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_82/plots output/SPEC_advanced22/regres/train/ANNZ_82/plots_biasCor_before
[12:39:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:39:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_82,
[12:39:59    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_82/plots/
[12:40:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_82/plots output/SPEC_advanced22/regres/train/ANNZ_82/plots_biasCor_after
[12:40:10    INFO]  - Got original [KS-test,N_poiss]: [0.101501 , 6.43426] , after the bias-correction: [0.0441408 , 5.72005] --> will KEEP the correction !

(12:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m83[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:40 INFO) 
[12:40:13    INFO]  -----------------------------------------------------
[12:40:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:40:13    INFO]  -----------------------------------------------------------------------------------------------------------
[12:40:14    INFO]  - starting ANNZ::Init()  ... 
[12:40:15    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_83/saveOpt.txt ...
[12:40:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:40:20    INFO] ----------------------------------------------------------------------------------------------------
[12:40:20    INFO]  - will book (ANNZ_83) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[12:40:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:40:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:40:20    INFO]      cuts (train):        ,
[12:40:20    INFO]      cuts (valid):       
[12:40:20    INFO]    - weights:            1
[12:40:20    INFO] ----------------------------------------------------------------------------------------------------
[12:40:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:40:54    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_83/ANNZ_83_weights/saveTrainOpt_ANNZ_83.txt ...
[12:40:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_83 ... 
[12:40:58    INFO]  - Will gen. input-parameter errors ...
[12:41:00    INFO]  - starting ANNZ::loadReaders() ... 
[12:41:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:44:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:44:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:44:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:44:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:45:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:45:05    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:45:05    INFO]  -----------------------------------------------------------------------------------------------------------
[12:45:05    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_83/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:45:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:45:06    INFO]  - will try to derive a bias correction ... 
[12:45:06    INFO]  - will validate that training produced an XML file for later ... 
[12:45:06    INFO]  - starting ANNZ::loadReaders() ... 
[12:45:10    INFO]  - will validate that the training was not a complete failure ... 
[12:45:10    INFO]  - training seems to have been successful! will move on ...
[12:45:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:45:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:45:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:45:15    INFO] ----------------------------------------------------------------------------------------------------
[12:45:15    INFO]  - will book (ANNZ_83_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:45:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:45:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:45:15    INFO]    - weights:            1
[12:45:15    INFO] ----------------------------------------------------------------------------------------------------
[12:45:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:45:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_83 ... 
[12:45:24    INFO]  - Will gen. input-parameter errors ...
[12:45:26    INFO]  - starting ANNZ::loadReaders() ... 
[12:45:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:49:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:49:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:49:02    INFO]  -----------------------------------------------------------------------------------------------------------
[12:49:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:49:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:49:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:49:51    INFO]  -----------------------------------------------------------------------------------------------------------
[12:49:51    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_83/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:49:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:49:53    INFO]  - will validate that the bias-correction actually improved the result ...
[12:49:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:49:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_83,
[12:49:58    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_83/plots/
[12:50:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_83/plots output/SPEC_advanced22/regres/train/ANNZ_83/plots_biasCor_before
[12:50:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:50:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_83,
[12:50:14    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_83/plots/
[12:50:29        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_83/plots output/SPEC_advanced22/regres/train/ANNZ_83/plots_biasCor_after
[12:50:29    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.86915] , after the bias-correction: [0.0444768 , 5.62586] --> will KEEP the correction !

(12:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m84[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:50 INFO) 
[12:50:33    INFO]  -----------------------------------------------------
[12:50:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:50:33    INFO]  -----------------------------------------------------------------------------------------------------------
[12:50:34    INFO]  - starting ANNZ::Init()  ... 
[12:50:35    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_84/saveOpt.txt ...
[12:50:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:50:41    INFO] ----------------------------------------------------------------------------------------------------
[12:50:41    INFO]  - will book (ANNZ_84) method(BDT) with options: :NTrees=380:BoostType=Bagging:VarTransform=N,P
[12:50:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:50:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:50:41    INFO]      cuts (train):        ,
[12:50:41    INFO]      cuts (valid):       
[12:50:41    INFO]    - weights:            1
[12:50:41    INFO] ----------------------------------------------------------------------------------------------------
[12:50:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:51:19    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_84/ANNZ_84_weights/saveTrainOpt_ANNZ_84.txt ...
[12:51:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_84 ... 
[12:51:23    INFO]  - Will gen. input-parameter errors ...
[12:51:25    INFO]  - starting ANNZ::loadReaders() ... 
[12:51:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[12:55:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:55:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:55:25    INFO]  -----------------------------------------------------------------------------------------------------------
[12:55:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[12:56:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:56:15    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:15    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_84/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:56:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:56:17    INFO]  - will try to derive a bias correction ... 
[12:56:17    INFO]  - will validate that training produced an XML file for later ... 
[12:56:17    INFO]  - starting ANNZ::loadReaders() ... 
[12:56:21    INFO]  - will validate that the training was not a complete failure ... 
[12:56:21    INFO]  - training seems to have been successful! will move on ...
[12:56:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:56:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:56:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:56:26    INFO] ----------------------------------------------------------------------------------------------------
[12:56:26    INFO]  - will book (ANNZ_84_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:56:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:56:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:56:26    INFO]    - weights:            1
[12:56:26    INFO] ----------------------------------------------------------------------------------------------------
[12:56:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:56:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_84 ... 
[12:56:34    INFO]  - Will gen. input-parameter errors ...
[12:56:37    INFO]  - starting ANNZ::loadReaders() ... 
[12:56:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:00:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:00:47    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:00:47    INFO]  -----------------------------------------------------------------------------------------------------------
[13:00:47    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:01:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:01:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:01:46    INFO]  -----------------------------------------------------------------------------------------------------------
[13:01:46    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_84/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:01:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:01:48    INFO]  - will validate that the bias-correction actually improved the result ...
[13:01:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:01:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_84,
[13:01:53    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_84/plots/
[13:02:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_84/plots output/SPEC_advanced22/regres/train/ANNZ_84/plots_biasCor_before
[13:02:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:02:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_84,
[13:02:10    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_84/plots/
[13:02:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_84/plots output/SPEC_advanced22/regres/train/ANNZ_84/plots_biasCor_after
[13:02:21    INFO]  - Got original [KS-test,N_poiss]: [0.0933229 , 6.92233] , after the bias-correction: [0.0439166 , 5.61884] --> will KEEP the correction !

(13:02 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:02 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m85[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:02 INFO) 
[13:02:25    INFO]  -----------------------------------------------------
[13:02:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:02:25    INFO]  -----------------------------------------------------------------------------------------------------------
[13:02:26    INFO]  - starting ANNZ::Init()  ... 
[13:02:27    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_85/saveOpt.txt ...
[13:02:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:02:32    INFO] ----------------------------------------------------------------------------------------------------
[13:02:32    INFO]  - will book (ANNZ_85) method(BDT) with options: :NTrees=460:BoostType=AdaBoost:VarTransform=N,P
[13:02:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:02:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:02:32    INFO]      cuts (train):        ,
[13:02:32    INFO]      cuts (valid):       
[13:02:32    INFO]    - weights:            1
[13:02:32    INFO] ----------------------------------------------------------------------------------------------------
[13:02:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:02:58    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_85/ANNZ_85_weights/saveTrainOpt_ANNZ_85.txt ...
[13:02:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_85 ... 
[13:02:59    INFO]  - Will gen. input-parameter errors ...
[13:03:01    INFO]  - starting ANNZ::loadReaders() ... 
[13:03:06    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:06:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:06:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:06:06    INFO]  -----------------------------------------------------------------------------------------------------------
[13:06:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:06:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:06:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:06:50    INFO]  -----------------------------------------------------------------------------------------------------------
[13:06:50    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_85/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:06:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:06:51    INFO]  - will try to derive a bias correction ... 
[13:06:51    INFO]  - will validate that training produced an XML file for later ... 
[13:06:51    INFO]  - starting ANNZ::loadReaders() ... 
[13:06:53    INFO]  - will validate that the training was not a complete failure ... 
[13:06:53    INFO]  - training seems to have been successful! will move on ...
[13:06:53    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:06:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:06:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:06:58    INFO] ----------------------------------------------------------------------------------------------------
[13:06:58    INFO]  - will book (ANNZ_85_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:06:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:06:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:06:58    INFO]    - weights:            1
[13:06:58    INFO] ----------------------------------------------------------------------------------------------------
[13:06:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:07:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_85 ... 
[13:07:04    INFO]  - Will gen. input-parameter errors ...
[13:07:06    INFO]  - starting ANNZ::loadReaders() ... 
[13:07:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:10:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:10:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:10:08    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:10:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:10:53    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:10:53    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:53    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_85/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:10:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:10:54    INFO]  - will validate that the bias-correction actually improved the result ...
[13:10:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:10:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_85,
Warning in <Fit>: Fit data is empty 
[13:10:59    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_85/plots/
[13:11:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_85/plots output/SPEC_advanced22/regres/train/ANNZ_85/plots_biasCor_before
[13:11:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:11:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_85,
[13:11:15    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_85/plots/
[13:11:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_85/plots output/SPEC_advanced22/regres/train/ANNZ_85/plots_biasCor_after
[13:11:26    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40365] , after the bias-correction: [0.0442528 , 5.77607] --> will KEEP the correction !

(13:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m86[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:11 INFO) 
[13:11:30    INFO]  -----------------------------------------------------
[13:11:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:11:30    INFO]  -----------------------------------------------------------------------------------------------------------
[13:11:30    INFO]  - starting ANNZ::Init()  ... 
[13:11:31    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_86/saveOpt.txt ...
[13:11:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:11:37    INFO] ----------------------------------------------------------------------------------------------------
[13:11:37    INFO]  - will book (ANNZ_86) method(BDT) with options: :NTrees=250:BoostType=Bagging:VarTransform=N,P
[13:11:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:11:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:11:37    INFO]      cuts (train):        ,
[13:11:37    INFO]      cuts (valid):       
[13:11:37    INFO]    - weights:            1
[13:11:37    INFO] ----------------------------------------------------------------------------------------------------
[13:11:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:12:02    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_86/ANNZ_86_weights/saveTrainOpt_ANNZ_86.txt ...
[13:12:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_86 ... 
[13:12:05    INFO]  - Will gen. input-parameter errors ...
[13:12:06    INFO]  - starting ANNZ::loadReaders() ... 
[13:12:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:14:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:14:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:14:37    INFO]  -----------------------------------------------------------------------------------------------------------
[13:14:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:15:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:15:16    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:15:16    INFO]  -----------------------------------------------------------------------------------------------------------
[13:15:17    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_86/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:15:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:15:18    INFO]  - will try to derive a bias correction ... 
[13:15:18    INFO]  - will validate that training produced an XML file for later ... 
[13:15:18    INFO]  - starting ANNZ::loadReaders() ... 
[13:15:20    INFO]  - will validate that the training was not a complete failure ... 
[13:15:20    INFO]  - training seems to have been successful! will move on ...
[13:15:20    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:15:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:15:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:15:26    INFO] ----------------------------------------------------------------------------------------------------
[13:15:26    INFO]  - will book (ANNZ_86_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:15:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:15:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:15:26    INFO]    - weights:            1
[13:15:26    INFO] ----------------------------------------------------------------------------------------------------
[13:15:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:15:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_86 ... 
[13:15:33    INFO]  - Will gen. input-parameter errors ...
[13:15:35    INFO]  - starting ANNZ::loadReaders() ... 
[13:15:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:17:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:17:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:17:59    INFO]  -----------------------------------------------------------------------------------------------------------
[13:17:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:18:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:18:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:18:32    INFO]  -----------------------------------------------------------------------------------------------------------
[13:18:32    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_86/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:18:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:18:34    INFO]  - will validate that the bias-correction actually improved the result ...
[13:18:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:18:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_86,
[13:18:39    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_86/plots/
[13:18:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_86/plots output/SPEC_advanced22/regres/train/ANNZ_86/plots_biasCor_before
[13:18:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:18:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_86,
[13:18:55    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_86/plots/
[13:19:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_86/plots output/SPEC_advanced22/regres/train/ANNZ_86/plots_biasCor_after
[13:19:07    INFO]  - Got original [KS-test,N_poiss]: [0.0942191 , 6.79833] , after the bias-correction: [0.0434685 , 5.53739] --> will KEEP the correction !

(13:19 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:19 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m87[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:19 INFO) 
[13:19:10    INFO]  -----------------------------------------------------
[13:19:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:19:10    INFO]  -----------------------------------------------------------------------------------------------------------
[13:19:11    INFO]  - starting ANNZ::Init()  ... 
[13:19:12    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_87/saveOpt.txt ...
[13:19:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:19:17    INFO] ----------------------------------------------------------------------------------------------------
[13:19:17    INFO]  - will book (ANNZ_87) method(BDT) with options: :NTrees=330:BoostType=AdaBoost:VarTransform=N,P
[13:19:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:19:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:19:17    INFO]      cuts (train):        ,
[13:19:17    INFO]      cuts (valid):       
[13:19:17    INFO]    - weights:            1
[13:19:17    INFO] ----------------------------------------------------------------------------------------------------
[13:19:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:19:37    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_87/ANNZ_87_weights/saveTrainOpt_ANNZ_87.txt ...
[13:19:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_87 ... 
[13:19:38    INFO]  - Will gen. input-parameter errors ...
[13:19:40    INFO]  - starting ANNZ::loadReaders() ... 
[13:19:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:22:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:22:05    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:22:05    INFO]  -----------------------------------------------------------------------------------------------------------
[13:22:05    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:22:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:22:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:22:42    INFO]  -----------------------------------------------------------------------------------------------------------
[13:22:42    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_87/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:22:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:22:43    INFO]  - will try to derive a bias correction ... 
[13:22:43    INFO]  - will validate that training produced an XML file for later ... 
[13:22:43    INFO]  - starting ANNZ::loadReaders() ... 
[13:22:44    INFO]  - will validate that the training was not a complete failure ... 
[13:22:44    INFO]  - training seems to have been successful! will move on ...
[13:22:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:22:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:22:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:22:48    INFO] ----------------------------------------------------------------------------------------------------
[13:22:48    INFO]  - will book (ANNZ_87_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:22:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:22:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:22:48    INFO]    - weights:            1
[13:22:48    INFO] ----------------------------------------------------------------------------------------------------
[13:22:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:22:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_87 ... 
[13:22:55    INFO]  - Will gen. input-parameter errors ...
[13:22:57    INFO]  - starting ANNZ::loadReaders() ... 
[13:23:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:26:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:26:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:26:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:26:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:26:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:26:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:26:44    INFO]  -----------------------------------------------------------------------------------------------------------
[13:26:44    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_87/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:26:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:26:45    INFO]  - will validate that the bias-correction actually improved the result ...
[13:26:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:26:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_87,
Warning in <Fit>: Fit data is empty 
[13:26:50    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_87/plots/
[13:27:02        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_87/plots output/SPEC_advanced22/regres/train/ANNZ_87/plots_biasCor_before
[13:27:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:27:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_87,
Warning in <Fit>: Fit data is empty 
[13:27:07    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_87/plots/
[13:27:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_87/plots output/SPEC_advanced22/regres/train/ANNZ_87/plots_biasCor_after
[13:27:19    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40538] , after the bias-correction: [0.0435806 , 5.8054] --> will KEEP the correction !

(13:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m88[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:27 INFO) 
[13:27:22    INFO]  -----------------------------------------------------
[13:27:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:27:22    INFO]  -----------------------------------------------------------------------------------------------------------
[13:27:23    INFO]  - starting ANNZ::Init()  ... 
[13:27:24    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_88/saveOpt.txt ...
[13:27:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:27:29    INFO] ----------------------------------------------------------------------------------------------------
[13:27:29    INFO]  - will book (ANNZ_88) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N,P
[13:27:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:27:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:27:29    INFO]      cuts (train):        ,
[13:27:29    INFO]      cuts (valid):       
[13:27:29    INFO]    - weights:            1
[13:27:29    INFO] ----------------------------------------------------------------------------------------------------
[13:27:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:28:20    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_88/ANNZ_88_weights/saveTrainOpt_ANNZ_88.txt ...
[13:28:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_88 ... 
[13:28:25    INFO]  - Will gen. input-parameter errors ...
[13:28:27    INFO]  - starting ANNZ::loadReaders() ... 
[13:28:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:33:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:33:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:33:36    INFO]  -----------------------------------------------------------------------------------------------------------
[13:33:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:34:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:34:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:34:47    INFO]  -----------------------------------------------------------------------------------------------------------
[13:34:47    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_88/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:34:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:34:49    INFO]  - will try to derive a bias correction ... 
[13:34:49    INFO]  - will validate that training produced an XML file for later ... 
[13:34:49    INFO]  - starting ANNZ::loadReaders() ... 
[13:34:54    INFO]  - will validate that the training was not a complete failure ... 
[13:34:55    INFO]  - training seems to have been successful! will move on ...
[13:34:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:34:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:35:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:35:00    INFO] ----------------------------------------------------------------------------------------------------
[13:35:00    INFO]  - will book (ANNZ_88_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:35:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:35:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:35:00    INFO]    - weights:            1
[13:35:00    INFO] ----------------------------------------------------------------------------------------------------
[13:35:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:35:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_88 ... 
[13:35:10    INFO]  - Will gen. input-parameter errors ...
[13:35:12    INFO]  - starting ANNZ::loadReaders() ... 
[13:35:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:40:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:40:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:40:36    INFO]  -----------------------------------------------------------------------------------------------------------
[13:40:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:41:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:41:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:41:58    INFO]  -----------------------------------------------------------------------------------------------------------
[13:41:58    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_88/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:42:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:42:00    INFO]  - will validate that the bias-correction actually improved the result ...
[13:42:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:42:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_88,
[13:42:06    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_88/plots/
[13:42:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_88/plots output/SPEC_advanced22/regres/train/ANNZ_88/plots_biasCor_before
[13:42:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:42:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_88,
[13:42:23    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_88/plots/
[13:42:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_88/plots output/SPEC_advanced22/regres/train/ANNZ_88/plots_biasCor_after
[13:42:35    INFO]  - Got original [KS-test,N_poiss]: [0.0933229 , 6.85173] , after the bias-correction: [0.0453731 , 5.58688] --> will KEEP the correction !

(13:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m89[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:42 INFO) 
[13:42:39    INFO]  -----------------------------------------------------
[13:42:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:42:39    INFO]  -----------------------------------------------------------------------------------------------------------
[13:42:40    INFO]  - starting ANNZ::Init()  ... 
[13:42:41    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/train/ANNZ_89/saveOpt.txt ...
[13:42:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:42:46    INFO] ----------------------------------------------------------------------------------------------------
[13:42:46    INFO]  - will book (ANNZ_89) method(BDT) with options: :NTrees=340:BoostType=AdaBoost:VarTransform=P
[13:42:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:42:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:42:46    INFO]      cuts (train):        ,
[13:42:46    INFO]      cuts (valid):       
[13:42:46    INFO]    - weights:            1
[13:42:46    INFO] ----------------------------------------------------------------------------------------------------
[13:42:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:43:07    INFO]  - Saving MLM information in ./output/SPEC_advanced22/regres/train/ANNZ_89/ANNZ_89_weights/saveTrainOpt_ANNZ_89.txt ...
[13:43:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_89 ... 
[13:43:09    INFO]  - Will gen. input-parameter errors ...
[13:43:11    INFO]  - starting ANNZ::loadReaders() ... 
[13:43:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:45:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:45:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:45:19    INFO]  -----------------------------------------------------------------------------------------------------------
[13:45:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:45:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:45:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:45:51    INFO]  -----------------------------------------------------------------------------------------------------------
[13:45:51    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_89/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:45:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:45:52    INFO]  - will try to derive a bias correction ... 
[13:45:52    INFO]  - will validate that training produced an XML file for later ... 
[13:45:52    INFO]  - starting ANNZ::loadReaders() ... 
[13:45:54    INFO]  - will validate that the training was not a complete failure ... 
[13:45:54    INFO]  - training seems to have been successful! will move on ...
[13:45:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:45:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:45:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:45:58    INFO] ----------------------------------------------------------------------------------------------------
[13:45:58    INFO]  - will book (ANNZ_89_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:45:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:45:58    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:45:58    INFO]    - weights:            1
[13:45:58    INFO] ----------------------------------------------------------------------------------------------------
[13:45:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:46:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_89 ... 
[13:46:05    INFO]  - Will gen. input-parameter errors ...
[13:46:06    INFO]  - starting ANNZ::loadReaders() ... 
[13:46:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_train*.root
[13:48:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:48:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:48:38    INFO]  -----------------------------------------------------------------------------------------------------------
[13:48:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced22/rootIn/ANNZ_tree_valid*.root
[13:49:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:49:12    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:49:12    INFO]  -----------------------------------------------------------------------------------------------------------
[13:49:12    INFO]  - Saving file ./output/SPEC_advanced22/regres/train/ANNZ_89/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:49:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:49:13    INFO]  - will validate that the bias-correction actually improved the result ...
[13:49:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:49:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_89,
Warning in <Fit>: Fit data is empty 
[13:49:18    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_89/plots/
[13:49:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_89/plots output/SPEC_advanced22/regres/train/ANNZ_89/plots_biasCor_before
[13:49:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:49:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_89,
Warning in <Fit>: Fit data is empty 
[13:49:35    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/train/ANNZ_89/plots/
[13:49:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced22/regres/train/ANNZ_89/plots output/SPEC_advanced22/regres/train/ANNZ_89/plots_biasCor_after
[13:49:47    INFO]  - Got original [KS-test,N_poiss]: [0.0722609 , 6.2056] , after the bias-correction: [0.0332462 , 5.3808] --> will KEEP the correction !

(13:49 INFO) [40;37;1m - 30/03/19 13:49:50 - finished running ANNZ ![0m
(15:20 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:20 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:20 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:20 INFO) [40;37;1m - 30/03/19 15:20:31 - starting ANNZ[0m
(15:20 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:20 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.045[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:20 INFO) 
[15:20:31    INFO]  -----------------------------------------------------
[15:20:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:20:31    INFO]  -----------------------------------------------------------------------------------------------------------
[15:20:31    INFO]  - starting ANNZ::Init()  ... 
[15:20:31    INFO]  - Will generate 1 PDFs ... 
[15:21:22    INFO] --------------------------------------------------------
[15:21:22    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,
[15:21:22    INFO]  - All REJECTED MLMs: 
[15:21:22    INFO] ----------------------------------------------------------------------------------------------------------------
[15:21:38    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/optim/saveOpt.txt ...
[15:25:22    INFO]  - starting ANNZ::Optim() ... 
[15:25:22    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[15:25:22    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[15:28:57    INFO]  - Found 90 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[15:28:57    INFO]  - Now in merging loop 1/2
[15:29:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:29:08    INFO]  - Now in merging loop 2/2
[15:29:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:29:22    INFO]  - Now in final merging of all sub-steps ...
[15:29:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:29:26    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced22/regres/train/postTrain/ANNZ_tree_train_00001.root) ... 
[15:34:01    INFO]  - Found 90 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[15:34:01    INFO]  - Now in merging loop 1/2
[15:34:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:34:16    INFO]  - Now in merging loop 2/2
[15:34:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:34:27    INFO]  - Now in final merging of all sub-steps ...
[15:34:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:34:28    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced22/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[15:37:43    INFO]  - Found 90 MLM trees to merge, but have maxTreesMerge = 50 -> Will merge in 2 sub-steps
[15:37:43    INFO]  - Now in merging loop 1/2
[15:37:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:37:52    INFO]  - Now in merging loop 2/2
[15:37:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:38:00    INFO]  - Now in final merging of all sub-steps ...
[15:38:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:38:02    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/SPEC_advanced22/regres/train/postTrain/ANNZ_tree_errKNN_00001.root) ... 
[15:38:05    INFO]  - Saving file ./output/SPEC_advanced22/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[15:38:08    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[15:38:08    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced22/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[15:38:08    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[15:38:09    INFO]  - ending makeTreeRegClsAllMLM() ... 
[15:38:09    INFO]  - starting ANNZ::optimReg() ... 
[15:38:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:38:19    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced22/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[15:38:20    INFO]  - starting ANNZ::fillColosureV() ... 
[15:38:22    INFO]  ---------------------------------------------------------------------------------- 
[15:38:22    INFO]  - Got the following average properties: 
[15:38:22    INFO]  --------------------------------------- 
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00351147 	 0.0654442 	 0.0888932
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00415776 	 0.0649411 	 0.0909884
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0100837 	 0.0486043 	 0.0856084
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.0126232 	 0.0451912 	 0.0848329
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.0132177 	 0.0449262 	 0.0855468
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.00442872 	 0.0649654 	 0.0908139
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.010319 	 0.0482746 	 0.0866688
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.0131235 	 0.0445003 	 0.0857954
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.0129895 	 0.044342 	 0.0863445
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00351147 	 0.0654442 	 0.0888932
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.0130434 	 0.0448278 	 0.0854339
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.0107708 	 0.0474447 	 0.087444
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00793929 	 0.0449756 	 0.0490144
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0126232 	 0.0451912 	 0.0848329
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00766297 	 0.043037 	 0.0475556
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00405219 	 0.0653376 	 0.0896627
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.010688 	 0.0471466 	 0.0881886
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00432475 	 0.0650698 	 0.0910919
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.0125231 	 0.0441086 	 0.0880664
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.010688 	 0.0471466 	 0.0881886
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.0127844 	 0.0446267 	 0.0861592
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.0134591 	 0.0446895 	 0.0847296
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.010319 	 0.0482746 	 0.0866688
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00999707 	 0.0480872 	 0.087731
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00796406 	 0.0426456 	 0.0500796
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.00383813 	 0.0654879 	 0.0892799
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.0125769 	 0.0444834 	 0.0888113
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0132909 	 0.0436436 	 0.0882691
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.00757727 	 0.0425027 	 0.0497945
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.0044289 	 0.0649654 	 0.0908139
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.00862969 	 0.0579441 	 0.0883301
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00862969 	 0.0579441 	 0.0883301
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.0104078 	 0.0475167 	 0.0873902
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.0104764 	 0.0473917 	 0.0883943
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.012949 	 0.0449282 	 0.0875483
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.00844985 	 0.075008 	 0.0881222
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.00793929 	 0.0449756 	 0.0490144
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.00701085 	 0.0438668 	 0.0467325
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.0128816 	 0.0449275 	 0.088315
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.0127844 	 0.0446267 	 0.0861592
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_40 	 0.00728125 	 0.045279 	 0.0485344
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_41 	 0.00377055 	 0.0605713 	 0.0898944
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_42 	 0.00862969 	 0.0579441 	 0.0883301
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_43 	 0.0085229 	 0.0580844 	 0.0880375
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_44 	 0.00824634 	 0.0439434 	 0.0503122
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_45 	 0.0130434 	 0.0448278 	 0.0854339
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_46 	 0.00794325 	 0.0448546 	 0.0484995
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_47 	 0.0105675 	 0.0472563 	 0.0888239
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_48 	 0.00796953 	 0.0437 	 0.0501382
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_49 	 0.0086214 	 0.0578823 	 0.0881441
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_50 	 0.012949 	 0.0449282 	 0.0875483
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_51 	 0.00803683 	 0.0442747 	 0.0511148
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_52 	 0.0107851 	 0.047399 	 0.0890018
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_53 	 0.00851297 	 0.058159 	 0.0876871
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_54 	 0.00695752 	 0.0440209 	 0.0463654
[15:38:22    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_55 	 0.00718986 	 0.0437667 	 0.0479798
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_56 	 0.00423026 	 0.064753 	 0.0914167
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_57 	 0.0127844 	 0.0446267 	 0.0861592
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_58 	 0.00836361 	 0.0579834 	 0.0881632
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_59 	 0.012684 	 0.0443215 	 0.0860304
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_60 	 0.0124282 	 0.0447206 	 0.0853151
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_61 	 0.0134591 	 0.0446895 	 0.0847296
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_62 	 0.00844981 	 0.0580601 	 0.0874698
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_63 	 0.00842495 	 0.058067 	 0.0877568
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_64 	 0.00803683 	 0.0442747 	 0.0511148
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_65 	 0.00405219 	 0.0653376 	 0.0896627
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_66 	 0.00422504 	 0.0601828 	 0.0875896
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_67 	 0.00710395 	 0.0443237 	 0.0442221
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_68 	 0.010319 	 0.0482746 	 0.0866688
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_69 	 0.00420495 	 0.0602705 	 0.0879786
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_70 	 0.0125769 	 0.0444834 	 0.0888113
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_71 	 0.00423026 	 0.064753 	 0.0914167
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_72 	 0.0101004 	 0.0472718 	 0.0902376
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_73 	 0.00422919 	 0.0601147 	 0.0883262
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_74 	 0.00986692 	 0.04715 	 0.0913742
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_75 	 0.00711094 	 0.0440845 	 0.0462167
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_76 	 0.00431174 	 0.0650592 	 0.0901945
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_77 	 0.010558 	 0.0470855 	 0.0888222
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_78 	 0.00820349 	 0.0436295 	 0.0513719
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_79 	 0.0106625 	 0.048666 	 0.0856059
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_80 	 0.0107851 	 0.047399 	 0.0890018
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_81 	 0.00844981 	 0.0580601 	 0.0874698
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_82 	 0.00372966 	 0.0652424 	 0.089506
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_83 	 0.0105675 	 0.0472563 	 0.0888239
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_84 	 0.00984284 	 0.0483382 	 0.0862702
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_85 	 0.00423026 	 0.064753 	 0.0914167
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_86 	 0.0106625 	 0.048666 	 0.0856059
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_87 	 0.00431174 	 0.0650592 	 0.0901945
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_88 	 0.0106222 	 0.047933 	 0.0879514
[15:38:23    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_89 	 0.00393989 	 0.0604471 	 0.0894219
[15:38:23    INFO]  ------------------------------------------------------------------------------------------------- 
[15:38:23    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[15:38:23    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[15:38:23    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[15:38:23    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[15:38:23    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 12.5% of the [sig68] dist.
[15:38:23    INFO]  - The "best" MLM is: ANNZ_54
[15:38:23    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[15:38:23    INFO]  - ANNZ_0 has sigma68 = 0.0654442 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_1 has sigma68 = 0.0649411 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_2 has sigma68 = 0.0486043 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_3 has sigma68 = 0.0451912 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_5 has sigma68 = 0.0649654 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_6 has sigma68 = 0.0482746 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_9 has sigma68 = 0.0654442 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_11 has sigma68 = 0.0474447 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_13 has sigma68 = 0.0451912 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_15 has sigma68 = 0.0653376 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_16 has sigma68 = 0.0471466 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_17 has sigma68 = 0.0650698 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_19 has sigma68 = 0.0471466 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_22 has sigma68 = 0.0482746 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_23 has sigma68 = 0.0480872 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_25 has sigma68 = 0.0654879 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_29 has sigma68 = 0.0649654 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_30 has sigma68 = 0.0579441 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_31 has sigma68 = 0.0579441 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_32 has sigma68 = 0.0475167 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_33 has sigma68 = 0.0473917 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_35 has sigma68 = 0.075008 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_40 has sigma68 = 0.045279 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_41 has sigma68 = 0.0605713 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_42 has sigma68 = 0.0579441 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_43 has sigma68 = 0.0580844 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_47 has sigma68 = 0.0472563 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_49 has sigma68 = 0.0578823 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_52 has sigma68 = 0.047399 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_53 has sigma68 = 0.058159 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_56 has sigma68 = 0.064753 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_58 has sigma68 = 0.0579834 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_62 has sigma68 = 0.0580601 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_63 has sigma68 = 0.058067 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_65 has sigma68 = 0.0653376 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_66 has sigma68 = 0.0601828 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_68 has sigma68 = 0.0482746 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_69 has sigma68 = 0.0602705 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_71 has sigma68 = 0.064753 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_72 has sigma68 = 0.0472718 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_73 has sigma68 = 0.0601147 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_74 has sigma68 = 0.04715 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_76 has sigma68 = 0.0650592 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_77 has sigma68 = 0.0470855 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_79 has sigma68 = 0.048666 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_80 has sigma68 = 0.047399 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_81 has sigma68 = 0.0580601 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_82 has sigma68 = 0.0652424 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_83 has sigma68 = 0.0472563 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_84 has sigma68 = 0.0483382 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_85 has sigma68 = 0.064753 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_86 has sigma68 = 0.048666 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_87 has sigma68 = 0.0650592 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_88 has sigma68 = 0.047933 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - ANNZ_89 has sigma68 = 0.0604471 which is above threshold (0.045) -> it will be rejected from the PDF ...
[15:38:23    INFO]  - initial PDF weights: ANNZ_54:0.091 ANNZ_37:0.087 ANNZ_55:0.082 ANNZ_28:0.078 ANNZ_75:0.074 ANNZ_67:0.069 ANNZ_14:0.065 ANNZ_24:0.061 ANNZ_48:0.056 ANNZ_78:0.052 ANNZ_64:0.048 ANNZ_51:0.043 ANNZ_44:0.039 ANNZ_18:0.035 ANNZ_70:0.030 ANNZ_26:0.026 ANNZ_59:0.022 ANNZ_39:0.017 ANNZ_57:0.013 ANNZ_20:0.009 ANNZ_8:0.004 
[15:38:23    INFO]  - will loop on the input trees ...
[15:38:24    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.45027e-01
[15:38:24    INFO]  - nTry: 1 - min-param best/prev/now: 2.45027e-01 / 2.45027e-01 / 2.48435e-01
[15:38:24    INFO]  - nTry: 2 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.51648e-01
[15:38:25    INFO]  - nTry: 3 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.52643e-01
[15:38:25    INFO]  - nTry: 4 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.53391e-01
[15:38:25    INFO]  - nTry: 5 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.53809e-01
[15:38:25    INFO]  - nTry: 6 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.54383e-01
[15:38:25    INFO]  - nTry: 7 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.54507e-01
[15:38:26    INFO]  - nTry: 8 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.54659e-01
[15:38:26    INFO]  - nTry: 9 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.54492e-01
[15:38:26    INFO]  - nTry: 10 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.54411e-01
[15:38:28    INFO]  - nTry: 20 - min-param best/prev/now: 2.45027e-01 / 2.48435e-01 / 2.53826e-01
[15:38:30    INFO]  - nTry: 30 - min-param best/prev/now: 2.45027e-01 / 2.53783e-01 / 2.54274e-01
[15:38:32    INFO]  - nTry: 40 - min-param best/prev/now: 2.45027e-01 / 2.54836e-01 / 2.54915e-01
[15:38:34    INFO]  - nTry: 50 - min-param best/prev/now: 2.45027e-01 / 2.55068e-01 / 2.55123e-01
[15:38:36    INFO]  - nTry: 60 - min-param best/prev/now: 2.45027e-01 / 2.55153e-01 / 2.55227e-01
[15:38:38    INFO]  - nTry: 70 - min-param best/prev/now: 2.45027e-01 / 2.55407e-01 / 2.55440e-01
[15:38:41    INFO]  - nTry: 80 - min-param best/prev/now: 2.45027e-01 / 2.55511e-01 / 2.55544e-01
[15:38:43    INFO]  - nTry: 90 - min-param best/prev/now: 2.45027e-01 / 2.55344e-01 / 2.55319e-01
[15:38:45    INFO]  - nTry: 100 - min-param best/prev/now: 2.45027e-01 / 2.55282e-01 / 2.55269e-01
[15:38:49    INFO]  - nTry: 120 - min-param best/prev/now: 2.45027e-01 / 2.55350e-01 / 2.55536e-01
[15:38:53    INFO]  - nTry: 140 - min-param best/prev/now: 2.45027e-01 / 2.55394e-01 / 2.55446e-01
[15:38:55    INFO]  - nTry: 150 - min-param best/prev/now: 2.45027e-01 / 2.55498e-01 / 2.55532e-01
[15:38:57    INFO]  - nTry: 160 - min-param best/prev/now: 2.45027e-01 / 2.55565e-01 / 2.55590e-01
[15:39:01    INFO]  - nTry: 180 - min-param best/prev/now: 2.45027e-01 / 2.55781e-01 / 2.55770e-01
[15:39:06    INFO]  - nTry: 200 - min-param best/prev/now: 2.45027e-01 / 2.55675e-01 / 2.55654e-01
[15:39:10    INFO]  - nTry: 220 - min-param best/prev/now: 2.45027e-01 / 2.55632e-01 / 2.55657e-01
[15:39:14    INFO]  - nTry: 240 - min-param best/prev/now: 2.45027e-01 / 2.55758e-01 / 2.55769e-01
[15:39:16    INFO]  - nTry: 250 - min-param best/prev/now: 2.45027e-01 / 2.55774e-01 / 2.55793e-01
[15:39:16    INFO]  - finished PDF optimization! - final minimization parameter: 2.45027e-01 , PDF weights: ANNZ_54:0.091 ANNZ_37:0.087 ANNZ_55:0.082 ANNZ_28:0.078 ANNZ_75:0.074 ANNZ_67:0.069 ANNZ_14:0.065 ANNZ_24:0.061 ANNZ_48:0.056 ANNZ_78:0.052 ANNZ_64:0.048 ANNZ_51:0.043 ANNZ_44:0.039 ANNZ_18:0.035 ANNZ_70:0.030 ANNZ_26:0.026 ANNZ_59:0.022 ANNZ_39:0.017 ANNZ_57:0.013 ANNZ_20:0.009 ANNZ_8:0.004 
[15:39:16    INFO]  - will derive the bias correction for the pdf ... 
[15:39:17    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.000000, ANNZ_1:0.000000, ANNZ_2:0.000000, ANNZ_3:0.000000, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.000000, ANNZ_7:0.000000, ANNZ_8:0.004329, ANNZ_9:0.000000, ANNZ_10:0.000000, ANNZ_11:0.000000, ANNZ_12:0.000000, ANNZ_13:0.000000, ANNZ_14:0.064935, ANNZ_15:0.000000, ANNZ_16:0.000000, ANNZ_17:0.000000, ANNZ_18:0.034632, ANNZ_19:0.000000, ANNZ_20:0.008658, ANNZ_21:0.000000, ANNZ_22:0.000000, ANNZ_23:0.000000, ANNZ_24:0.060606, ANNZ_25:0.000000, ANNZ_26:0.025974, ANNZ_27:0.000000, ANNZ_28:0.077922, ANNZ_29:0.000000, ANNZ_30:0.000000, ANNZ_31:0.000000, ANNZ_32:0.000000, ANNZ_33:0.000000, ANNZ_34:0.000000, ANNZ_35:0.000000, ANNZ_36:0.000000, ANNZ_37:0.086580, ANNZ_38:0.000000, ANNZ_39:0.017316, ANNZ_40:0.000000, ANNZ_41:0.000000, ANNZ_42:0.000000, ANNZ_43:0.000000, ANNZ_44:0.038961, ANNZ_45:0.000000, ANNZ_46:0.000000, ANNZ_47:0.000000, ANNZ_48:0.056277, ANNZ_49:0.000000, ANNZ_50:0.000000, ANNZ_51:0.043290, ANNZ_52:0.000000, ANNZ_53:0.000000, ANNZ_54:0.090909, ANNZ_55:0.082251, ANNZ_56:0.000000, ANNZ_57:0.012987, ANNZ_58:0.000000, ANNZ_59:0.021645, ANNZ_60:0.000000, ANNZ_61:0.000000, ANNZ_62:0.000000, ANNZ_63:0.000000, ANNZ_64:0.047619, ANNZ_65:0.000000, ANNZ_66:0.000000, ANNZ_67:0.069264, ANNZ_68:0.000000, ANNZ_69:0.000000, ANNZ_70:0.030303, ANNZ_71:0.000000, ANNZ_72:0.000000, ANNZ_73:0.000000, ANNZ_74:0.000000, ANNZ_75:0.073593, ANNZ_76:0.000000, ANNZ_77:0.000000, ANNZ_78:0.051948, ANNZ_79:0.000000, ANNZ_80:0.000000, ANNZ_81:0.000000, ANNZ_82:0.000000, ANNZ_83:0.000000, ANNZ_84:0.000000, ANNZ_85:0.000000, ANNZ_86:0.000000, ANNZ_87:0.000000, ANNZ_88:0.000000, ANNZ_89:0.000000, 
[15:39:17    INFO]  - Saving optimization results in ./output/SPEC_advanced22/regres/optim/saveOptimOpt.txt ...
[15:39:24    INFO]  - Saving bias-correction results in ./output/SPEC_advanced22/regres/optim/saveOptimObj.root ...
[15:39:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:39:38    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced22/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[15:39:50    INFO]  - starting ANNZ::doEvalReg() ... 
[15:39:50    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,
[15:39:50    INFO]  - Reading bias-correction results from ./output/SPEC_advanced22/regres/optim/saveOptimObj.root ...
[15:39:50    INFO]  - Getting optimization results from ./output/SPEC_advanced22/regres/optim/saveOptimOpt.txt ...
[15:39:50    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[15:39:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:39:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:39:51    INFO]  -----------------------------------------------------------------------------------------------------------
[15:39:52    INFO]  - starting storeTreeToAscii() ... 
[15:39:52    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[15:39:52    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced22/regres/optim/eval/ANNZ_randomReg_0000.csv
[15:39:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:39:52    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[15:39:52    INFO]  -----------------------------------------------------------------------------------------------------------
[15:39:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:39:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[15:39:52    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[15:40:03    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/optim/eval/plots/

(15:40 INFO) [40;37;1m - 30/03/19 15:40:10 - finished running ANNZ ![0m
(15:57 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:57 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:57 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:57 INFO) [40;37;1m - 30/03/19 15:57:24 - starting ANNZ[0m
(15:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m110[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m90[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced22[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile1[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data10c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.045[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:57 INFO) 
[15:57:24    INFO]  -----------------------------------------------------
[15:57:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:57:24    INFO]  -----------------------------------------------------------------------------------------------------------
[15:57:25    INFO]  - starting ANNZ::Init()  ... 
[15:57:25    INFO]  - Will generate 1 PDFs ... 
[15:58:33    INFO] --------------------------------------------------------
[15:58:33    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,
[15:58:33    INFO]  - All REJECTED MLMs: 
[15:58:33    INFO] ----------------------------------------------------------------------------------------------------------------
[15:58:45    INFO]  - Saving run information in ./output/SPEC_advanced22/regres/eval_nFile1/saveOpt.txt ...
[16:01:07    INFO]  - starting inputToFullTree(ANNz_data10c.csv) ... 
[16:01:07    INFO]  - Found 2232 lines in file PAUS/ANNz_data10c.csv -> total so far = 2232 ... 
[16:01:08    INFO]  - Now reading-in PAUS/ANNz_data10c.csv ... 
[16:01:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:01:08    INFO]  -- ANNZ_tree_eval .................................. 2232  nLine
[16:01:08    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[16:01:08    INFO]  -----------------------------------------------------------------------------------------------------------
[16:01:08    INFO]  - starting ANNZ::Eval() ... 
[16:01:08    INFO]  - starting ANNZ::doEvalReg() ... 
[16:01:08    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,ANNZ_50,ANNZ_51,ANNZ_52,ANNZ_53,ANNZ_54,ANNZ_55,ANNZ_56,ANNZ_57,ANNZ_58,ANNZ_59,ANNZ_60,ANNZ_61,ANNZ_62,ANNZ_63,ANNZ_64,ANNZ_65,ANNZ_66,ANNZ_67,ANNZ_68,ANNZ_69,ANNZ_70,ANNZ_71,ANNZ_72,ANNZ_73,ANNZ_74,ANNZ_75,ANNZ_76,ANNZ_77,ANNZ_78,ANNZ_79,ANNZ_80,ANNZ_81,ANNZ_82,ANNZ_83,ANNZ_84,ANNZ_85,ANNZ_86,ANNZ_87,ANNZ_88,ANNZ_89,
[16:01:08    INFO]  - Reading bias-correction results from ./output/SPEC_advanced22/regres/optim/saveOptimObj.root ...
[16:01:08    INFO]  - Getting optimization results from ./output/SPEC_advanced22/regres/optim/saveOptimOpt.txt ...
[16:01:08    INFO]  - creating MLM trees from input ...
[16:01:08    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_8,ANNZ_14,ANNZ_18,ANNZ_20,ANNZ_24,ANNZ_26,ANNZ_28,ANNZ_37,ANNZ_39,ANNZ_44,ANNZ_48,ANNZ_51,ANNZ_54,ANNZ_55,ANNZ_57,ANNZ_59,ANNZ_64,ANNZ_67,ANNZ_70,ANNZ_75,ANNZ_78,
[16:01:08    INFO]  - starting ANNZ::loadReaders() ... 
[16:38:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:38:50    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[16:38:50    INFO]  -----------------------------------------------------------------------------------------------------------
[16:38:51    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[16:38:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:38:52    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 2232  nObj
[16:38:52    INFO]  -----------------------------------------------------------------------------------------------------------
[16:38:52    INFO]  - starting storeTreeToAscii() ... 
[16:38:52    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[16:38:52    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced22/regres/eval_nFile1/ANNZ_randomReg_0000.csv
[16:38:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:38:52    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[16:38:52    INFO]  -----------------------------------------------------------------------------------------------------------
[16:38:55    INFO]  - detected the target,zspec in the evaluated sample - Will create performance plots ...
[16:38:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:38:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[16:38:55    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[16:39:02    INFO]  - Writing to plotting directory output/SPEC_advanced22/regres/eval_nFile1/plots/

(16:39 INFO) [40;37;1m - 30/03/19 16:39:08 - finished running ANNZ ![0m
