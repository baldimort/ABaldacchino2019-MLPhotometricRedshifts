(11:06 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:06 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:06 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:06 INFO) [40;37;1m - 10/03/19 11:06:36 - starting ANNZ[0m
(11:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:06 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:06 INFO) 
[11:06:36    INFO]  -----------------------------------------------------
[11:06:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:06:36    INFO]  -----------------------------------------------------------------------------------------------------------
[11:06:38    INFO]  - starting inputToSplitTree() ... 
[11:06:38    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[11:06:38    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[11:06:38    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[11:06:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:06:39    INFO]  -- ANNZ_tree .......................................... 0  index
[11:06:39    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[11:06:39    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[11:06:39    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[11:06:39    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:06:39    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:06:39    INFO]  -----------------------------------------------------------------------------------------------------------
[11:06:39    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[11:06:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:06:39    INFO]  -- ANNZ_tree .......................................... 0  index
[11:06:39    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[11:06:39    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[11:06:39    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[11:06:39    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[11:06:39    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[11:06:39    INFO]  -----------------------------------------------------------------------------------------------------------
[11:06:40    INFO]  - Writing to plotting directory output/SPEC_advanced6/rootIn/plots/
[11:06:41    INFO]  - Writing to plotting directory output/SPEC_advanced6/rootIn/plots/

(11:06 INFO) [40;37;1m - 10/03/19 11:06:42 - finished running ANNZ ![0m
(11:07 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:07 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:07 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:07 INFO) [40;37;1m - 10/03/19 11:07:02 - starting ANNZ[0m
(11:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:07 INFO) 
[11:07:02    INFO]  -----------------------------------------------------
[11:07:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:07:02    INFO]  -----------------------------------------------------------------------------------------------------------
[11:07:02    INFO]  - starting ANNZ::Init()  ... 
[11:07:03    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_0/saveOpt.txt ...
[11:07:08    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:07:08    INFO] ----------------------------------------------------------------------------------------------------
[11:07:08    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=700:BoostType=AdaBoostR2:VarTransform=N,P
[11:07:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:07:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:07:08    INFO]      cuts (train):        ,
[11:07:08    INFO]      cuts (valid):       
[11:07:08    INFO]    - weights:            1
[11:07:08    INFO] ----------------------------------------------------------------------------------------------------
[11:07:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:08:18    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[11:08:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:08:22    INFO]  - Will gen. input-parameter errors ...
[11:08:25    INFO]  - starting ANNZ::loadReaders() ... 
[11:08:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[11:35:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:35:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:35:28    INFO]  -----------------------------------------------------------------------------------------------------------
[11:35:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[11:43:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:43:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:43:15    INFO]  -----------------------------------------------------------------------------------------------------------
[11:43:15    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:43:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:43:18    INFO]  - will try to derive a bias correction ... 
[11:43:18    INFO]  - will validate that training produced an XML file for later ... 
[11:43:18    INFO]  - starting ANNZ::loadReaders() ... 
[11:43:31    INFO]  - will validate that the training was not a complete failure ... 
[11:43:31    INFO]  - training seems to have been successful! will move on ...
[11:43:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:43:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:43:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:43:38    INFO] ----------------------------------------------------------------------------------------------------
[11:43:38    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:43:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:43:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:43:38    INFO]    - weights:            1
[11:43:38    INFO] ----------------------------------------------------------------------------------------------------
[11:43:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:43:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:43:50    INFO]  - Will gen. input-parameter errors ...
[11:43:53    INFO]  - starting ANNZ::loadReaders() ... 
[11:44:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[12:15:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:15:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:15:42    INFO]  -----------------------------------------------------------------------------------------------------------
[12:15:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[12:23:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:23:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:23:44    INFO]  -----------------------------------------------------------------------------------------------------------
[12:23:44    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:23:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:23:47    INFO]  - will validate that the bias-correction actually improved the result ...
[12:23:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:23:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[12:24:00    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_0/plots/
[12:24:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_0/plots output/SPEC_advanced6/regres/train/ANNZ_0/plots_biasCor_before
[12:24:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:24:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[12:24:27    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_0/plots/
[12:24:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_0/plots output/SPEC_advanced6/regres/train/ANNZ_0/plots_biasCor_after
[12:24:47    INFO]  - Got original [KS-test,N_poiss]: [0.0690119 , 6.52845] , after the bias-correction: [0.031257 , 5.46534] --> will KEEP the correction !

(12:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=550:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:24 INFO) 
[12:24:52    INFO]  -----------------------------------------------------
[12:24:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:24:52    INFO]  -----------------------------------------------------------------------------------------------------------
[12:24:52    INFO]  - starting ANNZ::Init()  ... 
[12:24:54    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_1/saveOpt.txt ...
[12:25:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:25:01    INFO] ----------------------------------------------------------------------------------------------------
[12:25:01    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=550:BoostType=AdaBoostR2:VarTransform=N,P
[12:25:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:25:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:25:01    INFO]      cuts (train):        ,
[12:25:01    INFO]      cuts (valid):       
[12:25:01    INFO]    - weights:            1
[12:25:01    INFO] ----------------------------------------------------------------------------------------------------
[12:25:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:26:18    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[12:26:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[12:26:23    INFO]  - Will gen. input-parameter errors ...
[12:26:25    INFO]  - starting ANNZ::loadReaders() ... 
[12:26:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[12:47:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:47:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:47:25    INFO]  -----------------------------------------------------------------------------------------------------------
[12:47:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[12:52:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:52:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:52:29    INFO]  -----------------------------------------------------------------------------------------------------------
[12:52:29    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:52:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:52:31    INFO]  - will try to derive a bias correction ... 
[12:52:31    INFO]  - will validate that training produced an XML file for later ... 
[12:52:31    INFO]  - starting ANNZ::loadReaders() ... 
[12:52:39    INFO]  - will validate that the training was not a complete failure ... 
[12:52:39    INFO]  - training seems to have been successful! will move on ...
[12:52:39    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:52:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:52:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:52:45    INFO] ----------------------------------------------------------------------------------------------------
[12:52:45    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:52:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:52:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:52:45    INFO]    - weights:            1
[12:52:45    INFO] ----------------------------------------------------------------------------------------------------
[12:52:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:52:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[12:52:57    INFO]  - Will gen. input-parameter errors ...
[12:53:00    INFO]  - starting ANNZ::loadReaders() ... 
[12:53:22    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[13:14:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:14:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:14:03    INFO]  -----------------------------------------------------------------------------------------------------------
[13:14:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[13:19:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:19:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:19:51    INFO]  -----------------------------------------------------------------------------------------------------------
[13:19:52    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:19:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:19:54    INFO]  - will validate that the bias-correction actually improved the result ...
[13:19:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:19:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[13:20:23    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_1/plots/
[13:20:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_1/plots output/SPEC_advanced6/regres/train/ANNZ_1/plots_biasCor_before
[13:20:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:20:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[13:21:32    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_1/plots/
[13:21:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_1/plots output/SPEC_advanced6/regres/train/ANNZ_1/plots_biasCor_after
[13:21:49    INFO]  - Got original [KS-test,N_poiss]: [0.0700202 , 6.51533] , after the bias-correction: [0.0323773 , 5.58294] --> will KEEP the correction !

(13:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:21 INFO) 
[13:21:54    INFO]  -----------------------------------------------------
[13:21:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:21:54    INFO]  -----------------------------------------------------------------------------------------------------------
[13:21:55    INFO]  - starting ANNZ::Init()  ... 
[13:21:57    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_2/saveOpt.txt ...
[13:22:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:22:05    INFO] ----------------------------------------------------------------------------------------------------
[13:22:05    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=540:BoostType=AdaBoost:VarTransform=N,P
[13:22:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:22:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:22:05    INFO]      cuts (train):        ,
[13:22:05    INFO]      cuts (valid):       
[13:22:05    INFO]    - weights:            1
[13:22:05    INFO] ----------------------------------------------------------------------------------------------------
[13:22:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:22:48    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[13:22:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[13:22:50    INFO]  - Will gen. input-parameter errors ...
[13:22:53    INFO]  - starting ANNZ::loadReaders() ... 
[13:23:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[13:27:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:27:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:27:06    INFO]  -----------------------------------------------------------------------------------------------------------
[13:27:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[13:28:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:28:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:28:07    INFO]  -----------------------------------------------------------------------------------------------------------
[13:28:07    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:28:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:28:09    INFO]  - will try to derive a bias correction ... 
[13:28:09    INFO]  - will validate that training produced an XML file for later ... 
[13:28:09    INFO]  - starting ANNZ::loadReaders() ... 
[13:28:11    INFO]  - will validate that the training was not a complete failure ... 
[13:28:11    INFO]  - training seems to have been successful! will move on ...
[13:28:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:28:15    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:28:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:28:17    INFO] ----------------------------------------------------------------------------------------------------
[13:28:17    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:28:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:28:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:28:17    INFO]    - weights:            1
[13:28:17    INFO] ----------------------------------------------------------------------------------------------------
[13:28:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:28:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[13:28:26    INFO]  - Will gen. input-parameter errors ...
[13:28:28    INFO]  - starting ANNZ::loadReaders() ... 
[13:28:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[13:32:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:32:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:32:21    INFO]  -----------------------------------------------------------------------------------------------------------
[13:32:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[13:33:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:33:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:33:18    INFO]  -----------------------------------------------------------------------------------------------------------
[13:33:18    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:33:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:33:19    INFO]  - will validate that the bias-correction actually improved the result ...
[13:33:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:33:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[13:33:27    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_2/plots/
[13:33:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_2/plots output/SPEC_advanced6/regres/train/ANNZ_2/plots_biasCor_before
[13:33:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:33:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[13:33:49    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_2/plots/
[13:34:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_2/plots output/SPEC_advanced6/regres/train/ANNZ_2/plots_biasCor_after
[13:34:07    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43565] , after the bias-correction: [0.0444768 , 5.70774] --> will KEEP the correction !

(13:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:34 INFO) 
[13:34:15    INFO]  -----------------------------------------------------
[13:34:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:34:15    INFO]  -----------------------------------------------------------------------------------------------------------
[13:34:17    INFO]  - starting ANNZ::Init()  ... 
[13:34:18    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_3/saveOpt.txt ...
[13:34:26    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:34:26    INFO] ----------------------------------------------------------------------------------------------------
[13:34:26    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=400:BoostType=Bagging:VarTransform=N,P
[13:34:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:34:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:34:26    INFO]      cuts (train):        ,
[13:34:26    INFO]      cuts (valid):       
[13:34:26    INFO]    - weights:            1
[13:34:26    INFO] ----------------------------------------------------------------------------------------------------
[13:34:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:35:18    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[13:35:23    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[13:35:23    INFO]  - Will gen. input-parameter errors ...
[13:35:26    INFO]  - starting ANNZ::loadReaders() ... 
[13:35:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[13:39:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:39:51    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:39:51    INFO]  -----------------------------------------------------------------------------------------------------------
[13:39:51    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[13:40:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:40:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:40:46    INFO]  -----------------------------------------------------------------------------------------------------------
[13:40:46    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:40:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:40:48    INFO]  - will try to derive a bias correction ... 
[13:40:48    INFO]  - will validate that training produced an XML file for later ... 
[13:40:48    INFO]  - starting ANNZ::loadReaders() ... 
[13:40:52    INFO]  - will validate that the training was not a complete failure ... 
[13:40:52    INFO]  - training seems to have been successful! will move on ...
[13:40:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:40:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:40:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:40:59    INFO] ----------------------------------------------------------------------------------------------------
[13:40:59    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:40:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:40:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:40:59    INFO]    - weights:            1
[13:40:59    INFO] ----------------------------------------------------------------------------------------------------
[13:40:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:41:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[13:41:09    INFO]  - Will gen. input-parameter errors ...
[13:41:12    INFO]  - starting ANNZ::loadReaders() ... 
[13:41:23    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[13:45:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:45:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:45:24    INFO]  -----------------------------------------------------------------------------------------------------------
[13:45:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[13:46:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:46:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:46:26    INFO]  -----------------------------------------------------------------------------------------------------------
[13:46:26    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:46:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:46:28    INFO]  - will validate that the bias-correction actually improved the result ...
[13:46:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:46:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[13:46:35    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_3/plots/
[13:46:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_3/plots output/SPEC_advanced6/regres/train/ANNZ_3/plots_biasCor_before
[13:46:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:46:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[13:46:53    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_3/plots/
[13:47:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_3/plots output/SPEC_advanced6/regres/train/ANNZ_3/plots_biasCor_after
[13:47:07    INFO]  - Got original [KS-test,N_poiss]: [0.0929868 , 6.91132] , after the bias-correction: [0.0448129 , 5.66772] --> will KEEP the correction !

(13:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:47 INFO) 
[13:47:11    INFO]  -----------------------------------------------------
[13:47:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:47:11    INFO]  -----------------------------------------------------------------------------------------------------------
[13:47:13    INFO]  - starting ANNZ::Init()  ... 
[13:47:14    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_4/saveOpt.txt ...
[13:47:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:47:21    INFO] ----------------------------------------------------------------------------------------------------
[13:47:21    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=370:BoostType=AdaBoost:VarTransform=N
[13:47:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:47:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:47:21    INFO]      cuts (train):        ,
[13:47:21    INFO]      cuts (valid):       
[13:47:21    INFO]    - weights:            1
[13:47:21    INFO] ----------------------------------------------------------------------------------------------------
[13:47:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:47:50    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[13:47:53    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[13:47:53    INFO]  - Will gen. input-parameter errors ...
[13:47:54    INFO]  - starting ANNZ::loadReaders() ... 
[13:47:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[13:49:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:49:26    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:49:26    INFO]  -----------------------------------------------------------------------------------------------------------
[13:49:26    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[13:49:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:49:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:49:48    INFO]  -----------------------------------------------------------------------------------------------------------
[13:49:48    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:49:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:49:49    INFO]  - will try to derive a bias correction ... 
[13:49:49    INFO]  - will validate that training produced an XML file for later ... 
[13:49:49    INFO]  - starting ANNZ::loadReaders() ... 
[13:49:51    INFO]  - will validate that the training was not a complete failure ... 
[13:49:51    INFO]  - training seems to have been successful! will move on ...
[13:49:51    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:49:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:50:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:50:00    INFO] ----------------------------------------------------------------------------------------------------
[13:50:00    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:50:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:50:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:50:00    INFO]    - weights:            1
[13:50:00    INFO] ----------------------------------------------------------------------------------------------------
[13:50:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:50:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[13:50:11    INFO]  - Will gen. input-parameter errors ...
[13:50:13    INFO]  - starting ANNZ::loadReaders() ... 
[13:50:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[13:52:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:52:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:52:22    INFO]  -----------------------------------------------------------------------------------------------------------
[13:52:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[13:52:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:52:49    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:52:49    INFO]  -----------------------------------------------------------------------------------------------------------
[13:52:49    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:52:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:52:51    INFO]  - will validate that the bias-correction actually improved the result ...
[13:52:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:52:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[13:52:58    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_4/plots/
[13:53:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_4/plots output/SPEC_advanced6/regres/train/ANNZ_4/plots_biasCor_before
[13:53:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:53:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[13:53:20    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_4/plots/
[13:53:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_4/plots output/SPEC_advanced6/regres/train/ANNZ_4/plots_biasCor_after
[13:53:34    INFO]  - Got original [KS-test,N_poiss]: [0.0822317 , 6.11284] , after the bias-correction: [0.0498544 , 6.0313] --> will KEEP the correction !

(13:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:53 INFO) 
[13:53:37    INFO]  -----------------------------------------------------
[13:53:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:53:37    INFO]  -----------------------------------------------------------------------------------------------------------
[13:53:38    INFO]  - starting ANNZ::Init()  ... 
[13:53:39    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_5/saveOpt.txt ...
[13:53:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:53:46    INFO] ----------------------------------------------------------------------------------------------------
[13:53:46    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=430:BoostType=AdaBoost:VarTransform=N,P
[13:53:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:53:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:53:46    INFO]      cuts (train):        ,
[13:53:46    INFO]      cuts (valid):       
[13:53:46    INFO]    - weights:            1
[13:53:46    INFO] ----------------------------------------------------------------------------------------------------
[13:53:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:54:19    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[13:54:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[13:54:21    INFO]  - Will gen. input-parameter errors ...
[13:54:23    INFO]  - starting ANNZ::loadReaders() ... 
[13:54:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[13:57:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:57:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:57:12    INFO]  -----------------------------------------------------------------------------------------------------------
[13:57:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[13:58:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:58:05    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:58:05    INFO]  -----------------------------------------------------------------------------------------------------------
[13:58:05    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:58:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:58:06    INFO]  - will try to derive a bias correction ... 
[13:58:06    INFO]  - will validate that training produced an XML file for later ... 
[13:58:06    INFO]  - starting ANNZ::loadReaders() ... 
[13:58:07    INFO]  - will validate that the training was not a complete failure ... 
[13:58:08    INFO]  - training seems to have been successful! will move on ...
[13:58:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:58:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:58:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:58:13    INFO] ----------------------------------------------------------------------------------------------------
[13:58:13    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:58:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:58:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:58:13    INFO]    - weights:            1
[13:58:13    INFO] ----------------------------------------------------------------------------------------------------
[13:58:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:58:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[13:58:22    INFO]  - Will gen. input-parameter errors ...
[13:58:24    INFO]  - starting ANNZ::loadReaders() ... 
[13:58:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:01:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:01:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:01:29    INFO]  -----------------------------------------------------------------------------------------------------------
[14:01:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:02:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:02:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:02:13    INFO]  -----------------------------------------------------------------------------------------------------------
[14:02:13    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:02:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:02:14    INFO]  - will validate that the bias-correction actually improved the result ...
[14:02:14    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:02:14    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
Warning in <Fit>: Fit data is empty 
[14:02:21    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_5/plots/
[14:02:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_5/plots output/SPEC_advanced6/regres/train/ANNZ_5/plots_biasCor_before
[14:02:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:02:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
Warning in <Fit>: Fit data is empty 
[14:02:40    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_5/plots/
[14:02:58        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_5/plots output/SPEC_advanced6/regres/train/ANNZ_5/plots_biasCor_after
[14:02:58    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40381] , after the bias-correction: [0.0441408 , 5.75862] --> will KEEP the correction !

(14:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:03 INFO) 
[14:03:02    INFO]  -----------------------------------------------------
[14:03:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:03:02    INFO]  -----------------------------------------------------------------------------------------------------------
[14:03:03    INFO]  - starting ANNZ::Init()  ... 
[14:03:04    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_6/saveOpt.txt ...
[14:03:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:03:10    INFO] ----------------------------------------------------------------------------------------------------
[14:03:10    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N,P
[14:03:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:03:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:03:10    INFO]      cuts (train):        ,
[14:03:10    INFO]      cuts (valid):       
[14:03:10    INFO]    - weights:            1
[14:03:10    INFO] ----------------------------------------------------------------------------------------------------
[14:03:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:03:50    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[14:03:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[14:03:54    INFO]  - Will gen. input-parameter errors ...
[14:03:57    INFO]  - starting ANNZ::loadReaders() ... 
[14:04:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:07:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:07:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:07:23    INFO]  -----------------------------------------------------------------------------------------------------------
[14:07:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:08:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:08:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:08:10    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:10    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:08:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:08:12    INFO]  - will try to derive a bias correction ... 
[14:08:12    INFO]  - will validate that training produced an XML file for later ... 
[14:08:12    INFO]  - starting ANNZ::loadReaders() ... 
[14:08:16    INFO]  - will validate that the training was not a complete failure ... 
[14:08:16    INFO]  - training seems to have been successful! will move on ...
[14:08:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:08:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:08:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:08:24    INFO] ----------------------------------------------------------------------------------------------------
[14:08:24    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:08:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:08:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:08:24    INFO]    - weights:            1
[14:08:24    INFO] ----------------------------------------------------------------------------------------------------
[14:08:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:08:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[14:08:36    INFO]  - Will gen. input-parameter errors ...
[14:08:39    INFO]  - starting ANNZ::loadReaders() ... 
[14:08:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:13:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:13:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:13:00    INFO]  -----------------------------------------------------------------------------------------------------------
[14:13:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:13:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:13:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:13:52    INFO]  -----------------------------------------------------------------------------------------------------------
[14:13:53    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:13:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:13:54    INFO]  - will validate that the bias-correction actually improved the result ...
[14:13:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:13:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[14:14:01    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_6/plots/
[14:14:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_6/plots output/SPEC_advanced6/regres/train/ANNZ_6/plots_biasCor_before
[14:14:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:14:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[14:14:21    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_6/plots/
[14:14:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_6/plots output/SPEC_advanced6/regres/train/ANNZ_6/plots_biasCor_after
[14:14:34    INFO]  - Got original [KS-test,N_poiss]: [0.0934349 , 6.86915] , after the bias-correction: [0.0444768 , 5.62586] --> will KEEP the correction !

(14:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:14 INFO) 
[14:14:39    INFO]  -----------------------------------------------------
[14:14:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:14:39    INFO]  -----------------------------------------------------------------------------------------------------------
[14:14:40    INFO]  - starting ANNZ::Init()  ... 
[14:14:41    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_7/saveOpt.txt ...
[14:14:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:14:48    INFO] ----------------------------------------------------------------------------------------------------
[14:14:48    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N,P
[14:14:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:14:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:14:48    INFO]      cuts (train):        ,
[14:14:48    INFO]      cuts (valid):       
[14:14:48    INFO]    - weights:            1
[14:14:48    INFO] ----------------------------------------------------------------------------------------------------
[14:14:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:15:32    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[14:15:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[14:15:37    INFO]  - Will gen. input-parameter errors ...
[14:15:41    INFO]  - starting ANNZ::loadReaders() ... 
[14:15:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:19:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:19:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:19:54    INFO]  -----------------------------------------------------------------------------------------------------------
[14:19:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:20:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:20:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:20:48    INFO]  -----------------------------------------------------------------------------------------------------------
[14:20:49    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:20:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:20:51    INFO]  - will try to derive a bias correction ... 
[14:20:51    INFO]  - will validate that training produced an XML file for later ... 
[14:20:51    INFO]  - starting ANNZ::loadReaders() ... 
[14:20:55    INFO]  - will validate that the training was not a complete failure ... 
[14:20:55    INFO]  - training seems to have been successful! will move on ...
[14:20:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:21:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:21:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:21:01    INFO] ----------------------------------------------------------------------------------------------------
[14:21:01    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:21:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:21:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:21:01    INFO]    - weights:            1
[14:21:01    INFO] ----------------------------------------------------------------------------------------------------
[14:21:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:21:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[14:21:12    INFO]  - Will gen. input-parameter errors ...
[14:21:14    INFO]  - starting ANNZ::loadReaders() ... 
[14:21:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:25:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:25:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:25:56    INFO]  -----------------------------------------------------------------------------------------------------------
[14:25:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:26:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:26:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:26:51    INFO]  -----------------------------------------------------------------------------------------------------------
[14:26:51    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:26:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:26:52    INFO]  - will validate that the bias-correction actually improved the result ...
[14:26:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:26:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[14:26:59    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_7/plots/
[14:27:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_7/plots output/SPEC_advanced6/regres/train/ANNZ_7/plots_biasCor_before
[14:27:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:27:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[14:27:17    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_7/plots/
[14:27:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_7/plots output/SPEC_advanced6/regres/train/ANNZ_7/plots_biasCor_after
[14:27:30    INFO]  - Got original [KS-test,N_poiss]: [0.0932109 , 6.88301] , after the bias-correction: [0.0436926 , 5.59882] --> will KEEP the correction !

(14:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:27 INFO) 
[14:27:34    INFO]  -----------------------------------------------------
[14:27:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:27:34    INFO]  -----------------------------------------------------------------------------------------------------------
[14:27:35    INFO]  - starting ANNZ::Init()  ... 
[14:27:37    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_8/saveOpt.txt ...
[14:27:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:27:43    INFO] ----------------------------------------------------------------------------------------------------
[14:27:43    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=290:BoostType=AdaBoost:VarTransform=N,D
[14:27:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:27:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:27:43    INFO]      cuts (train):        ,
[14:27:43    INFO]      cuts (valid):       
[14:27:43    INFO]    - weights:            1
[14:27:43    INFO] ----------------------------------------------------------------------------------------------------
[14:27:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:28:10    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[14:28:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[14:28:12    INFO]  - Will gen. input-parameter errors ...
[14:28:14    INFO]  - starting ANNZ::loadReaders() ... 
[14:28:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:30:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:30:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:30:14    INFO]  -----------------------------------------------------------------------------------------------------------
[14:30:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:30:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:30:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:30:37    INFO]  -----------------------------------------------------------------------------------------------------------
[14:30:37    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:30:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:30:38    INFO]  - will try to derive a bias correction ... 
[14:30:38    INFO]  - will validate that training produced an XML file for later ... 
[14:30:38    INFO]  - starting ANNZ::loadReaders() ... 
[14:30:39    INFO]  - will validate that the training was not a complete failure ... 
[14:30:39    INFO]  - training seems to have been successful! will move on ...
[14:30:39    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:30:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:30:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:30:47    INFO] ----------------------------------------------------------------------------------------------------
[14:30:47    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:30:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:30:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:30:47    INFO]    - weights:            1
[14:30:47    INFO] ----------------------------------------------------------------------------------------------------
[14:30:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:30:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[14:30:56    INFO]  - Will gen. input-parameter errors ...
[14:31:00    INFO]  - starting ANNZ::loadReaders() ... 
[14:31:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:33:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:33:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:33:16    INFO]  -----------------------------------------------------------------------------------------------------------
[14:33:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:33:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:33:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:33:55    INFO]  -----------------------------------------------------------------------------------------------------------
[14:33:55    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:33:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:33:56    INFO]  - will validate that the bias-correction actually improved the result ...
[14:33:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:33:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[14:34:02    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_8/plots/
[14:34:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_8/plots output/SPEC_advanced6/regres/train/ANNZ_8/plots_biasCor_before
[14:34:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:34:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[14:34:20    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_8/plots/
[14:34:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_8/plots output/SPEC_advanced6/regres/train/ANNZ_8/plots_biasCor_after
[14:34:32    INFO]  - Got original [KS-test,N_poiss]: [0.0944432 , 7.38551] , after the bias-correction: [0.0432483 , 5.87204] --> will KEEP the correction !

(14:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:34 INFO) 
[14:34:36    INFO]  -----------------------------------------------------
[14:34:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:34:36    INFO]  -----------------------------------------------------------------------------------------------------------
[14:34:36    INFO]  - starting ANNZ::Init()  ... 
[14:34:37    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_9/saveOpt.txt ...
[14:34:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:34:44    INFO] ----------------------------------------------------------------------------------------------------
[14:34:44    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=360:BoostType=AdaBoostR2:VarTransform=N,P
[14:34:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:34:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:34:44    INFO]      cuts (train):        ,
[14:34:44    INFO]      cuts (valid):       
[14:34:44    INFO]    - weights:            1
[14:34:44    INFO] ----------------------------------------------------------------------------------------------------
[14:34:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:35:27    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[14:35:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[14:35:30    INFO]  - Will gen. input-parameter errors ...
[14:35:31    INFO]  - starting ANNZ::loadReaders() ... 
[14:35:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:43:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:43:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:43:49    INFO]  -----------------------------------------------------------------------------------------------------------
[14:43:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:45:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:45:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:45:35    INFO]  -----------------------------------------------------------------------------------------------------------
[14:45:35    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:45:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:45:36    INFO]  - will try to derive a bias correction ... 
[14:45:36    INFO]  - will validate that training produced an XML file for later ... 
[14:45:36    INFO]  - starting ANNZ::loadReaders() ... 
[14:45:39    INFO]  - will validate that the training was not a complete failure ... 
[14:45:40    INFO]  - training seems to have been successful! will move on ...
[14:45:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:45:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:45:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:45:46    INFO] ----------------------------------------------------------------------------------------------------
[14:45:46    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:45:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:45:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:45:46    INFO]    - weights:            1
[14:45:46    INFO] ----------------------------------------------------------------------------------------------------
[14:45:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:45:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[14:45:56    INFO]  - Will gen. input-parameter errors ...
[14:45:58    INFO]  - starting ANNZ::loadReaders() ... 
[14:46:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:52:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:52:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:52:30    INFO]  -----------------------------------------------------------------------------------------------------------
[14:52:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:54:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:54:02    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:54:02    INFO]  -----------------------------------------------------------------------------------------------------------
[14:54:02    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:54:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:54:03    INFO]  - will validate that the bias-correction actually improved the result ...
[14:54:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:54:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[14:54:10    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_9/plots/
[14:54:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_9/plots output/SPEC_advanced6/regres/train/ANNZ_9/plots_biasCor_before
[14:54:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:54:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[14:54:27    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_9/plots/
[14:54:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_9/plots output/SPEC_advanced6/regres/train/ANNZ_9/plots_biasCor_after
[14:54:39    INFO]  - Got original [KS-test,N_poiss]: [0.0700202 , 6.55754] , after the bias-correction: [0.0323774 , 5.45595] --> will KEEP the correction !

(14:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:54 INFO) 
[14:54:43    INFO]  -----------------------------------------------------
[14:54:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:54:43    INFO]  -----------------------------------------------------------------------------------------------------------
[14:54:43    INFO]  - starting ANNZ::Init()  ... 
[14:54:45    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_10/saveOpt.txt ...
[14:54:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:54:51    INFO] ----------------------------------------------------------------------------------------------------
[14:54:51    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=320:BoostType=Bagging:VarTransform=N,P
[14:54:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:54:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[14:54:51    INFO]      cuts (train):        ,
[14:54:51    INFO]      cuts (valid):       
[14:54:51    INFO]    - weights:            1
[14:54:51    INFO] ----------------------------------------------------------------------------------------------------
[14:54:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:55:28    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[14:55:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[14:55:32    INFO]  - Will gen. input-parameter errors ...
[14:55:34    INFO]  - starting ANNZ::loadReaders() ... 
[14:55:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[14:58:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:58:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[14:58:37    INFO]  -----------------------------------------------------------------------------------------------------------
[14:58:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[14:59:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:59:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[14:59:19    INFO]  -----------------------------------------------------------------------------------------------------------
[14:59:19    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:59:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:59:21    INFO]  - will try to derive a bias correction ... 
[14:59:21    INFO]  - will validate that training produced an XML file for later ... 
[14:59:21    INFO]  - starting ANNZ::loadReaders() ... 
[14:59:24    INFO]  - will validate that the training was not a complete failure ... 
[14:59:24    INFO]  - training seems to have been successful! will move on ...
[14:59:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:59:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:59:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:59:30    INFO] ----------------------------------------------------------------------------------------------------
[14:59:30    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:59:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:59:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[14:59:30    INFO]    - weights:            1
[14:59:30    INFO] ----------------------------------------------------------------------------------------------------
[14:59:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:59:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[14:59:40    INFO]  - Will gen. input-parameter errors ...
[14:59:42    INFO]  - starting ANNZ::loadReaders() ... 
[14:59:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:02:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:02:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:02:52    INFO]  -----------------------------------------------------------------------------------------------------------
[15:02:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:03:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:03:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:03:37    INFO]  -----------------------------------------------------------------------------------------------------------
[15:03:37    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:03:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:03:38    INFO]  - will validate that the bias-correction actually improved the result ...
[15:03:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:03:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[15:03:44    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_10/plots/
[15:03:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_10/plots output/SPEC_advanced6/regres/train/ANNZ_10/plots_biasCor_before
[15:03:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:03:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[15:04:01    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_10/plots/
[15:04:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_10/plots output/SPEC_advanced6/regres/train/ANNZ_10/plots_biasCor_after
[15:04:14    INFO]  - Got original [KS-test,N_poiss]: [0.093547 , 6.78445] , after the bias-correction: [0.0430204 , 5.52589] --> will KEEP the correction !

(15:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:04 INFO) 
[15:04:18    INFO]  -----------------------------------------------------
[15:04:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:04:18    INFO]  -----------------------------------------------------------------------------------------------------------
[15:04:19    INFO]  - starting ANNZ::Init()  ... 
[15:04:20    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_11/saveOpt.txt ...
[15:04:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:04:25    INFO] ----------------------------------------------------------------------------------------------------
[15:04:25    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=270:BoostType=Bagging:VarTransform=N,P
[15:04:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:04:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:04:25    INFO]      cuts (train):        ,
[15:04:25    INFO]      cuts (valid):       
[15:04:25    INFO]    - weights:            1
[15:04:25    INFO] ----------------------------------------------------------------------------------------------------
[15:04:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:04:55    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[15:04:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[15:04:58    INFO]  - Will gen. input-parameter errors ...
[15:05:00    INFO]  - starting ANNZ::loadReaders() ... 
[15:05:07    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:07:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:07:32    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:07:32    INFO]  -----------------------------------------------------------------------------------------------------------
[15:07:32    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:08:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:08:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:08:07    INFO]  -----------------------------------------------------------------------------------------------------------
[15:08:07    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:08:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:08:08    INFO]  - will try to derive a bias correction ... 
[15:08:08    INFO]  - will validate that training produced an XML file for later ... 
[15:08:08    INFO]  - starting ANNZ::loadReaders() ... 
[15:08:11    INFO]  - will validate that the training was not a complete failure ... 
[15:08:11    INFO]  - training seems to have been successful! will move on ...
[15:08:11    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:08:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:08:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:08:17    INFO] ----------------------------------------------------------------------------------------------------
[15:08:17    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:08:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:08:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:08:17    INFO]    - weights:            1
[15:08:17    INFO] ----------------------------------------------------------------------------------------------------
[15:08:17    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:08:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[15:08:26    INFO]  - Will gen. input-parameter errors ...
[15:08:28    INFO]  - starting ANNZ::loadReaders() ... 
[15:08:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:10:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:10:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:10:44    INFO]  -----------------------------------------------------------------------------------------------------------
[15:10:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:11:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:11:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:11:18    INFO]  -----------------------------------------------------------------------------------------------------------
[15:11:19    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:11:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:11:20    INFO]  - will validate that the bias-correction actually improved the result ...
[15:11:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:11:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[15:11:25    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_11/plots/
[15:11:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_11/plots output/SPEC_advanced6/regres/train/ANNZ_11/plots_biasCor_before
[15:11:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:11:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[15:11:43    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_11/plots/
[15:11:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_11/plots output/SPEC_advanced6/regres/train/ANNZ_11/plots_biasCor_after
[15:11:56    INFO]  - Got original [KS-test,N_poiss]: [0.0939951 , 6.7993] , after the bias-correction: [0.0408918 , 5.553] --> will KEEP the correction !

(15:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:11 INFO) 
[15:11:59    INFO]  -----------------------------------------------------
[15:11:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:11:59    INFO]  -----------------------------------------------------------------------------------------------------------
[15:12:00    INFO]  - starting ANNZ::Init()  ... 
[15:12:01    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_12/saveOpt.txt ...
[15:12:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:12:07    INFO] ----------------------------------------------------------------------------------------------------
[15:12:07    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=290:BoostType=Bagging:VarTransform=N
[15:12:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:12:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:12:07    INFO]      cuts (train):        ,
[15:12:07    INFO]      cuts (valid):       
[15:12:07    INFO]    - weights:            1
[15:12:07    INFO] ----------------------------------------------------------------------------------------------------
[15:12:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:12:38    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[15:12:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[15:12:41    INFO]  - Will gen. input-parameter errors ...
[15:12:42    INFO]  - starting ANNZ::loadReaders() ... 
[15:12:50    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:14:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:14:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:14:19    INFO]  -----------------------------------------------------------------------------------------------------------
[15:14:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:14:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:14:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:14:41    INFO]  -----------------------------------------------------------------------------------------------------------
[15:14:41    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:14:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:14:42    INFO]  - will try to derive a bias correction ... 
[15:14:42    INFO]  - will validate that training produced an XML file for later ... 
[15:14:42    INFO]  - starting ANNZ::loadReaders() ... 
[15:14:45    INFO]  - will validate that the training was not a complete failure ... 
[15:14:46    INFO]  - training seems to have been successful! will move on ...
[15:14:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:14:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:14:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:14:51    INFO] ----------------------------------------------------------------------------------------------------
[15:14:51    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:14:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:14:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:14:51    INFO]    - weights:            1
[15:14:51    INFO] ----------------------------------------------------------------------------------------------------
[15:14:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:15:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[15:15:00    INFO]  - Will gen. input-parameter errors ...
[15:15:02    INFO]  - starting ANNZ::loadReaders() ... 
[15:15:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:16:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:16:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:16:42    INFO]  -----------------------------------------------------------------------------------------------------------
[15:16:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:17:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:17:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:17:06    INFO]  -----------------------------------------------------------------------------------------------------------
[15:17:07    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:17:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:17:08    INFO]  - will validate that the bias-correction actually improved the result ...
[15:17:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:17:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[15:17:17    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_12/plots/
[15:17:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_12/plots output/SPEC_advanced6/regres/train/ANNZ_12/plots_biasCor_before
[15:17:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:17:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[15:17:36    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_12/plots/
[15:17:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_12/plots output/SPEC_advanced6/regres/train/ANNZ_12/plots_biasCor_after
[15:17:49    INFO]  - Got original [KS-test,N_poiss]: [0.0843603 , 6.67754] , after the bias-correction: [0.0478378 , 5.72129] --> will KEEP the correction !

(15:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:17 INFO) 
[15:17:53    INFO]  -----------------------------------------------------
[15:17:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:17:53    INFO]  -----------------------------------------------------------------------------------------------------------
[15:17:54    INFO]  - starting ANNZ::Init()  ... 
[15:17:55    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_13/saveOpt.txt ...
[15:18:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:18:01    INFO] ----------------------------------------------------------------------------------------------------
[15:18:01    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=450:BoostType=AdaBoost:VarTransform=N,P
[15:18:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:18:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:18:01    INFO]      cuts (train):        ,
[15:18:01    INFO]      cuts (valid):       
[15:18:01    INFO]    - weights:            1
[15:18:01    INFO] ----------------------------------------------------------------------------------------------------
[15:18:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:18:31    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[15:18:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[15:18:33    INFO]  - Will gen. input-parameter errors ...
[15:18:35    INFO]  - starting ANNZ::loadReaders() ... 
[15:18:40    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:21:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:21:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:21:28    INFO]  -----------------------------------------------------------------------------------------------------------
[15:21:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:22:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:22:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:22:13    INFO]  -----------------------------------------------------------------------------------------------------------
[15:22:13    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:22:14    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:22:14    INFO]  - will try to derive a bias correction ... 
[15:22:14    INFO]  - will validate that training produced an XML file for later ... 
[15:22:14    INFO]  - starting ANNZ::loadReaders() ... 
[15:22:16    INFO]  - will validate that the training was not a complete failure ... 
[15:22:16    INFO]  - training seems to have been successful! will move on ...
[15:22:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:22:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:22:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:22:21    INFO] ----------------------------------------------------------------------------------------------------
[15:22:21    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:22:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:22:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:22:21    INFO]    - weights:            1
[15:22:21    INFO] ----------------------------------------------------------------------------------------------------
[15:22:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:22:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[15:22:29    INFO]  - Will gen. input-parameter errors ...
[15:22:31    INFO]  - starting ANNZ::loadReaders() ... 
[15:22:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:25:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:25:43    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:25:43    INFO]  -----------------------------------------------------------------------------------------------------------
[15:25:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:26:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:26:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:26:34    INFO]  -----------------------------------------------------------------------------------------------------------
[15:26:34    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:26:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:26:35    INFO]  - will validate that the bias-correction actually improved the result ...
[15:26:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:26:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
Warning in <Fit>: Fit data is empty 
[15:26:44    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_13/plots/
[15:27:04        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_13/plots output/SPEC_advanced6/regres/train/ANNZ_13/plots_biasCor_before
[15:27:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:27:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[15:27:09    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_13/plots/
[15:27:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_13/plots output/SPEC_advanced6/regres/train/ANNZ_13/plots_biasCor_after
[15:27:21    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40286] , after the bias-correction: [0.0440287 , 5.79536] --> will KEEP the correction !

(15:27 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:27 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:27 INFO) 
[15:27:25    INFO]  -----------------------------------------------------
[15:27:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:27:25    INFO]  -----------------------------------------------------------------------------------------------------------
[15:27:25    INFO]  - starting ANNZ::Init()  ... 
[15:27:27    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_14/saveOpt.txt ...
[15:27:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:27:33    INFO] ----------------------------------------------------------------------------------------------------
[15:27:33    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=310:BoostType=AdaBoost:VarTransform=N,P
[15:27:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:27:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:27:33    INFO]      cuts (train):        ,
[15:27:33    INFO]      cuts (valid):       
[15:27:33    INFO]    - weights:            1
[15:27:33    INFO] ----------------------------------------------------------------------------------------------------
[15:27:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:27:54    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[15:27:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[15:27:56    INFO]  - Will gen. input-parameter errors ...
[15:27:58    INFO]  - starting ANNZ::loadReaders() ... 
[15:28:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:30:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:30:10    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:30:10    INFO]  -----------------------------------------------------------------------------------------------------------
[15:30:10    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:30:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:30:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:30:40    INFO]  -----------------------------------------------------------------------------------------------------------
[15:30:41    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:30:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:30:41    INFO]  - will try to derive a bias correction ... 
[15:30:41    INFO]  - will validate that training produced an XML file for later ... 
[15:30:41    INFO]  - starting ANNZ::loadReaders() ... 
[15:30:42    INFO]  - will validate that the training was not a complete failure ... 
[15:30:43    INFO]  - training seems to have been successful! will move on ...
[15:30:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:30:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:30:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:30:47    INFO] ----------------------------------------------------------------------------------------------------
[15:30:47    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:30:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:30:47    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:30:47    INFO]    - weights:            1
[15:30:47    INFO] ----------------------------------------------------------------------------------------------------
[15:30:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:30:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[15:30:55    INFO]  - Will gen. input-parameter errors ...
[15:30:56    INFO]  - starting ANNZ::loadReaders() ... 
[15:31:01    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:33:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:33:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:33:35    INFO]  -----------------------------------------------------------------------------------------------------------
[15:33:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:34:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:34:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:34:14    INFO]  -----------------------------------------------------------------------------------------------------------
[15:34:14    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:34:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:34:15    INFO]  - will validate that the bias-correction actually improved the result ...
[15:34:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:34:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
Warning in <Fit>: Fit data is empty 
[15:34:21    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_14/plots/
[15:34:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_14/plots output/SPEC_advanced6/regres/train/ANNZ_14/plots_biasCor_before
[15:34:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:34:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[15:34:37    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_14/plots/
[15:34:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_14/plots output/SPEC_advanced6/regres/train/ANNZ_14/plots_biasCor_after
[15:34:50    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40465] , after the bias-correction: [0.0435806 , 5.8127] --> will KEEP the correction !

(15:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:34 INFO) 
[15:34:53    INFO]  -----------------------------------------------------
[15:34:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:34:53    INFO]  -----------------------------------------------------------------------------------------------------------
[15:34:54    INFO]  - starting ANNZ::Init()  ... 
[15:34:55    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_15/saveOpt.txt ...
[15:35:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:35:01    INFO] ----------------------------------------------------------------------------------------------------
[15:35:01    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N
[15:35:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:35:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:35:01    INFO]      cuts (train):        ,
[15:35:01    INFO]      cuts (valid):       
[15:35:01    INFO]    - weights:            1
[15:35:01    INFO] ----------------------------------------------------------------------------------------------------
[15:35:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:35:41    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[15:35:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[15:35:45    INFO]  - Will gen. input-parameter errors ...
[15:35:47    INFO]  - starting ANNZ::loadReaders() ... 
[15:35:56    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:37:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:37:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:37:57    INFO]  -----------------------------------------------------------------------------------------------------------
[15:37:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:38:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:38:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:38:29    INFO]  -----------------------------------------------------------------------------------------------------------
[15:38:29    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:38:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:38:31    INFO]  - will try to derive a bias correction ... 
[15:38:31    INFO]  - will validate that training produced an XML file for later ... 
[15:38:31    INFO]  - starting ANNZ::loadReaders() ... 
[15:38:35    INFO]  - will validate that the training was not a complete failure ... 
[15:38:35    INFO]  - training seems to have been successful! will move on ...
[15:38:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:38:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:38:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:38:40    INFO] ----------------------------------------------------------------------------------------------------
[15:38:40    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:38:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:38:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:38:40    INFO]    - weights:            1
[15:38:40    INFO] ----------------------------------------------------------------------------------------------------
[15:38:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:38:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[15:38:50    INFO]  - Will gen. input-parameter errors ...
[15:38:52    INFO]  - starting ANNZ::loadReaders() ... 
[15:39:01    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:41:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:41:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:41:11    INFO]  -----------------------------------------------------------------------------------------------------------
[15:41:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:41:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:41:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:41:44    INFO]  -----------------------------------------------------------------------------------------------------------
[15:41:44    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:41:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:41:46    INFO]  - will validate that the bias-correction actually improved the result ...
[15:41:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:41:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[15:41:53    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_15/plots/
[15:42:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_15/plots output/SPEC_advanced6/regres/train/ANNZ_15/plots_biasCor_before
[15:42:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:42:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[15:42:10    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_15/plots/
[15:42:23        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_15/plots output/SPEC_advanced6/regres/train/ANNZ_15/plots_biasCor_after
[15:42:23    INFO]  - Got original [KS-test,N_poiss]: [0.0841362 , 6.65154] , after the bias-correction: [0.04851 , 5.52609] --> will KEEP the correction !

(15:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:42 INFO) 
[15:42:27    INFO]  -----------------------------------------------------
[15:42:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:42:27    INFO]  -----------------------------------------------------------------------------------------------------------
[15:42:27    INFO]  - starting ANNZ::Init()  ... 
[15:42:29    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_16/saveOpt.txt ...
[15:42:34    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:42:34    INFO] ----------------------------------------------------------------------------------------------------
[15:42:34    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=470:BoostType=AdaBoost:VarTransform=N,P
[15:42:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:42:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:42:34    INFO]      cuts (train):        ,
[15:42:34    INFO]      cuts (valid):       
[15:42:34    INFO]    - weights:            1
[15:42:34    INFO] ----------------------------------------------------------------------------------------------------
[15:42:35    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:43:06    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[15:43:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[15:43:09    INFO]  - Will gen. input-parameter errors ...
[15:43:10    INFO]  - starting ANNZ::loadReaders() ... 
[15:43:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:46:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:46:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:46:30    INFO]  -----------------------------------------------------------------------------------------------------------
[15:46:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:47:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:47:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:47:14    INFO]  -----------------------------------------------------------------------------------------------------------
[15:47:14    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:47:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:47:15    INFO]  - will try to derive a bias correction ... 
[15:47:15    INFO]  - will validate that training produced an XML file for later ... 
[15:47:15    INFO]  - starting ANNZ::loadReaders() ... 
[15:47:16    INFO]  - will validate that the training was not a complete failure ... 
[15:47:16    INFO]  - training seems to have been successful! will move on ...
[15:47:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:47:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:47:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:47:21    INFO] ----------------------------------------------------------------------------------------------------
[15:47:21    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:47:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:47:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[15:47:21    INFO]    - weights:            1
[15:47:21    INFO] ----------------------------------------------------------------------------------------------------
[15:47:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:47:29    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[15:47:29    INFO]  - Will gen. input-parameter errors ...
[15:47:30    INFO]  - starting ANNZ::loadReaders() ... 
[15:47:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:50:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:50:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:50:34    INFO]  -----------------------------------------------------------------------------------------------------------
[15:50:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[15:51:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:51:17    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:51:17    INFO]  -----------------------------------------------------------------------------------------------------------
[15:51:17    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:51:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:51:18    INFO]  - will validate that the bias-correction actually improved the result ...
[15:51:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:51:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[15:51:24    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_16/plots/
[15:51:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_16/plots output/SPEC_advanced6/regres/train/ANNZ_16/plots_biasCor_before
[15:51:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:51:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
Warning in <Fit>: Fit data is empty 
[15:51:41    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_16/plots/
[15:51:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_16/plots output/SPEC_advanced6/regres/train/ANNZ_16/plots_biasCor_after
[15:51:54    INFO]  - Got original [KS-test,N_poiss]: [0.101389 , 6.40773] , after the bias-correction: [0.0442528 , 5.76265] --> will KEEP the correction !

(15:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:51 INFO) 
[15:51:57    INFO]  -----------------------------------------------------
[15:51:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:51:57    INFO]  -----------------------------------------------------------------------------------------------------------
[15:51:59    INFO]  - starting ANNZ::Init()  ... 
[15:52:00    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_17/saveOpt.txt ...
[15:52:05    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:52:06    INFO] ----------------------------------------------------------------------------------------------------
[15:52:06    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=360:BoostType=AdaBoostR2:VarTransform=N
[15:52:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:52:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[15:52:06    INFO]      cuts (train):        ,
[15:52:06    INFO]      cuts (valid):       
[15:52:06    INFO]    - weights:            1
[15:52:06    INFO] ----------------------------------------------------------------------------------------------------
[15:52:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:52:42    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[15:52:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[15:52:45    INFO]  - Will gen. input-parameter errors ...
[15:52:47    INFO]  - starting ANNZ::loadReaders() ... 
[15:52:58    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[15:59:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:59:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[15:59:07    INFO]  -----------------------------------------------------------------------------------------------------------
[15:59:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[16:00:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:00:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:00:48    INFO]  -----------------------------------------------------------------------------------------------------------
[16:00:49    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:00:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:00:50    INFO]  - will try to derive a bias correction ... 
[16:00:50    INFO]  - will validate that training produced an XML file for later ... 
[16:00:50    INFO]  - starting ANNZ::loadReaders() ... 
[16:00:52    INFO]  - will validate that the training was not a complete failure ... 
[16:00:52    INFO]  - training seems to have been successful! will move on ...
[16:00:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:00:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:00:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:00:57    INFO] ----------------------------------------------------------------------------------------------------
[16:00:57    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:00:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:00:57    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:00:57    INFO]    - weights:            1
[16:00:57    INFO] ----------------------------------------------------------------------------------------------------
[16:00:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:01:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[16:01:07    INFO]  - Will gen. input-parameter errors ...
[16:01:09    INFO]  - starting ANNZ::loadReaders() ... 
[16:01:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[16:06:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:06:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:06:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:06:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[16:07:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:07:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:07:34    INFO]  -----------------------------------------------------------------------------------------------------------
[16:07:34    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:07:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:07:35    INFO]  - will validate that the bias-correction actually improved the result ...
[16:07:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:07:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
Warning in <Fit>: Fit data is empty 
[16:07:41    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_17/plots/
[16:07:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_17/plots output/SPEC_advanced6/regres/train/ANNZ_17/plots_biasCor_before
[16:07:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:07:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[16:08:01    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_17/plots/
[16:08:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_17/plots output/SPEC_advanced6/regres/train/ANNZ_17/plots_biasCor_after
[16:08:13    INFO]  - Got original [KS-test,N_poiss]: [0.0618418 , 6.59482] , after the bias-correction: [0.0338337 , 5.52044] --> will KEEP the correction !

(16:08 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:08 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:08 INFO) 
[16:08:16    INFO]  -----------------------------------------------------
[16:08:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:08:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:08:17    INFO]  - starting ANNZ::Init()  ... 
[16:08:18    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_18/saveOpt.txt ...
[16:08:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:08:24    INFO] ----------------------------------------------------------------------------------------------------
[16:08:24    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[16:08:24    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:08:24    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:08:24    INFO]      cuts (train):        ,
[16:08:24    INFO]      cuts (valid):       
[16:08:24    INFO]    - weights:            1
[16:08:24    INFO] ----------------------------------------------------------------------------------------------------
[16:08:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:09:10    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[16:09:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[16:09:14    INFO]  - Will gen. input-parameter errors ...
[16:09:16    INFO]  - starting ANNZ::loadReaders() ... 
[16:09:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[16:11:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:11:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:11:42    INFO]  -----------------------------------------------------------------------------------------------------------
[16:11:43    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[16:12:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:12:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:12:15    INFO]  -----------------------------------------------------------------------------------------------------------
[16:12:15    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:12:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:12:17    INFO]  - will try to derive a bias correction ... 
[16:12:17    INFO]  - will validate that training produced an XML file for later ... 
[16:12:17    INFO]  - starting ANNZ::loadReaders() ... 
[16:12:21    INFO]  - will validate that the training was not a complete failure ... 
[16:12:21    INFO]  - training seems to have been successful! will move on ...
[16:12:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:12:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:12:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:12:26    INFO] ----------------------------------------------------------------------------------------------------
[16:12:26    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:12:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:12:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:12:26    INFO]    - weights:            1
[16:12:26    INFO] ----------------------------------------------------------------------------------------------------
[16:12:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:12:37    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[16:12:37    INFO]  - Will gen. input-parameter errors ...
[16:12:38    INFO]  - starting ANNZ::loadReaders() ... 
[16:12:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[16:15:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:15:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:15:28    INFO]  -----------------------------------------------------------------------------------------------------------
[16:15:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[16:16:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:16:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:16:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:16:03    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:16:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:16:05    INFO]  - will validate that the bias-correction actually improved the result ...
[16:16:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:16:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[16:16:12    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_18/plots/
[16:16:24        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_18/plots output/SPEC_advanced6/regres/train/ANNZ_18/plots_biasCor_before
[16:16:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:16:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[16:16:29    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_18/plots/
[16:16:41        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_18/plots output/SPEC_advanced6/regres/train/ANNZ_18/plots_biasCor_after
[16:16:42    INFO]  - Got original [KS-test,N_poiss]: [0.0844724 , 6.62039] , after the bias-correction: [0.0454851 , 5.53294] --> will KEEP the correction !

(16:16 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:16 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:16 INFO) 
[16:16:46    INFO]  -----------------------------------------------------
[16:16:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:16:46    INFO]  -----------------------------------------------------------------------------------------------------------
[16:16:46    INFO]  - starting ANNZ::Init()  ... 
[16:16:47    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/train/ANNZ_19/saveOpt.txt ...
[16:16:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:16:53    INFO] ----------------------------------------------------------------------------------------------------
[16:16:53    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=540:BoostType=AdaBoost:VarTransform=N,P
[16:16:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:16:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:16:53    INFO]      cuts (train):        ,
[16:16:53    INFO]      cuts (valid):       
[16:16:53    INFO]    - weights:            1
[16:16:53    INFO] ----------------------------------------------------------------------------------------------------
[16:16:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:17:25    INFO]  - Saving MLM information in ./output/SPEC_advanced6/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[16:17:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[16:17:28    INFO]  - Will gen. input-parameter errors ...
[16:17:29    INFO]  - starting ANNZ::loadReaders() ... 
[16:17:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[16:21:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:21:25    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:21:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:21:25    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[16:22:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:22:25    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:22:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:22:25    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:22:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:22:26    INFO]  - will try to derive a bias correction ... 
[16:22:26    INFO]  - will validate that training produced an XML file for later ... 
[16:22:26    INFO]  - starting ANNZ::loadReaders() ... 
[16:22:28    INFO]  - will validate that the training was not a complete failure ... 
[16:22:28    INFO]  - training seems to have been successful! will move on ...
[16:22:28    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:22:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:22:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:22:32    INFO] ----------------------------------------------------------------------------------------------------
[16:22:32    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:22:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:22:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:22:32    INFO]    - weights:            1
[16:22:32    INFO] ----------------------------------------------------------------------------------------------------
[16:22:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:22:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[16:22:40    INFO]  - Will gen. input-parameter errors ...
[16:22:42    INFO]  - starting ANNZ::loadReaders() ... 
[16:22:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_train*.root
[16:26:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:26:20    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced6/rootIn/ANNZ_tree_valid*.root
[16:27:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:27:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:27:07    INFO]  -----------------------------------------------------------------------------------------------------------
[16:27:08    INFO]  - Saving file ./output/SPEC_advanced6/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:27:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:27:09    INFO]  - will validate that the bias-correction actually improved the result ...
[16:27:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:27:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
Warning in <Fit>: Fit data is empty 
[16:27:17    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_19/plots/
[16:27:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_19/plots output/SPEC_advanced6/regres/train/ANNZ_19/plots_biasCor_before
[16:27:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:27:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
Warning in <Fit>: Fit data is empty 
[16:27:35    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/train/ANNZ_19/plots/
[16:27:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced6/regres/train/ANNZ_19/plots output/SPEC_advanced6/regres/train/ANNZ_19/plots_biasCor_after
[16:27:48    INFO]  - Got original [KS-test,N_poiss]: [0.101613 , 6.43565] , after the bias-correction: [0.0444768 , 5.70774] --> will KEEP the correction !

(16:27 INFO) [40;37;1m - 10/03/19 16:27:53 - finished running ANNZ ![0m
(09:12 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:12 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:12 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:12 INFO) [40;37;1m - 11/03/19 09:12:54 - starting ANNZ[0m
(09:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:12 INFO) 
[09:12:54    INFO]  -----------------------------------------------------
[09:12:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:12:54    INFO]  -----------------------------------------------------------------------------------------------------------
[09:12:55    INFO]  - starting ANNZ::Init()  ... 
[09:12:55    INFO]  - Will generate 1 PDFs ... 
[09:13:05    INFO] --------------------------------------------------------
[09:13:05    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:13:05    INFO]  - All REJECTED MLMs: 
[09:13:05    INFO] ----------------------------------------------------------------------------------------------------------------
[09:13:07    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/optim/saveOpt.txt ...
[09:13:49    INFO]  - starting ANNZ::Optim() ... 
[09:13:49    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[09:13:49    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[09:13:58    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:13:59    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced6/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[09:14:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:14:07    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced6/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[09:14:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:14:15    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/SPEC_advanced6/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[09:14:15    INFO]  - Saving file ./output/SPEC_advanced6/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[09:14:16    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[09:14:16    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced6/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[09:14:16    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[09:14:16    INFO]  - ending makeTreeRegClsAllMLM() ... 
[09:14:16    INFO]  - starting ANNZ::optimReg() ... 
[09:14:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:14:19    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced6/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[09:14:19    INFO]  - starting ANNZ::fillColosureV() ... 
[09:14:20    INFO]  ---------------------------------------------------------------------------------- 
[09:14:20    INFO]  - Got the following average properties: 
[09:14:20    INFO]  --------------------------------------- 
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00695571 	 0.0434862 	 0.0474288
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00799496 	 0.0434814 	 0.0482182
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0035139 	 0.0655605 	 0.0887827
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.0103379 	 0.0483432 	 0.0865976
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.0087442 	 0.0582184 	 0.0877486
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.00426911 	 0.0651402 	 0.0902238
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0105911 	 0.0473161 	 0.0887528
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.0101378 	 0.0485852 	 0.086026
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00854736 	 0.0748441 	 0.0875141
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00792526 	 0.0427636 	 0.0504249
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.0103309 	 0.047332 	 0.0897809
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00961004 	 0.0477764 	 0.0883148
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.0133199 	 0.0445794 	 0.0855761
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.00436517 	 0.0649149 	 0.0912417
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00431789 	 0.0650606 	 0.0905628
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.0129079 	 0.044971 	 0.0882971
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00415858 	 0.0650478 	 0.0908794
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00859224 	 0.044446 	 0.0493308
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.012541 	 0.0441517 	 0.0880368
[09:14:20    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.0035139 	 0.0655605 	 0.0887827
[09:14:20    INFO]  ------------------------------------------------------------------------------------------------- 
[09:14:20    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[09:14:20    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[09:14:20    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[09:14:20    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[09:14:20    INFO]  - Now trying to find best methods with a limit of 15% of the [sig68] dist, and 25% of the other(s) - iteration 2 ...
[09:14:20    INFO]  - Now trying to find best methods with a limit of 17.5% of the [sig68] dist, and 27.5% of the other(s) - iteration 3 ...
[09:14:20    INFO]  - Now trying to find best methods with a limit of 20% of the [sig68] dist, and 30% of the other(s) - iteration 4 ...
[09:14:20    INFO]  - Now trying to find best methods with a limit of 22.5% of the [sig68] dist, and 32.5% of the other(s) - iteration 5 ...
[09:14:20    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 22.5% of the [sig68] dist.
[09:14:20    INFO]  - The "best" MLM is: ANNZ_0
[09:14:20    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[09:14:20    INFO]  - initial PDF weights: ANNZ_0:0.222 ANNZ_9:0.194 ANNZ_1:0.167 ANNZ_17:0.139 ANNZ_11:0.111 ANNZ_10:0.083 ANNZ_3:0.056 ANNZ_6:0.028 
[09:14:20    INFO]  - will loop on the input trees ...
[09:14:20    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.44491e-01
[09:14:20    INFO]  - nTry: 1 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.45904e-01
[09:14:20    INFO]  - nTry: 2 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.45101e-01
[09:14:21    INFO]  - nTry: 3 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.45349e-01
[09:14:21    INFO]  - nTry: 4 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.44959e-01
[09:14:21    INFO]  - nTry: 5 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.45121e-01
[09:14:21    INFO]  - nTry: 6 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.45071e-01
[09:14:21    INFO]  - nTry: 7 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.44929e-01
[09:14:21    INFO]  - nTry: 8 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.44817e-01
[09:14:21    INFO]  - nTry: 9 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.44891e-01
[09:14:21    INFO]  - nTry: 10 - min-param best/prev/now: 2.44491e-01 / 2.44491e-01 / 2.44934e-01
[09:14:21    INFO]  - nTry: 20 - min-param best/prev/now: 2.44491e-01 / 2.45203e-01 / 2.46194e-01
[09:14:22    INFO]  - nTry: 30 - min-param best/prev/now: 2.44491e-01 / 2.46761e-01 / 2.46770e-01
[09:14:23    INFO]  - nTry: 40 - min-param best/prev/now: 2.44491e-01 / 2.46755e-01 / 2.46966e-01
[09:14:23    INFO]  - nTry: 50 - min-param best/prev/now: 2.44491e-01 / 2.47033e-01 / 2.47092e-01
[09:14:24    INFO]  - nTry: 60 - min-param best/prev/now: 2.44491e-01 / 2.47033e-01 / 2.47164e-01
[09:14:24    INFO]  - nTry: 70 - min-param best/prev/now: 2.44491e-01 / 2.47234e-01 / 2.47227e-01
[09:14:25    INFO]  - nTry: 80 - min-param best/prev/now: 2.44491e-01 / 2.47562e-01 / 2.47700e-01
[09:14:25    INFO]  - nTry: 90 - min-param best/prev/now: 2.44491e-01 / 2.47898e-01 / 2.48169e-01
[09:14:26    INFO]  - nTry: 100 - min-param best/prev/now: 2.44491e-01 / 2.48375e-01 / 2.48582e-01
[09:14:27    INFO]  - nTry: 120 - min-param best/prev/now: 2.44491e-01 / 2.48877e-01 / 2.49047e-01
[09:14:28    INFO]  - nTry: 140 - min-param best/prev/now: 2.44491e-01 / 2.49025e-01 / 2.49038e-01
[09:14:28    INFO]  - nTry: 150 - min-param best/prev/now: 2.44491e-01 / 2.49035e-01 / 2.49059e-01
[09:14:29    INFO]  - nTry: 160 - min-param best/prev/now: 2.44491e-01 / 2.49059e-01 / 2.49075e-01
[09:14:30    INFO]  - nTry: 180 - min-param best/prev/now: 2.44491e-01 / 2.49077e-01 / 2.49129e-01
[09:14:31    INFO]  - nTry: 200 - min-param best/prev/now: 2.44491e-01 / 2.49185e-01 / 2.49187e-01
[09:14:32    INFO]  - nTry: 220 - min-param best/prev/now: 2.44491e-01 / 2.49180e-01 / 2.49192e-01
[09:14:33    INFO]  - nTry: 240 - min-param best/prev/now: 2.44491e-01 / 2.49209e-01 / 2.49238e-01
[09:14:34    INFO]  - nTry: 250 - min-param best/prev/now: 2.44491e-01 / 2.49245e-01 / 2.49249e-01
[09:14:34    INFO]  - finished PDF optimization! - final minimization parameter: 2.44491e-01 , PDF weights: ANNZ_0:0.222 ANNZ_9:0.194 ANNZ_1:0.167 ANNZ_17:0.139 ANNZ_11:0.111 ANNZ_10:0.083 ANNZ_3:0.056 ANNZ_6:0.028 
[09:14:34    INFO]  - will derive the bias correction for the pdf ... 
[09:14:34    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.222222, ANNZ_1:0.166667, ANNZ_2:0.000000, ANNZ_3:0.055556, ANNZ_4:0.000000, ANNZ_5:0.000000, ANNZ_6:0.027778, ANNZ_7:0.000000, ANNZ_8:0.000000, ANNZ_9:0.194444, ANNZ_10:0.083333, ANNZ_11:0.111111, ANNZ_12:0.000000, ANNZ_13:0.000000, ANNZ_14:0.000000, ANNZ_15:0.000000, ANNZ_16:0.000000, ANNZ_17:0.138889, ANNZ_18:0.000000, ANNZ_19:0.000000, 
[09:14:34    INFO]  - Saving optimization results in ./output/SPEC_advanced6/regres/optim/saveOptimOpt.txt ...
[09:14:36    INFO]  - Saving bias-correction results in ./output/SPEC_advanced6/regres/optim/saveOptimObj.root ...
[09:14:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:14:38    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced6/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[09:14:41    INFO]  - starting ANNZ::doEvalReg() ... 
[09:14:41    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:14:41    INFO]  - Reading bias-correction results from ./output/SPEC_advanced6/regres/optim/saveOptimObj.root ...
[09:14:41    INFO]  - Getting optimization results from ./output/SPEC_advanced6/regres/optim/saveOptimOpt.txt ...
[09:14:41    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[09:14:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:14:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:14:42    INFO]  -----------------------------------------------------------------------------------------------------------
[09:14:42    INFO]  - starting storeTreeToAscii() ... 
[09:14:42    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[09:14:42    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced6/regres/optim/eval/ANNZ_randomReg_0000.csv
[09:14:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:14:42    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[09:14:42    INFO]  -----------------------------------------------------------------------------------------------------------
[09:14:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:14:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[09:14:42    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[09:14:52    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/optim/eval/plots/

(09:14 INFO) [40;37;1m - 11/03/19 09:14:58 - finished running ANNZ ![0m
(09:15 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(09:15 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(09:15 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(09:15 INFO) [40;37;1m - 11/03/19 09:15:23 - starting ANNZ[0m
(09:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data10c.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(09:15 INFO) 
[09:15:23    INFO]  -----------------------------------------------------
[09:15:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:15:23    INFO]  -----------------------------------------------------------------------------------------------------------
[09:15:23    INFO]  - starting ANNZ::Init()  ... 
[09:15:23    INFO]  - Will generate 1 PDFs ... 
[09:15:33    INFO] --------------------------------------------------------
[09:15:33    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:15:33    INFO]  - All REJECTED MLMs: 
[09:15:33    INFO] ----------------------------------------------------------------------------------------------------------------
[09:15:35    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/eval_nFile0/saveOpt.txt ...
[09:16:19    INFO]  - starting inputToFullTree(ANNz_data10c.csv) ... 
[09:16:19    INFO]  - Found 2232 lines in file PAUS/ANNz_data10c.csv -> total so far = 2232 ... 
[09:16:19    INFO]  - Now reading-in PAUS/ANNz_data10c.csv ... 
[09:16:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:16:19    INFO]  -- ANNZ_tree_eval .................................. 2232  nLine
[09:16:19    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[09:16:19    INFO]  -----------------------------------------------------------------------------------------------------------
[09:16:19    INFO]  - starting ANNZ::Eval() ... 
[09:16:19    INFO]  - starting ANNZ::doEvalReg() ... 
[09:16:19    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[09:16:19    INFO]  - Reading bias-correction results from ./output/SPEC_advanced6/regres/optim/saveOptimObj.root ...
[09:16:19    INFO]  - Getting optimization results from ./output/SPEC_advanced6/regres/optim/saveOptimOpt.txt ...
[09:16:19    INFO]  - creating MLM trees from input ...
[09:16:19    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_0,ANNZ_1,ANNZ_3,ANNZ_6,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_17,
[09:16:19    INFO]  - starting ANNZ::loadReaders() ... 
[09:30:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:30:43    INFO]  -- ANNZ_tree_eval .................................. 2232  nObj
[09:30:43    INFO]  -----------------------------------------------------------------------------------------------------------
[09:30:43    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[09:30:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:30:44    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................. 2232  nObj
[09:30:44    INFO]  -----------------------------------------------------------------------------------------------------------
[09:30:44    INFO]  - starting storeTreeToAscii() ... 
[09:30:44    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[09:30:44    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced6/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[09:30:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:30:44    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[09:30:44    INFO]  -----------------------------------------------------------------------------------------------------------
[09:30:45    INFO]  - detected the target,zspec in the evaluated sample - Will create performance plots ...
[09:30:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:30:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[09:30:45    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[09:30:56    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/eval_nFile0/plots/

(09:31 INFO) [40;37;1m - 11/03/19 09:31:02 - finished running ANNZ ![0m
(15:35 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(15:35 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(15:35 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(15:35 INFO) [40;37;1m - 12/03/19 15:35:34 - starting ANNZ[0m
(15:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m20[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced6[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(15:35 INFO) 
[15:35:34    INFO]  -----------------------------------------------------
[15:35:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:35:34    INFO]  -----------------------------------------------------------------------------------------------------------
[15:35:34    INFO]  - starting ANNZ::Init()  ... 
[15:35:34    INFO]  - Will generate 1 PDFs ... 
[15:35:44    INFO] --------------------------------------------------------
[15:35:44    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[15:35:44    INFO]  - All REJECTED MLMs: 
[15:35:44    INFO] ----------------------------------------------------------------------------------------------------------------
[15:35:46    INFO]  - Saving run information in ./output/SPEC_advanced6/regres/optim/saveOpt.txt ...
[15:36:24    INFO]  - starting ANNZ::Optim() ... 
[15:36:24    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[15:36:24    INFO]  - Found all requred post-train root files -> Getting from file ./output/SPEC_advanced6/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[15:36:24    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[15:36:24    INFO]  - ending makeTreeRegClsAllMLM() ... 
[15:36:24    INFO]  - starting ANNZ::optimReg() ... 
[15:36:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:36:27    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/SPEC_advanced6/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[15:36:28    INFO]  - starting ANNZ::fillColosureV() ... 
[15:36:28    INFO]  ---------------------------------------------------------------------------------- 
[15:36:28    INFO]  - Got the following average properties: 
[15:36:28    INFO]  --------------------------------------- 
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00695571 	 0.0434862 	 0.0474288
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.00799496 	 0.0434814 	 0.0482182
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.0035139 	 0.0655605 	 0.0887827
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.0103379 	 0.0483432 	 0.0865976
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.0087442 	 0.0582184 	 0.0877486
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.00426911 	 0.0651402 	 0.0902238
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.0105911 	 0.0473161 	 0.0887528
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.0101378 	 0.0485852 	 0.086026
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00854736 	 0.0748441 	 0.0875141
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00792526 	 0.0427636 	 0.0504249
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.0103309 	 0.047332 	 0.0897809
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00961004 	 0.0477764 	 0.0883148
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.0133199 	 0.0445794 	 0.0855761
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.00436517 	 0.0649149 	 0.0912417
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00431789 	 0.0650606 	 0.0905628
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.0129079 	 0.044971 	 0.0882971
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00415858 	 0.0650478 	 0.0908794
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00859224 	 0.044446 	 0.0493308
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.012541 	 0.0441517 	 0.0880368
[15:36:28    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.0035139 	 0.0655605 	 0.0887827
[15:36:28    INFO]  ------------------------------------------------------------------------------------------------- 
[15:36:28    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[15:36:28    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[15:36:28    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[15:36:28    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[15:36:28    INFO]  - Now trying to find best methods with a limit of 15% of the [sig68] dist, and 25% of the other(s) - iteration 2 ...
[15:36:28    INFO]  - Now trying to find best methods with a limit of 17.5% of the [sig68] dist, and 27.5% of the other(s) - iteration 3 ...
[15:36:28    INFO]  - Now trying to find best methods with a limit of 20% of the [sig68] dist, and 30% of the other(s) - iteration 4 ...
[15:36:28    INFO]  - Now trying to find best methods with a limit of 22.5% of the [sig68] dist, and 32.5% of the other(s) - iteration 5 ...
[15:36:28    INFO]  - Found 1 "best" methods (min-threshold was 1) from the bottom 22.5% of the [sig68] dist.
[15:36:28    INFO]  - The "best" MLM is: ANNZ_0
[15:36:28    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[15:36:28    INFO]  - initial PDF weights: ANNZ_0:0.118 ANNZ_9:0.110 ANNZ_1:0.103 ANNZ_17:0.096 ANNZ_16:0.088 ANNZ_13:0.081 ANNZ_5:0.074 ANNZ_14:0.066 ANNZ_11:0.059 ANNZ_7:0.051 ANNZ_10:0.044 ANNZ_4:0.037 ANNZ_3:0.029 ANNZ_6:0.022 ANNZ_18:0.015 ANNZ_15:0.007 
[15:36:28    INFO]  - will loop on the input trees ...
[15:36:29    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.41501e-01
[15:36:29    INFO]  - nTry: 1 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.41670e-01
[15:36:29    INFO]  - nTry: 2 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.42442e-01
[15:36:29    INFO]  - nTry: 3 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.43319e-01
[15:36:29    INFO]  - nTry: 4 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.43624e-01
[15:36:29    INFO]  - nTry: 5 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.44100e-01
[15:36:29    INFO]  - nTry: 6 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.44220e-01
[15:36:29    INFO]  - nTry: 7 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.43811e-01
[15:36:29    INFO]  - nTry: 8 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.43910e-01
[15:36:29    INFO]  - nTry: 9 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.43896e-01
[15:36:29    INFO]  - nTry: 10 - min-param best/prev/now: 2.41501e-01 / 2.41501e-01 / 2.43866e-01
[15:36:30    INFO]  - nTry: 20 - min-param best/prev/now: 2.41501e-01 / 2.44370e-01 / 2.44455e-01
[15:36:31    INFO]  - nTry: 30 - min-param best/prev/now: 2.41501e-01 / 2.46059e-01 / 2.46167e-01
[15:36:31    INFO]  - nTry: 40 - min-param best/prev/now: 2.41501e-01 / 2.46344e-01 / 2.47221e-01
[15:36:32    INFO]  - nTry: 50 - min-param best/prev/now: 2.41501e-01 / 2.47221e-01 / 2.47909e-01
[15:36:33    INFO]  - nTry: 60 - min-param best/prev/now: 2.41501e-01 / 2.48300e-01 / 2.48530e-01
[15:36:33    INFO]  - nTry: 70 - min-param best/prev/now: 2.41501e-01 / 2.48300e-01 / 2.49018e-01
[15:36:34    INFO]  - nTry: 80 - min-param best/prev/now: 2.41501e-01 / 2.49157e-01 / 2.49341e-01
[15:36:35    INFO]  - nTry: 90 - min-param best/prev/now: 2.41501e-01 / 2.49482e-01 / 2.49488e-01
[15:36:36    INFO]  - nTry: 100 - min-param best/prev/now: 2.41501e-01 / 2.49502e-01 / 2.49502e-01
[15:36:37    INFO]  - nTry: 120 - min-param best/prev/now: 2.41501e-01 / 2.49525e-01 / 2.49607e-01
[15:36:39    INFO]  - nTry: 140 - min-param best/prev/now: 2.41501e-01 / 2.49423e-01 / 2.49426e-01
[15:36:40    INFO]  - nTry: 150 - min-param best/prev/now: 2.41501e-01 / 2.49435e-01 / 2.49461e-01
[15:36:40    INFO]  - nTry: 160 - min-param best/prev/now: 2.41501e-01 / 2.49493e-01 / 2.49582e-01
[15:36:42    INFO]  - nTry: 180 - min-param best/prev/now: 2.41501e-01 / 2.49749e-01 / 2.49787e-01
[15:36:44    INFO]  - nTry: 200 - min-param best/prev/now: 2.41501e-01 / 2.49913e-01 / 2.49946e-01
[15:36:46    INFO]  - nTry: 220 - min-param best/prev/now: 2.41501e-01 / 2.49899e-01 / 2.49962e-01
[15:36:48    INFO]  - nTry: 240 - min-param best/prev/now: 2.41501e-01 / 2.50117e-01 / 2.50182e-01
[15:36:48    INFO]  - nTry: 250 - min-param best/prev/now: 2.41501e-01 / 2.50264e-01 / 2.50268e-01
[15:36:48    INFO]  - finished PDF optimization! - final minimization parameter: 2.41501e-01 , PDF weights: ANNZ_0:0.118 ANNZ_9:0.110 ANNZ_1:0.103 ANNZ_17:0.096 ANNZ_16:0.088 ANNZ_13:0.081 ANNZ_5:0.074 ANNZ_14:0.066 ANNZ_11:0.059 ANNZ_7:0.051 ANNZ_10:0.044 ANNZ_4:0.037 ANNZ_3:0.029 ANNZ_6:0.022 ANNZ_18:0.015 ANNZ_15:0.007 
[15:36:48    INFO]  - will derive the bias correction for the pdf ... 
[15:36:49    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.117647, ANNZ_1:0.102941, ANNZ_2:0.000000, ANNZ_3:0.029412, ANNZ_4:0.036765, ANNZ_5:0.073529, ANNZ_6:0.022059, ANNZ_7:0.051471, ANNZ_8:0.000000, ANNZ_9:0.110294, ANNZ_10:0.044118, ANNZ_11:0.058824, ANNZ_12:0.000000, ANNZ_13:0.080882, ANNZ_14:0.066176, ANNZ_15:0.007353, ANNZ_16:0.088235, ANNZ_17:0.095588, ANNZ_18:0.014706, ANNZ_19:0.000000, 
[15:36:49    INFO]  - Saving optimization results in ./output/SPEC_advanced6/regres/optim/saveOptimOpt.txt ...
[15:36:52    INFO]  - Saving bias-correction results in ./output/SPEC_advanced6/regres/optim/saveOptimObj.root ...
[15:36:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:37:00    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/SPEC_advanced6/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[15:37:03    INFO]  - starting ANNZ::doEvalReg() ... 
[15:37:03    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,
[15:37:03    INFO]  - Reading bias-correction results from ./output/SPEC_advanced6/regres/optim/saveOptimObj.root ...
[15:37:03    INFO]  - Getting optimization results from ./output/SPEC_advanced6/regres/optim/saveOptimOpt.txt ...
[15:37:03    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[15:37:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:37:05    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[15:37:05    INFO]  -----------------------------------------------------------------------------------------------------------
[15:37:05    INFO]  - starting storeTreeToAscii() ... 
[15:37:05    INFO]  - will write to file the following branches: ref_id,zb,pz_width,odds,qz,production_id,paudm_id,ra,dec,zspec,conf,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[15:37:05    INFO]  - Will parse  ANNZ_tree_randomReg(2232)... Now in ./output/SPEC_advanced6/regres/optim/eval/ANNZ_randomReg_0000.csv
[15:37:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:37:05    INFO]  -- ANNZ_randomReg .................................. 2232  nObj
[15:37:05    INFO]  -----------------------------------------------------------------------------------------------------------
[15:37:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:37:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[15:37:05    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[15:37:29    INFO]  - Writing to plotting directory output/SPEC_advanced6/regres/optim/eval/plots/

(15:37 INFO) [40;37;1m - 12/03/19 15:37:40 - finished running ANNZ ![0m
