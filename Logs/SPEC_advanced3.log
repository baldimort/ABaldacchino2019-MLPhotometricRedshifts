(18:35 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:35 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:35 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:35 INFO) [40;37;1m - 21/02/19 18:35:00 - starting ANNZ[0m
(18:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:35 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:35 INFO) 
[18:35:00    INFO]  -----------------------------------------------------
[18:35:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:35:00    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:03    INFO]  - starting inputToSplitTree() ... 
[18:35:03    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[18:35:03    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[18:35:03    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[18:35:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:35:04    INFO]  -- ANNZ_tree .......................................... 0  index
[18:35:04    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[18:35:04    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[18:35:04    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[18:35:04    INFO]  -- ANNZ_tree .......................................... 0  nTest
[18:35:04    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[18:35:04    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:04    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[18:35:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:35:05    INFO]  -- ANNZ_tree .......................................... 0  index
[18:35:05    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[18:35:05    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[18:35:05    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[18:35:05    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[18:35:05    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[18:35:05    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:05    INFO]  - Writing to plotting directory output/SPEC_advanced3/rootIn/plots/
[18:35:07    INFO]  - Writing to plotting directory output/SPEC_advanced3/rootIn/plots/

(18:35 INFO) [40;37;1m - 21/02/19 18:35:09 - finished running ANNZ ![0m
(18:35 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:35 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:35 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:35 INFO) [40;37;1m - 21/02/19 18:35:14 - starting ANNZ[0m
(18:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:35 INFO) 
[18:35:14    INFO]  -----------------------------------------------------
[18:35:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:35:14    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:15    INFO]  - starting ANNZ::Init()  ... 
[18:35:17    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced3/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[18:35:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(18:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:35 INFO) 
[18:35:17    INFO]  -----------------------------------------------------
[18:35:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:35:17    INFO]  -----------------------------------------------------------------------------------------------------------
[18:35:18    INFO]  - starting ANNZ::Init()  ... 
[18:35:19    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_1/saveOpt.txt ...
[18:35:35    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:35:35    INFO] ----------------------------------------------------------------------------------------------------
[18:35:35    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=N
[18:35:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:35:35    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:35:35    INFO]      cuts (train):        ,
[18:35:35    INFO]      cuts (valid):       
[18:35:35    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[18:35:35    INFO] ----------------------------------------------------------------------------------------------------
[18:35:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:36:05    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[18:36:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[18:36:09    INFO]  - Will gen. input-parameter errors ...
[18:36:11    INFO]  - starting ANNZ::loadReaders() ... 
[18:36:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[18:38:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:38:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:38:06    INFO]  -----------------------------------------------------------------------------------------------------------
[18:38:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[18:38:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:38:33    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:38:33    INFO]  -----------------------------------------------------------------------------------------------------------
[18:38:33    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:38:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:38:35    INFO]  - will try to derive a bias correction ... 
[18:38:35    INFO]  - will validate that training produced an XML file for later ... 
[18:38:35    INFO]  - starting ANNZ::loadReaders() ... 
[18:38:38    INFO]  - will validate that the training was not a complete failure ... 
[18:38:38    INFO]  - training seems to have been successful! will move on ...
[18:38:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:38:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:38:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:38:44    INFO] ----------------------------------------------------------------------------------------------------
[18:38:44    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:38:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:38:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:38:44    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[18:38:44    INFO] ----------------------------------------------------------------------------------------------------
[18:38:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:38:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[18:38:51    INFO]  - Will gen. input-parameter errors ...
[18:38:53    INFO]  - starting ANNZ::loadReaders() ... 
[18:39:01    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[18:41:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:41:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:41:07    INFO]  -----------------------------------------------------------------------------------------------------------
[18:41:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[18:41:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:41:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:41:38    INFO]  -----------------------------------------------------------------------------------------------------------
[18:41:39    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:41:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:41:40    INFO]  - will validate that the bias-correction actually improved the result ...
[18:41:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:41:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[18:41:47    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_1/plots/
[18:41:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_1/plots output/SPEC_advanced3/regres/train/ANNZ_1/plots_biasCor_before
[18:41:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:41:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[18:42:04    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_1/plots/
[18:42:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_1/plots output/SPEC_advanced3/regres/train/ANNZ_1/plots_biasCor_after
[18:42:16    INFO]  - Got original [KS-test,N_poiss]: [0.0627799 , 98.5298] , after the bias-correction: [0.0517964 , 91.0289] --> will KEEP the correction !

(18:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:42 INFO) 
[18:42:20    INFO]  -----------------------------------------------------
[18:42:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:42:20    INFO]  -----------------------------------------------------------------------------------------------------------
[18:42:21    INFO]  - starting ANNZ::Init()  ... 
[18:42:23    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_2/saveOpt.txt ...
[18:42:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:42:38    INFO] ----------------------------------------------------------------------------------------------------
[18:42:38    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N,P
[18:42:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:42:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:42:38    INFO]      cuts (train):        ,
[18:42:38    INFO]      cuts (valid):       
[18:42:38    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[18:42:38    INFO] ----------------------------------------------------------------------------------------------------
[18:42:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:43:06    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[18:43:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[18:43:09    INFO]  - Will gen. input-parameter errors ...
[18:43:11    INFO]  - starting ANNZ::loadReaders() ... 
[18:43:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[18:45:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:45:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:45:54    INFO]  -----------------------------------------------------------------------------------------------------------
[18:45:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[18:46:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:46:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:46:35    INFO]  -----------------------------------------------------------------------------------------------------------
[18:46:35    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:46:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:46:38    INFO]  - will try to derive a bias correction ... 
[18:46:38    INFO]  - will validate that training produced an XML file for later ... 
[18:46:38    INFO]  - starting ANNZ::loadReaders() ... 
[18:46:41    INFO]  - will validate that the training was not a complete failure ... 
[18:46:42    INFO]  - training seems to have been successful! will move on ...
[18:46:42    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:46:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:46:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:46:48    INFO] ----------------------------------------------------------------------------------------------------
[18:46:48    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:46:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:46:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:46:48    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[18:46:48    INFO] ----------------------------------------------------------------------------------------------------
[18:46:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:46:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[18:46:58    INFO]  - Will gen. input-parameter errors ...
[18:47:00    INFO]  - starting ANNZ::loadReaders() ... 
[18:47:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[18:50:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:50:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:50:50    INFO]  -----------------------------------------------------------------------------------------------------------
[18:50:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[18:51:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:51:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:51:44    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:44    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:51:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:51:46    INFO]  - will validate that the bias-correction actually improved the result ...
[18:51:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:51:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[18:51:54    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_2/plots/
[18:52:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_2/plots output/SPEC_advanced3/regres/train/ANNZ_2/plots_biasCor_before
[18:52:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:52:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[18:52:15    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_2/plots/
[18:52:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_2/plots output/SPEC_advanced3/regres/train/ANNZ_2/plots_biasCor_after
[18:52:31    INFO]  - Got original [KS-test,N_poiss]: [0.0658525 , 105.407] , after the bias-correction: [0.0426944 , 86.935] --> will KEEP the correction !

(18:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:52 INFO) 
[18:52:37    INFO]  -----------------------------------------------------
[18:52:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:52:37    INFO]  -----------------------------------------------------------------------------------------------------------
[18:52:39    INFO]  - starting ANNZ::Init()  ... 
[18:52:41    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_3/saveOpt.txt ...
[18:53:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:53:00    INFO] ----------------------------------------------------------------------------------------------------
[18:53:00    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N,P
[18:53:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:53:00    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:53:00    INFO]      cuts (train):        ,
[18:53:00    INFO]      cuts (valid):       
[18:53:00    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[18:53:00    INFO] ----------------------------------------------------------------------------------------------------
[18:53:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:53:35    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[18:53:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[18:53:40    INFO]  - Will gen. input-parameter errors ...
[18:53:43    INFO]  - starting ANNZ::loadReaders() ... 
[18:53:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[18:57:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:57:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[18:57:34    INFO]  -----------------------------------------------------------------------------------------------------------
[18:57:34    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[18:58:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:58:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[18:58:28    INFO]  -----------------------------------------------------------------------------------------------------------
[18:58:28    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:58:30    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:58:30    INFO]  - will try to derive a bias correction ... 
[18:58:30    INFO]  - will validate that training produced an XML file for later ... 
[18:58:30    INFO]  - starting ANNZ::loadReaders() ... 
[18:58:35    INFO]  - will validate that the training was not a complete failure ... 
[18:58:35    INFO]  - training seems to have been successful! will move on ...
[18:58:35    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:58:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:58:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:58:41    INFO] ----------------------------------------------------------------------------------------------------
[18:58:41    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:58:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:58:41    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[18:58:41    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[18:58:41    INFO] ----------------------------------------------------------------------------------------------------
[18:58:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:58:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[18:58:49    INFO]  - Will gen. input-parameter errors ...
[18:58:51    INFO]  - starting ANNZ::loadReaders() ... 
[18:59:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:03:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:03:06    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:03:06    INFO]  -----------------------------------------------------------------------------------------------------------
[19:03:06    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:04:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:04:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:04:06    INFO]  -----------------------------------------------------------------------------------------------------------
[19:04:07    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:04:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:04:09    INFO]  - will validate that the bias-correction actually improved the result ...
[19:04:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:04:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[19:04:16    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_3/plots/
[19:04:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_3/plots output/SPEC_advanced3/regres/train/ANNZ_3/plots_biasCor_before
[19:04:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:04:30    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[19:04:36    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_3/plots/
[19:04:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_3/plots output/SPEC_advanced3/regres/train/ANNZ_3/plots_biasCor_after
[19:04:51    INFO]  - Got original [KS-test,N_poiss]: [0.0649935 , 103.236] , after the bias-correction: [0.0440852 , 89.2348] --> will KEEP the correction !

(19:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:04 INFO) 
[19:04:57    INFO]  -----------------------------------------------------
[19:04:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:04:57    INFO]  -----------------------------------------------------------------------------------------------------------
[19:04:59    INFO]  - starting ANNZ::Init()  ... 
[19:05:01    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_4/saveOpt.txt ...
[19:05:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:05:21    INFO] ----------------------------------------------------------------------------------------------------
[19:05:21    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=N,P
[19:05:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:05:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:05:21    INFO]      cuts (train):        ,
[19:05:21    INFO]      cuts (valid):       
[19:05:21    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:05:21    INFO] ----------------------------------------------------------------------------------------------------
[19:05:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:05:46    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[19:05:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[19:05:48    INFO]  - Will gen. input-parameter errors ...
[19:05:50    INFO]  - starting ANNZ::loadReaders() ... 
[19:05:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:09:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:09:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:09:20    INFO]  -----------------------------------------------------------------------------------------------------------
[19:09:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:10:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:10:08    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:10:08    INFO]  -----------------------------------------------------------------------------------------------------------
[19:10:09    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:10:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:10:10    INFO]  - will try to derive a bias correction ... 
[19:10:10    INFO]  - will validate that training produced an XML file for later ... 
[19:10:10    INFO]  - starting ANNZ::loadReaders() ... 
[19:10:12    INFO]  - will validate that the training was not a complete failure ... 
[19:10:12    INFO]  - training seems to have been successful! will move on ...
[19:10:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:10:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:10:17    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:10:18    INFO] ----------------------------------------------------------------------------------------------------
[19:10:18    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:10:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:10:18    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:10:18    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:10:18    INFO] ----------------------------------------------------------------------------------------------------
[19:10:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:10:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[19:10:25    INFO]  - Will gen. input-parameter errors ...
[19:10:27    INFO]  - starting ANNZ::loadReaders() ... 
[19:10:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:13:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:13:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:13:07    INFO]  -----------------------------------------------------------------------------------------------------------
[19:13:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:13:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:13:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:13:46    INFO]  -----------------------------------------------------------------------------------------------------------
[19:13:46    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:13:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:13:47    INFO]  - will validate that the bias-correction actually improved the result ...
[19:13:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:13:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[19:13:55    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_4/plots/
[19:14:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_4/plots output/SPEC_advanced3/regres/train/ANNZ_4/plots_biasCor_before
[19:14:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:14:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[19:14:16    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_4/plots/
[19:14:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_4/plots output/SPEC_advanced3/regres/train/ANNZ_4/plots_biasCor_after
[19:14:30    INFO]  - Got original [KS-test,N_poiss]: [0.0623028 , 109.932] , after the bias-correction: [0.044551 , 91.5433] --> will KEEP the correction !

(19:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:14 INFO) 
[19:14:36    INFO]  -----------------------------------------------------
[19:14:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:14:36    INFO]  -----------------------------------------------------------------------------------------------------------
[19:14:38    INFO]  - starting ANNZ::Init()  ... 
[19:14:40    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_5/saveOpt.txt ...
[19:14:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:14:59    INFO] ----------------------------------------------------------------------------------------------------
[19:14:59    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=530:BoostType=Bagging:VarTransform=N
[19:14:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:14:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:14:59    INFO]      cuts (train):        ,
[19:14:59    INFO]      cuts (valid):       
[19:14:59    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:14:59    INFO] ----------------------------------------------------------------------------------------------------
[19:15:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:15:42    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[19:15:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[19:15:48    INFO]  - Will gen. input-parameter errors ...
[19:15:51    INFO]  - starting ANNZ::loadReaders() ... 
[19:16:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:19:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:19:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:19:03    INFO]  -----------------------------------------------------------------------------------------------------------
[19:19:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:19:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:19:50    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:19:50    INFO]  -----------------------------------------------------------------------------------------------------------
[19:19:51    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:19:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:19:53    INFO]  - will try to derive a bias correction ... 
[19:19:53    INFO]  - will validate that training produced an XML file for later ... 
[19:19:53    INFO]  - starting ANNZ::loadReaders() ... 
[19:19:57    INFO]  - will validate that the training was not a complete failure ... 
[19:19:57    INFO]  - training seems to have been successful! will move on ...
[19:19:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:20:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:20:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:20:05    INFO] ----------------------------------------------------------------------------------------------------
[19:20:05    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:20:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:20:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:20:05    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:20:05    INFO] ----------------------------------------------------------------------------------------------------
[19:20:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:20:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[19:20:15    INFO]  - Will gen. input-parameter errors ...
[19:20:18    INFO]  - starting ANNZ::loadReaders() ... 
[19:20:34    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:24:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:24:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:24:03    INFO]  -----------------------------------------------------------------------------------------------------------
[19:24:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:24:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:24:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:24:56    INFO]  -----------------------------------------------------------------------------------------------------------
[19:24:56    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:24:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:24:58    INFO]  - will validate that the bias-correction actually improved the result ...
[19:24:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:24:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[19:25:04    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_5/plots/
[19:25:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_5/plots output/SPEC_advanced3/regres/train/ANNZ_5/plots_biasCor_before
[19:25:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:25:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[19:25:26    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_5/plots/
[19:25:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_5/plots output/SPEC_advanced3/regres/train/ANNZ_5/plots_biasCor_after
[19:25:42    INFO]  - Got original [KS-test,N_poiss]: [0.0622579 , 99.4156] , after the bias-correction: [0.05114 , 91.7332] --> will KEEP the correction !

(19:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:25 INFO) 
[19:25:48    INFO]  -----------------------------------------------------
[19:25:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:25:48    INFO]  -----------------------------------------------------------------------------------------------------------
[19:25:50    INFO]  - starting ANNZ::Init()  ... 
[19:25:51    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_6/saveOpt.txt ...
[19:26:08    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:26:09    INFO] ----------------------------------------------------------------------------------------------------
[19:26:09    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=270:BoostType=AdaBoostR2:VarTransform=N
[19:26:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:26:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:26:09    INFO]      cuts (train):        ,
[19:26:09    INFO]      cuts (valid):       
[19:26:09    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:26:09    INFO] ----------------------------------------------------------------------------------------------------
[19:26:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:26:37    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[19:26:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[19:26:41    INFO]  - Will gen. input-parameter errors ...
[19:26:43    INFO]  - starting ANNZ::loadReaders() ... 
[19:26:52    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:30:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:30:29    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:30:29    INFO]  -----------------------------------------------------------------------------------------------------------
[19:30:29    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:31:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:31:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:31:23    INFO]  -----------------------------------------------------------------------------------------------------------
[19:31:23    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:31:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:31:25    INFO]  - will try to derive a bias correction ... 
[19:31:25    INFO]  - will validate that training produced an XML file for later ... 
[19:31:25    INFO]  - starting ANNZ::loadReaders() ... 
[19:31:28    INFO]  - will validate that the training was not a complete failure ... 
[19:31:28    INFO]  - training seems to have been successful! will move on ...
[19:31:28    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:31:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:31:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:31:34    INFO] ----------------------------------------------------------------------------------------------------
[19:31:34    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:31:34    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:31:34    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:31:34    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:31:34    INFO] ----------------------------------------------------------------------------------------------------
[19:31:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:31:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[19:31:42    INFO]  - Will gen. input-parameter errors ...
[19:31:44    INFO]  - starting ANNZ::loadReaders() ... 
[19:31:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:35:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:35:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:35:37    INFO]  -----------------------------------------------------------------------------------------------------------
[19:35:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:36:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:36:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:36:34    INFO]  -----------------------------------------------------------------------------------------------------------
[19:36:34    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:36:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:36:36    INFO]  - will validate that the bias-correction actually improved the result ...
[19:36:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:36:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
Warning in <Fit>: Fit data is empty 
[19:36:42    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_6/plots/
[19:36:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_6/plots output/SPEC_advanced3/regres/train/ANNZ_6/plots_biasCor_before
[19:36:56    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:36:56    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[19:37:02    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_6/plots/
[19:37:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_6/plots output/SPEC_advanced3/regres/train/ANNZ_6/plots_biasCor_after
[19:37:17    INFO]  - Got original [KS-test,N_poiss]: [0.108423 , 121.382] , after the bias-correction: [0.0478863 , 92.3294] --> will KEEP the correction !

(19:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:37 INFO) 
[19:37:23    INFO]  -----------------------------------------------------
[19:37:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:37:23    INFO]  -----------------------------------------------------------------------------------------------------------
[19:37:24    INFO]  - starting ANNZ::Init()  ... 
[19:37:26    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_7/saveOpt.txt ...
[19:37:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:37:43    INFO] ----------------------------------------------------------------------------------------------------
[19:37:43    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=290:BoostType=AdaBoost:VarTransform=N
[19:37:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:37:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:37:43    INFO]      cuts (train):        ,
[19:37:43    INFO]      cuts (valid):       
[19:37:43    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:37:43    INFO] ----------------------------------------------------------------------------------------------------
[19:37:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:37:54    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[19:37:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[19:37:56    INFO]  - Will gen. input-parameter errors ...
[19:37:58    INFO]  - starting ANNZ::loadReaders() ... 
[19:38:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:38:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:38:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:38:45    INFO]  -----------------------------------------------------------------------------------------------------------
[19:38:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:38:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:38:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:38:58    INFO]  -----------------------------------------------------------------------------------------------------------
[19:38:58    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:38:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:38:59    INFO]  - will try to derive a bias correction ... 
[19:38:59    INFO]  - will validate that training produced an XML file for later ... 
[19:38:59    INFO]  - starting ANNZ::loadReaders() ... 
[19:39:00    INFO]  - will validate that the training was not a complete failure ... 
[19:39:00    INFO]  - training seems to have been successful! will move on ...
[19:39:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:39:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:39:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:39:05    INFO] ----------------------------------------------------------------------------------------------------
[19:39:05    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:39:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:39:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:39:05    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:39:05    INFO] ----------------------------------------------------------------------------------------------------
[19:39:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:39:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[19:39:11    INFO]  - Will gen. input-parameter errors ...
[19:39:13    INFO]  - starting ANNZ::loadReaders() ... 
[19:39:16    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:40:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:40:33    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:40:33    INFO]  -----------------------------------------------------------------------------------------------------------
[19:40:33    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:40:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:40:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:40:56    INFO]  -----------------------------------------------------------------------------------------------------------
[19:40:56    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:40:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:40:58    INFO]  - will validate that the bias-correction actually improved the result ...
[19:40:58    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:40:58    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
Warning in <Fit>: Fit data is empty 
[19:41:05    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_7/plots/
[19:41:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_7/plots output/SPEC_advanced3/regres/train/ANNZ_7/plots_biasCor_before
[19:41:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:41:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[19:41:25    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_7/plots/
[19:41:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_7/plots output/SPEC_advanced3/regres/train/ANNZ_7/plots_biasCor_after
[19:41:39    INFO]  - Got original [KS-test,N_poiss]: [0.0545917 , 89.537] , after the bias-correction: [0.0475692 , 87.0035] --> will KEEP the correction !

(19:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:41 INFO) 
[19:41:44    INFO]  -----------------------------------------------------
[19:41:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:41:44    INFO]  -----------------------------------------------------------------------------------------------------------
[19:41:46    INFO]  - starting ANNZ::Init()  ... 
[19:41:48    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_8/saveOpt.txt ...
[19:42:07    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:42:07    INFO] ----------------------------------------------------------------------------------------------------
[19:42:07    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N
[19:42:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:42:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:42:07    INFO]      cuts (train):        ,
[19:42:07    INFO]      cuts (valid):       
[19:42:07    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:42:07    INFO] ----------------------------------------------------------------------------------------------------
[19:42:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:42:24    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[19:42:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[19:42:27    INFO]  - Will gen. input-parameter errors ...
[19:42:29    INFO]  - starting ANNZ::loadReaders() ... 
[19:42:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:43:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:43:38    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:43:38    INFO]  -----------------------------------------------------------------------------------------------------------
[19:43:38    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:43:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:43:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:43:55    INFO]  -----------------------------------------------------------------------------------------------------------
[19:43:55    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:43:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:43:56    INFO]  - will try to derive a bias correction ... 
[19:43:56    INFO]  - will validate that training produced an XML file for later ... 
[19:43:56    INFO]  - starting ANNZ::loadReaders() ... 
[19:43:57    INFO]  - will validate that the training was not a complete failure ... 
[19:43:57    INFO]  - training seems to have been successful! will move on ...
[19:43:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:44:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:44:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:44:03    INFO] ----------------------------------------------------------------------------------------------------
[19:44:03    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:44:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:44:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:44:03    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:44:03    INFO] ----------------------------------------------------------------------------------------------------
[19:44:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:44:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[19:44:11    INFO]  - Will gen. input-parameter errors ...
[19:44:13    INFO]  - starting ANNZ::loadReaders() ... 
[19:44:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:45:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:45:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:45:40    INFO]  -----------------------------------------------------------------------------------------------------------
[19:45:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:46:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:46:01    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:46:01    INFO]  -----------------------------------------------------------------------------------------------------------
[19:46:02    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:46:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:46:03    INFO]  - will validate that the bias-correction actually improved the result ...
[19:46:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:46:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[19:46:11    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_8/plots/
[19:46:26        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_8/plots output/SPEC_advanced3/regres/train/ANNZ_8/plots_biasCor_before
[19:46:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:46:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[19:46:32    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_8/plots/
[19:46:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_8/plots output/SPEC_advanced3/regres/train/ANNZ_8/plots_biasCor_after
[19:46:47    INFO]  - Got original [KS-test,N_poiss]: [0.0547538 , 89.67] , after the bias-correction: [0.0491153 , 86.6643] --> will KEEP the correction !

(19:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:46 INFO) 
[19:46:51    INFO]  -----------------------------------------------------
[19:46:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:46:51    INFO]  -----------------------------------------------------------------------------------------------------------
[19:46:53    INFO]  - starting ANNZ::Init()  ... 
[19:46:54    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_9/saveOpt.txt ...
[19:47:13    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:47:14    INFO] ----------------------------------------------------------------------------------------------------
[19:47:14    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=290:BoostType=Bagging:VarTransform=N
[19:47:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:47:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:47:14    INFO]      cuts (train):        ,
[19:47:14    INFO]      cuts (valid):       
[19:47:14    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:47:14    INFO] ----------------------------------------------------------------------------------------------------
[19:47:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:47:39    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[19:47:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[19:47:44    INFO]  - Will gen. input-parameter errors ...
[19:47:46    INFO]  - starting ANNZ::loadReaders() ... 
[19:47:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:49:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:49:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:49:18    INFO]  -----------------------------------------------------------------------------------------------------------
[19:49:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:49:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:49:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:49:43    INFO]  -----------------------------------------------------------------------------------------------------------
[19:49:43    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:49:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:49:45    INFO]  - will try to derive a bias correction ... 
[19:49:45    INFO]  - will validate that training produced an XML file for later ... 
[19:49:45    INFO]  - starting ANNZ::loadReaders() ... 
[19:49:48    INFO]  - will validate that the training was not a complete failure ... 
[19:49:49    INFO]  - training seems to have been successful! will move on ...
[19:49:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:49:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:49:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:49:56    INFO] ----------------------------------------------------------------------------------------------------
[19:49:56    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:49:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:49:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:49:56    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:49:56    INFO] ----------------------------------------------------------------------------------------------------
[19:49:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:50:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[19:50:09    INFO]  - Will gen. input-parameter errors ...
[19:50:11    INFO]  - starting ANNZ::loadReaders() ... 
[19:50:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:51:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:51:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:51:57    INFO]  -----------------------------------------------------------------------------------------------------------
[19:51:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:52:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:52:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:52:23    INFO]  -----------------------------------------------------------------------------------------------------------
[19:52:23    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:52:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:52:25    INFO]  - will validate that the bias-correction actually improved the result ...
[19:52:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:52:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[19:52:36    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_9/plots/
[19:52:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_9/plots output/SPEC_advanced3/regres/train/ANNZ_9/plots_biasCor_before
[19:52:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:52:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[19:52:58    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_9/plots/
[19:53:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_9/plots output/SPEC_advanced3/regres/train/ANNZ_9/plots_biasCor_after
[19:53:17    INFO]  - Got original [KS-test,N_poiss]: [0.061451 , 97.1007] , after the bias-correction: [0.0503748 , 86.5052] --> will KEEP the correction !

(19:53 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:53 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:53 INFO) 
[19:53:25    INFO]  -----------------------------------------------------
[19:53:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:53:25    INFO]  -----------------------------------------------------------------------------------------------------------
[19:53:26    INFO]  - starting ANNZ::Init()  ... 
[19:53:29    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_10/saveOpt.txt ...
[19:53:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:53:54    INFO] ----------------------------------------------------------------------------------------------------
[19:53:54    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=450:BoostType=AdaBoost:VarTransform=N
[19:53:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:53:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:53:54    INFO]      cuts (train):        ,
[19:53:54    INFO]      cuts (valid):       
[19:53:54    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:53:54    INFO] ----------------------------------------------------------------------------------------------------
[19:53:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:54:14    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[19:54:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[19:54:16    INFO]  - Will gen. input-parameter errors ...
[19:54:18    INFO]  - starting ANNZ::loadReaders() ... 
[19:54:21    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:55:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:55:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:55:37    INFO]  -----------------------------------------------------------------------------------------------------------
[19:55:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:55:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:55:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:55:57    INFO]  -----------------------------------------------------------------------------------------------------------
[19:55:57    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:55:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:55:58    INFO]  - will try to derive a bias correction ... 
[19:55:58    INFO]  - will validate that training produced an XML file for later ... 
[19:55:58    INFO]  - starting ANNZ::loadReaders() ... 
[19:56:00    INFO]  - will validate that the training was not a complete failure ... 
[19:56:00    INFO]  - training seems to have been successful! will move on ...
[19:56:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:56:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:56:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:56:07    INFO] ----------------------------------------------------------------------------------------------------
[19:56:07    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:56:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:56:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:56:07    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:56:07    INFO] ----------------------------------------------------------------------------------------------------
[19:56:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:56:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[19:56:17    INFO]  - Will gen. input-parameter errors ...
[19:56:20    INFO]  - starting ANNZ::loadReaders() ... 
[19:56:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[19:57:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:57:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:57:59    INFO]  -----------------------------------------------------------------------------------------------------------
[19:57:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[19:58:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:58:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:58:23    INFO]  -----------------------------------------------------------------------------------------------------------
[19:58:23    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:58:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:58:25    INFO]  - will validate that the bias-correction actually improved the result ...
[19:58:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:58:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
Warning in <Fit>: Fit data is empty 
[19:58:34    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_10/plots/
[19:58:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_10/plots output/SPEC_advanced3/regres/train/ANNZ_10/plots_biasCor_before
[19:58:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:58:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
Warning in <Fit>: Fit data is empty 
[19:59:00    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_10/plots/
[19:59:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_10/plots output/SPEC_advanced3/regres/train/ANNZ_10/plots_biasCor_after
[19:59:17    INFO]  - Got original [KS-test,N_poiss]: [0.0547538 , 89.5381] , after the bias-correction: [0.0491153 , 86.3688] --> will KEEP the correction !

(19:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:59 INFO) 
[19:59:24    INFO]  -----------------------------------------------------
[19:59:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:59:24    INFO]  -----------------------------------------------------------------------------------------------------------
[19:59:25    INFO]  - starting ANNZ::Init()  ... 
[19:59:27    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_11/saveOpt.txt ...
[19:59:50    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:59:50    INFO] ----------------------------------------------------------------------------------------------------
[19:59:50    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=390:BoostType=Bagging:VarTransform=N,P
[19:59:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:59:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:59:50    INFO]      cuts (train):        ,
[19:59:50    INFO]      cuts (valid):       
[19:59:50    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[19:59:50    INFO] ----------------------------------------------------------------------------------------------------
[19:59:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:00:28    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[20:00:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[20:00:33    INFO]  - Will gen. input-parameter errors ...
[20:00:36    INFO]  - starting ANNZ::loadReaders() ... 
[20:00:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:04:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:04:55    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:04:55    INFO]  -----------------------------------------------------------------------------------------------------------
[20:04:55    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:06:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:06:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:06:00    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:01    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:06:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:06:03    INFO]  - will try to derive a bias correction ... 
[20:06:03    INFO]  - will validate that training produced an XML file for later ... 
[20:06:03    INFO]  - starting ANNZ::loadReaders() ... 
[20:06:07    INFO]  - will validate that the training was not a complete failure ... 
[20:06:07    INFO]  - training seems to have been successful! will move on ...
[20:06:07    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:06:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:06:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:06:14    INFO] ----------------------------------------------------------------------------------------------------
[20:06:14    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:06:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:06:14    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:06:14    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:06:14    INFO] ----------------------------------------------------------------------------------------------------
[20:06:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:06:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[20:06:27    INFO]  - Will gen. input-parameter errors ...
[20:06:30    INFO]  - starting ANNZ::loadReaders() ... 
[20:06:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:11:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:11:22    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:11:22    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:22    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:12:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:12:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:12:34    INFO]  -----------------------------------------------------------------------------------------------------------
[20:12:34    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:12:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:12:36    INFO]  - will validate that the bias-correction actually improved the result ...
[20:12:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:12:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[20:12:45    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_11/plots/
[20:13:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_11/plots output/SPEC_advanced3/regres/train/ANNZ_11/plots_biasCor_before
[20:13:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:13:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[20:13:14    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_11/plots/
[20:13:33        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_11/plots output/SPEC_advanced3/regres/train/ANNZ_11/plots_biasCor_after
[20:13:33    INFO]  - Got original [KS-test,N_poiss]: [0.0658525 , 105.407] , after the bias-correction: [0.0426944 , 86.935] --> will KEEP the correction !

(20:13 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:13 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:13 INFO) 
[20:13:39    INFO]  -----------------------------------------------------
[20:13:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:13:39    INFO]  -----------------------------------------------------------------------------------------------------------
[20:13:41    INFO]  - starting ANNZ::Init()  ... 
[20:13:43    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_12/saveOpt.txt ...
[20:14:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:14:02    INFO] ----------------------------------------------------------------------------------------------------
[20:14:02    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=450:BoostType=Bagging:VarTransform=N,P
[20:14:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:14:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:14:02    INFO]      cuts (train):        ,
[20:14:02    INFO]      cuts (valid):       
[20:14:02    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:14:02    INFO] ----------------------------------------------------------------------------------------------------
[20:14:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:14:49    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[20:14:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[20:14:56    INFO]  - Will gen. input-parameter errors ...
[20:14:59    INFO]  - starting ANNZ::loadReaders() ... 
[20:15:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:20:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:20:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:20:07    INFO]  -----------------------------------------------------------------------------------------------------------
[20:20:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:21:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:21:09    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:21:09    INFO]  -----------------------------------------------------------------------------------------------------------
[20:21:09    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:21:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:21:12    INFO]  - will try to derive a bias correction ... 
[20:21:12    INFO]  - will validate that training produced an XML file for later ... 
[20:21:12    INFO]  - starting ANNZ::loadReaders() ... 
[20:21:17    INFO]  - will validate that the training was not a complete failure ... 
[20:21:17    INFO]  - training seems to have been successful! will move on ...
[20:21:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:21:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:21:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:21:23    INFO] ----------------------------------------------------------------------------------------------------
[20:21:23    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:21:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:21:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:21:23    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:21:23    INFO] ----------------------------------------------------------------------------------------------------
[20:21:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:21:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[20:21:32    INFO]  - Will gen. input-parameter errors ...
[20:21:35    INFO]  - starting ANNZ::loadReaders() ... 
[20:21:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:26:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:26:28    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:26:28    INFO]  -----------------------------------------------------------------------------------------------------------
[20:26:28    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:27:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:27:36    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:27:36    INFO]  -----------------------------------------------------------------------------------------------------------
[20:27:39    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:27:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:27:42    INFO]  - will validate that the bias-correction actually improved the result ...
[20:27:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:27:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[20:27:51    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_12/plots/
[20:28:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_12/plots output/SPEC_advanced3/regres/train/ANNZ_12/plots_biasCor_before
[20:28:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:28:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[20:28:12    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_12/plots/
[20:28:27        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_12/plots output/SPEC_advanced3/regres/train/ANNZ_12/plots_biasCor_after
[20:28:27    INFO]  - Got original [KS-test,N_poiss]: [0.0659453 , 102.831] , after the bias-correction: [0.0450827 , 91.9451] --> will KEEP the correction !

(20:28 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:28 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:28 INFO) 
[20:28:34    INFO]  -----------------------------------------------------
[20:28:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:28:34    INFO]  -----------------------------------------------------------------------------------------------------------
[20:28:36    INFO]  - starting ANNZ::Init()  ... 
[20:28:37    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_13/saveOpt.txt ...
[20:28:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:28:59    INFO] ----------------------------------------------------------------------------------------------------
[20:28:59    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=330:BoostType=AdaBoostR2:VarTransform=N,P
[20:28:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:28:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:28:59    INFO]      cuts (train):        ,
[20:28:59    INFO]      cuts (valid):       
[20:28:59    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:28:59    INFO] ----------------------------------------------------------------------------------------------------
[20:29:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:29:38    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[20:29:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[20:29:43    INFO]  - Will gen. input-parameter errors ...
[20:29:46    INFO]  - starting ANNZ::loadReaders() ... 
[20:30:00    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:37:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:37:35    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:37:35    INFO]  -----------------------------------------------------------------------------------------------------------
[20:37:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:39:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:39:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:39:30    INFO]  -----------------------------------------------------------------------------------------------------------
[20:39:33    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:39:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:39:35    INFO]  - will try to derive a bias correction ... 
[20:39:35    INFO]  - will validate that training produced an XML file for later ... 
[20:39:35    INFO]  - starting ANNZ::loadReaders() ... 
[20:39:38    INFO]  - will validate that the training was not a complete failure ... 
[20:39:38    INFO]  - training seems to have been successful! will move on ...
[20:39:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:39:43    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:39:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:39:45    INFO] ----------------------------------------------------------------------------------------------------
[20:39:45    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:39:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:39:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:39:45    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:39:45    INFO] ----------------------------------------------------------------------------------------------------
[20:39:45    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:39:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[20:39:55    INFO]  - Will gen. input-parameter errors ...
[20:39:58    INFO]  - starting ANNZ::loadReaders() ... 
[20:40:13    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:48:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:48:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:48:13    INFO]  -----------------------------------------------------------------------------------------------------------
[20:48:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:50:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:50:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:50:19    INFO]  -----------------------------------------------------------------------------------------------------------
[20:50:19    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:50:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:50:21    INFO]  - will validate that the bias-correction actually improved the result ...
[20:50:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:50:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[20:50:28    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_13/plots/
[20:50:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_13/plots output/SPEC_advanced3/regres/train/ANNZ_13/plots_biasCor_before
[20:50:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:50:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[20:50:54    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_13/plots/
[20:51:14        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_13/plots output/SPEC_advanced3/regres/train/ANNZ_13/plots_biasCor_after
[20:51:14    INFO]  - Got original [KS-test,N_poiss]: [0.0954681 , 104.356] , after the bias-correction: [0.038499 , 89.1939] --> will KEEP the correction !

(20:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=610:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:51 INFO) 
[20:51:22    INFO]  -----------------------------------------------------
[20:51:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:51:22    INFO]  -----------------------------------------------------------------------------------------------------------
[20:51:25    INFO]  - starting ANNZ::Init()  ... 
[20:51:27    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_14/saveOpt.txt ...
[20:51:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:51:51    INFO] ----------------------------------------------------------------------------------------------------
[20:51:51    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=610:BoostType=Bagging:VarTransform=N,P
[20:51:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:51:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:51:51    INFO]      cuts (train):        ,
[20:51:51    INFO]      cuts (valid):       
[20:51:51    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:51:51    INFO] ----------------------------------------------------------------------------------------------------
[20:51:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:52:55    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[20:53:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[20:53:02    INFO]  - Will gen. input-parameter errors ...
[20:53:06    INFO]  - starting ANNZ::loadReaders() ... 
[20:53:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[21:03:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:03:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:03:14    INFO]  -----------------------------------------------------------------------------------------------------------
[21:03:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[21:05:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:05:39    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:05:39    INFO]  -----------------------------------------------------------------------------------------------------------
[21:05:41    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:05:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:05:45    INFO]  - will try to derive a bias correction ... 
[21:05:45    INFO]  - will validate that training produced an XML file for later ... 
[21:05:45    INFO]  - starting ANNZ::loadReaders() ... 
[21:05:52    INFO]  - will validate that the training was not a complete failure ... 
[21:05:52    INFO]  - training seems to have been successful! will move on ...
[21:05:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:06:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:06:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:06:02    INFO] ----------------------------------------------------------------------------------------------------
[21:06:02    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:06:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:06:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:06:02    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[21:06:02    INFO] ----------------------------------------------------------------------------------------------------
[21:06:02    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:06:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[21:06:15    INFO]  - Will gen. input-parameter errors ...
[21:06:18    INFO]  - starting ANNZ::loadReaders() ... 
[21:06:46    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[21:17:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:17:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:17:42    INFO]  -----------------------------------------------------------------------------------------------------------
[21:17:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[21:20:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:20:21    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:20:21    INFO]  -----------------------------------------------------------------------------------------------------------
[21:20:24    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:20:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:20:27    INFO]  - will validate that the bias-correction actually improved the result ...
[21:20:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:20:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[21:20:37    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_14/plots/
[21:20:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_14/plots output/SPEC_advanced3/regres/train/ANNZ_14/plots_biasCor_before
[21:20:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:20:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[21:21:01    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_14/plots/
[21:21:20        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_14/plots output/SPEC_advanced3/regres/train/ANNZ_14/plots_biasCor_after
[21:21:20    INFO]  - Got original [KS-test,N_poiss]: [0.0662781 , 104.697] , after the bias-correction: [0.0424093 , 87.4182] --> will KEEP the correction !

(21:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:21 INFO) 
[21:21:29    INFO]  -----------------------------------------------------
[21:21:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:21:29    INFO]  -----------------------------------------------------------------------------------------------------------
[21:21:32    INFO]  - starting ANNZ::Init()  ... 
[21:21:34    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_15/saveOpt.txt ...
[21:21:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:21:59    INFO] ----------------------------------------------------------------------------------------------------
[21:21:59    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=260:BoostType=AdaBoost:VarTransform=N
[21:21:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:21:59    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:21:59    INFO]      cuts (train):        ,
[21:21:59    INFO]      cuts (valid):       
[21:21:59    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[21:21:59    INFO] ----------------------------------------------------------------------------------------------------
[21:22:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:22:11    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[21:22:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[21:22:14    INFO]  - Will gen. input-parameter errors ...
[21:22:17    INFO]  - starting ANNZ::loadReaders() ... 
[21:22:19    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[21:23:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:23:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:23:11    INFO]  -----------------------------------------------------------------------------------------------------------
[21:23:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[21:23:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:23:25    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:23:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:23:25    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:23:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:23:26    INFO]  - will try to derive a bias correction ... 
[21:23:26    INFO]  - will validate that training produced an XML file for later ... 
[21:23:26    INFO]  - starting ANNZ::loadReaders() ... 
[21:23:27    INFO]  - will validate that the training was not a complete failure ... 
[21:23:27    INFO]  - training seems to have been successful! will move on ...
[21:23:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:23:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:23:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:23:33    INFO] ----------------------------------------------------------------------------------------------------
[21:23:33    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:23:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:23:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:23:33    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[21:23:33    INFO] ----------------------------------------------------------------------------------------------------
[21:23:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:23:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[21:23:43    INFO]  - Will gen. input-parameter errors ...
[21:23:45    INFO]  - starting ANNZ::loadReaders() ... 
[21:23:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[21:25:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:25:18    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:25:18    INFO]  -----------------------------------------------------------------------------------------------------------
[21:25:18    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[21:25:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:25:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:25:40    INFO]  -----------------------------------------------------------------------------------------------------------
[21:25:41    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:25:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:25:42    INFO]  - will validate that the bias-correction actually improved the result ...
[21:25:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:25:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
Warning in <Fit>: Fit data is empty 
[21:25:51    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_15/plots/
[21:26:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_15/plots output/SPEC_advanced3/regres/train/ANNZ_15/plots_biasCor_before
[21:26:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:26:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
Warning in <Fit>: Fit data is empty 
[21:26:18    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_15/plots/
[21:26:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_15/plots output/SPEC_advanced3/regres/train/ANNZ_15/plots_biasCor_after
[21:26:37    INFO]  - Got original [KS-test,N_poiss]: [0.0545917 , 89.4435] , after the bias-correction: [0.0476365 , 87.1966] --> will KEEP the correction !

(21:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:26 INFO) 
[21:26:44    INFO]  -----------------------------------------------------
[21:26:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:26:44    INFO]  -----------------------------------------------------------------------------------------------------------
[21:26:46    INFO]  - starting ANNZ::Init()  ... 
[21:26:48    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_16/saveOpt.txt ...
[21:27:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:27:09    INFO] ----------------------------------------------------------------------------------------------------
[21:27:09    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N
[21:27:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:27:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:27:09    INFO]      cuts (train):        ,
[21:27:09    INFO]      cuts (valid):       
[21:27:09    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[21:27:09    INFO] ----------------------------------------------------------------------------------------------------
[21:27:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:27:42    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[21:27:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[21:27:48    INFO]  - Will gen. input-parameter errors ...
[21:27:51    INFO]  - starting ANNZ::loadReaders() ... 
[21:27:59    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[21:30:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:30:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:30:04    INFO]  -----------------------------------------------------------------------------------------------------------
[21:30:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[21:30:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:30:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:30:40    INFO]  -----------------------------------------------------------------------------------------------------------
[21:30:40    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:30:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:30:43    INFO]  - will try to derive a bias correction ... 
[21:30:43    INFO]  - will validate that training produced an XML file for later ... 
[21:30:43    INFO]  - starting ANNZ::loadReaders() ... 
[21:30:46    INFO]  - will validate that the training was not a complete failure ... 
[21:30:46    INFO]  - training seems to have been successful! will move on ...
[21:30:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:30:52    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:30:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:30:54    INFO] ----------------------------------------------------------------------------------------------------
[21:30:54    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:30:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:30:54    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[21:30:54    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[21:30:54    INFO] ----------------------------------------------------------------------------------------------------
[21:30:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:31:07    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[21:31:07    INFO]  - Will gen. input-parameter errors ...
[21:31:10    INFO]  - starting ANNZ::loadReaders() ... 
[21:31:26    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[21:34:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:34:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[21:34:01    INFO]  -----------------------------------------------------------------------------------------------------------
[21:34:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[21:34:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:34:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:34:41    INFO]  -----------------------------------------------------------------------------------------------------------
[21:34:41    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:34:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:34:44    INFO]  - will validate that the bias-correction actually improved the result ...
[21:34:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:34:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[21:34:54    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_16/plots/
[21:35:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_16/plots output/SPEC_advanced3/regres/train/ANNZ_16/plots_biasCor_before
[21:35:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:35:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[21:35:19    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_16/plots/
[21:35:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_16/plots output/SPEC_advanced3/regres/train/ANNZ_16/plots_biasCor_after
[21:35:39    INFO]  - Got original [KS-test,N_poiss]: [0.0622894 , 98.2836] , after the bias-correction: [0.0529569 , 93.482] --> will KEEP the correction !

(21:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:35 INFO) 
[21:35:48    INFO]  -----------------------------------------------------
[21:35:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:35:48    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:50    INFO]  - starting ANNZ::Init()  ... 
[21:35:52    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_17/saveOpt.txt ...
[21:36:17    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:36:17    INFO] ----------------------------------------------------------------------------------------------------
[21:36:17    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=460:BoostType=Bagging:VarTransform=P
[21:36:17    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:36:17    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[21:36:17    INFO]      cuts (train):        ,
[21:36:17    INFO]      cuts (valid):       
[21:36:17    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[21:36:17    INFO] ----------------------------------------------------------------------------------------------------
[21:36:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.092944
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(21:36 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(21:36 CRITICAL) [41;37;1mWill terminate !!!![0m
(08:31 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:31 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:31 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:31 INFO) [40;37;1m - 22/02/19 08:31:43 - starting ANNZ[0m
(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:44    INFO]  -----------------------------------------------------
[08:31:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:44    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:46    INFO]  - starting ANNZ::Init()  ... 
[08:31:47    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced3/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:31:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:47    INFO]  -----------------------------------------------------
[08:31:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:47    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:49    INFO]  - starting ANNZ::Init()  ... 
[08:31:50    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced3/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:31:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:50    INFO]  -----------------------------------------------------
[08:31:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:50    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:52    INFO]  - starting ANNZ::Init()  ... 
[08:31:53    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced3/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[08:31:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:53    INFO]  -----------------------------------------------------
[08:31:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:53    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:55    INFO]  - starting ANNZ::Init()  ... 
[08:31:55    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced3/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[08:31:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:56    INFO]  -----------------------------------------------------
[08:31:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:56    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:57    INFO]  - starting ANNZ::Init()  ... 
[08:31:58    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced3/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[08:31:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:58    INFO]  -----------------------------------------------------
[08:31:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:58    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:59    INFO]  - starting ANNZ::Init()  ... 
[08:32:00    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced3/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[08:32:00    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:00    INFO]  -----------------------------------------------------
[08:32:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:00    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:02    INFO]  - starting ANNZ::Init()  ... 
[08:32:02    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced3/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[08:32:02    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:03    INFO]  -----------------------------------------------------
[08:32:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:03    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:04    INFO]  - starting ANNZ::Init()  ... 
[08:32:04    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced3/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[08:32:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:04    INFO]  -----------------------------------------------------
[08:32:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:04    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:06    INFO]  - starting ANNZ::Init()  ... 
[08:32:06    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced3/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[08:32:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=910:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:06    INFO]  -----------------------------------------------------
[08:32:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:06    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:08    INFO]  - starting ANNZ::Init()  ... 
[08:32:08    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced3/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[08:32:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:09    INFO]  -----------------------------------------------------
[08:32:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:09    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:10    INFO]  - starting ANNZ::Init()  ... 
[08:32:10    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced3/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[08:32:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:11    INFO]  -----------------------------------------------------
[08:32:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:11    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:12    INFO]  - starting ANNZ::Init()  ... 
[08:32:13    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced3/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[08:32:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:13    INFO]  -----------------------------------------------------
[08:32:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:15    INFO]  - starting ANNZ::Init()  ... 
[08:32:15    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced3/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[08:32:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:15    INFO]  -----------------------------------------------------
[08:32:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:15    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:17    INFO]  - starting ANNZ::Init()  ... 
[08:32:18    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced3/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[08:32:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:18    INFO]  -----------------------------------------------------
[08:32:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:18    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:20    INFO]  - starting ANNZ::Init()  ... 
[08:32:21    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced3/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[08:32:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:21    INFO]  -----------------------------------------------------
[08:32:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:21    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:23    INFO]  - starting ANNZ::Init()  ... 
[08:32:23    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced3/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[08:32:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:24    INFO]  -----------------------------------------------------
[08:32:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:24    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:26    INFO]  - starting ANNZ::Init()  ... 
[08:32:26    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced3/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[08:32:26    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:32 INFO) 
[08:32:27    INFO]  -----------------------------------------------------
[08:32:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:32:27    INFO]  -----------------------------------------------------------------------------------------------------------
[08:32:29    INFO]  - starting ANNZ::Init()  ... 
[08:32:31    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_17/saveOpt.txt ...
[08:33:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:33:03    INFO] ----------------------------------------------------------------------------------------------------
[08:33:03    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=320:BoostType=AdaBoost:VarTransform=N,P
[08:33:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:33:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:33:03    INFO]      cuts (train):        ,
[08:33:03    INFO]      cuts (valid):       
[08:33:03    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[08:33:03    INFO] ----------------------------------------------------------------------------------------------------
[08:33:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:33:39    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[08:33:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[08:33:44    INFO]  - Will gen. input-parameter errors ...
[08:33:47    INFO]  - starting ANNZ::loadReaders() ... 
[08:33:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[08:37:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:37:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:37:20    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[08:38:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:38:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:38:10    INFO]  -----------------------------------------------------------------------------------------------------------
[08:38:10    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:38:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:38:12    INFO]  - will try to derive a bias correction ... 
[08:38:12    INFO]  - will validate that training produced an XML file for later ... 
[08:38:12    INFO]  - starting ANNZ::loadReaders() ... 
[08:38:13    INFO]  - will validate that the training was not a complete failure ... 
[08:38:14    INFO]  - training seems to have been successful! will move on ...
[08:38:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:38:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:38:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:38:20    INFO] ----------------------------------------------------------------------------------------------------
[08:38:20    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[08:38:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:38:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[08:38:20    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[08:38:20    INFO] ----------------------------------------------------------------------------------------------------
[08:38:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:38:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[08:38:28    INFO]  - Will gen. input-parameter errors ...
[08:38:30    INFO]  - starting ANNZ::loadReaders() ... 
[08:38:35    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[08:41:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:41:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:41:07    INFO]  -----------------------------------------------------------------------------------------------------------
[08:41:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[08:41:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:41:41    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:41:41    INFO]  -----------------------------------------------------------------------------------------------------------
[08:41:41    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:41:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:41:43    INFO]  - will validate that the bias-correction actually improved the result ...
[08:41:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:41:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[08:41:51    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_17/plots/
[08:42:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_17/plots output/SPEC_advanced3/regres/train/ANNZ_17/plots_biasCor_before
[08:42:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:42:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[08:42:12    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_17/plots/
[08:42:30        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_17/plots output/SPEC_advanced3/regres/train/ANNZ_17/plots_biasCor_after
[08:42:30    INFO]  - Got original [KS-test,N_poiss]: [0.0604227 , 114.113] , after the bias-correction: [0.0420813 , 90.6409] --> will KEEP the correction !

(08:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:42 INFO) 
[08:42:36    INFO]  -----------------------------------------------------
[08:42:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:42:36    INFO]  -----------------------------------------------------------------------------------------------------------
[08:42:38    INFO]  - starting ANNZ::Init()  ... 
[08:42:40    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_18/saveOpt.txt ...
[08:43:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:43:07    INFO] ----------------------------------------------------------------------------------------------------
[08:43:07    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=450:BoostType=Bagging:VarTransform=N
[08:43:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:43:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:43:07    INFO]      cuts (train):        ,
[08:43:07    INFO]      cuts (valid):       
[08:43:07    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[08:43:07    INFO] ----------------------------------------------------------------------------------------------------
[08:43:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:43:49    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[08:43:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[08:43:55    INFO]  - Will gen. input-parameter errors ...
[08:43:58    INFO]  - starting ANNZ::loadReaders() ... 
[08:44:17    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[08:47:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:47:00    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:47:00    INFO]  -----------------------------------------------------------------------------------------------------------
[08:47:00    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[08:47:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:47:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:47:46    INFO]  -----------------------------------------------------------------------------------------------------------
[08:47:46    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:47:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:47:50    INFO]  - will try to derive a bias correction ... 
[08:47:50    INFO]  - will validate that training produced an XML file for later ... 
[08:47:50    INFO]  - starting ANNZ::loadReaders() ... 
[08:47:55    INFO]  - will validate that the training was not a complete failure ... 
[08:47:55    INFO]  - training seems to have been successful! will move on ...
[08:47:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:48:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:48:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:48:05    INFO] ----------------------------------------------------------------------------------------------------
[08:48:05    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[08:48:05    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:48:05    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[08:48:05    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[08:48:05    INFO] ----------------------------------------------------------------------------------------------------
[08:48:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:48:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[08:48:20    INFO]  - Will gen. input-parameter errors ...
[08:48:24    INFO]  - starting ANNZ::loadReaders() ... 
[08:48:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[08:52:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:52:42    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:52:42    INFO]  -----------------------------------------------------------------------------------------------------------
[08:52:42    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[08:53:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:53:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:53:44    INFO]  -----------------------------------------------------------------------------------------------------------
[08:53:44    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:53:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:53:48    INFO]  - will validate that the bias-correction actually improved the result ...
[08:53:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:53:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[08:53:58    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_18/plots/
[08:54:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_18/plots output/SPEC_advanced3/regres/train/ANNZ_18/plots_biasCor_before
[08:54:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:54:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[08:54:22    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_18/plots/
[08:54:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_18/plots output/SPEC_advanced3/regres/train/ANNZ_18/plots_biasCor_after
[08:54:39    INFO]  - Got original [KS-test,N_poiss]: [0.0624242 , 100.46] , after the bias-correction: [0.0505751 , 88.2879] --> will KEEP the correction !

(08:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:54 INFO) 
[08:54:47    INFO]  -----------------------------------------------------
[08:54:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:54:47    INFO]  -----------------------------------------------------------------------------------------------------------
[08:54:49    INFO]  - starting ANNZ::Init()  ... 
[08:54:51    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_19/saveOpt.txt ...
[08:55:13    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:55:13    INFO] ----------------------------------------------------------------------------------------------------
[08:55:13    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=480:BoostType=AdaBoost:VarTransform=P
[08:55:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:55:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:55:13    INFO]      cuts (train):        ,
[08:55:13    INFO]      cuts (valid):       
[08:55:13    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[08:55:13    INFO] ----------------------------------------------------------------------------------------------------
[08:55:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:55:41    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[08:55:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[08:55:44    INFO]  - Will gen. input-parameter errors ...
[08:55:46    INFO]  - starting ANNZ::loadReaders() ... 
[08:55:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[08:59:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:59:41    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:59:41    INFO]  -----------------------------------------------------------------------------------------------------------
[08:59:41    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[09:00:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:00:29    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:00:29    INFO]  -----------------------------------------------------------------------------------------------------------
[09:00:30    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:00:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:00:31    INFO]  - will try to derive a bias correction ... 
[09:00:31    INFO]  - will validate that training produced an XML file for later ... 
[09:00:31    INFO]  - starting ANNZ::loadReaders() ... 
[09:00:32    INFO]  - will validate that the training was not a complete failure ... 
[09:00:32    INFO]  - training seems to have been successful! will move on ...
[09:00:32    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:00:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:00:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:00:37    INFO] ----------------------------------------------------------------------------------------------------
[09:00:37    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:00:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:00:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:00:37    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[09:00:37    INFO] ----------------------------------------------------------------------------------------------------
[09:00:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:00:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[09:00:43    INFO]  - Will gen. input-parameter errors ...
[09:00:45    INFO]  - starting ANNZ::loadReaders() ... 
[09:00:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[09:03:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:03:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:03:48    INFO]  -----------------------------------------------------------------------------------------------------------
[09:03:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[09:04:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:04:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:04:22    INFO]  -----------------------------------------------------------------------------------------------------------
[09:04:22    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:04:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:04:23    INFO]  - will validate that the bias-correction actually improved the result ...
[09:04:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:04:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
Warning in <Fit>: Fit data is empty 
[09:04:31    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_19/plots/
[09:04:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_19/plots output/SPEC_advanced3/regres/train/ANNZ_19/plots_biasCor_before
[09:04:48    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:04:48    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
Warning in <Fit>: Fit data is empty 
[09:04:55    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_19/plots/
[09:05:08        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_19/plots output/SPEC_advanced3/regres/train/ANNZ_19/plots_biasCor_after
[09:05:08    INFO]  - Got original [KS-test,N_poiss]: [0.0589627 , 89.8716] , after the bias-correction: [0.0401279 , 84.976] --> will KEEP the correction !

(09:05 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:05 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=640:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:05 INFO) 
[09:05:14    INFO]  -----------------------------------------------------
[09:05:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:05:14    INFO]  -----------------------------------------------------------------------------------------------------------
[09:05:16    INFO]  - starting ANNZ::Init()  ... 
[09:05:18    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_20/saveOpt.txt ...
[09:05:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:05:42    INFO] ----------------------------------------------------------------------------------------------------
[09:05:42    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=640:BoostType=Bagging:VarTransform=N,P
[09:05:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:05:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:05:42    INFO]      cuts (train):        ,
[09:05:42    INFO]      cuts (valid):       
[09:05:42    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[09:05:42    INFO] ----------------------------------------------------------------------------------------------------
[09:05:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:06:42    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[09:06:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[09:06:49    INFO]  - Will gen. input-parameter errors ...
[09:06:53    INFO]  - starting ANNZ::loadReaders() ... 
[09:07:14    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[09:15:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:15:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:15:04    INFO]  -----------------------------------------------------------------------------------------------------------
[09:15:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[09:17:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:17:11    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:17:11    INFO]  -----------------------------------------------------------------------------------------------------------
[09:17:14    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:17:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:17:18    INFO]  - will try to derive a bias correction ... 
[09:17:18    INFO]  - will validate that training produced an XML file for later ... 
[09:17:18    INFO]  - starting ANNZ::loadReaders() ... 
[09:17:24    INFO]  - will validate that the training was not a complete failure ... 
[09:17:25    INFO]  - training seems to have been successful! will move on ...
[09:17:25    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:17:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:17:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:17:33    INFO] ----------------------------------------------------------------------------------------------------
[09:17:33    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:17:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:17:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:17:33    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[09:17:33    INFO] ----------------------------------------------------------------------------------------------------
[09:17:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:17:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[09:17:46    INFO]  - Will gen. input-parameter errors ...
[09:17:50    INFO]  - starting ANNZ::loadReaders() ... 
[09:18:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[09:26:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:26:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:26:40    INFO]  -----------------------------------------------------------------------------------------------------------
[09:26:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[09:28:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:28:42    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:28:42    INFO]  -----------------------------------------------------------------------------------------------------------
[09:28:42    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:28:45    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:28:45    INFO]  - will validate that the bias-correction actually improved the result ...
[09:28:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:28:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[09:28:54    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_20/plots/
[09:29:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_20/plots output/SPEC_advanced3/regres/train/ANNZ_20/plots_biasCor_before
[09:29:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:29:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[09:29:20    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_20/plots/
[09:29:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_20/plots output/SPEC_advanced3/regres/train/ANNZ_20/plots_biasCor_after
[09:29:34    INFO]  - Got original [KS-test,N_poiss]: [0.0659453 , 105.854] , after the bias-correction: [0.045203 , 94.4904] --> will KEEP the correction !

(09:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:29 INFO) 
[09:29:41    INFO]  -----------------------------------------------------
[09:29:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:29:41    INFO]  -----------------------------------------------------------------------------------------------------------
[09:29:43    INFO]  - starting ANNZ::Init()  ... 
[09:29:45    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_21/saveOpt.txt ...
[09:30:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:30:06    INFO] ----------------------------------------------------------------------------------------------------
[09:30:06    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=470:BoostType=Bagging:VarTransform=N,P
[09:30:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:30:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:30:06    INFO]      cuts (train):        ,
[09:30:06    INFO]      cuts (valid):       
[09:30:06    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[09:30:06    INFO] ----------------------------------------------------------------------------------------------------
[09:30:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:30:52    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[09:30:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[09:30:58    INFO]  - Will gen. input-parameter errors ...
[09:31:01    INFO]  - starting ANNZ::loadReaders() ... 
[09:31:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[09:36:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:36:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:36:02    INFO]  -----------------------------------------------------------------------------------------------------------
[09:36:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[09:36:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:36:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:36:57    INFO]  -----------------------------------------------------------------------------------------------------------
[09:36:57    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:36:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:36:59    INFO]  - will try to derive a bias correction ... 
[09:36:59    INFO]  - will validate that training produced an XML file for later ... 
[09:36:59    INFO]  - starting ANNZ::loadReaders() ... 
[09:37:02    INFO]  - will validate that the training was not a complete failure ... 
[09:37:02    INFO]  - training seems to have been successful! will move on ...
[09:37:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:37:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:37:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:37:08    INFO] ----------------------------------------------------------------------------------------------------
[09:37:08    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:37:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:37:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:37:08    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[09:37:08    INFO] ----------------------------------------------------------------------------------------------------
[09:37:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:37:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[09:37:15    INFO]  - Will gen. input-parameter errors ...
[09:37:17    INFO]  - starting ANNZ::loadReaders() ... 
[09:37:25    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[09:41:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:41:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:41:31    INFO]  -----------------------------------------------------------------------------------------------------------
[09:41:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[09:42:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:42:28    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:42:28    INFO]  -----------------------------------------------------------------------------------------------------------
[09:42:28    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:42:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:42:31    INFO]  - will validate that the bias-correction actually improved the result ...
[09:42:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:42:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[09:42:38    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_21/plots/
[09:42:52        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_21/plots output/SPEC_advanced3/regres/train/ANNZ_21/plots_biasCor_before
[09:42:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:42:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[09:42:58    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_21/plots/
[09:43:13        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_21/plots output/SPEC_advanced3/regres/train/ANNZ_21/plots_biasCor_after
[09:43:13    INFO]  - Got original [KS-test,N_poiss]: [0.0649935 , 102.94] , after the bias-correction: [0.0455252 , 89.0503] --> will KEEP the correction !

(09:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:43 INFO) 
[09:43:19    INFO]  -----------------------------------------------------
[09:43:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:43:19    INFO]  -----------------------------------------------------------------------------------------------------------
[09:43:20    INFO]  - starting ANNZ::Init()  ... 
[09:43:21    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_22/saveOpt.txt ...
[09:43:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:43:37    INFO] ----------------------------------------------------------------------------------------------------
[09:43:37    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=520:BoostType=AdaBoostR2:VarTransform=N,P
[09:43:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:43:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:43:37    INFO]      cuts (train):        ,
[09:43:37    INFO]      cuts (valid):       
[09:43:37    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[09:43:37    INFO] ----------------------------------------------------------------------------------------------------
[09:43:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:44:32    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[09:44:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[09:44:38    INFO]  - Will gen. input-parameter errors ...
[09:44:41    INFO]  - starting ANNZ::loadReaders() ... 
[09:45:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[09:58:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:58:56    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:58:56    INFO]  -----------------------------------------------------------------------------------------------------------
[09:58:56    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[10:02:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:02:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:02:23    INFO]  -----------------------------------------------------------------------------------------------------------
[10:02:23    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:02:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:02:26    INFO]  - will try to derive a bias correction ... 
[10:02:26    INFO]  - will validate that training produced an XML file for later ... 
[10:02:26    INFO]  - starting ANNZ::loadReaders() ... 
[10:02:32    INFO]  - will validate that the training was not a complete failure ... 
[10:02:32    INFO]  - training seems to have been successful! will move on ...
[10:02:32    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:02:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:02:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:02:39    INFO] ----------------------------------------------------------------------------------------------------
[10:02:39    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:02:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:02:39    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:02:39    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[10:02:39    INFO] ----------------------------------------------------------------------------------------------------
[10:02:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:02:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[10:02:48    INFO]  - Will gen. input-parameter errors ...
[10:02:51    INFO]  - starting ANNZ::loadReaders() ... 
[10:03:12    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[10:17:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:17:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:17:46    INFO]  -----------------------------------------------------------------------------------------------------------
[10:17:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[10:21:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:21:13    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:21:13    INFO]  -----------------------------------------------------------------------------------------------------------
[10:21:13    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:21:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:21:16    INFO]  - will validate that the bias-correction actually improved the result ...
[10:21:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:21:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[10:21:22    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_22/plots/
[10:21:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_22/plots output/SPEC_advanced3/regres/train/ANNZ_22/plots_biasCor_before
[10:21:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:21:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[10:21:41    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_22/plots/
[10:21:56        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_22/plots output/SPEC_advanced3/regres/train/ANNZ_22/plots_biasCor_after
[10:21:56    INFO]  - Got original [KS-test,N_poiss]: [0.097654 , 104.358] , after the bias-correction: [0.0398174 , 85.7176] --> will KEEP the correction !

(10:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:22 INFO) 
[10:22:03    INFO]  -----------------------------------------------------
[10:22:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:22:03    INFO]  -----------------------------------------------------------------------------------------------------------
[10:22:05    INFO]  - starting ANNZ::Init()  ... 
[10:22:06    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_23/saveOpt.txt ...
[10:22:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:22:26    INFO] ----------------------------------------------------------------------------------------------------
[10:22:26    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=500:BoostType=AdaBoost:VarTransform=N,P
[10:22:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:22:26    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[10:22:26    INFO]      cuts (train):        ,
[10:22:26    INFO]      cuts (valid):       
[10:22:26    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[10:22:26    INFO] ----------------------------------------------------------------------------------------------------
[10:22:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:22:57    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[10:23:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[10:23:00    INFO]  - Will gen. input-parameter errors ...
[10:23:02    INFO]  - starting ANNZ::loadReaders() ... 
[10:23:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[10:26:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:26:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:26:11    INFO]  -----------------------------------------------------------------------------------------------------------
[10:26:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[10:26:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:26:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:26:54    INFO]  -----------------------------------------------------------------------------------------------------------
[10:26:54    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:26:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:26:56    INFO]  - will try to derive a bias correction ... 
[10:26:56    INFO]  - will validate that training produced an XML file for later ... 
[10:26:56    INFO]  - starting ANNZ::loadReaders() ... 
[10:26:58    INFO]  - will validate that the training was not a complete failure ... 
[10:26:58    INFO]  - training seems to have been successful! will move on ...
[10:26:58    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:27:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:27:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:27:03    INFO] ----------------------------------------------------------------------------------------------------
[10:27:03    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:27:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:27:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:27:03    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[10:27:03    INFO] ----------------------------------------------------------------------------------------------------
[10:27:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:27:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[10:27:11    INFO]  - Will gen. input-parameter errors ...
[10:27:13    INFO]  - starting ANNZ::loadReaders() ... 
[10:27:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[10:29:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:29:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:29:36    INFO]  -----------------------------------------------------------------------------------------------------------
[10:29:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[10:30:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:30:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:30:15    INFO]  -----------------------------------------------------------------------------------------------------------
[10:30:15    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:30:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:30:17    INFO]  - will validate that the bias-correction actually improved the result ...
[10:30:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:30:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[10:30:24    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_23/plots/
[10:30:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_23/plots output/SPEC_advanced3/regres/train/ANNZ_23/plots_biasCor_before
[10:30:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:30:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[10:30:50    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_23/plots/
[10:31:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_23/plots output/SPEC_advanced3/regres/train/ANNZ_23/plots_biasCor_after
[10:31:06    INFO]  - Got original [KS-test,N_poiss]: [0.0623028 , 109.937] , after the bias-correction: [0.044551 , 91.5353] --> will KEEP the correction !

(10:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:31 INFO) 
[10:31:12    INFO]  -----------------------------------------------------
[10:31:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:31:12    INFO]  -----------------------------------------------------------------------------------------------------------
[10:31:14    INFO]  - starting ANNZ::Init()  ... 
[10:31:16    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_24/saveOpt.txt ...
[10:31:38    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:31:38    INFO] ----------------------------------------------------------------------------------------------------
[10:31:38    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N,P
[10:31:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:31:38    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[10:31:38    INFO]      cuts (train):        ,
[10:31:38    INFO]      cuts (valid):       
[10:31:38    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[10:31:38    INFO] ----------------------------------------------------------------------------------------------------
[10:31:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:32:07    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[10:32:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[10:32:11    INFO]  - Will gen. input-parameter errors ...
[10:32:13    INFO]  - starting ANNZ::loadReaders() ... 
[10:32:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[10:35:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:35:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:35:23    INFO]  -----------------------------------------------------------------------------------------------------------
[10:35:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[10:36:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:36:04    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:36:04    INFO]  -----------------------------------------------------------------------------------------------------------
[10:36:04    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:36:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:36:06    INFO]  - will try to derive a bias correction ... 
[10:36:06    INFO]  - will validate that training produced an XML file for later ... 
[10:36:06    INFO]  - starting ANNZ::loadReaders() ... 
[10:36:09    INFO]  - will validate that the training was not a complete failure ... 
[10:36:09    INFO]  - training seems to have been successful! will move on ...
[10:36:09    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:36:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:36:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:36:15    INFO] ----------------------------------------------------------------------------------------------------
[10:36:15    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:36:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:36:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:36:15    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[10:36:15    INFO] ----------------------------------------------------------------------------------------------------
[10:36:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:36:24    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[10:36:24    INFO]  - Will gen. input-parameter errors ...
[10:36:27    INFO]  - starting ANNZ::loadReaders() ... 
[10:36:38    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[10:40:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:40:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:40:01    INFO]  -----------------------------------------------------------------------------------------------------------
[10:40:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[10:40:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:40:51    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:40:51    INFO]  -----------------------------------------------------------------------------------------------------------
[10:40:51    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:40:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:40:53    INFO]  - will validate that the bias-correction actually improved the result ...
[10:40:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:40:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[10:41:01    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_24/plots/
[10:41:17        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_24/plots output/SPEC_advanced3/regres/train/ANNZ_24/plots_biasCor_before
[10:41:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:41:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[10:41:23    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_24/plots/
[10:41:39        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_24/plots output/SPEC_advanced3/regres/train/ANNZ_24/plots_biasCor_after
[10:41:39    INFO]  - Got original [KS-test,N_poiss]: [0.0658525 , 104.08] , after the bias-correction: [0.043632 , 91.1487] --> will KEEP the correction !

(10:41 INFO) [40;37;1m - 22/02/19 10:41:46 - finished running ANNZ ![0m
(11:14 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:14 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:14 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:14 INFO) [40;37;1m - 22/02/19 11:14:23 - starting ANNZ[0m
(11:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.044[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(11:14 INFO) 
[11:14:24    INFO]  -----------------------------------------------------
[11:14:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:14:24    INFO]  -----------------------------------------------------------------------------------------------------------
[11:14:25    INFO]  - starting ANNZ::Init()  ... 
[11:14:25    INFO]  - Will generate 1 PDFs ... 
[11:14:35    INFO] --------------------------------------------------------
[11:14:35    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[11:14:35    INFO]  - All REJECTED MLMs: 
[11:14:35    INFO] ----------------------------------------------------------------------------------------------------------------
[11:14:38    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/optim/saveOpt.txt ...
[11:15:35    INFO]  - starting ANNZ::Optim() ... 
[11:15:35    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[11:15:35    INFO]  - ANNZ_0 Now in nTrainValidNow = 0 , treeNamePostfix = _train , number of entries is bad ... 
[11:15:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:15:35    INFO]  - Will gen. input-parameter errors ...
[11:15:39    INFO]  - starting ANNZ::loadReaders() ... 
[11:15:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root

 - treeRegClsVar_0: varI (1)
       ANNZ_index = 4620             

 - treeRegClsVar_0: varF (108)
  band9_flux_error = 6.18177          band7_flux_error = 5.4349           band6_flux_error = 4.87544                 jmag_err = 0.556327         
  band5_flux_error = 4.77534              band18_flux = 5.21295          band12_flux_error = 7.28526          band3_flux_error = 6.86557          
      band36_flux = -12.6983         band0_flux_error = 6.32945              band39_flux = -4.22074             band10_flux = -10.4478         
      band35_flux = -4.62654                  i_auto = 27.1894              band14_flux = -4.16307             band37_flux = 1.58074          
  band16_flux_error = 6.50561              band34_flux = -4.1408              band33_flux = -6.99899             band31_flux = -9.51643         
      band30_flux = 7.27987              band28_flux = -8.89236             band27_flux = -9.67537                    kmag = 79.4328          
       band3_flux = -12.3328             band25_flux = -10.6312             band22_flux = -1.13838                      ra = 149.783          
  band2_flux_error = 6.8952               band24_flux = 3.01497          band21_flux_error = 9.32848                     rmag = 16.9044          
       band9_flux = 2.12724               band0_flux = -6.49084                pz_width = 0.0969603        band28_flux_error = 11.2731          
         paudm_id = 41836            band4_flux_error = 6.42794              band17_flux = 3.0837                i_auto_err = 0.500876         
  band31_flux_error = 12.1833                     jmag = 30.1995                 gmag_err = 0.123974         band34_flux_error = 11.7014          
             bmag = 6.42688          band32_flux_error = 13.0491               band5_flux = -4.42641              band7_flux = -0.538334        
  band13_flux_error = 7.56894          band14_flux_error = 10.4913          band33_flux_error = 11.9568              band12_flux = 0.971913         
  band30_flux_error = 9.22908              band13_flux = -9.4368              band29_flux = -5.0467                 umag_err = 0.0632893        
      band20_flux = -1.14159         band36_flux_error = 12.0426          band29_flux_error = 12.3162               band2_flux = -11.041          
  band10_flux_error = 11.203           band35_flux_error = 11.1952          band22_flux_error = 8.12902          band19_flux_error = 10.1822          
  band26_flux_error = 9.17143          band25_flux_error = 12.0548          band24_flux_error = 9.04245          band23_flux_error = 7.64292          
  band20_flux_error = 8.80465          band17_flux_error = 7.7082           band39_flux_error = 11.4878          band15_flux_error = 7.3249           
  band18_flux_error = 6.21256                     gmag = 6.72977                      dec = 2.09087                       qz = 22.8822          
       band4_flux = -15.2409             band15_flux = -1.91791             band26_flux = -2.53044             band32_flux = -17.4763         
         kmag_err = 1.46329                 bmag_err = 0.118394                    odds = 0.0957052        band38_flux_error = 13.1278          
               zb = 0.469            band37_flux_error = 11.4379                   ref_id = 41836                 band6_flux = 2.70732          
       band1_flux = -2.79122                   zspec = 0.4746                  rmag_err = 0.311408              ANNZ_KNN_w = 1                
             vmag = 10.9648          band1_flux_error = 7.67295            production_id = 866                  band16_flux = -0.576225        
  band11_flux_error = 7.12598              band23_flux = -6.0579          band27_flux_error = 10.5495                     conf = 1.1              
             umag = 3.43558               band8_flux = 0.403616             band11_flux = -0.884232               vmag_err = 0.20199          
      band19_flux = -1.76189             band21_flux = 3.169                band38_flux = 3.94537          band8_flux_error = 5.81063          
  

 - treeRegClsVar_0: varFM(97)
  (ANNZ_readerFormulae_band20_flux) band20_flux = -1.14159         (ANNZ_readerFormulae_band19_flux) band19_flux = -1.76189         (ANNZ_readerFormulae_band18_flux) band18_flux = 5.21295          (ANNZ_readerFormulae_band17_flux) band17_flux = 3.0837           
  (ANNZ_inVarErr_band32_flux_error) band32_flux_error = 13.0491          (ANNZ_inVarErr_band2_flux_error) band2_flux_error = 6.8952           (ANNZ_readerFormulae_band13_flux) band13_flux = -9.4368          (ANNZ_readerFormulae_band9_flux) band9_flux = 2.12724          
  (ANNZ_readerFormulae_band8_flux) band8_flux = 0.403616         (ANNZ_readerFormulae_band36_flux) band36_flux = -12.6983         (ANNZ_readerFormulae_band5_flux) band5_flux = -4.42641         (ANNZ_readerFormulae_band4_flux) band4_flux = -15.2409         
  (ANNZ_readerFormulae_kmag) kmag = 79.4328          (ANNZ_readerFormulae_jmag) jmag = 30.1995          (ANNZ_inVarErr_band20_flux_error) band20_flux_error = 8.80465          (ANNZ_inVarErr_band10_flux_error) band10_flux_error = 11.203           
  (ANNZ_readerFormulae_band7_flux) band7_flux = -0.538334        (ANNZ_readerFormulae_band30_flux) band30_flux = 7.27987          (ANNZ_inVarErr_band24_flux_error) band24_flux_error = 9.04245          (ANNZ_inVarErr_band8_flux_error) band8_flux_error = 5.81063          
  (ANNZ_readerFormulae_band11_flux) band11_flux = -0.884232        (ANNZ_inVarErr_band16_flux_error) band16_flux_error = 6.50561          (ANNZ_readerFormulae_vmag) vmag = 10.9648          (ANNZ_readerFormulae_bmag) bmag = 6.42688          
  (ANNZ_readerFormulae_band16_flux) band16_flux = -0.576225        (ANNZ_inVarErr_band30_flux_error) band30_flux_error = 9.22908          (ANNZ_inVarErr_vmag_err) vmag_err = 0.20199          (ANNZ_inVarErr_band13_flux_error) band13_flux_error = 7.56894          
  (ANNZ_inVarErr_band4_flux_error) band4_flux_error = 6.42794          (ANNZ_readerFormulae_band15_flux) band15_flux = -1.91791         (ANNZ_inVarErr_band14_flux_error) band14_flux_error = 10.4913          (ANNZ_readerFormulae_band10_flux) band10_flux = -10.4478         
  (ANNZ_inVarErr_band38_flux_error) band38_flux_error = 13.1278          (ANNZ_readerFormulae_band29_flux) band29_flux = -5.0467          (ANNZ_readerFormulae_band1_flux) band1_flux = -2.79122         (ANNZ_inVarErr_band27_flux_error) band27_flux_error = 10.5495          
  (ANNZ_inVarErr_band12_flux_error) band12_flux_error = 7.28526          (ANNZ_inVarErr_band1_flux_error) band1_flux_error = 7.67295          (ANNZ_readerFormulae_band35_flux) band35_flux = -4.62654         (ANNZ_readerFormulae_band37_flux) band37_flux = 1.58074          
  (ANNZ_readerFormulae_band32_flux) band32_flux = -17.4763         (ANNZ_readerFormulae_band24_flux) band24_flux = 3.01497          (ANNZ_readerFormulae_band26_flux) band26_flux = -2.53044         (ANNZ_readerFormulae_band38_flux) band38_flux = 3.94537          
  (ANNZ_inVarErr_band29_flux_error) band29_flux_error = 12.3162          (ANNZ_readerFormulae_band33_flux) band33_flux = -6.99899         (ANNZ_readerFormulae_band22_flux) band22_flux = -1.13838         (ANNZ_inVarErr_band3_flux_error) band3_flux_error = 6.86557          
  (ANNZ_readerFormulae_band27_flux) band27_flux = -9.67537         (ANNZ_inVarErr_band34_flux_error) band34_flux_error = 11.7014          (ANNZ_readerFormulae_band21_flux) band21_flux = 3.169            (ANNZ_readerFormulae_band25_flux) band25_flux = -10.6312         
  (ANNZ_readerFormulae_band3_flux) band3_flux = -12.3328         (ANNZ_readerFormulae_band34_flux) band34_flux = -4.1408          (ANNZ_readerFormulae_band0_flux) band0_flux = -6.49084         (ANNZ_inVarErr_band35_flux_error) band35_flux_error = 11.1952          
  (ANNZ_inVarErr_band21_flux_error) band21_flux_error = 9.32848          (ANNZ_readerFormulae_umag) umag = 3.43558          (ANNZ_inVarErr_band22_flux_error) band22_flux_error = 8.12902          (ANNZ_inVarErr_band31_flux_error) band31_flux_error = 12.1833          
  (ANNZ_inVarErr_band23_flux_error) band23_flux_error = 7.64292          (ANNZ_inVarErr_i_auto_err) i_auto_err = 0.500876         (ANNZ_readerFormulae_band2_flux) band2_flux = -11.041          (ANNZ_inVarErr_band9_flux_error) band9_flux_error = 6.18177          
  (ANNZ_inVarErr_band33_flux_error) band33_flux_error = 11.9568          (ANNZ_inVarErr_jmag_err) jmag_err = 0.556327         (ANNZ_inVarErr_band7_flux_error) band7_flux_error = 5.4349           (ANNZ_inVarErr_gmag_err) gmag_err = 0.123974         
  (ANNZ_inVarErr_band6_flux_error) band6_flux_error = 4.87544          (ANNZ_readerFormulae_band39_flux) band39_flux = -4.22074         (ANNZ_readerFormulae_i_auto) i_auto = 27.1894          (ANNZ_0_wgt) band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error = -6.5733          
  (ANNZ_inVarErr_band15_flux_error) band15_flux_error = 7.3249           (ANNZ_readerFormulae_band28_flux) band28_flux = -8.89236         (ANNZ_inVarErr_band39_flux_error) band39_flux_error = 11.4878          (ANNZ_inVarErr_band19_flux_error) band19_flux_error = 10.1822          
  (ANNZ_readerFormulae_band31_flux) band31_flux = -9.51643         (ANNZ_readerFormulae_rmag) rmag = 16.9044          (ANNZ_inVarErr_rmag_err) rmag_err = 0.311408         (ANNZ_inVarErr_kmag_err) kmag_err = 1.46329          
  (ANNZ_inVarErr_band17_flux_error) band17_flux_error = 7.7082           (ANNZ_inVarErr_band0_flux_error) band0_flux_error = 6.32945          (ANNZ_readerFormulae_band6_flux) band6_flux = 2.70732          (ANNZ_inVarErr_band5_flux_error) band5_flux_error = 4.77534          
  (ANNZ_inVarErr_band26_flux_error) band26_flux_error = 9.17143          (ANNZ_readerFormulae_band23_flux) band23_flux = -6.0579          (ANNZ_inVarErr_band28_flux_error) band28_flux_error = 11.2731          (ANNZ_readerFormulae_band12_flux) band12_flux = 0.971913         
  (ANNZ_inVarErr_band18_flux_error) band18_flux_error = 6.21256          (ANNZ_inVarErr_band11_flux_error) band11_flux_error = 7.12598          (ANNZ_readerFormulae_band14_flux) band14_flux = -4.16307         (ANNZ_inVarErr_band36_flux_error) band36_flux_error = 12.0426          
  (ANNZ_inVarErr_umag_err) umag_err = 0.0632893        (ANNZ_readerFormulae_gmag) gmag = 6.72977          (ANNZ_inVarErr_band37_flux_error) band37_flux_error = 11.4379          (ANNZ_inVarErr_band25_flux_error) band25_flux_error = 12.0548          
  (ANNZ_inVarErr_bmag_err) bmag_err = 0.118394         
[11:18:21   ERROR]  - ... ------------------------------------------------------------ 
[11:18:21   ERROR]  - MESSAGE - Weights can only be >= 0 ... Something is horribly wrong ?!? 
[11:18:21   ERROR]  - FROM    - FILE: ../src/ANNZ_loopRegCls.cpp , LINE: 704 , (Jan 22 2019 21:40:46) 
[11:18:21   ERROR]  - ..... ABORTING !!! 
[11:18:21   ERROR]  ------------------------------------------------------------ ... - 
(11:18 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(11:18 CRITICAL) [41;37;1mWill terminate !!!![0m
(16:25 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:25 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:25 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:25 INFO) [40;37;1m - 22/02/19 16:25:37 - starting ANNZ[0m
(16:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.044[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(16:25 INFO) 
[16:25:37    INFO]  -----------------------------------------------------
[16:25:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:25:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:25:39    INFO]  - starting ANNZ::Init()  ... 
[16:25:39    INFO]  - Will generate 1 PDFs ... 
[16:25:50    INFO] --------------------------------------------------------
[16:25:50    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[16:25:50    INFO]  - All REJECTED MLMs: 
[16:25:50    INFO] ----------------------------------------------------------------------------------------------------------------
[16:25:53    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/optim/saveOpt.txt ...
[16:27:11    INFO]  - starting ANNZ::Optim() ... 
[16:27:11    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[16:27:11    INFO]  - ANNZ_0 Now in nTrainValidNow = 0 , treeNamePostfix = _train , number of entries is bad ... 
[16:27:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[16:27:11    INFO]  - Will gen. input-parameter errors ...
[16:27:14    INFO]  - starting ANNZ::loadReaders() ... 
[16:27:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root

 - treeRegClsVar_0: varI (1)
       ANNZ_index = 4620             

 - treeRegClsVar_0: varF (108)
  band9_flux_error = 6.18177          band7_flux_error = 5.4349           band6_flux_error = 4.87544                 jmag_err = 0.556327         
  band5_flux_error = 4.77534              band18_flux = 5.21295          band12_flux_error = 7.28526          band3_flux_error = 6.86557          
      band36_flux = -12.6983         band0_flux_error = 6.32945              band39_flux = -4.22074             band10_flux = -10.4478         
      band35_flux = -4.62654                  i_auto = 27.1894              band14_flux = -4.16307             band37_flux = 1.58074          
  band16_flux_error = 6.50561              band34_flux = -4.1408              band33_flux = -6.99899             band31_flux = -9.51643         
      band30_flux = 7.27987              band28_flux = -8.89236             band27_flux = -9.67537                    kmag = 79.4328          
       band3_flux = -12.3328             band25_flux = -10.6312             band22_flux = -1.13838                      ra = 149.783          
  band2_flux_error = 6.8952               band24_flux = 3.01497          band21_flux_error = 9.32848                     rmag = 16.9044          
       band9_flux = 2.12724               band0_flux = -6.49084                pz_width = 0.0969603        band28_flux_error = 11.2731          
         paudm_id = 41836            band4_flux_error = 6.42794              band17_flux = 3.0837                i_auto_err = 0.500876         
  band31_flux_error = 12.1833                     jmag = 30.1995                 gmag_err = 0.123974         band34_flux_error = 11.7014          
             bmag = 6.42688          band32_flux_error = 13.0491               band5_flux = -4.42641              band7_flux = -0.538334        
  band13_flux_error = 7.56894          band14_flux_error = 10.4913          band33_flux_error = 11.9568              band12_flux = 0.971913         
  band30_flux_error = 9.22908              band13_flux = -9.4368              band29_flux = -5.0467                 umag_err = 0.0632893        
      band20_flux = -1.14159         band36_flux_error = 12.0426          band29_flux_error = 12.3162               band2_flux = -11.041          
  band10_flux_error = 11.203           band35_flux_error = 11.1952          band22_flux_error = 8.12902          band19_flux_error = 10.1822          
  band26_flux_error = 9.17143          band25_flux_error = 12.0548          band24_flux_error = 9.04245          band23_flux_error = 7.64292          
  band20_flux_error = 8.80465          band17_flux_error = 7.7082           band39_flux_error = 11.4878          band15_flux_error = 7.3249           
  band18_flux_error = 6.21256                     gmag = 6.72977                      dec = 2.09087                       qz = 22.8822          
       band4_flux = -15.2409             band15_flux = -1.91791             band26_flux = -2.53044             band32_flux = -17.4763         
         kmag_err = 1.46329                 bmag_err = 0.118394                    odds = 0.0957052        band38_flux_error = 13.1278          
               zb = 0.469            band37_flux_error = 11.4379                   ref_id = 41836                 band6_flux = 2.70732          
       band1_flux = -2.79122                   zspec = 0.4746                  rmag_err = 0.311408              ANNZ_KNN_w = 1                
             vmag = 10.9648          band1_flux_error = 7.67295            production_id = 866                  band16_flux = -0.576225        
  band11_flux_error = 7.12598              band23_flux = -6.0579          band27_flux_error = 10.5495                     conf = 1.1              
             umag = 3.43558               band8_flux = 0.403616             band11_flux = -0.884232               vmag_err = 0.20199          
      band19_flux = -1.76189             band21_flux = 3.169                band38_flux = 3.94537          band8_flux_error = 5.81063          
  

 - treeRegClsVar_0: varFM(97)
  (ANNZ_readerFormulae_band20_flux) band20_flux = -1.14159         (ANNZ_readerFormulae_band19_flux) band19_flux = -1.76189         (ANNZ_readerFormulae_band18_flux) band18_flux = 5.21295          (ANNZ_readerFormulae_band17_flux) band17_flux = 3.0837           
  (ANNZ_inVarErr_band32_flux_error) band32_flux_error = 13.0491          (ANNZ_inVarErr_band2_flux_error) band2_flux_error = 6.8952           (ANNZ_readerFormulae_band13_flux) band13_flux = -9.4368          (ANNZ_readerFormulae_band9_flux) band9_flux = 2.12724          
  (ANNZ_readerFormulae_band8_flux) band8_flux = 0.403616         (ANNZ_readerFormulae_band36_flux) band36_flux = -12.6983         (ANNZ_readerFormulae_band5_flux) band5_flux = -4.42641         (ANNZ_readerFormulae_band4_flux) band4_flux = -15.2409         
  (ANNZ_readerFormulae_kmag) kmag = 79.4328          (ANNZ_readerFormulae_jmag) jmag = 30.1995          (ANNZ_inVarErr_band20_flux_error) band20_flux_error = 8.80465          (ANNZ_inVarErr_band10_flux_error) band10_flux_error = 11.203           
  (ANNZ_readerFormulae_band7_flux) band7_flux = -0.538334        (ANNZ_readerFormulae_band30_flux) band30_flux = 7.27987          (ANNZ_inVarErr_band24_flux_error) band24_flux_error = 9.04245          (ANNZ_inVarErr_band8_flux_error) band8_flux_error = 5.81063          
  (ANNZ_readerFormulae_band11_flux) band11_flux = -0.884232        (ANNZ_inVarErr_band16_flux_error) band16_flux_error = 6.50561          (ANNZ_readerFormulae_vmag) vmag = 10.9648          (ANNZ_readerFormulae_bmag) bmag = 6.42688          
  (ANNZ_readerFormulae_band16_flux) band16_flux = -0.576225        (ANNZ_inVarErr_band30_flux_error) band30_flux_error = 9.22908          (ANNZ_inVarErr_vmag_err) vmag_err = 0.20199          (ANNZ_inVarErr_band13_flux_error) band13_flux_error = 7.56894          
  (ANNZ_inVarErr_band4_flux_error) band4_flux_error = 6.42794          (ANNZ_readerFormulae_band15_flux) band15_flux = -1.91791         (ANNZ_inVarErr_band14_flux_error) band14_flux_error = 10.4913          (ANNZ_readerFormulae_band10_flux) band10_flux = -10.4478         
  (ANNZ_inVarErr_band38_flux_error) band38_flux_error = 13.1278          (ANNZ_readerFormulae_band29_flux) band29_flux = -5.0467          (ANNZ_readerFormulae_band1_flux) band1_flux = -2.79122         (ANNZ_inVarErr_band27_flux_error) band27_flux_error = 10.5495          
  (ANNZ_inVarErr_band12_flux_error) band12_flux_error = 7.28526          (ANNZ_inVarErr_band1_flux_error) band1_flux_error = 7.67295          (ANNZ_readerFormulae_band35_flux) band35_flux = -4.62654         (ANNZ_readerFormulae_band37_flux) band37_flux = 1.58074          
  (ANNZ_readerFormulae_band32_flux) band32_flux = -17.4763         (ANNZ_readerFormulae_band24_flux) band24_flux = 3.01497          (ANNZ_readerFormulae_band26_flux) band26_flux = -2.53044         (ANNZ_readerFormulae_band38_flux) band38_flux = 3.94537          
  (ANNZ_inVarErr_band29_flux_error) band29_flux_error = 12.3162          (ANNZ_readerFormulae_band33_flux) band33_flux = -6.99899         (ANNZ_readerFormulae_band22_flux) band22_flux = -1.13838         (ANNZ_inVarErr_band3_flux_error) band3_flux_error = 6.86557          
  (ANNZ_readerFormulae_band27_flux) band27_flux = -9.67537         (ANNZ_inVarErr_band34_flux_error) band34_flux_error = 11.7014          (ANNZ_readerFormulae_band21_flux) band21_flux = 3.169            (ANNZ_readerFormulae_band25_flux) band25_flux = -10.6312         
  (ANNZ_readerFormulae_band3_flux) band3_flux = -12.3328         (ANNZ_readerFormulae_band34_flux) band34_flux = -4.1408          (ANNZ_readerFormulae_band0_flux) band0_flux = -6.49084         (ANNZ_inVarErr_band35_flux_error) band35_flux_error = 11.1952          
  (ANNZ_inVarErr_band21_flux_error) band21_flux_error = 9.32848          (ANNZ_readerFormulae_umag) umag = 3.43558          (ANNZ_inVarErr_band22_flux_error) band22_flux_error = 8.12902          (ANNZ_inVarErr_band31_flux_error) band31_flux_error = 12.1833          
  (ANNZ_inVarErr_band23_flux_error) band23_flux_error = 7.64292          (ANNZ_inVarErr_i_auto_err) i_auto_err = 0.500876         (ANNZ_readerFormulae_band2_flux) band2_flux = -11.041          (ANNZ_inVarErr_band9_flux_error) band9_flux_error = 6.18177          
  (ANNZ_inVarErr_band33_flux_error) band33_flux_error = 11.9568          (ANNZ_inVarErr_jmag_err) jmag_err = 0.556327         (ANNZ_inVarErr_band7_flux_error) band7_flux_error = 5.4349           (ANNZ_inVarErr_gmag_err) gmag_err = 0.123974         
  (ANNZ_inVarErr_band6_flux_error) band6_flux_error = 4.87544          (ANNZ_readerFormulae_band39_flux) band39_flux = -4.22074         (ANNZ_readerFormulae_i_auto) i_auto = 27.1894          (ANNZ_0_wgt) band25_flux/band25_flux_error+band26_flux/band26_flux_error+band27_flux/band27_flux_error+band28_flux/band28_flux_error+band29_flux/band29_flux_error+band30_flux/band30_flux_error+band31_flux/band31_flux_error+band32_flux/band32_flux_error+band33_flux/band33_flux_error+band34_flux/band34_flux_error+band35_flux/band35_flux_error+band36_flux/band36_flux_error+band37_flux/band37_flux_error+band38_flux/band38_flux_error = -6.5733          
  (ANNZ_inVarErr_band15_flux_error) band15_flux_error = 7.3249           (ANNZ_readerFormulae_band28_flux) band28_flux = -8.89236         (ANNZ_inVarErr_band39_flux_error) band39_flux_error = 11.4878          (ANNZ_inVarErr_band19_flux_error) band19_flux_error = 10.1822          
  (ANNZ_readerFormulae_band31_flux) band31_flux = -9.51643         (ANNZ_readerFormulae_rmag) rmag = 16.9044          (ANNZ_inVarErr_rmag_err) rmag_err = 0.311408         (ANNZ_inVarErr_kmag_err) kmag_err = 1.46329          
  (ANNZ_inVarErr_band17_flux_error) band17_flux_error = 7.7082           (ANNZ_inVarErr_band0_flux_error) band0_flux_error = 6.32945          (ANNZ_readerFormulae_band6_flux) band6_flux = 2.70732          (ANNZ_inVarErr_band5_flux_error) band5_flux_error = 4.77534          
  (ANNZ_inVarErr_band26_flux_error) band26_flux_error = 9.17143          (ANNZ_readerFormulae_band23_flux) band23_flux = -6.0579          (ANNZ_inVarErr_band28_flux_error) band28_flux_error = 11.2731          (ANNZ_readerFormulae_band12_flux) band12_flux = 0.971913         
  (ANNZ_inVarErr_band18_flux_error) band18_flux_error = 6.21256          (ANNZ_inVarErr_band11_flux_error) band11_flux_error = 7.12598          (ANNZ_readerFormulae_band14_flux) band14_flux = -4.16307         (ANNZ_inVarErr_band36_flux_error) band36_flux_error = 12.0426          
  (ANNZ_inVarErr_umag_err) umag_err = 0.0632893        (ANNZ_readerFormulae_gmag) gmag = 6.72977          (ANNZ_inVarErr_band37_flux_error) band37_flux_error = 11.4379          (ANNZ_inVarErr_band25_flux_error) band25_flux_error = 12.0548          
  (ANNZ_inVarErr_bmag_err) bmag_err = 0.118394         
[16:29:47   ERROR]  - ... ------------------------------------------------------------ 
[16:29:47   ERROR]  - MESSAGE - Weights can only be >= 0 ... Something is horribly wrong ?!? 
[16:29:47   ERROR]  - FROM    - FILE: ../src/ANNZ_loopRegCls.cpp , LINE: 704 , (Jan 22 2019 21:40:46) 
[16:29:47   ERROR]  - ..... ABORTING !!! 
[16:29:47   ERROR]  ------------------------------------------------------------ ... - 
(16:29 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(16:29 CRITICAL) [41;37;1mWill terminate !!!![0m
(20:38 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(20:38 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(20:38 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(20:38 INFO) [40;37;1m - 22/02/19 20:38:44 - starting ANNZ[0m
(20:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34maddOutputVars[0m[31m=[0m'[32mref_id;zb;pz_width;odds;qz;production_id;paudm_id;ra;dec;zspec;conf[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mmax_sigma68_PDF[0m[31m=[0m'[32m0.044[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(20:38 INFO) 
[20:38:44    INFO]  -----------------------------------------------------
[20:38:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:38:44    INFO]  -----------------------------------------------------------------------------------------------------------
[20:38:46    INFO]  - starting ANNZ::Init()  ... 
[20:38:46    INFO]  - Will generate 1 PDFs ... 
[20:38:55    INFO] --------------------------------------------------------
[20:38:55    INFO]  - All ACCEPTED MLMs: ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,
[20:38:55    INFO]  - All REJECTED MLMs: ANNZ_0,ANNZ_1,
[20:38:55    INFO] ----------------------------------------------------------------------------------------------------------------
[20:38:58    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/optim/saveOpt.txt ...
(20:39 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(20:39 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(20:39 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(20:39 INFO) [40;37;1m - 22/02/19 20:39:27 - starting ANNZ[0m
(20:39 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:39 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:39 INFO) 
[20:39:27    INFO]  -----------------------------------------------------
[20:39:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:39:27    INFO]  -----------------------------------------------------------------------------------------------------------
[20:39:29    INFO]  - starting ANNZ::Init()  ... 
[20:39:30    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_0/saveOpt.txt ...
[20:39:47    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:39:48    INFO] ----------------------------------------------------------------------------------------------------
[20:39:48    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=460:BoostType=AdaBoost:VarTransform=N,P
[20:39:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:39:48    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:39:48    INFO]      cuts (train):        ,
[20:39:48    INFO]      cuts (valid):       
[20:39:48    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:39:48    INFO] ----------------------------------------------------------------------------------------------------
[20:39:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:40:13    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[20:40:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[20:40:16    INFO]  - Will gen. input-parameter errors ...
[20:40:18    INFO]  - starting ANNZ::loadReaders() ... 
[20:40:24    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:43:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:43:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:43:02    INFO]  -----------------------------------------------------------------------------------------------------------
[20:43:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:43:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:43:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:43:43    INFO]  -----------------------------------------------------------------------------------------------------------
[20:43:43    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:43:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:43:44    INFO]  - will try to derive a bias correction ... 
[20:43:44    INFO]  - will validate that training produced an XML file for later ... 
[20:43:44    INFO]  - starting ANNZ::loadReaders() ... 
[20:43:46    INFO]  - will validate that the training was not a complete failure ... 
[20:43:46    INFO]  - training seems to have been successful! will move on ...
[20:43:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:43:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:43:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:43:52    INFO] ----------------------------------------------------------------------------------------------------
[20:43:52    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:43:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:43:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:43:52    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:43:52    INFO] ----------------------------------------------------------------------------------------------------
[20:43:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:43:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[20:43:57    INFO]  - Will gen. input-parameter errors ...
[20:43:59    INFO]  - starting ANNZ::loadReaders() ... 
[20:44:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:46:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:46:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:46:14    INFO]  -----------------------------------------------------------------------------------------------------------
[20:46:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:46:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:46:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:46:47    INFO]  -----------------------------------------------------------------------------------------------------------
[20:46:47    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:46:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:46:48    INFO]  - will validate that the bias-correction actually improved the result ...
[20:46:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:46:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[20:46:55    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_0/plots/
[20:47:09        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_0/plots output/SPEC_advanced3/regres/train/ANNZ_0/plots_biasCor_before
[20:47:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:47:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[20:47:15    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_0/plots/
[20:47:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_0/plots output/SPEC_advanced3/regres/train/ANNZ_0/plots_biasCor_after
[20:47:28    INFO]  - Got original [KS-test,N_poiss]: [0.0623028 , 109.884] , after the bias-correction: [0.0446737 , 91.3152] --> will KEEP the correction !

(20:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:47 INFO) 
[20:47:32    INFO]  -----------------------------------------------------
[20:47:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:47:32    INFO]  -----------------------------------------------------------------------------------------------------------
[20:47:33    INFO]  - starting ANNZ::Init()  ... 
[20:47:35    INFO]  - Saving run information in ./output/SPEC_advanced3/regres/train/ANNZ_1/saveOpt.txt ...
[20:47:55    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:47:55    INFO] ----------------------------------------------------------------------------------------------------
[20:47:55    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=520:BoostType=Bagging:VarTransform=N,P
[20:47:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:47:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:47:55    INFO]      cuts (train):        ,
[20:47:55    INFO]      cuts (valid):       
[20:47:55    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:47:55    INFO] ----------------------------------------------------------------------------------------------------
[20:47:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:48:35    INFO]  - Saving MLM information in ./output/SPEC_advanced3/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[20:48:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[20:48:41    INFO]  - Will gen. input-parameter errors ...
[20:48:44    INFO]  - starting ANNZ::loadReaders() ... 
[20:48:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:52:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:52:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:52:52    INFO]  -----------------------------------------------------------------------------------------------------------
[20:52:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[20:53:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:53:54    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:53:54    INFO]  -----------------------------------------------------------------------------------------------------------
[20:53:54    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:53:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:53:56    INFO]  - will try to derive a bias correction ... 
[20:53:56    INFO]  - will validate that training produced an XML file for later ... 
[20:53:56    INFO]  - starting ANNZ::loadReaders() ... 
[20:54:01    INFO]  - will validate that the training was not a complete failure ... 
[20:54:01    INFO]  - training seems to have been successful! will move on ...
[20:54:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:54:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:54:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:54:08    INFO] ----------------------------------------------------------------------------------------------------
[20:54:08    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:54:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:54:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:54:08    INFO]    - weights:            abs(band25_flux/band25_flux_error)+abs(band26_flux/band26_flux_error)+abs(band27_flux/band27_flux_error)+abs(band28_flux/band28_flux_error)+abs(band29_flux/band29_flux_error)+abs(band30_flux/band30_flux_error)+abs(band31_flux/band31_flux_error)+abs(band32_flux/band32_flux_error)+abs(band33_flux/band33_flux_error)+abs(band34_flux/band34_flux_error)+abs(band35_flux/band35_flux_error)+abs(band36_flux/band36_flux_error)+abs(band37_flux/band37_flux_error)+abs(band38_flux/band38_flux_error)
[20:54:08    INFO] ----------------------------------------------------------------------------------------------------
[20:54:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:54:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[20:54:18    INFO]  - Will gen. input-parameter errors ...
[20:54:21    INFO]  - starting ANNZ::loadReaders() ... 
[20:54:31    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_train*.root
[20:58:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:58:57    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:58:57    INFO]  -----------------------------------------------------------------------------------------------------------
[20:58:57    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced3/rootIn/ANNZ_tree_valid*.root
[21:00:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:00:10    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[21:00:10    INFO]  -----------------------------------------------------------------------------------------------------------
[21:00:10    INFO]  - Saving file ./output/SPEC_advanced3/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:00:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:00:12    INFO]  - will validate that the bias-correction actually improved the result ...
[21:00:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:00:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[21:00:19    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_1/plots/
[21:00:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_1/plots output/SPEC_advanced3/regres/train/ANNZ_1/plots_biasCor_before
[21:00:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:00:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[21:00:38    INFO]  - Writing to plotting directory output/SPEC_advanced3/regres/train/ANNZ_1/plots/
[21:00:51        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced3/regres/train/ANNZ_1/plots output/SPEC_advanced3/regres/train/ANNZ_1/plots_biasCor_after
[21:00:51    INFO]  - Got original [KS-test,N_poiss]: [0.0647919 , 104.58] , after the bias-correction: [0.0440416 , 92.505] --> will KEEP the correction !

(21:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:00 INFO) 
[21:00:57    INFO]  -----------------------------------------------------
[21:00:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:00:57    INFO]  -----------------------------------------------------------------------------------------------------------
[21:00:59    INFO]  - starting ANNZ::Init()  ... 
[21:00:59    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced3/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[21:00:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:00 INFO) 
[21:00:59    INFO]  -----------------------------------------------------
[21:00:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:00:59    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:01    INFO]  - starting ANNZ::Init()  ... 
[21:01:01    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced3/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[21:01:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:01    INFO]  -----------------------------------------------------
[21:01:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:01    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:03    INFO]  - starting ANNZ::Init()  ... 
[21:01:03    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced3/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[21:01:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:03    INFO]  -----------------------------------------------------
[21:01:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:03    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:04    INFO]  - starting ANNZ::Init()  ... 
[21:01:05    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced3/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[21:01:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:05    INFO]  -----------------------------------------------------
[21:01:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:05    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:06    INFO]  - starting ANNZ::Init()  ... 
[21:01:07    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced3/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[21:01:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:07    INFO]  -----------------------------------------------------
[21:01:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:07    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:08    INFO]  - starting ANNZ::Init()  ... 
[21:01:08    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced3/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[21:01:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=250:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:08    INFO]  -----------------------------------------------------
[21:01:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:08    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:10    INFO]  - starting ANNZ::Init()  ... 
[21:01:10    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced3/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[21:01:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:10    INFO]  -----------------------------------------------------
[21:01:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:10    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:12    INFO]  - starting ANNZ::Init()  ... 
[21:01:12    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced3/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[21:01:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:12    INFO]  -----------------------------------------------------
[21:01:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:12    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:13    INFO]  - starting ANNZ::Init()  ... 
[21:01:13    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced3/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[21:01:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:14    INFO]  -----------------------------------------------------
[21:01:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:14    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:15    INFO]  - starting ANNZ::Init()  ... 
[21:01:15    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced3/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[21:01:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=910:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:16    INFO]  -----------------------------------------------------
[21:01:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:16    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:17    INFO]  - starting ANNZ::Init()  ... 
[21:01:17    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced3/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[21:01:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:18    INFO]  -----------------------------------------------------
[21:01:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:18    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:19    INFO]  - starting ANNZ::Init()  ... 
[21:01:19    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced3/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[21:01:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:20    INFO]  -----------------------------------------------------
[21:01:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:20    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:21    INFO]  - starting ANNZ::Init()  ... 
[21:01:22    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced3/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[21:01:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:22    INFO]  -----------------------------------------------------
[21:01:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:22    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:23    INFO]  - starting ANNZ::Init()  ... 
[21:01:23    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced3/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[21:01:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:23    INFO]  -----------------------------------------------------
[21:01:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:25    INFO]  - starting ANNZ::Init()  ... 
[21:01:25    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced3/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[21:01:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:25    INFO]  -----------------------------------------------------
[21:01:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:26    INFO]  - starting ANNZ::Init()  ... 
[21:01:27    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced3/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[21:01:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:27    INFO]  -----------------------------------------------------
[21:01:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:27    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:28    INFO]  - starting ANNZ::Init()  ... 
[21:01:29    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced3/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[21:01:29    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:29    INFO]  -----------------------------------------------------
[21:01:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:29    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:30    INFO]  - starting ANNZ::Init()  ... 
[21:01:30    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced3/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[21:01:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:30    INFO]  -----------------------------------------------------
[21:01:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:30    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:32    INFO]  - starting ANNZ::Init()  ... 
[21:01:33    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced3/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[21:01:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:33    INFO]  -----------------------------------------------------
[21:01:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:33    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:34    INFO]  - starting ANNZ::Init()  ... 
[21:01:35    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced3/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[21:01:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:35    INFO]  -----------------------------------------------------
[21:01:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:35    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:36    INFO]  - starting ANNZ::Init()  ... 
[21:01:37    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced3/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[21:01:37    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:37    INFO]  -----------------------------------------------------
[21:01:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:37    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:38    INFO]  - starting ANNZ::Init()  ... 
[21:01:38    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced3/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[21:01:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_train[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band1_flux_error;band2_flux_error;band3_flux_error;band4_flux_error;band5_flux_error;band6_flux_error;band7_flux_error;band8_flux_error;band9_flux_error;band10_flux_error;band11_flux_error;band12_flux_error;band13_flux_error;band14_flux_error;band15_flux_error;band16_flux_error;band17_flux_error;band18_flux_error;band19_flux_error;band20_flux_error;band21_flux_error;band22_flux_error;band23_flux_error;band24_flux_error;band25_flux_error;band26_flux_error;band27_flux_error;band28_flux_error;band29_flux_error;band30_flux_error;band31_flux_error;band32_flux_error;band33_flux_error;band34_flux_error;band35_flux_error;band36_flux_error;band37_flux_error;band38_flux_error;band39_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_valid[0m[31m=[0m'[32mabs(band25_flux/band25_flux_error) + abs(band26_flux/band26_flux_error) + abs(band27_flux/band27_flux_error) + abs(band28_flux/band28_flux_error) + abs(band29_flux/band29_flux_error) + abs(band30_flux/band30_flux_error) + abs(band31_flux/band31_flux_error) + abs(band32_flux/band32_flux_error) + abs(band33_flux/band33_flux_error) + abs(band34_flux/band34_flux_error) + abs(band35_flux/band35_flux_error) + abs(band36_flux/band36_flux_error) + abs(band37_flux/band37_flux_error) + abs(band38_flux/band38_flux_error)[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced3[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band1_flux;band2_flux;band3_flux;band4_flux;band5_flux;band6_flux;band7_flux;band8_flux;band9_flux;band10_flux;band11_flux;band12_flux;band13_flux;band14_flux;band15_flux;band16_flux;band17_flux;band18_flux;band19_flux;band20_flux;band21_flux;band22_flux;band23_flux;band24_flux;band25_flux;band26_flux;band27_flux;band28_flux;band29_flux;band30_flux;band31_flux;band32_flux;band33_flux;band34_flux;band35_flux;band36_flux;band37_flux;band38_flux;band39_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mbiasCorMLMopt[0m[31m=[0m'[32mANNZ_MLM=BDT:VarTransform=N:NTrees=50:BoostType=AdaBoost[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:01 INFO) 
[21:01:38    INFO]  -----------------------------------------------------
[21:01:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:01:38    INFO]  -----------------------------------------------------------------------------------------------------------
[21:01:40    INFO]  - starting ANNZ::Init()  ... 
[21:01:40    INFO]  - found trained "ANNZ_24" (./output/SPEC_advanced3/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[21:01:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(21:01 INFO) [40;37;1m - 22/02/19 21:01:40 - finished running ANNZ ![0m
